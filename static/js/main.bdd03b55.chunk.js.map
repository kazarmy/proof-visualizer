{"version":3,"sources":["interfaces/enum.ts","store/hooks.ts","store/features/file/fileSlice.ts","store/features/proof/auxi.ts","store/features/theme/auxi.ts","store/features/proof/proofSlice.ts","store/features/theme/themeSlice.ts","store/features/externalCmd/externalCmd.ts","examples/proofs-examples.ts","components/VisualizerNavbar/VisualizerNavbar.tsx","components/VisualizerDialog/VisualizerDialog.tsx","components/VisualizerStage/Canvas/VisualizerNode.tsx","components/VisualizerStage/Canvas/VisualizerLine.tsx","components/VisualizerStage/Canvas/VisualizerMenu.tsx","components/VisualizerStage/Canvas/VisualizerCanvas.tsx","components/VisualizerTree/VisualizerTree.tsx","components/VisualizerLetDrawer/let.ts","components/VisualizerLetDrawer/LetRender.tsx","components/VisualizerStage/VisualizerDirectoryStyle/VisualizerDirectoryStyle.tsx","components/VisualizerStage/VisualizerStage.tsx","components/VisualizerLetDrawer/VisualizerLetDrawer.tsx","components/VisualizerTheoryLemma/VisualizerTheoryLemma.tsx","components/VisualizersDrawer/VisualizersDrawer.tsx","components/VisualizerTutorial/TutorialPopover.tsx","components/VisualizerTutorial/VisualizerTutorial.tsx","components/VisualizerSmtDrawer/VisualizerSmtDrawer.tsx","components/App/App.tsx","store/store.ts","ReactUtils/reportWebVitals.ts","index.tsx"],"names":["drawerHelpersKind","renderLetKind","ClusterKind","useAppDispatch","useDispatch","useAppSelector","useSelector","fileSlice","createSlice","name","initialState","value","filesCount","reducers","set","state","action","payload","actions","selectFileName","file","selectDot","split","pop","JSON","parse","dot","selectFileCount","removeEscapedCharacters","s","newS","i","length","descendants","proof","nodeId","children","concat","reduce","acc","childId","sliceNodesCluster","clusterMap","slicedClusters","currentNode","id","parentsClusters","parents","p","clusterType","keys","Object","target","Number","push","clusterID","forEach","c","child","extractTheoryLemmas","clusters","haveCluster","conclusion","filter","type","TL","map","hiddenNodes","n","rule","colorConverter","colorName","color","proofSlice","view","style","letMap","theoryLemmaMap","visualInfo","clustersInfos","smt","process","proofJSON","isJSON","indexOf","nodes","args","NaN","dependencies","NONE","comment","slice","lastIndexOf","replace","line","search","label","idx","thisType","numbers","substring","str","num","SAT","CNF","PP","IN","parseInt","trim","attributes","commentJSON","subProofQty","x","parent","isNaN","processDot","clustersColors","clustersMap","Array","fill","cluster","node","y","selected","size","hideNodes","toHideNodes","every","hiddenNodesArray","clusteredNodes","hiddenNode","hiddenID","some","_p","pastCluster","stringify","clusterParents","parentCluster","splice","findNodesClusters","piNodeId","foldAllDescendants","index","self","unhideNodes","pi","hiddens","setVisualInfo","selectNodes","len","unselectNodes","changeStyle","applyView","visualInfoSize","proofSize","applyColor","setSmt","selectProof","piNodeChildren","haveHiddenParent","piNodeParents","piNodeDependencies","depMap","dep","String","piId","depsId","groupPiNodeDependencies","piNode","proofNode","parentId","highHierarchyNodes","ac","childID","selectOriginalProof","selectView","selectStyle","selectLetMap","selectTheoryLemmas","selectVisualInfo","selectHiddenNodes","selectNodeClusters","selectSmt","themeSlice","toggle","selectTheme","theme","externalCmd","findData","nodeToFind","findOption","renderData","count","fileChanged","findNode","option","reRender","addRenderCount","blockRender","allowRenderNewFile","blockRenderNewFile","selectFindData","selectRenderData","examples","ex1","ex2","isNotMozz","userAgent","navigator","match","isNotMozzila","mapDispatchToProps","connect","ownProps","setDialogIsOpen","setDrawerIsOpen","addErrorToast","setInTutorial","setSmtDrawerIsOpen","inTutorial","fileName","darkTheme","windowSize","useState","width","height","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","command","setCommand","lastCommands","setLastCommands","commandId","setCommandId","matchableCmd","setMatchableCmd","matchableCmdIsOpen","setMatchableCmdIsOpen","dispatch","commandsMap","cmds","cmdArg","string","matches","matchAll","idList","insideBracket","insideMatches","rangeLim","numS","from","_","listStr","word","argMatch","argIsConclusion","regexString","regex","RegExp","test","err","allNodesIds","hiddenIds","findIndex","obj","find","commands","useRef","current","runCommands","exportJSON","downloadJSON","fName","link","document","createElement","download","href","encodeURIComponent","click","exportPNG","e","preventDefault","replaceAll","graph","getElementsByClassName","toDataURL","runExample","ex","isPseudoClick","key","menus","className","icon","text","onClick","onKeyDown","role","help","tabIndex","criticalWidth","Group","align","Alignment","LEFT","Heading","Divider","content","undefined","placement","modifiers","arrow","enabled","RIGHT","autoFocus","enforceFocus","list","cmd","renderMatchableCmd","isOpen","disabled","placeholder","onChange","findMatchableCmd","unshift","newId","rightElement","onFocusCapture","blur","autoComplete","marginLeft","stopPropagation","currentTarget","checked","readUploadedFileAsText","inputFile","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","VisualizerDialog","dialogIsOpen","inputIsFocused","setInputIsFocused","changeFileName","changeFile","useReducer","newFlag","focusFlag","flagCount","setFocusFlag","Classes","DIALOG_BODY","childNodes","focus","DIALOG_FOOTER_ACTIONS","closeDialog","dialogBody","outline","borderRadius","hasSelection","onInputChange","console","log","files","File","fileContents","message","onFocus","onBlur","succesButton","ext","intent","Intent","SUCCESS","onClose","usePortal","title","DIALOG_FOOTER","textColorFromBg","bgColor","sixDigitColor","charAt","join","Node","props","nHided","nDescendants","setNodeOnFocus","toggleNodeSelection","updateNodePosition","openDrawer","onDragEnd","createTree","tag","stroke","strokeWidth","this","fontSize","padding","depText","depSize","infos","idSize","setIdSize","descendantSize","setDescendantSize","font","calc","context","getContext","measureText","getTextWidth","toString","draggable","onDragMove","attrs","evt","button","shiftKey","menuNode","getElementById","top","clientY","left","clientX","display","points","depLineSize","radius","Line","Menu","unfold","foldSelectedNodes","changeNodeColor","currentColor","options","setColor","foldSelected","vertical","handleWheel","stage","getStage","oldScale","scaleX","pointerPosition","getPointerPosition","mousePointTo","newScale","deltaY","stageScale","stageX","stageY","Canvas","nodeOnFocus","setState","nodesSelected","showingNodes","LineProps","to","saveNodePosition","copyNodePosition","showingEdges","edgeKey","edge","componentDidUpdate","bind","canvasSize","newShowingNodes","newNodeProps","updateEdgesAndFuncs","prevProps","found","o","Boolean","includes","onWheel","scaleY","onContextMenu","current_state","proofChanged","visualInfoChanged","nodeFindData","nodeWidth","nodeHeight","g","dagre","graphlib","Graph","setGraph","rankdir","ranker","setDefaultEdgeLabel","setNode","setEdge","layout","xOffset","yOffset","v","Component","newVisualInfo","visualInfos","VisualizerTree","positionMap","setNodeInfo","forceUpdate","setNodes","setSelected","forEachNode","callback","backgroundColor","contents","onNodeClick","nodeData","_nodePath","toBeShow","originallySelected","isSelected","onNodeCollapse","isExpanded","onNodeExpand","hasCaret","castProofNodeToTreeNode","ELEVATION_0","Let","letText","letsList","indices","lines","biggerID","externalLets","expandValue","shouldUpdate","keyList","let","letName","k","indentLevel","expandPartialy","externalRef","letIdx","indentedText","printLines","lastLine","newIdx","shrinkValue","fitsTheWindow","repeat","indent","mode","someDoesntFit","newLines","thisLevel","thisLine","lastSpace","lastUsedSpace","lastOpenParenthesis","biggestSize","newBiggerID","thisSize","groupUp","original","numKey","LetRender","toRender","shouldExpand","shouldRevert","dispatchExpansion","widthRef","resizeMode","setResizeMode","newMap","letMapS","setLetMapS","letsRef","initializeLet","lets","currentLet","indice","newWidth","clientWidth","expandAll","EXPAND","revertLet","REVERT","maxHeight","overflow","margin","whiteSpace","arr","start","thisLet","expandLet","overflowWrap","renderLet","VisualizerDirectoryStyle","proofTree","ruleHelper","translate","nodeInfo","ALL","ruleHelperIsOpen","argsHelperIsOpen","concHelperIsOpen","dispatchHelper","revertAll","dispatchLetExpansion","setMap","renderID","increaseRenderID","_map","offsetHeight","float","clear","borderRight","RULE","ARGS","CONC","dependency","secondaryLabel","parentsId","rootNode","tree","VisualizerStage","fileID","setProofTree","drawerIsOpen","setTree","canEscapeKeyClose","canOutsideClickClose","hasBackdrop","position","Position","BOTTOM","DRAWER_BODY","VisualizerLetDrawer","shouldResize","setLetMap","VisualizerTheoryLemma","theoryLemmas","setTheoryLemmas","tl","currentTL","minWidth","VisualizersDrawer","nodeClusters","tabID","setTabID","resizeFlag","setResizeFlag","bt","handleClusterClick","theoryLemma","newTabId","newResizeFlag","selectedTabId","panel","TutorialPopover","setIsOpen","nextTutorial","W","page","setPage","changePage","setTimeout","handleEsc","tW","borderBottomColor","last","positions","j","rel","insertAnchors","divsIds","tutorials","VisualizerTutorial","setStage","setPosition","sizeRef","w","h","toBeWrapped","getClientRects","newY","newX","newTW","pointerEvents","VisualizerSmtDrawer","proofSmt","open","optionsIsOpen","setOptionsIsOpen","textRef","argsType","setArgsType","shouldClusterize","printAsDag","setDefaultOptions","customArgs","setCustomArgs","divColor","helpDiv","maxWidth","boxShadow","textAlign","language","onMount","transition","visibility","borderBottom","borderTop","marginBottom","hoverCloseDelay","hoverOpenDelay","App","toaster","setDrawerOpenState","smtDrawerIsOpen","refHandlers","ref","show","DANGER","TOP","store","configureStore","reducer","fileReducer","proofReducer","themeReducer","externalCmdReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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liB,YAAYD,KAAI,SAACuD,GAAD,MAAU,IAAMA,KAAlD,WAEJ,KACH4e,EAAS7gB,aAAaxD,OACnB,gCACI,8BACI,qDAEJ,wCAAQqkB,EAAS7gB,aAAatB,KAC1B,SAACsjB,GAAD,iBAAoBA,EAAWnd,KAA/B,cAAyCmd,EAAWld,OAAOpG,KAAI,SAACiG,GAAD,MAAS,IAAMA,KAA9E,gBAGR,iB,OClNxB,SAASgc,GAAW9hB,GAChB,OAAQA,EAAK/C,MAAM,KAAK,IACpB,IAAK,SACD,MAAO,8DACX,IAAK,SACD,OACI+C,EACA,uYAER,IAAK,QACD,OACIA,EACA,gnBAER,IAAK,OACD,OACIA,EACA,sZAER,IAAK,UACD,OACIA,EACA,0PAER,IAAK,WACD,OACIA,EACA,6MAER,IAAK,oBACD,OACIA,EACA,moBAER,IAAK,sBACD,OACIA,EACA,6iCAER,IAAK,qBACD,OACIA,EACA,gcAER,IAAK,0BACD,OACIA,EACA,qsBAER,IAAK,4BACD,OACIA,EACA,4LAER,IAAK,eACD,OACIA,EACA,wVAER,IAAK,iBACD,OACIA,EACA,6mBAER,IAAK,aACD,OACIA,EACA,qRAER,IAAK,mBACD,OACIA,EACA,uKAER,IAAK,oBACD,OACIA,EACA,oNAER,IAAK,0BACD,OACIA,EACA,oKAER,IAAK,oBACD,OACIA,EACA,+MAER,IAAK,gBACD,OACIA,EACA,oNAER,IAAK,gBACD,OACIA,EACA,gOAER,IAAK,aACD,OACIA,EACA,mOAER,IAAK,iBACD,OACIA,EACA,0VAER,IAAK,gBACD,OACIA,EACA,uNAER,IAAK,iBACD,OACIA,EACA,kOAER,IAAK,aACD,OACIA,EACA,kpCAER,IAAK,mBACD,OACIA,EACA,ueAER,IAAK,YACD,OACIA,EACA,iNAER,IAAK,aACD,OACIA,EACA,oNAER,IAAK,mBACD,OACIA,EACA,4oBAER,IAAK,yBACD,OACIA,EACA,itBAER,QACI,OAAOA,GAIZ,SAASmd,GAAwB/Z,GAAgC,IAAD,EAC7DzB,EAAQ,UAAAyB,EAAKtD,mBAAL,SAAkBnC,OAAlB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","file":"static/js/main.bdd03b55.chunk.js","sourcesContent":["export enum drawerHelpersKind {\r\n    RULE,\r\n    ARGS,\r\n    CONC,\r\n    ALL,\r\n}\r\n\r\nexport enum renderLetKind {\r\n    EXPAND,\r\n    REVERT,\r\n}\r\n\r\nexport enum ClusterKind {\r\n    NONE,\r\n    SAT,\r\n    CNF,\r\n    TL,\r\n    PP,\r\n    IN,\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { FileState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: FileState = {\r\n    name: 'ex.smt2',\r\n    value: 'digraph proof {\\n\\trankdir=\"BT\";\\n\\tnode [shape=record];\\n\\t0 [label=\"{SCOPE((not a), a)|(not (and (not a) a))}\", class = \" basic \", comment = \"{\\'subProofQty\\':1}\" ];\\n\\t1 [label=\"{CHAIN_RESOLUTION(true, a)|false}\", class = \" propositional \", comment = \"{\\'subProofQty\\':2}\" ];\\n\\t2 [label=\"{ASSUME(a)|a}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t3 [label=\"{ASSUME((not a))|(not a)}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t1->0;\\n\\t2->1;\\n\\t3->1;\\n}',\r\n    filesCount: 0,\r\n};\r\n\r\nexport const fileSlice = createSlice({\r\n    name: 'file',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        set: (state, action: PayloadAction<{ name: string; value: string }>) => {\r\n            state.name = action.payload.name;\r\n            if (state.value !== action.payload.value) {\r\n                state.value = action.payload.value;\r\n                state.filesCount++;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { set } = fileSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectFileName = (state: RootState): string => state.file.name;\r\n\r\nexport const selectFileExtension = (state: RootState): string => {\r\n    const ext = state.file.name.split('.').pop();\r\n    return ext ? ext : '';\r\n};\r\n\r\nexport const selectDot = (state: RootState): string =>\r\n    state.file.name.split('.').pop() === 'json' ? JSON.parse(state.file.value).dot : state.file.value;\r\n\r\nexport const selectFile = (state: RootState): string => state.file.value;\r\n\r\nexport const selectFileCount = (state: RootState): number => state.file.filesCount;\r\n\r\nexport default fileSlice.reducer;\r\n","import { ClusterKind } from '../../../interfaces/enum';\r\nimport { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\n\r\ninterface ClusterColorMap {\r\n    [type: number]: string;\r\n}\r\n\r\nfunction removeEscapedCharacters(s: string): string {\r\n    let newS = '';\r\n    for (let i = 0; i < s.length; i += 1) {\r\n        if (\r\n            !(\r\n                s[i] === '\\\\' &&\r\n                (s[i + 1] === '\"' ||\r\n                    s[i + 1] === '>' ||\r\n                    s[i + 1] === '<' ||\r\n                    s[i + 1] === '{' ||\r\n                    s[i + 1] === '}' ||\r\n                    s[i + 1] === '|')\r\n            )\r\n        ) {\r\n            newS += s[i];\r\n        }\r\n    }\r\n\r\n    return newS;\r\n}\r\n\r\nexport function processDot(dot: string): [NodeInterface[], ProofState['letMap'], ClusterColorMap] {\r\n    const nodes: NodeInterface[] = [\r\n        {\r\n            id: 0,\r\n            conclusion: '',\r\n            rule: '',\r\n            args: '',\r\n            children: [],\r\n            parents: [NaN],\r\n            descendants: 0,\r\n            dependencies: [],\r\n            clusterType: ClusterKind.NONE,\r\n        },\r\n    ];\r\n    let comment: string | null = dot.slice(dot.indexOf('comment='));\r\n    comment = comment\r\n        ? removeEscapedCharacters(\r\n              removeEscapedCharacters(comment.slice(comment.indexOf('=') + 2, comment.indexOf(';') - 1)),\r\n          )\r\n        : null;\r\n\r\n    const clustersInfos: ClusterColorMap = {};\r\n    const lines = dot\r\n        .slice(dot.indexOf('{') + 1, dot.lastIndexOf('}') - 2)\r\n        .replace(/(\\n|\\t)/gm, '')\r\n        .split(';');\r\n    lines.forEach((line) => {\r\n        if (line.search('subgraph') !== -1) {\r\n            // Get the label of this node subgraph\r\n            let label = '';\r\n            let idx = line.indexOf('label=\"') + 7;\r\n            while (line[idx] !== '\"') {\r\n                label += line[idx];\r\n                idx++;\r\n            }\r\n\r\n            // Get the label of this node subgraph\r\n            let color = '';\r\n            idx = line.indexOf('bgcolor=\"') + 9;\r\n            while (line[idx] !== '\"') {\r\n                color += line[idx];\r\n                idx++;\r\n            }\r\n\r\n            // Get the nodes ID's\r\n            const numbers = line\r\n                .substring(idx + 1, line.length - 1)\r\n                .split(/\\s/)\r\n                .filter((str) => str.length)\r\n                .map((num) => Number(num));\r\n\r\n            let thisType: ClusterKind;\r\n            switch (label) {\r\n                case 'SAT':\r\n                    thisType = ClusterKind.SAT;\r\n                    break;\r\n                case 'CNF':\r\n                    thisType = ClusterKind.CNF;\r\n                    break;\r\n                case 'TL':\r\n                    thisType = ClusterKind.TL;\r\n                    break;\r\n                case 'PP':\r\n                    thisType = ClusterKind.PP;\r\n                    break;\r\n                case 'IN':\r\n                    thisType = ClusterKind.IN;\r\n                    break;\r\n                default:\r\n                    thisType = ClusterKind.NONE;\r\n            }\r\n\r\n            // Assign the type for each node\r\n            numbers.forEach((num) => {\r\n                nodes[num].clusterType = thisType;\r\n            });\r\n            clustersInfos[thisType] = color;\r\n        } else if (line.search('label') !== -1) {\r\n            const id = parseInt(line.slice(0, line.indexOf('[')).trim());\r\n            const attributes = line.slice(line.indexOf('[') + 1, line.lastIndexOf(']')).trim();\r\n\r\n            let label = attributes.slice(attributes.search(/[^\\\\]\"/) + 3);\r\n            label = label.slice(0, label.search(/[^\\\\]\"/));\r\n            let [conclusion, rule, args] = ['', '', ''];\r\n            [conclusion, rule] = label.split(/\\|/);\r\n            [rule, args] = rule.indexOf(' :args ') != -1 ? rule.split(' :args ') : [rule, ''];\r\n\r\n            const comment: string = removeEscapedCharacters(line.slice(line.indexOf('comment'), line.lastIndexOf('\"')));\r\n            const commentJSON = JSON.parse(comment.slice(comment.indexOf('\"') + 1).replace(/'/g, '\"'));\r\n\r\n            if (!nodes[id]) {\r\n                nodes[id] = {\r\n                    id: id,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    children: [],\r\n                    parents: [NaN],\r\n                    descendants: 0,\r\n                    dependencies: [],\r\n                    clusterType: ClusterKind.NONE,\r\n                };\r\n            }\r\n            nodes[id].conclusion = removeEscapedCharacters(conclusion);\r\n            nodes[id].rule = removeEscapedCharacters(rule);\r\n            nodes[id].args = removeEscapedCharacters(args);\r\n            nodes[id].descendants = commentJSON.subProofQty;\r\n        } else if (line.search('->') !== -1) {\r\n            const [child, parent] = line.split('->').map((x) => parseInt(x.trim()));\r\n            nodes[parent].children.push(child);\r\n            // If there isn't a child node\r\n            if (!nodes[child]) {\r\n                nodes[child] = {\r\n                    id: child,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    children: [],\r\n                    parents: [],\r\n                    descendants: 0,\r\n                    dependencies: [],\r\n                    clusterType: ClusterKind.NONE,\r\n                };\r\n            }\r\n            // If there is and is an invalid parent\r\n            else if (isNaN(nodes[child].parents[0])) {\r\n                nodes[child].parents = [];\r\n            }\r\n            nodes[child].parents.push(parent);\r\n        }\r\n    });\r\n\r\n    return comment ? [nodes, JSON.parse(comment)['letMap'], clustersInfos] : [nodes, {}, clustersInfos];\r\n}\r\n\r\nexport const piNodeParents = (\r\n    proof: NodeInterface[],\r\n    hiddenNodesArray: number[],\r\n    dependencies: { [parentId: number]: number[] } = {},\r\n): number[] => {\r\n    const parents = hiddenNodesArray\r\n        // Concat all the parents\r\n        .reduce((acc: number[], hiddenNode) => {\r\n            let haveHiddenParent = false;\r\n\r\n            proof[hiddenNode].parents.forEach((parent) => {\r\n                // If this parent is a hidden node\r\n                if (hiddenNodesArray.indexOf(parent) !== -1) {\r\n                    haveHiddenParent = true;\r\n                } else {\r\n                    dependencies[parent]\r\n                        ? dependencies[parent].push(hiddenNode)\r\n                        : (dependencies[parent] = [hiddenNode]);\r\n                }\r\n            });\r\n\r\n            if (haveHiddenParent) return acc;\r\n            return acc.concat(proof[hiddenNode].parents);\r\n        }, [])\r\n        // Filter the duplicated elements\r\n        .filter((parent, i, self) => self.indexOf(parent) === i)\r\n        // Only the parents that aren't in he hidden nodes array remains\r\n        .filter((parent) => hiddenNodesArray.indexOf(parent) === -1);\r\n\r\n    // Removes the pi node parents from the dependencies\r\n    Object.keys(dependencies).forEach((parent) => {\r\n        const n = Number(parent);\r\n        if (parents.indexOf(n) !== -1) delete dependencies[n];\r\n    });\r\n\r\n    return parents;\r\n};\r\n\r\nexport const descendants = (proof: NodeInterface[], nodeId: number): number[] => {\r\n    return proof[nodeId].children.concat(\r\n        proof[nodeId].children.reduce((acc: number[], childId) => acc.concat(descendants(proof, childId)), []),\r\n    );\r\n};\r\n\r\nexport const piNodeChildren = (proof: NodeInterface[], hiddenNodesArray: number[]): number[] => {\r\n    const children = hiddenNodesArray\r\n        // Get all the childrens\r\n        .reduce((acc: number[], hiddenNode) => acc.concat(proof[hiddenNode].children), [])\r\n        // Exclude the childrens that are part of the hidden nodes\r\n        .filter((child) => hiddenNodesArray.indexOf(child) === -1);\r\n    return children;\r\n};\r\n\r\nexport const findNodesClusters = (proof: NodeInterface[], hiddenNodesArray: number[]): number[][] => {\r\n    const hiddenNodes = [...hiddenNodesArray];\r\n    const clusters: number[][] = [];\r\n    let clusteredNodes = 0;\r\n    const parents = hiddenNodes.map((hiddenNode) => proof[hiddenNode].parents);\r\n\r\n    // Cluster the nodes based on similiar parents\r\n    parents.forEach((parent, clusterID) => {\r\n        // If not all of the nodes where clustered and is a non empty cluster\r\n        if (clusteredNodes !== parents.length && parents[clusterID].length) {\r\n            clusters.push([]);\r\n            parents.forEach((p, hiddenID) => {\r\n                // If those nodes have some parent in commom and they weren't verified yet\r\n                if (parents[hiddenID].length && parent.some((_p) => p.indexOf(_p) !== -1)) {\r\n                    clusters[clusters.length - 1].push(hiddenNodes[hiddenID]);\r\n                    // Removes these parents from the array, making shure they will not get verified again (already clustered)\r\n                    parents[hiddenID] = [];\r\n                    // Increases the number o clustered nodes\r\n                    clusteredNodes++;\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    let pastCluster: number[][] = [];\r\n    // Cluster the nodes until there aren't changes being made\r\n    while (JSON.stringify(pastCluster) != JSON.stringify(clusters)) {\r\n        pastCluster = [...clusters];\r\n        clusters.forEach((cluster, clusterID) => {\r\n            const clusterParents = proof[cluster[0]].parents;\r\n\r\n            // For each cluster\r\n            clusters.forEach((parentCluster, id) => {\r\n                // If this parentCluster (cluster) is parent of the current cluster\r\n                if (parentCluster.some((hiddenID) => clusterParents.indexOf(hiddenID) !== -1)) {\r\n                    // Group the nodes couple in one single cluster (the parent cluster)\r\n                    clusters[id] = clusters[id].concat(clusters[clusterID]);\r\n                    clusters.splice(clusterID, 1);\r\n                    clusterID--;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Filter the nodes with length 1\r\n    return clusters.filter((cluster) => cluster.length > 1);\r\n};\r\n\r\nexport const groupPiNodeDependencies = (\r\n    proof: NodeInterface[],\r\n    hiddenNodesArray: number[],\r\n): NodeInterface['dependencies'] => {\r\n    const piNodeDependencies: NodeInterface['dependencies'] = [];\r\n    const depMap: { [piID: number]: number } = {};\r\n\r\n    // Copy all the hidden nodes dependencies to the new pi node\r\n    proof.forEach((node) => {\r\n        // Search for all the hidden nodes that have deps\r\n        if (hiddenNodesArray.indexOf(node.id) !== -1 && node.dependencies.length) {\r\n            // For each dependence in this node\r\n            node.dependencies.forEach((dep) => {\r\n                // This pi node dependence wasn't inserted yet\r\n                if (Object.keys(depMap).indexOf(String(dep.piId)) === -1) {\r\n                    piNodeDependencies.push(dep);\r\n                    depMap[dep.piId] = piNodeDependencies.length - 1;\r\n                }\r\n                // Concat the nodes inside the pi node already inserted\r\n                else {\r\n                    piNodeDependencies[depMap[dep.piId]].depsId = piNodeDependencies[depMap[dep.piId]].depsId.concat(\r\n                        dep.depsId,\r\n                    );\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return piNodeDependencies;\r\n};\r\n\r\nexport const sliceNodesCluster = (\r\n    proof: NodeInterface[],\r\n    clusterMap: number[],\r\n    nodeId = 0,\r\n    slicedClusters: number[][] = [],\r\n): number[][] => {\r\n    const currentNode = proof[nodeId];\r\n\r\n    // If the node id is valid and wasn't inserted yet\r\n    if (nodeId && clusterMap[currentNode.id] === -1) {\r\n        // Get all parents with the same type\r\n        const parentsClusters: { [parentID: number]: number } = {};\r\n        for (let i = 0; i < currentNode.parents.length; i++) {\r\n            const p = currentNode.parents[i];\r\n            if (proof[p].clusterType === currentNode.clusterType) {\r\n                parentsClusters[p] = clusterMap[p];\r\n                break;\r\n            }\r\n        }\r\n\r\n        const keys = Object.keys(parentsClusters);\r\n\r\n        // If the current node has the same type as (at least) one of it's parents\r\n        if (keys.length) {\r\n            // Put the current node in the cluster of the first parent with the same type\r\n            const target = parentsClusters[Number(keys[0])];\r\n            slicedClusters[target].push(currentNode.id);\r\n            clusterMap[currentNode.id] = target;\r\n        }\r\n        // Parent with different type\r\n        else {\r\n            const clusterID = slicedClusters.length;\r\n            clusterMap[currentNode.id] = clusterID;\r\n            slicedClusters.push([currentNode.id]);\r\n\r\n            // Add the brothers with the same type in the same cluster\r\n            proof[currentNode.parents[0]].children.forEach((c) => {\r\n                // If the brother node has the same type as the current one\r\n                if (proof[c].clusterType === currentNode.clusterType && c !== currentNode.id) {\r\n                    slicedClusters[clusterID].push(c);\r\n                    clusterMap[c] = clusterID;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    currentNode.children.forEach((child) => {\r\n        sliceNodesCluster(proof, clusterMap, child, slicedClusters);\r\n    });\r\n    return slicedClusters;\r\n};\r\n\r\nexport const extractTheoryLemmas = (\r\n    proof: NodeInterface[],\r\n    clusters: ProofState['clustersInfos'],\r\n    haveCluster: boolean,\r\n): ProofState['theoryLemmaMap'] => {\r\n    // If have clusters registered\r\n    if (haveCluster) {\r\n        return [proof[0].conclusion].concat(\r\n            clusters.filter((c) => c.type === ClusterKind.TL).map((c) => proof[c.hiddenNodes[0]].conclusion),\r\n        );\r\n    } else {\r\n        return proof.filter((n) => n.rule === 'SCOPE').map((n) => n.conclusion);\r\n    }\r\n};\r\n","export const colorConverter = (colorName: string): string => {\r\n    let color = '#fff';\r\n    switch (colorName) {\r\n        case 'red':\r\n            color = '#f72b34';\r\n            break;\r\n        case 'orange':\r\n            color = '#ff8334';\r\n            break;\r\n        case 'yellow':\r\n            color = '#ffc149';\r\n            break;\r\n        case 'green':\r\n            color = '#60aa51';\r\n            break;\r\n        case 'blue':\r\n            color = '#0097e4';\r\n            break;\r\n        case 'purple':\r\n            color = '#a73da5';\r\n            break;\r\n        case 'brown':\r\n            color = '#a95a49';\r\n            break;\r\n        case 'black':\r\n            color = '#464646';\r\n            break;\r\n\r\n        case 'white':\r\n            color = '#f0f0f0';\r\n            break;\r\n    }\r\n    return color;\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport {\r\n    processDot,\r\n    piNodeChildren,\r\n    piNodeParents,\r\n    descendants,\r\n    findNodesClusters,\r\n    groupPiNodeDependencies,\r\n    sliceNodesCluster,\r\n    extractTheoryLemmas,\r\n} from './auxi';\r\nimport { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\nimport { colorConverter } from '../theme/auxi';\r\nimport { ClusterKind } from '../../../interfaces/enum';\r\n\r\nconst initialState: ProofState = {\r\n    proof: [],\r\n    view: 'full',\r\n    style: 'graph',\r\n    hiddenNodes: [],\r\n    letMap: {},\r\n    theoryLemmaMap: [],\r\n    visualInfo: [],\r\n    clustersInfos: [],\r\n    smt: '',\r\n};\r\n\r\nexport const proofSlice = createSlice({\r\n    name: 'proof',\r\n    initialState,\r\n\r\n    reducers: {\r\n        process: (state, action: PayloadAction<string>) => {\r\n            // Reset the state\r\n            state.clustersInfos = [];\r\n\r\n            let proofJSON;\r\n            let dot = action.payload;\r\n            let isJSON = false;\r\n\r\n            // If the payload is a .json file\r\n            if (dot.indexOf('{\"dot\":\"') !== -1) {\r\n                proofJSON = JSON.parse(dot);\r\n                dot = proofJSON.dot;\r\n                isJSON = true;\r\n            }\r\n\r\n            const [proof, letMap, clustersColors] = processDot(dot);\r\n            state.proof = proof;\r\n            state.letMap = letMap;\r\n            state.view = 'full';\r\n\r\n            // If there are clusters\r\n            let clusters: number[][] = [];\r\n            if (Object.keys(clustersColors).length) {\r\n                state.view = 'clustered';\r\n\r\n                // Slice the clusters\r\n                const clustersMap: number[] = Array(state.proof.length).fill(-1);\r\n                clusters = sliceNodesCluster(state.proof, clustersMap);\r\n\r\n                // Maps the cluster infos\r\n                clusters.forEach((cluster) => {\r\n                    const type = state.proof[cluster[0]].clusterType;\r\n                    state.clustersInfos.push({\r\n                        hiddenNodes: cluster,\r\n                        type: type,\r\n                        color: colorConverter(clustersColors[type]),\r\n                    });\r\n                });\r\n\r\n                // Extract the theory lemmas\r\n                state.theoryLemmaMap = extractTheoryLemmas(state.proof, state.clustersInfos, true);\r\n            } else {\r\n                state.theoryLemmaMap = extractTheoryLemmas(state.proof, state.clustersInfos, false);\r\n            }\r\n\r\n            if (isJSON) {\r\n                state.view = proofJSON.view;\r\n                state.hiddenNodes = proofJSON.hiddenNodes;\r\n                state.visualInfo = proofJSON.visualInfo;\r\n            }\r\n            // Is .dot\r\n            else {\r\n                state.hiddenNodes = clusters.filter((c) => c.length > 1);\r\n\r\n                // Init the visual info\r\n                const visualInfo: ProofState['visualInfo'] = {};\r\n                state.proof.forEach((node) => {\r\n                    visualInfo[node.id] = {\r\n                        color: '#fff',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    };\r\n                });\r\n\r\n                let size = state.proof.length;\r\n                state.clustersInfos.forEach((cluster) => {\r\n                    visualInfo[cluster.hiddenNodes.length !== 1 ? size++ : cluster.hiddenNodes[0]] = {\r\n                        color: cluster.color,\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    };\r\n                });\r\n\r\n                state.visualInfo = visualInfo;\r\n            }\r\n        },\r\n        hideNodes: (state, action: PayloadAction<number[]>) => {\r\n            const toHideNodes = action.payload.filter(\r\n                (id) =>\r\n                    id > 0 &&\r\n                    id < state.proof.length &&\r\n                    state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1),\r\n            );\r\n\r\n            const clusters = findNodesClusters(state.proof, toHideNodes);\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat(clusters)\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi nodes\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            for (let i = 0; i < clusters.length; i++) {\r\n                state.visualInfo = {\r\n                    ...state.visualInfo,\r\n                    [piNodeId + i]: {\r\n                        color: '#555',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    },\r\n                };\r\n            }\r\n\r\n            // Unselect the selected nodes\r\n            toHideNodes.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        foldAllDescendants: (state, action: PayloadAction<number>) => {\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat([\r\n                    [action.payload, ...descendants(state.proof, action.payload)].filter(\r\n                        (id, index, self) =>\r\n                            id > 0 &&\r\n                            id < state.proof.length &&\r\n                            state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1) &&\r\n                            self.indexOf(id) === index,\r\n                    ),\r\n                ])\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi node and the root node\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            state.visualInfo = {\r\n                ...state.visualInfo,\r\n                [action.payload]: {\r\n                    ...state.visualInfo[action.payload],\r\n                    selected: false,\r\n                },\r\n                [piNodeId]: {\r\n                    color: '#555',\r\n                    x: 0,\r\n                    y: 0,\r\n                    selected: false,\r\n                },\r\n            };\r\n        },\r\n        unhideNodes: (state, action: PayloadAction<{ pi: number; hiddens: number[] }>) => {\r\n            const { pi, hiddens } = action.payload;\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .map((hiddenNodesArray) => hiddenNodesArray.filter((id) => hiddens.indexOf(id) === -1))\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Make sure the ids are realocated\r\n            const size = Object.keys(state.visualInfo).length;\r\n            for (let i = pi; i < size - 1; i++) {\r\n                state.visualInfo[i] = state.visualInfo[i + 1];\r\n            }\r\n            // Delete the last position\r\n            delete state.visualInfo[size - 1];\r\n\r\n            // Unselect the hidden nodes\r\n            hiddens.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        setVisualInfo: (state, action: PayloadAction<ProofState['visualInfo']>) => {\r\n            state.visualInfo = action.payload;\r\n        },\r\n        selectNodes: (state, action: PayloadAction<number[]>) => {\r\n            const len = Object.keys(state.visualInfo).length;\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < len) {\r\n                    state.visualInfo[id].selected = true;\r\n                }\r\n            });\r\n        },\r\n        unselectNodes: (state, action: PayloadAction<number[]>) => {\r\n            const len = Object.keys(state.visualInfo).length;\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < len) {\r\n                    state.visualInfo[id].selected = false;\r\n                }\r\n            });\r\n        },\r\n        changeStyle: (state, action: PayloadAction<ProofState['style']>) => {\r\n            switch (action.payload) {\r\n                case 'graph':\r\n                    state.style = 'graph';\r\n                    break;\r\n                case 'directory':\r\n                    state.style = 'directory';\r\n                    break;\r\n            }\r\n        },\r\n        applyView: (state, action: PayloadAction<ProofState['view']>) => {\r\n            const visualInfoSize = Object.keys(state.visualInfo).length;\r\n            const proofSize = state.proof.length;\r\n            // Delete all the pi nodes\r\n            for (let i = 0; i < visualInfoSize - proofSize; i++) {\r\n                delete state.visualInfo[proofSize + i];\r\n            }\r\n\r\n            switch (action.payload) {\r\n                // View without hidden Nodes\r\n                case 'full':\r\n                    if (state.hiddenNodes.length || state.view === 'colored-full') {\r\n                        state.proof.forEach((node) => {\r\n                            state.visualInfo[node.id] = {\r\n                                color: '#fff',\r\n                                x: 0,\r\n                                y: 0,\r\n                                selected: false,\r\n                            };\r\n                        });\r\n\r\n                        state.hiddenNodes = [];\r\n                    }\r\n                    state.view = 'full';\r\n                    break;\r\n                // Cluster all the nodes in your respective group\r\n                case 'clustered':\r\n                    // If there are clusters infos\r\n                    if (state.clustersInfos.length) {\r\n                        state.view = 'clustered';\r\n\r\n                        state.hiddenNodes = [];\r\n                        let size = Object.keys(state.visualInfo).length;\r\n\r\n                        state.clustersInfos.forEach((cluster) => {\r\n                            if (cluster.hiddenNodes.length !== 1) {\r\n                                state.visualInfo[size++] = {\r\n                                    color: cluster.color,\r\n                                    x: 0,\r\n                                    y: 0,\r\n                                    selected: false,\r\n                                };\r\n\r\n                                state.hiddenNodes.push(cluster.hiddenNodes);\r\n                            }\r\n                            // Cluster with 1 node\r\n                            else {\r\n                                state.visualInfo[cluster.hiddenNodes[0]] = {\r\n                                    color: cluster.color,\r\n                                    x: 0,\r\n                                    y: 0,\r\n                                    selected: false,\r\n                                };\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                // Apply full view but apply the clustrer color\r\n                case 'colored-full':\r\n                    state.view = 'colored-full';\r\n                    state.hiddenNodes = [];\r\n\r\n                    // If there are clusters infos\r\n                    if (state.clustersInfos.length) {\r\n                        state.clustersInfos.forEach((cluster) => {\r\n                            cluster.hiddenNodes.forEach((node) => {\r\n                                state.visualInfo[node] = {\r\n                                    color: cluster.color,\r\n                                    x: 0,\r\n                                    y: 0,\r\n                                    selected: false,\r\n                                };\r\n                            });\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n        applyColor: (state, action: PayloadAction<string>) => {\r\n            Object.keys(state.visualInfo).forEach((id) => {\r\n                if (state.visualInfo[Number(id)].selected) {\r\n                    state.visualInfo[Number(id)].color = action.payload;\r\n                    state.visualInfo[Number(id)].selected = false;\r\n                }\r\n            });\r\n        },\r\n        setSmt: (state, action: PayloadAction<string>) => {\r\n            state.smt = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    process,\r\n    hideNodes,\r\n    foldAllDescendants,\r\n    unhideNodes,\r\n    setVisualInfo,\r\n    selectNodes,\r\n    unselectNodes,\r\n    changeStyle,\r\n    applyView,\r\n    applyColor,\r\n    setSmt,\r\n} = proofSlice.actions;\r\n\r\nexport const selectProof = (state: RootState): NodeInterface[] => {\r\n    let proof = state.proof.proof;\r\n    const hiddenNodes = state.proof.hiddenNodes;\r\n\r\n    hiddenNodes.forEach((hiddenNodesArray) => {\r\n        const dependencies: { [parentId: number]: number[] } = {};\r\n        const children = piNodeChildren(proof, hiddenNodesArray);\r\n        const parents = piNodeParents(proof, hiddenNodesArray, dependencies);\r\n        const piNodeDependencies = groupPiNodeDependencies(proof, hiddenNodesArray);\r\n\r\n        const piNodeId = proof.length;\r\n        proof = proof.concat({\r\n            id: piNodeId,\r\n            conclusion: '∴',\r\n            rule: 'π',\r\n            args: '',\r\n            children: children,\r\n            parents: parents,\r\n            hiddenNodes: hiddenNodesArray.map((hiddenNode) => proof[hiddenNode]),\r\n            descendants: 1,\r\n            dependencies: piNodeDependencies,\r\n            clusterType: ClusterKind.NONE,\r\n        });\r\n\r\n        const piNode = proof[piNodeId];\r\n\r\n        children.forEach(\r\n            (childId) =>\r\n                (proof[childId] = {\r\n                    ...proof[childId],\r\n                    parents: proof[childId].parents\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n        parents.forEach(\r\n            (parentId) =>\r\n                (proof[parentId] = {\r\n                    ...proof[parentId],\r\n                    children: proof[parentId].children\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n\r\n        // Set the dependencies array of each parent that has deps and remove\r\n        //  the children that are dependencies\r\n        Object.keys(dependencies).forEach((parent) => {\r\n            const parentId = Number(parent);\r\n            proof[parentId] = {\r\n                ...proof[parentId],\r\n                children: proof[parentId].children.filter((c) => dependencies[parentId].indexOf(c) === -1),\r\n                dependencies: [...proof[parentId].dependencies, { piId: piNodeId, depsId: dependencies[parentId] }],\r\n            };\r\n        });\r\n\r\n        // Get the high hierarchy nodes in this pi node\r\n        const highHierarchyNodes = hiddenNodesArray?.filter((node) =>\r\n            proof[node].parents.every((parentId) => piNode.parents.indexOf(parentId) !== -1),\r\n        );\r\n\r\n        // Get the conclusion array\r\n        const conclusion = highHierarchyNodes.map((node) => ' ' + proof[node].conclusion);\r\n        piNode.conclusion = conclusion.length > 1 ? `[${conclusion} ]` : `${conclusion}`;\r\n\r\n        // Get the rule array\r\n        const rule = highHierarchyNodes.map((node) => ' ' + proof[node].rule);\r\n        piNode.rule = rule.length > 1 ? `[${rule} ]` : `${rule} `;\r\n\r\n        // Set the descendants number\r\n        piNode.descendants = piNode.children.reduce(\r\n            (ac: number, childID) => ((ac += proof[childID].descendants), ac),\r\n            1,\r\n        );\r\n    });\r\n\r\n    proof = proof.filter((proofNode) =>\r\n        hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(proofNode.id) === -1),\r\n    );\r\n\r\n    return proof;\r\n};\r\n\r\nexport const selectOriginalProof = (state: RootState): NodeInterface[] => {\r\n    return state.proof.proof;\r\n};\r\n\r\nexport const selectView = (state: RootState): ProofState['view'] => {\r\n    return state.proof.view;\r\n};\r\n\r\nexport const selectStyle = (state: RootState): 'graph' | 'directory' => {\r\n    return state.proof.style;\r\n};\r\n\r\nexport const selectLetMap = (state: RootState): { [Key: string]: string } => {\r\n    return state.proof.letMap;\r\n};\r\n\r\nexport const selectTheoryLemmas = (state: RootState): ProofState['theoryLemmaMap'] => {\r\n    return state.proof.theoryLemmaMap;\r\n};\r\n\r\nexport const selectVisualInfo = (state: RootState): ProofState['visualInfo'] => {\r\n    if (state.proof.proof.length) return state.proof.visualInfo;\r\n    // If there is no proof node\r\n    return { 0: { color: '#555', x: 0, y: 0, selected: false } };\r\n};\r\n\r\nexport const selectHiddenNodes = (state: RootState): number[][] => {\r\n    return state.proof.hiddenNodes;\r\n};\r\n\r\nexport const selectNodeClusters = (state: RootState): ProofState['clustersInfos'] => {\r\n    return state.proof.clustersInfos;\r\n};\r\n\r\nexport const selectSmt = (state: RootState): ProofState['smt'] => {\r\n    return state.proof.smt;\r\n};\r\n\r\nexport default proofSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ThemeState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ThemeState = {\r\n    value: true,\r\n};\r\n\r\nexport const themeSlice = createSlice({\r\n    name: 'theme',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        toggle: (state) => {\r\n            state.value = !state.value;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { toggle } = themeSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice theme. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectTheme = (state: RootState): boolean => state.theme.value;\r\n\r\nexport default themeSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ExternalCmdState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ExternalCmdState = {\r\n    findData: {\r\n        nodeToFind: -1,\r\n        findOption: false,\r\n    },\r\n    renderData: {\r\n        count: 0,\r\n        fileChanged: false,\r\n    },\r\n};\r\n\r\nexport const externalCmd = createSlice({\r\n    name: 'externalCmd',\r\n    initialState,\r\n    reducers: {\r\n        findNode: (state, action: PayloadAction<{ nodeId: number; option: boolean }>) => {\r\n            state.findData = { nodeToFind: action.payload.nodeId, findOption: action.payload.option };\r\n        },\r\n        reRender: (state) => {\r\n            state.renderData.count = 0;\r\n        },\r\n        addRenderCount: (state) => {\r\n            state.renderData.count++;\r\n        },\r\n        blockRender: (state) => {\r\n            state.renderData.count = 2;\r\n        },\r\n        allowRenderNewFile: (state) => {\r\n            state.renderData.fileChanged = true;\r\n        },\r\n        blockRenderNewFile: (state) => {\r\n            state.renderData.fileChanged = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { findNode, reRender, addRenderCount, blockRender, allowRenderNewFile, blockRenderNewFile } =\r\n    externalCmd.actions;\r\n\r\nexport const selectFindData = (state: RootState): { nodeToFind: number; findOption: boolean } =>\r\n    state.externalCmd.findData;\r\n\r\nexport const selectRenderData = (state: RootState): { count: number; fileChanged: boolean } =>\r\n    state.externalCmd.renderData;\r\n\r\nexport default externalCmd.reducer;\r\n","const examples: { [ex: string]: { dot: string; smt: string } } = {\r\n    ex1: {\r\n        dot: 'unsat\\r\\ndigraph proof {\\r\\n\\trankdir=\"BT\";\\r\\n\\tnode [shape=record];\\r\\n\\tcomment=\"{\\\\\"letMap\\\\\" : {\\\\\"let1\\\\\" : \\\\\"(f b)\\\\\", \\\\\"let2\\\\\" : \\\\\"(= (f a) let1)\\\\\", \\\\\"let3\\\\\" : \\\\\"(not let2)\\\\\", \\\\\"let4\\\\\" : \\\\\"(or p let3)\\\\\", \\\\\"let5\\\\\" : \\\\\"(not p)\\\\\", \\\\\"let6\\\\\" : \\\\\"(= a b)\\\\\", \\\\\"let7\\\\\" : \\\\\"(= let1 let1)\\\\\", \\\\\"let8\\\\\" : \\\\\"(not let7)\\\\\", \\\\\"let9\\\\\" : \\\\\"(not true)\\\\\", \\\\\"let10\\\\\" : \\\\\"(= p false)\\\\\"}}\";\\r\\n\\t0 [ label = \"{(not (and let6 let5 let4))|SCOPE :args [ let6, let5, let4 ]}\", comment = \"{\\\\\"subProofQty\\\\\":21}\" ];\\r\\n\\t1 [ label = \"{false|EQ_RESOLVE}\", comment = \"{\\\\\"subProofQty\\\\\":20}\" ];\\r\\n\\t2 [ label = \"{let3|CHAIN_RESOLUTION :args [ true, p ]}\", comment = \"{\\\\\"subProofQty\\\\\":3}\" ];\\r\\n\\t3 [ label = \"{let4|ASSUME}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t3 -> 2;\\r\\n\\t4 [ label = \"{let5|ASSUME}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t4 -> 2;\\r\\n\\t2 -> 1;\\r\\n\\t5 [ label = \"{(= let3 false)|TRANS}\", comment = \"{\\\\\"subProofQty\\\\\":16}\" ];\\r\\n\\t6 [ label = \"{(= let3 let8)|CONG :args [ not ]}\", comment = \"{\\\\\"subProofQty\\\\\":11}\" ];\\r\\n\\t7 [ label = \"{(= let2 let7)|CONG :args [ = ]}\", comment = \"{\\\\\"subProofQty\\\\\":10}\" ];\\r\\n\\t8 [ label = \"{let2|CONG :args [ f ]}\", comment = \"{\\\\\"subProofQty\\\\\":8}\" ];\\r\\n\\t9 [ label = \"{let6|AND_ELIM :args [ 1 ]}\", comment = \"{\\\\\"subProofQty\\\\\":7}\" ];\\r\\n\\t10 [ label = \"{(and let10 let6)|AND_INTRO}\", comment = \"{\\\\\"subProofQty\\\\\":6}\" ];\\r\\n\\t11 [ label = \"{let10|EQ_RESOLVE}\", comment = \"{\\\\\"subProofQty\\\\\":4}\" ];\\r\\n\\t4 -> 11;\\r\\n\\t12 [ label = \"{(= let5 let10)|SYMM}\", comment = \"{\\\\\"subProofQty\\\\\":2}\" ];\\r\\n\\t13 [ label = \"{(= let10 let5)|THEORY_REWRITE :args [ BOOL ]}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t13 -> 12;\\r\\n\\t12 -> 11;\\r\\n\\t11 -> 10;\\r\\n\\t14 [ label = \"{let6|ASSUME}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t14 -> 10;\\r\\n\\t10 -> 9;\\r\\n\\t9 -> 8;\\r\\n\\t8 -> 7;\\r\\n\\t15 [ label = \"{let7|REFL}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t15 -> 7;\\r\\n\\t7 -> 6;\\r\\n\\t6 -> 5;\\r\\n\\t16 [ label = \"{(= let8 false)|TRANS}\", comment = \"{\\\\\"subProofQty\\\\\":4}\" ];\\r\\n\\t17 [ label = \"{(= let8 let9)|CONG :args [ not ]}\", comment = \"{\\\\\"subProofQty\\\\\":2}\" ];\\r\\n\\t18 [ label = \"{(= let7 true)|THEORY_REWRITE :args [ UF ]}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t18 -> 17;\\r\\n\\t17 -> 16;\\r\\n\\t19 [ label = \"{(= let9 false)|THEORY_REWRITE :args [ BOOL ]}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t19 -> 16;\\r\\n\\t16 -> 5;\\r\\n\\t5 -> 1;\\r\\n\\t1 -> 0;\\r\\n\\r\\n}\\r\\n',\r\n        smt: `(set-logic QF_UF)\\n(set-info :category \"crafted\")\\n(set-info :status unsat)\\n(declare-sort U 0)\\n(declare-fun a () U)\\n(declare-fun b () U)\\n(declare-fun f (U) U)\\n(declare-fun p () Bool)\\n(assert (= a b))\\n(assert (not p))\\n(assert (or p (not (= (f a) (f b)))))\\n(check-sat)\\n(exit)`,\r\n    },\r\n    ex2: {\r\n        dot: 'unsat\\r\\ndigraph proof {\\r\\n\\trankdir=\"BT\";\\r\\n\\tnode [shape=record];\\r\\n\\tcomment=\"{\\\\\"letMap\\\\\" : {\\\\\"let1\\\\\" : \\\\\"(= (f a) (f b))\\\\\", \\\\\"let2\\\\\" : \\\\\"(not let1)\\\\\", \\\\\"let3\\\\\" : \\\\\"(or (not p3) let2)\\\\\", \\\\\"let4\\\\\" : \\\\\"(and p2 p3)\\\\\", \\\\\"let5\\\\\" : \\\\\"(or (not p1) let4)\\\\\", \\\\\"let6\\\\\" : \\\\\"(and p1 true)\\\\\", \\\\\"let7\\\\\" : \\\\\"(= a b)\\\\\", \\\\\"let8\\\\\" : \\\\\"(not let4)\\\\\", \\\\\"let9\\\\\" : \\\\\"(not let7)\\\\\"}}\";\\r\\n\\t0 [ label = \"{(not (and let7 let6 let5 let3))|SCOPE :args [ let7, let6, let5, let3 ]}\", comment = \"{\\\\\"subProofQty\\\\\":20}\" ];\\r\\n\\t1 [ label = \"{false|CHAIN_RESOLUTION :args [ true, let1, false, let7 ]}\", comment = \"{\\\\\"subProofQty\\\\\":19}\" ];\\r\\n\\t2 [ label = \"{(or let1 let9)|REORDERING}\", comment = \"{\\\\\"subProofQty\\\\\":7}\" ];\\r\\n\\t3 [ label = \"{(or let9 let1)|IMPLIES_ELIM}\", comment = \"{\\\\\"subProofQty\\\\\":6}\" ];\\r\\n\\t4 [ label = \"{(=\\\\> let7 let1)|SCOPE :args [ let7 ]}\", comment = \"{\\\\\"subProofQty\\\\\":5}\" ];\\r\\n\\t5 [ label = \"{let1|CONG :args [ f ]}\", comment = \"{\\\\\"subProofQty\\\\\":4}\" ];\\r\\n\\t6 [ label = \"{let7|SYMM}\", comment = \"{\\\\\"subProofQty\\\\\":3}\" ];\\r\\n\\t7 [ label = \"{(= b a)|SYMM}\", comment = \"{\\\\\"subProofQty\\\\\":2}\" ];\\r\\n\\t8 [ label = \"{let7|ASSUME}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t8 -> 7;\\r\\n\\t7 -> 6;\\r\\n\\t6 -> 5;\\r\\n\\t5 -> 4;\\r\\n\\t4 -> 3;\\r\\n\\t3 -> 2;\\r\\n\\t2 -> 1;\\r\\n\\t9 [ label = \"{let2|CHAIN_RESOLUTION :args [ false, p3 ]}\", comment = \"{\\\\\"subProofQty\\\\\":10}\" ];\\r\\n\\t10 [ label = \"{let3|ASSUME}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t10 -> 9;\\r\\n\\t11 [ label = \"{p3|CHAIN_RESOLUTION :args [ false, let4 ]}\", comment = \"{\\\\\"subProofQty\\\\\":8}\" ];\\r\\n\\t12 [ label = \"{(or p3 let8)|REORDERING}\", comment = \"{\\\\\"subProofQty\\\\\":2}\" ];\\r\\n\\t13 [ label = \"{(or let8 p3)|CNF_AND_POS :args [ let4, 1 ]}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t13 -> 12;\\r\\n\\t12 -> 11;\\r\\n\\t14 [ label = \"{let4|CHAIN_RESOLUTION :args [ false, p1 ]}\", comment = \"{\\\\\"subProofQty\\\\\":5}\" ];\\r\\n\\t15 [ label = \"{let5|ASSUME}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t15 -> 14;\\r\\n\\t16 [ label = \"{p1|EQ_RESOLVE}\", comment = \"{\\\\\"subProofQty\\\\\":3}\" ];\\r\\n\\t17 [ label = \"{let6|ASSUME}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t17 -> 16;\\r\\n\\t18 [ label = \"{(= let6 p1)|THEORY_REWRITE :args [ BOOL ]}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t18 -> 16;\\r\\n\\t16 -> 14;\\r\\n\\t14 -> 11;\\r\\n\\t11 -> 9;\\r\\n\\t9 -> 1;\\r\\n\\t19 [ label = \"{let7|ASSUME}\", comment = \"{\\\\\"subProofQty\\\\\":1}\" ];\\r\\n\\t19 -> 1;\\r\\n\\t1 -> 0;\\r\\n\\r\\n\\tsubgraph cluster_SAT {\\r\\n\\t\\tlabel=\"SAT\"\\r\\n\\t\\tbgcolor=\"purple\"\\r\\n\\t\\t1 2 9 11 12 14 \\r\\n\\t};\\r\\n\\tsubgraph cluster_CNF {\\r\\n\\t\\tlabel=\"CNF\"\\r\\n\\t\\tbgcolor=\"yellow\"\\r\\n\\t\\t3 13 \\r\\n\\t};\\r\\n\\tsubgraph cluster_TL {\\r\\n\\t\\tlabel=\"TL\"\\r\\n\\t\\tbgcolor=\"green\"\\r\\n\\t\\t4 5 6 7 8 \\r\\n\\t};\\r\\n\\tsubgraph cluster_PP {\\r\\n\\t\\tlabel=\"PP\"\\r\\n\\t\\tbgcolor=\"brown\"\\r\\n\\t\\t16 18 \\r\\n\\t};\\r\\n\\tsubgraph cluster_IN {\\r\\n\\t\\tlabel=\"IN\"\\r\\n\\t\\tbgcolor=\"blue\"\\r\\n\\t\\t10 15 17 19 \\r\\n\\t};\\r\\n}\\r\\n',\r\n        smt: `(set-logic QF_UF)\\n\\n(declare-sort U 0)\\n\\n(declare-const p1 Bool)\\n(declare-const p2 Bool)\\n(declare-const p3 Bool)\\n\\n(declare-const a U)\\n(declare-const b U)\\n(declare-fun f (U) U)\\n\\n(assert (= a b))\\n(assert (and p1 true))\\n(assert (or (not p1) (and p2 p3)))\\n(assert (or (not p3) (not (= (f a) (f b)))))\\n\\n(check-sat)`,\r\n    },\r\n};\r\n\r\nexport default examples;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\nimport { selectDot, selectFileName, set } from '../../store/features/file/fileSlice';\r\nimport {\r\n    applyView,\r\n    changeStyle,\r\n    selectNodes,\r\n    applyColor,\r\n    hideNodes,\r\n    foldAllDescendants,\r\n    unhideNodes,\r\n    selectVisualInfo,\r\n    selectProof,\r\n    selectHiddenNodes,\r\n    selectView,\r\n    unselectNodes,\r\n    process,\r\n    setSmt,\r\n} from '../../store/features/proof/proofSlice';\r\nimport { ReduxState, NavbarPropsAndRedux, NavbarProps } from '../../interfaces/interfaces';\r\n\r\nimport { Alignment, Button, Icon, InputGroup, Navbar, Switch, Menu, MenuItem } from '@blueprintjs/core';\r\nimport { Popover2 } from '@blueprintjs/popover2';\r\nimport { selectTheme, toggle } from '../../store/features/theme/themeSlice';\r\nimport '../../scss/VisualizerNavbar.scss';\r\nimport { allowRenderNewFile, findNode, reRender } from '../../store/features/externalCmd/externalCmd';\r\nimport examples from '../../examples/proofs-examples';\r\n\r\nfunction useWindowSize() {\r\n    // Initialize state with undefined width/height so server and client renders match\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n    const [windowSize, setWindowSize] = useState({\r\n        width: 0,\r\n        height: 0,\r\n    });\r\n    useEffect(() => {\r\n        // Handler to call on window resize\r\n        function handleResize() {\r\n            // Set window width/height to state\r\n            setWindowSize({\r\n                width: window.innerWidth,\r\n                height: window.innerHeight,\r\n            });\r\n        }\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return windowSize;\r\n}\r\n\r\nfunction isNotMozzila() {\r\n    const userAgent = navigator.userAgent;\r\n    let browserName;\r\n\r\n    if (userAgent.match(/chrome|chromium|crios/i)) {\r\n        return true;\r\n    } else if (userAgent.match(/firefox|fxios/i)) {\r\n        return false;\r\n    } else if (userAgent.match(/safari/i)) {\r\n        return true;\r\n    } else if (userAgent.match(/opr\\//i)) {\r\n        return true;\r\n    } else if (userAgent.match(/edg/i)) {\r\n        return true;\r\n    }\r\n    return browserName;\r\n}\r\nconst isNotMozz = isNotMozzila();\r\n\r\nconst VisualizerNavbar: React.FC<NavbarPropsAndRedux> = ({\r\n    setDialogIsOpen,\r\n    setDrawerIsOpen,\r\n    addErrorToast,\r\n    setInTutorial,\r\n    setSmtDrawerIsOpen,\r\n    inTutorial,\r\n    visualInfo,\r\n    proof,\r\n    dot,\r\n    view,\r\n    hiddenNodes,\r\n    hideNodes,\r\n}: NavbarPropsAndRedux) => {\r\n    const fileName = useAppSelector(selectFileName);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const windowSize = useWindowSize();\r\n    const [command, setCommand] = useState('');\r\n    const [lastCommands, setLastCommands] = useState(['']);\r\n    const [commandId, setCommandId] = useState(0);\r\n    const [matchableCmd, setMatchableCmd] = useState<string[]>([]);\r\n    const [matchableCmdIsOpen, setMatchableCmdIsOpen] = useState(false);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const commandsMap: { [cmd: string]: (cmds: string[]) => void } = {\r\n        ['/view']: (cmds: string[]) => {\r\n            switch (cmds[1]) {\r\n                case 'full':\r\n                    dispatch(applyView('full'));\r\n                    dispatch(reRender());\r\n                    break;\r\n                case 'clustered':\r\n                    dispatch(applyView('clustered'));\r\n                    dispatch(reRender());\r\n                    break;\r\n                case 'colored-full':\r\n                    dispatch(applyView('colored-full'));\r\n                    dispatch(reRender());\r\n                    break;\r\n            }\r\n        },\r\n        ['/select']: (cmds: string[]) => {\r\n            if (cmds[1]) {\r\n                let cmdArg = '';\r\n                cmds.forEach((string, id) => id !== 0 && (cmdArg += string + ' '));\r\n                // Matches all the brackets\r\n                const matches = [...cmdArg.matchAll(/\\[([^\\[\\]]+)\\]/g)];\r\n                let idList: number[] = [];\r\n\r\n                // There is a case with brackets\r\n                if (matches[0]) {\r\n                    const insideBracket = matches[0][1].trim();\r\n                    let insideMatches = [...insideBracket.matchAll(/\\s*\\d+\\s*-\\s*\\d+\\s*/g)];\r\n\r\n                    // Number range notation\r\n                    if (insideMatches[0]) {\r\n                        // Get the range limits\r\n                        const rangeLim = insideMatches[0][0].split(/\\s*-\\s*/).map((numS) => Number(numS));\r\n                        idList = Array.from({ length: rangeLim[1] - rangeLim[0] + 1 }, (_, i) => rangeLim[0] + i);\r\n                    }\r\n                    // List notation\r\n                    else {\r\n                        insideMatches = [...insideBracket.matchAll(/(\\s*\\d+\\s*,*)+/g)];\r\n                        // Number list notation\r\n                        if (insideMatches[0]) {\r\n                            // Group all the matches\r\n                            let listStr = '';\r\n                            insideMatches.forEach((match) => (listStr += match[0]));\r\n                            // Convert to number\r\n                            idList = listStr\r\n                                .split(/,\\s*/)\r\n                                .filter((word) => word.length > 0 && !isNaN(Number(word)))\r\n                                .map((id) => Number(id));\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Is a regex select?\r\n                    const matches = [...cmdArg.matchAll(/\\/[^\\/]*\\//g)];\r\n                    const argMatch = [...cmdArg.matchAll(/--(c|r)/g)];\r\n                    // If there is a regex\r\n                    if (matches[0]) {\r\n                        let argIsConclusion = true;\r\n                        // Try to find the option\r\n                        if (argMatch[0]) {\r\n                            switch (argMatch[0][1]) {\r\n                                case 'r':\r\n                                    argIsConclusion = false;\r\n                                    break;\r\n                                case 'c':\r\n                                    argIsConclusion = true;\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                        const regexString = matches[0][0].substring(1, matches[0][0].length - 1);\r\n                        try {\r\n                            // Search all the nodes with the specific regex matching in the conclusion\r\n                            const regex = new RegExp(regexString);\r\n                            idList = proof\r\n                                .filter((node) => regex.test(argIsConclusion ? node.conclusion : node.rule))\r\n                                .map((node) => node.id);\r\n                        } catch (err) {\r\n                            // If the inserted regex expression is invalid (probably missing \\)\r\n                            addErrorToast('Regex error: probably and wrong regex expression');\r\n                        }\r\n                    }\r\n                }\r\n\r\n                dispatch(selectNodes(idList));\r\n            }\r\n        },\r\n        ['/unselect']: (cmds: string[]) => {\r\n            const allNodesIds = proof.map((node) => node.id);\r\n            dispatch(unselectNodes(allNodesIds));\r\n        },\r\n        ['/color']: (cmds: string[]) => {\r\n            if (cmds[1]) {\r\n                // Hex color\r\n                if (RegExp(/^#([0-9a-f]{3}){1,2}$/i).test(cmds[1])) {\r\n                    dispatch(applyColor(cmds[1]));\r\n                    return;\r\n                }\r\n                // Default colors\r\n                switch (cmds[1]) {\r\n                    case 'red':\r\n                        dispatch(applyColor('#f72b34'));\r\n                        break;\r\n                    case 'orange':\r\n                        dispatch(applyColor('#ff8334'));\r\n                        break;\r\n                    case 'yellow':\r\n                        dispatch(applyColor('#ffc149'));\r\n                        break;\r\n                    case 'green':\r\n                        dispatch(applyColor('#60aa51'));\r\n                        break;\r\n                    case 'blue':\r\n                        dispatch(applyColor('#0097e4'));\r\n                        break;\r\n                    case 'purple':\r\n                        dispatch(applyColor('#a73da5'));\r\n                        break;\r\n                    case 'brown':\r\n                        dispatch(applyColor('#a95a49'));\r\n                        break;\r\n                    case 'gray':\r\n                        dispatch(applyColor('#464646'));\r\n                        break;\r\n                    case 'white':\r\n                        dispatch(applyColor('#f0f0f0'));\r\n                        break;\r\n                }\r\n            }\r\n        },\r\n        ['/hide']: (cmds: string[]) => {\r\n            // Hide all the selected nodes\r\n            const hiddenIds = Object.keys(visualInfo)\r\n                .map((id) => Number(id))\r\n                .filter((id) => visualInfo[id].selected);\r\n            // Make sure there are nodes selected\r\n            if (hiddenIds.length > 1) {\r\n                // Re-render the canvas and update the store\r\n                dispatch(reRender());\r\n                dispatch(hideNodes(hiddenIds));\r\n            }\r\n        },\r\n        ['/fold']: (cmds: string[]) => {\r\n            // If the option is a number\r\n            if (cmds[1] && !isNaN(Number(cmds[1]))) {\r\n                const nodeId = Number(cmds[1]);\r\n                // Is a valid node\r\n                if (proof.findIndex((node) => node.id === nodeId) !== -1) {\r\n                    // Re-render the canvas and update the store\r\n                    dispatch(reRender());\r\n                    dispatch(foldAllDescendants(nodeId));\r\n                }\r\n            }\r\n        },\r\n        ['/unfold']: (cmds: string[]) => {\r\n            let hiddenIds: number[];\r\n            // If there is a number argument\r\n            if (cmds[1] && !isNaN(Number(cmds[1]))) {\r\n                const id = Number(cmds[1]);\r\n                // Get the pi node (to be unfold)\r\n                const obj = proof.find((node) => node.id === id);\r\n                // If it's a pi node\r\n                if (obj && obj.hiddenNodes?.length) {\r\n                    // Get the hidden nodes and their ids\r\n                    const hiddenNodes = obj.hiddenNodes ? obj.hiddenNodes : [];\r\n                    hiddenIds = hiddenNodes ? hiddenNodes.map((node) => node.id) : [];\r\n                    // Re-render the canvas and update the store\r\n                    dispatch(reRender());\r\n                    dispatch(unhideNodes({ pi: id, hiddens: hiddenIds }));\r\n                }\r\n            }\r\n        },\r\n        ['/find']: (cmds: string[]) => {\r\n            // If there is an argument and is a number\r\n            if (cmds[1] && !isNaN(Number(cmds[1]))) {\r\n                // Find the node\r\n                dispatch(\r\n                    findNode({\r\n                        nodeId: Number(cmds[1]),\r\n                        option: cmds[2] === '--s' ? true : false,\r\n                    }),\r\n                );\r\n            }\r\n        },\r\n    };\r\n    const commands = useRef(Object.keys(commandsMap)).current;\r\n\r\n    const openDialog = (content: string): void => {\r\n        setDialogIsOpen(true);\r\n    };\r\n\r\n    const findMatchableCmd = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.value.length) {\r\n            setMatchableCmd(commands.filter((cmd) => cmd.indexOf(e.target.value) !== -1));\r\n            setMatchableCmdIsOpen(true);\r\n        }\r\n        // If it's an empty string\r\n        else {\r\n            setMatchableCmd([]);\r\n            setMatchableCmdIsOpen(false);\r\n        }\r\n    };\r\n\r\n    const renderMatchableCmd = () => {\r\n        if (matchableCmd.length) {\r\n            const list: JSX.Element[] = [];\r\n            matchableCmd.forEach((cmd) => list.push(<MenuItem text={cmd} />));\r\n            return <Menu className=\"matchable-menu\">{list}</Menu>;\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    const handleInputKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        // Creates an commands historic, registering the past 4 commands\r\n        switch (e.key) {\r\n            case 'Enter':\r\n                // If the command is not a white space\r\n                if (command.trim() !== '') {\r\n                    runCommands(command);\r\n                    if (lastCommands.length === 5) {\r\n                        lastCommands.pop();\r\n                    }\r\n                    lastCommands.unshift('');\r\n                    setLastCommands(lastCommands);\r\n                    setCommand('');\r\n                }\r\n                setMatchableCmd([]);\r\n                break;\r\n            case 'ArrowUp':\r\n                if (commandId < lastCommands.length - 1) {\r\n                    const newId = commandId + 1;\r\n                    setCommandId(newId);\r\n                    setCommand(lastCommands[newId]);\r\n                    setMatchableCmd([]);\r\n                    setMatchableCmdIsOpen(false);\r\n                }\r\n                break;\r\n            case 'ArrowDown':\r\n                if (commandId > 0) {\r\n                    const newId = commandId - 1;\r\n                    setCommandId(newId);\r\n                    setCommand(lastCommands[newId]);\r\n                    setMatchableCmd([]);\r\n                    setMatchableCmdIsOpen(false);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    const runCommands = (command: string): void => {\r\n        const cmds = command.trim().split(/ +/);\r\n        // If the command exist\r\n        if (cmds[0] && commandsMap[cmds[0]]) {\r\n            commandsMap[cmds[0]](cmds);\r\n        }\r\n    };\r\n\r\n    const exportJSON = () => {\r\n        const downloadJSON = {\r\n            dot: dot,\r\n            visualInfo: visualInfo,\r\n            hiddenNodes: hiddenNodes,\r\n            view: view,\r\n        };\r\n        const fName = fileName.split('.')[0];\r\n\r\n        const link = document.createElement('a');\r\n        link.download = fName + '.json';\r\n        link.href = `data:attachment/text,${encodeURIComponent(JSON.stringify(downloadJSON))}`;\r\n        link.click();\r\n    };\r\n\r\n    const exportPNG = (e: React.MouseEvent<HTMLElement, MouseEvent> | null) => {\r\n        e?.preventDefault();\r\n        const link = document.createElement('a');\r\n        link.download = fileName ? `${fileName.split('.')[0].replaceAll(' ', '_')}.png` : '';\r\n        const graph = document.getElementsByClassName('konvajs-content');\r\n        if (graph.length) {\r\n            link.href = (graph[0].children[0] as HTMLCanvasElement).toDataURL('image/png');\r\n            link.click();\r\n        }\r\n    };\r\n\r\n    const runExample = (e: React.MouseEvent<HTMLElement, MouseEvent> | null, ex: string, id: number) => {\r\n        e?.preventDefault();\r\n        const dot = examples[ex].dot;\r\n        const smt = examples[ex].smt;\r\n\r\n        dispatch(set({ name: `ex-${id + 1}.dot`, value: dot }));\r\n        dispatch(allowRenderNewFile());\r\n        dispatch(reRender());\r\n        dispatch(setSmt(smt));\r\n\r\n        dispatch(process(dot));\r\n        setSmtDrawerIsOpen();\r\n    };\r\n\r\n    const isPseudoClick = (e: React.KeyboardEvent<HTMLAnchorElement>): boolean => e.key === 'Enter' || e.key === ' ';\r\n\r\n    const menus = {\r\n        style: (\r\n            <Menu className=\"nav-menu\">\r\n                <MenuItem\r\n                    icon=\"diagram-tree\"\r\n                    text=\"Graph\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(changeStyle('graph'));\r\n                    }}\r\n                    onKeyDown={(e) => isPseudoClick(e) && dispatch(changeStyle('graph'))}\r\n                />\r\n                <MenuItem\r\n                    icon=\"folder-open\"\r\n                    text=\"Directory\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(changeStyle('directory'));\r\n                    }}\r\n                    onKeyDown={(e) => isPseudoClick(e) && dispatch(changeStyle('directory'))}\r\n                />\r\n            </Menu>\r\n        ),\r\n        download: (\r\n            <Menu className=\"nav-menu\">\r\n                <MenuItem\r\n                    icon=\"layout\"\r\n                    text=\"JSON\"\r\n                    onClick={exportJSON}\r\n                    role=\"button\"\r\n                    onKeyDown={(e) => {\r\n                        (e.key == 'Enter' || e.key == ' ') && exportJSON();\r\n                    }}\r\n                />\r\n                <MenuItem\r\n                    icon=\"graph\"\r\n                    text=\"DOT\"\r\n                    href={`data:attachment/text,${encodeURIComponent(dot ? dot : '')}`}\r\n                    download={fileName ? `${fileName.split('.')[0].replaceAll(' ', '_')}.dot` : ''}\r\n                />\r\n                <MenuItem\r\n                    icon=\"square\"\r\n                    text=\"PNG\"\r\n                    onClick={exportPNG}\r\n                    onKeyDown={(e) => {\r\n                        (e.key == 'Enter' || e.key == ' ') && exportPNG(null);\r\n                    }}\r\n                />\r\n            </Menu>\r\n        ),\r\n        help: (\r\n            <Menu className=\"nav-menu\">\r\n                <MenuItem text=\"/view\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that changes the view mode.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /view {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> full, clustered and colored-full.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/select\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that selects a group of nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /select {'<option>'} {'<argument>'}\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Options:</u>\r\n                            <div className=\"option\">\r\n                                1 - A list of node ids wrapped by brackets and separated by commas (and spaces if\r\n                                wanted) (eg.: [1, 15, 6, 3]).\r\n                            </div>\r\n                            <div className=\"option\">\r\n                                2 - A range of node ids wrapped by brackets and separated by hyphen (and spaces if\r\n                                wanted) (eg.: [4 - 15]). This range will include the last element.\r\n                            </div>\r\n                            <div className=\"option\">\r\n                                3 - A regex expression used to select all the nodes which the conclusion owns a match\r\n                                (eg.: /\\.*false\\.*/ selects all the nodes with false anywhere in the conclusion).\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <u className=\"title\">Argument:</u> The argument can only be applied with the third option.\r\n                            <br />\r\n                            To search a match in the rule just insert the --r argument. The --c argument exists but the\r\n                            /select will by default search in the conclusion.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/unselect\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that unselect all the nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /unselect.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/color\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that changes the color of the current selected\r\n                            nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /color {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Options:</u>\r\n                            <div className=\"option\">1 - A valid hex color notation (eg.: #A7B).</div>\r\n                            <div className=\"option\">\r\n                                2 - A color name among: red🟥, orange🟧, yellow🟨, green🟩, blue🟦, purple🟪, brown🟫,\r\n                                black⬛ and white⬜.\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Prerequisites:</u> a group of nodes being selected.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/hide\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that try to fold (hide) a group of selected nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /hide.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Prerequisites:</u> a group of nodes being selected.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/fold\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that fold all descendants of a specific node.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /fold {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> a valid node id.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/unfold\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that unfold a specific pi node.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /unfold {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> a valid pi node id.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/find\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that find a node and centralize the canvas at it.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /find {'<node number>'} {'<argument>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Argument:</u> --s: find and select the node.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n            </Menu>\r\n        ),\r\n        examples: (\r\n            <Menu className=\"nav-menu\">\r\n                {Object.keys(examples).map((ex, id) => {\r\n                    return (\r\n                        <MenuItem\r\n                            key={id}\r\n                            text={`Example ${id + 1}`}\r\n                            onClick={(e) => runExample(e, ex, id)}\r\n                            onKeyDown={(e) => isPseudoClick(e) && runExample(null, ex, id)}\r\n                        />\r\n                    );\r\n                })}\r\n            </Menu>\r\n        ),\r\n    };\r\n\r\n    const tabIndex = inTutorial ? -1 : 0;\r\n\r\n    const criticalWidth = 1350;\r\n    return (\r\n        <Navbar>\r\n            <Navbar.Group align={Alignment.LEFT}>\r\n                <Navbar.Heading>\r\n                    <b id=\"proof-visualizer-name\">{windowSize.width >= criticalWidth ? 'Proof Visualizer' : 'PV'}</b>\r\n                </Navbar.Heading>\r\n                <Navbar.Divider />\r\n                <Button\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        openDialog('upload-proof');\r\n                    }}\r\n                    id=\"upload-proof-bt\"\r\n                    className=\"bp3-minimal\"\r\n                    icon=\"upload\"\r\n                    text={windowSize.width >= criticalWidth ? 'Upload Proof' : ''}\r\n                    tabIndex={tabIndex}\r\n                />\r\n                <Popover2\r\n                    content={fileName ? menus.examples : undefined}\r\n                    placement=\"bottom-end\"\r\n                    modifiers={{ arrow: { enabled: isNotMozz } }}\r\n                >\r\n                    <Button\r\n                        id=\"examples-bt\"\r\n                        className=\"bp3-minimal\"\r\n                        icon=\"manual\"\r\n                        text={windowSize.width >= criticalWidth ? 'Examples' : ''}\r\n                        tabIndex={tabIndex}\r\n                    />\r\n                </Popover2>\r\n                <Button\r\n                    id=\"input-smt-bt\"\r\n                    className=\"bp3-minimal\"\r\n                    icon=\"code\"\r\n                    text={windowSize.width >= criticalWidth ? 'SMT Input' : ''}\r\n                    onClick={() => setSmtDrawerIsOpen()}\r\n                    tabIndex={tabIndex}\r\n                />\r\n            </Navbar.Group>\r\n\r\n            <Navbar.Group align={Alignment.RIGHT}>\r\n                {fileName ? (\r\n                    <>\r\n                        <Navbar.Heading id=\"file-name-title\">{fileName}</Navbar.Heading>\r\n                        <Navbar.Divider />\r\n                        <Popover2\r\n                            autoFocus={false}\r\n                            enforceFocus={false}\r\n                            content={renderMatchableCmd()}\r\n                            isOpen={matchableCmdIsOpen}\r\n                            disabled={matchableCmd.length === 0}\r\n                            placement=\"bottom-end\"\r\n                            modifiers={{ arrow: { enabled: isNotMozz } }}\r\n                        >\r\n                            <InputGroup\r\n                                id=\"command\"\r\n                                placeholder=\"/command\"\r\n                                value={command}\r\n                                onChange={(e) => {\r\n                                    setCommandId(0);\r\n                                    lastCommands[0] = e.target.value;\r\n                                    setLastCommands(lastCommands);\r\n                                    setCommand(e.target.value);\r\n                                    findMatchableCmd(e);\r\n                                }}\r\n                                onKeyDown={handleInputKeyDown}\r\n                                rightElement={\r\n                                    <Popover2\r\n                                        content={menus.help}\r\n                                        placement=\"bottom-end\"\r\n                                        modifiers={{ arrow: { enabled: isNotMozz } }}\r\n                                    >\r\n                                        <Button\r\n                                            icon=\"help\"\r\n                                            className=\"bp3-minimal\"\r\n                                            onFocusCapture={(e) => inTutorial && e.target.blur()}\r\n                                            tabIndex={-1}\r\n                                        />\r\n                                    </Popover2>\r\n                                }\r\n                                autoComplete=\"off\"\r\n                                tabIndex={tabIndex}\r\n                            />\r\n                        </Popover2>\r\n                        <Button\r\n                            style={{ marginLeft: '5px' }}\r\n                            icon=\"play\"\r\n                            onClick={() => {\r\n                                runCommands(command);\r\n                                lastCommands.pop();\r\n                                lastCommands.unshift(command);\r\n                                lastCommands[0] = '';\r\n                                setLastCommands(lastCommands);\r\n                                setCommand('');\r\n                            }}\r\n                            onFocusCapture={(e) => inTutorial && e.target.blur()}\r\n                            tabIndex={-1}\r\n                        />\r\n                        <Navbar.Divider />\r\n                        <Popover2\r\n                            content={fileName ? menus.style : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                            modifiers={{ arrow: { enabled: isNotMozz } }}\r\n                        >\r\n                            <Button\r\n                                id=\"style-bt\"\r\n                                icon=\"presentation\"\r\n                                className=\"bp3-minimal\"\r\n                                text={windowSize.width >= criticalWidth ? 'Style' : ''}\r\n                                disabled={fileName ? false : true}\r\n                                tabIndex={tabIndex}\r\n                            />\r\n                        </Popover2>\r\n                        <Button\r\n                            id=\"visualizers-bt\"\r\n                            className=\"bp3-minimal\"\r\n                            icon=\"applications\"\r\n                            text={windowSize.width >= criticalWidth ? 'Visualizers' : ''}\r\n                            disabled={fileName ? false : true}\r\n                            onClick={() => setDrawerIsOpen(true)}\r\n                            tabIndex={tabIndex}\r\n                        />\r\n                        <Popover2\r\n                            content={fileName ? menus.download : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                            modifiers={{ arrow: { enabled: isNotMozz } }}\r\n                        >\r\n                            <Button\r\n                                id=\"download-bt\"\r\n                                className=\"bp3-minimal\"\r\n                                icon=\"download\"\r\n                                text={windowSize.width >= criticalWidth ? 'Download' : ''}\r\n                                disabled={fileName ? false : true}\r\n                                tabIndex={tabIndex}\r\n                            />\r\n                        </Popover2>\r\n                        <Button\r\n                            className=\"bp3-minimal\"\r\n                            icon=\"learning\"\r\n                            text={windowSize.width >= criticalWidth ? 'Tutorial' : ''}\r\n                            disabled={fileName ? false : true}\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                e.currentTarget.blur();\r\n                                setInTutorial(!inTutorial);\r\n                            }}\r\n                            tabIndex={tabIndex}\r\n                        />\r\n                        <Navbar.Divider />\r\n                    </>\r\n                ) : null}\r\n\r\n                <span id=\"switch-button-dark-theme\">\r\n                    <Switch\r\n                        checked={useAppSelector(selectTheme)}\r\n                        onChange={() => dispatch(toggle())}\r\n                        tabIndex={tabIndex}\r\n                    />\r\n                    <Icon icon={darkTheme ? 'moon' : 'flash'}></Icon>\r\n                </span>\r\n            </Navbar.Group>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: ReduxState, ownProps: NavbarProps) {\r\n    return {\r\n        ...ownProps,\r\n        proof: selectProof(state),\r\n        dot: selectDot(state),\r\n        view: selectView(state),\r\n        visualInfo: selectVisualInfo(state),\r\n        hiddenNodes: selectHiddenNodes(state),\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = { hideNodes };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VisualizerNavbar);\r\n","import React, { useState, useReducer, useEffect } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { MaybeElement } from '@blueprintjs/core/lib/esm/common/props';\r\nimport { IconName } from '@blueprintjs/core/lib/esm/components/icon/icon';\r\n\r\nimport { Button, Classes, Dialog, FileInput, Intent } from '@blueprintjs/core';\r\n\r\nimport '../../scss/VisualizerDialog.scss';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { set } from '../../store/features/file/fileSlice';\r\nimport { process } from '../../store/features/proof/proofSlice';\r\nimport { allowRenderNewFile, blockRender, reRender } from '../../store/features/externalCmd/externalCmd';\r\nimport { VisualizerDialogProps } from '../../interfaces/interfaces';\r\n\r\ninterface DialogProps {\r\n    icon: IconName | MaybeElement;\r\n    title: React.ReactNode;\r\n}\r\n\r\nconst readUploadedFileAsText = (inputFile: File) => {\r\n    const temporaryFileReader = new FileReader();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        temporaryFileReader.onerror = () => {\r\n            temporaryFileReader.abort();\r\n            reject(new DOMException('Problem parsing input file.'));\r\n        };\r\n\r\n        temporaryFileReader.onload = () => {\r\n            resolve(temporaryFileReader.result);\r\n        };\r\n        temporaryFileReader.readAsText(inputFile);\r\n    });\r\n};\r\n\r\nconst VisualizerDialog: React.FC<VisualizerDialogProps> = ({\r\n    dialogIsOpen,\r\n    setDialogIsOpen,\r\n    addErrorToast,\r\n}: VisualizerDialogProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [inputIsFocused, setInputIsFocused] = useState(false);\r\n    const [fileName, changeFileName] = useState('Choose file...');\r\n    const [file, changeFile] = useState('');\r\n    const [[focusFlag, flagCount], setFocusFlag] = useReducer(\r\n        (state: number[], newFlag: number): number[] => [newFlag, state[1] + 1],\r\n        [0, 0],\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (dialogIsOpen) setFocusFlag(1);\r\n    }, [dialogIsOpen]);\r\n\r\n    useEffect(() => {\r\n        let el;\r\n        switch (focusFlag) {\r\n            // Focus the file input\r\n            case 1:\r\n                el = document.getElementsByClassName(Classes.DIALOG_BODY + ' dialog-body');\r\n                (el[0].childNodes[0] as HTMLElement).focus();\r\n                break;\r\n            // Focus the upload button\r\n            case 2:\r\n                el = document.getElementsByClassName(Classes.DIALOG_FOOTER_ACTIONS);\r\n                (el[0].childNodes[0] as HTMLElement).focus();\r\n                break;\r\n        }\r\n    }, [flagCount]);\r\n\r\n    const closeDialog = () => {\r\n        setDialogIsOpen(false);\r\n        changeFileName('Choose file...');\r\n        changeFile('');\r\n    };\r\n\r\n    const dialogProps: DialogProps = { icon: 'upload', title: 'Upload Proof' };\r\n    const dialogBody = (\r\n        <FileInput\r\n            style={{\r\n                outline: inputIsFocused ? '2px  white solid' : '',\r\n                borderRadius: '3px',\r\n            }}\r\n            text={fileName}\r\n            hasSelection={fileName !== 'Choose file...'}\r\n            onInputChange={async (e) => {\r\n                console.log('aaaaa');\r\n                const target = e.target as HTMLInputElement;\r\n                const file = target.files ? target.files[0] : new File([''], 'filename');\r\n                if (\r\n                    target.files &&\r\n                    target.files[0] &&\r\n                    target.files[0].name.split('.').slice(-1)[0] !== 'dot' &&\r\n                    target.files[0].name.split('.').slice(-1)[0] !== 'json'\r\n                ) {\r\n                    addErrorToast('Sorry! Our app only support DOT and JSON files.');\r\n                    return;\r\n                }\r\n\r\n                try {\r\n                    // Make sure the file was selected and none error of \"no\r\n                    //  file select\" will be prompted\r\n                    if (file) {\r\n                        const fileContents = await readUploadedFileAsText(file);\r\n                        changeFile(fileContents as string);\r\n                        changeFileName(file.name);\r\n\r\n                        // If succeded, set the focus of the page to the upload button\r\n                        setFocusFlag(2);\r\n                    }\r\n                } catch (er: any) {\r\n                    addErrorToast(er.message);\r\n                }\r\n            }}\r\n            fill={true}\r\n            onFocus={(e) => {\r\n                e.stopPropagation();\r\n                setInputIsFocused(true);\r\n            }}\r\n            onBlur={(e) => {\r\n                e.stopPropagation();\r\n                setInputIsFocused(false);\r\n            }}\r\n        />\r\n    );\r\n    const succesButton = (\r\n        <Button\r\n            onClick={() => {\r\n                dispatch(set({ name: fileName, value: file }));\r\n\r\n                dispatch(allowRenderNewFile());\r\n                const ext = fileName.split('.').pop();\r\n                if (ext === 'json') dispatch(blockRender());\r\n                else if (ext === 'dot') dispatch(reRender());\r\n\r\n                dispatch(process(file));\r\n                closeDialog();\r\n            }}\r\n            intent={Intent.SUCCESS}\r\n            disabled={fileName === 'Choose file...'}\r\n        >\r\n            Upload Proof\r\n        </Button>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className={darkTheme ? ' bp3-dark' : ''}\r\n                isOpen={dialogIsOpen}\r\n                onClose={(): void => closeDialog()}\r\n                usePortal={true}\r\n                {...dialogProps}\r\n            >\r\n                <div className={Classes.DIALOG_BODY + ' dialog-body'}>{dialogBody}</div>\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>{succesButton}</div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default VisualizerDialog;\r\n","import { KonvaEventObject } from 'konva/types/Node';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Label, Text, Tag, Group, Circle, Arrow } from 'react-konva';\r\nimport { NodeProps } from '../../../interfaces/interfaces';\r\n\r\nfunction getTextWidth(text: string, font: string): number {\r\n    const canvas = document.createElement('canvas');\r\n    const context = canvas.getContext('2d');\r\n    let size = 0;\r\n    if (context) {\r\n        context.font = font;\r\n        size = context.measureText(text).width;\r\n    }\r\n    return size;\r\n}\r\n\r\nfunction textColorFromBg(bgColor: string) {\r\n    const r = parseInt(bgColor.substring(0, 2), 16);\r\n    const g = parseInt(bgColor.substring(2, 4), 16);\r\n    const b = parseInt(bgColor.substring(4, 6), 16);\r\n    return r * 0.299 + g * 0.587 + b * 0.114 > 150 ? '#000000' : '#ffffff';\r\n}\r\n\r\nfunction sixDigitColor(bgColor: string): string {\r\n    if (bgColor.charAt(0) === '#') {\r\n        if (bgColor.length == 4) {\r\n            return bgColor\r\n                .substring(1, 7)\r\n                .split('')\r\n                .map((c) => c + c)\r\n                .join('');\r\n        } else if (bgColor.length == 7) {\r\n            return bgColor.substring(1, 7);\r\n        }\r\n    } else {\r\n        if (bgColor.length == 3) {\r\n            return bgColor\r\n                .split('')\r\n                .map((c) => c + c)\r\n                .join('');\r\n        } else if (bgColor.length == 6) {\r\n            return bgColor;\r\n        }\r\n    }\r\n    return '000000';\r\n}\r\n\r\nconst Node: React.FC<NodeProps> = (props: NodeProps): JSX.Element => {\r\n    const {\r\n        id,\r\n        conclusion,\r\n        rule,\r\n        args,\r\n        x,\r\n        y,\r\n        nHided,\r\n        nDescendants,\r\n        hiddenNodes,\r\n        dependencies,\r\n        selected,\r\n        color,\r\n        setNodeOnFocus,\r\n        toggleNodeSelection,\r\n        updateNodePosition,\r\n        openDrawer,\r\n        onDragEnd,\r\n        createTree,\r\n    } = props;\r\n\r\n    const handleClick = (e: KonvaEventObject<MouseEvent>): void => {\r\n        if (e.evt.button === 0) {\r\n            if (e.evt.shiftKey) {\r\n                toggleNodeSelection(id);\r\n            } else {\r\n                openDrawer(\r\n                    {\r\n                        rule: rule,\r\n                        args: args,\r\n                        conclusion: conclusion,\r\n                        nHided: nHided,\r\n                        nDescendants: nDescendants - (rule === 'π' ? 0 : 0),\r\n                        hiddenNodes: hiddenNodes,\r\n                        dependencies: dependencies,\r\n                    },\r\n                    createTree(id),\r\n                );\r\n            }\r\n        } else if (e.evt.button === 2) {\r\n            setNodeOnFocus(id);\r\n            const menuNode = document.getElementById('menu');\r\n            if (menuNode) {\r\n                menuNode.style.top = `${e.evt.clientY}px`;\r\n                menuNode.style.left = `${e.evt.clientX}px`;\r\n                menuNode.style.display = 'initial';\r\n                window.addEventListener('click', () => {\r\n                    menuNode.style.display = 'none';\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const depSize = 25,\r\n        depLineSize = 25;\r\n    const bgColor = color;\r\n\r\n    const style = {\r\n        tag: {\r\n            fill: bgColor,\r\n            stroke: selected ? 'red' : 'black',\r\n            strokeWidth: selected ? 3 : 1,\r\n        },\r\n        get dep() {\r\n            return { ...this.tag };\r\n        },\r\n        text: {\r\n            align: 'center',\r\n            fill: textColorFromBg(sixDigitColor(bgColor)),\r\n            fontSize: 15,\r\n            height: 35,\r\n            padding: 10,\r\n            width: 300,\r\n        },\r\n        get depText() {\r\n            return {\r\n                ...this.text,\r\n                padding: 0,\r\n                width: depSize * 2,\r\n            };\r\n        },\r\n    };\r\n    const infos = {\r\n        nHided: nHided ? `#hidden: ${nHided}` : '',\r\n        nDescendants: ` #descendants: ${nDescendants}`,\r\n        rule: nHided ? 'π' : rule,\r\n        dependencies: dependencies.length === 1 ? String(dependencies[0].piId) : 'π',\r\n    };\r\n\r\n    const [idSize, setIdSize] = useState(50);\r\n    const [descendantSize, setDescendantSize] = useState(style.text.width - 50);\r\n\r\n    // Component Did Mount\r\n    useEffect(() => {\r\n        const font = `${style.text.fontSize}px -apple-system, \"BlinkMacSystemFont\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Open Sans\", \"Helvetica Neue\", \"Icons16\", sans-serif`;\r\n        const calc = getTextWidth(id.toString(), font) + style.text.padding * 3;\r\n        setIdSize(calc);\r\n        setDescendantSize(style.text.width - calc);\r\n    }, []);\r\n\r\n    return (\r\n        <Group\r\n            draggable\r\n            id={id.toString()}\r\n            key={id}\r\n            onDragMove={(e) => {\r\n                updateNodePosition(id, e.target.attrs.x, e.target.attrs.y);\r\n            }}\r\n            onDragEnd={onDragEnd}\r\n            x={x}\r\n            y={y}\r\n            onClick={handleClick}\r\n        >\r\n            <Label x={0} y={0}>\r\n                <Tag {...style.tag} />\r\n                <Text {...style.text} text={conclusion} />\r\n            </Label>\r\n            <Label x={0} y={35}>\r\n                <Tag {...style.tag} />\r\n                <Text {...style.text} text={infos.rule} />\r\n            </Label>\r\n            <Label x={0} y={70} {...{ align: 'right' }}>\r\n                <Tag {...style.tag} />\r\n                <Text {...{ ...style.text, width: idSize }} text={id.toString()} />\r\n            </Label>\r\n            <Label x={idSize} y={70}>\r\n                <Tag {...style.tag} />\r\n                <Text {...{ ...style.text, width: descendantSize }} text={infos.nHided + infos.nDescendants} />\r\n            </Label>\r\n            {dependencies.length ? (\r\n                <Label x={300} y={0}>\r\n                    <Arrow strokeWidth={1} stroke=\"black\" fill=\"black\" points={[depLineSize, 53, 0, 53]} />\r\n                    <Circle x={depLineSize + depSize} y={53} radius={depSize} {...style.dep}></Circle>\r\n                    <Label x={depLineSize} y={45}>\r\n                        <Text {...style.depText} text={infos.dependencies} />\r\n                    </Label>\r\n                </Label>\r\n            ) : null}\r\n        </Group>\r\n    );\r\n};\r\n\r\nexport default Node;\r\n","import React from 'react';\r\nimport { Arrow } from 'react-konva';\r\n\r\nimport { LineProps } from '../../../interfaces/interfaces';\r\n\r\nconst Line = ({ key, points }: LineProps): JSX.Element => {\r\n    return <Arrow key={key} strokeWidth={1} stroke=\"black\" fill=\"black\" points={[...points]} />;\r\n};\r\n\r\nexport default Line;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ControlGroup, Button, InputGroup } from '@blueprintjs/core';\r\nimport { colorConverter } from '../../../store/features/theme/auxi';\r\n\r\nconst Menu = ({\r\n    unfold,\r\n    foldSelectedNodes,\r\n    foldAllDescendants,\r\n    changeNodeColor,\r\n    currentColor,\r\n    options,\r\n}: {\r\n    unfold: () => void;\r\n    foldSelectedNodes: () => void;\r\n    foldAllDescendants: () => void;\r\n    changeNodeColor: (color: string) => void;\r\n    currentColor: string;\r\n    options: { unfold: boolean; foldSelected: boolean; foldAllDescendants: boolean };\r\n}): JSX.Element => {\r\n    const [color, setColor] = useState(currentColor);\r\n\r\n    useEffect(() => {\r\n        setColor(currentColor);\r\n    }, [currentColor]);\r\n\r\n    return (\r\n        <div className=\"bp3-popover2-content\">\r\n            <ul id=\"menu\" className=\"bp3-menu\">\r\n                {options.unfold ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => unfold()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-open\">\r\n                                <span> Unfold</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                {options.foldSelected ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => foldSelectedNodes()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\r\n                                <span> Fold selected nodes</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                {options.foldAllDescendants ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => foldAllDescendants()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\r\n                                <span> Fold all descendants</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                <li className=\"\">\r\n                    <a className=\"bp3-menu-item\">\r\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\r\n                            <span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('red'))}> 🟥</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('orange'))}> 🟧</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('yellow'))}> 🟨</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('green'))}> 🟩</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('blue'))}> 🟦</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('purple'))}> 🟪</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('brown'))}> 🟫</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('black'))}> ⬛</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('white'))}> ⬜</span>\r\n                            </span>\r\n                        </div>\r\n                    </a>\r\n                </li>\r\n                <li className=\"\">\r\n                    <a className=\"bp3-menu-item\">\r\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\r\n                            <ControlGroup\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                }}\r\n                                fill={true}\r\n                                vertical={false}\r\n                            >\r\n                                <InputGroup\r\n                                    placeholder={currentColor}\r\n                                    value={color}\r\n                                    onChange={(e) => setColor(e.target.value)}\r\n                                />\r\n                                <Button\r\n                                    icon=\"style\"\r\n                                    onClick={() => {\r\n                                        changeNodeColor(color);\r\n                                        setColor('');\r\n                                    }}\r\n                                    disabled={color.match(/^#([0-9a-f]{3}){1,2}$/i) === null}\r\n                                ></Button>\r\n                            </ControlGroup>\r\n                        </div>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport Konva from 'konva';\r\nimport dagre from 'dagre';\r\nimport Node from './VisualizerNode';\r\nimport Line from './VisualizerLine';\r\nimport Menu from './VisualizerMenu';\r\n\r\nimport {\r\n    NodeProps,\r\n    LineProps,\r\n    TreeNode,\r\n    CanvasPropsAndRedux,\r\n    NodeInterface,\r\n    ProofState,\r\n    ReduxState,\r\n} from '../../../interfaces/interfaces';\r\n\r\nimport '../../../scss/VisualizerCanvas.scss';\r\n\r\nimport { CanvasProps, CanvasState } from '../../../interfaces/interfaces';\r\nimport { connect } from 'react-redux';\r\nimport { selectProof, selectVisualInfo } from '../../../store/features/proof/proofSlice';\r\nimport {\r\n    hideNodes,\r\n    unhideNodes,\r\n    foldAllDescendants,\r\n    applyView,\r\n    setVisualInfo,\r\n} from '../../../store/features/proof/proofSlice';\r\nimport {\r\n    selectFindData,\r\n    findNode,\r\n    selectRenderData,\r\n    reRender,\r\n    addRenderCount,\r\n    blockRenderNewFile,\r\n} from '../../../store/features/externalCmd/externalCmd';\r\n\r\nconst nodeWidth = 300,\r\n    nodeHeight = 130;\r\n\r\nfunction handleWheel(e: Konva.KonvaEventObject<WheelEvent>): { stageScale: number; stageX: number; stageY: number } {\r\n    e.evt.preventDefault();\r\n\r\n    const scaleBy = 1.08;\r\n    const stage = e.target.getStage();\r\n    if (stage) {\r\n        const oldScale = stage.scaleX();\r\n        const pointerPosition = stage.getPointerPosition();\r\n        let x, y;\r\n\r\n        if (pointerPosition) {\r\n            [x, y] = [pointerPosition.x, pointerPosition.y];\r\n        } else {\r\n            [x, y] = [0, 0];\r\n        }\r\n\r\n        const mousePointTo = {\r\n            x: x / oldScale - stage.x() / oldScale,\r\n            y: y / oldScale - stage.y() / oldScale,\r\n        };\r\n\r\n        const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\r\n\r\n        return {\r\n            stageScale: newScale,\r\n            stageX: -(mousePointTo.x - x / newScale) * newScale,\r\n            stageY: -(mousePointTo.y - y / newScale) * newScale,\r\n        };\r\n    }\r\n    return {\r\n        stageScale: 1,\r\n        stageX: 0,\r\n        stageY: 0,\r\n    };\r\n}\r\n\r\nclass Canvas extends Component<CanvasPropsAndRedux, CanvasState> {\r\n    constructor(props: CanvasPropsAndRedux) {\r\n        super(props);\r\n        this.componentDidUpdate = this.componentDidUpdate.bind(this);\r\n        this.setNodeOnFocus = this.setNodeOnFocus.bind(this);\r\n\r\n        this.state = {\r\n            canvasSize: {\r\n                width: 520,\r\n                height: 300,\r\n            },\r\n            stage: {\r\n                stageScale: 1,\r\n                stageX: 0,\r\n                stageY: 0,\r\n            },\r\n            showingNodes: {},\r\n            showingEdges: {},\r\n            nodeOnFocus: NaN,\r\n            nodesSelected: [],\r\n            proof: [],\r\n            visualInfo: {},\r\n        };\r\n    }\r\n\r\n    static copyNodePosition = (\r\n        visualInfo: ProofState['visualInfo'],\r\n        showingNodes: CanvasState['showingNodes'],\r\n    ): ProofState['visualInfo'] => {\r\n        // Get the current position of the nodes and create a proofState with them included\r\n        const newVisualInfo: ProofState['visualInfo'] = {};\r\n        Object.keys(visualInfo).forEach((id) => {\r\n            const key = Number(id);\r\n\r\n            if (showingNodes[key]) {\r\n                newVisualInfo[key] = {\r\n                    ...visualInfo[key],\r\n                    x: showingNodes[key].props.x,\r\n                    y: showingNodes[key].props.y,\r\n                };\r\n            } else {\r\n                newVisualInfo[key] = {\r\n                    ...visualInfo[key],\r\n                };\r\n            }\r\n        });\r\n        return newVisualInfo;\r\n    };\r\n\r\n    static newNodeProps = (node: NodeInterface, visualInfos: ProofState['visualInfo']): NodeProps => {\r\n        const visualInfo = visualInfos[node.id];\r\n        return {\r\n            id: node.id,\r\n            conclusion: node.conclusion,\r\n            rule: node.rule,\r\n            args: node.args,\r\n            x: visualInfo.x,\r\n            y: visualInfo.y,\r\n            nHided: node.hiddenNodes ? node.hiddenNodes.length : 0,\r\n            nDescendants: node.descendants - 1,\r\n            hiddenNodes: node.hiddenNodes ? node.hiddenNodes.map((node) => node.id) : [],\r\n            dependencies: node.dependencies ? node.dependencies : [],\r\n            selected: visualInfo.selected,\r\n            color: visualInfo.color,\r\n            setNodeOnFocus: () => undefined,\r\n            toggleNodeSelection: () => undefined,\r\n            updateNodePosition: () => undefined,\r\n            openDrawer: () => undefined,\r\n            onDragEnd: () => undefined,\r\n            createTree: () => {\r\n                return [];\r\n            },\r\n        };\r\n    };\r\n\r\n    static getDerivedStateFromProps(props: CanvasPropsAndRedux, current_state: CanvasState) {\r\n        const proofChanged = JSON.stringify(current_state.proof) !== JSON.stringify(props.proof);\r\n        const visualInfoChanged = JSON.stringify(current_state.visualInfo) !== JSON.stringify(props.visualInfo);\r\n        const { nodeToFind, findOption } = props.nodeFindData;\r\n        const { count, fileChanged } = props.renderData;\r\n        const stage = current_state.stage;\r\n\r\n        // If there is a node to be found\r\n        if (nodeToFind > -1) {\r\n            // Is valid node\r\n            if (nodeToFind <= props.proof[props.proof.length - 1].id) {\r\n                // Change the stage position\r\n                const { x, y } = props.visualInfo[nodeToFind];\r\n                stage.stageX = current_state.canvasSize.width / 2 - (x + nodeWidth / 2) * stage.stageScale;\r\n                stage.stageY = current_state.canvasSize.height / 2 - (y + nodeHeight / 2) * stage.stageScale;\r\n\r\n                // Select the finded node\r\n                if (findOption) {\r\n                    props.setVisualInfo({\r\n                        ...props.visualInfo,\r\n                        [nodeToFind]: { ...props.visualInfo[nodeToFind], selected: true },\r\n                    });\r\n                }\r\n            }\r\n            // Reset the node finder\r\n            props.findNode({ nodeId: -1, option: false });\r\n        }\r\n\r\n        // If the proof or visual info changed or we have a new file being uploaded\r\n        if (proofChanged || visualInfoChanged || fileChanged) {\r\n            // Create the showing nodes array\r\n            const showingNodes: CanvasState['showingNodes'] = {};\r\n            props.proof.forEach((node, id) => {\r\n                showingNodes[node.id] = <Node key={id} {...Canvas.newNodeProps(node, props.visualInfo)} />;\r\n            });\r\n\r\n            // If has nodes and can render\r\n            if (showingNodes[0] && count < 2) {\r\n                props.addRenderCount();\r\n\r\n                const g = new dagre.graphlib.Graph();\r\n                g.setGraph({ rankdir: 'BT', ranker: 'tight-tree' });\r\n                g.setDefaultEdgeLabel(function () {\r\n                    return {};\r\n                });\r\n                props.proof.forEach((node) => {\r\n                    g.setNode(node.id.toString(), {\r\n                        width: nodeWidth + (node.dependencies.length ? 95 : 0),\r\n                        height: nodeHeight,\r\n                    });\r\n                    node.children.forEach((child) => {\r\n                        g.setEdge(child.toString(), node.id.toString());\r\n                    });\r\n                });\r\n                dagre.layout(g);\r\n\r\n                const xOffset = g.node('0').x - (showingNodes[0].props.x ? showingNodes[0].props.x : 0);\r\n                const yOffset = g.node('0').y - (showingNodes[0].props.y ? showingNodes[0].props.y : 0);\r\n                g.nodes().forEach((v) => {\r\n                    try {\r\n                        const { x, y } = g.node(v);\r\n                        const key = parseInt(v);\r\n                        showingNodes[key] = (\r\n                            <Node\r\n                                {...{\r\n                                    ...showingNodes[key].props,\r\n                                    x: x - xOffset,\r\n                                    y: y - yOffset,\r\n                                }}\r\n                            />\r\n                        );\r\n                    } catch (e) {\r\n                        console.log(e);\r\n                    }\r\n                });\r\n\r\n                props.setVisualInfo(Canvas.copyNodePosition(props.visualInfo, showingNodes));\r\n            }\r\n            // Reset the new file indicator if it's true\r\n            if (fileChanged) props.blockRenderNewFile();\r\n\r\n            return {\r\n                showingNodes: showingNodes,\r\n                showingEdges: {},\r\n                proof: props.proof,\r\n                visualInfo: props.visualInfo,\r\n                stage: stage,\r\n            };\r\n        }\r\n        return { stage: stage };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        const { showingNodes } = this.state;\r\n        const { proof, visualInfo } = this.props;\r\n\r\n        const newShowingNodes: CanvasState['showingNodes'] = {};\r\n        proof.forEach((node, id) => {\r\n            newShowingNodes[node.id] = <Node key={id} {...Canvas.newNodeProps(node, visualInfo)} />;\r\n        });\r\n\r\n        this.setState({ proof: proof, showingNodes: newShowingNodes });\r\n\r\n        if (showingNodes[0]) {\r\n            const [width, height] = [window.innerWidth, window.innerHeight - 50];\r\n\r\n            // Make sure every time the Canvas is mounted the props are passed to the showing nodes\r\n            this.updateEdgesAndFuncs();\r\n\r\n            this.setState({\r\n                canvasSize: {\r\n                    width,\r\n                    height,\r\n                },\r\n                stage: {\r\n                    stageScale: 1,\r\n                    stageX: width / 2 - (showingNodes[0].props.x + 300 / 2),\r\n                    stageY: height / 10 - (showingNodes[0].props.y + 30 / 2),\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: CanvasPropsAndRedux) {\r\n        // If the proof changed\r\n        if (prevProps.proof !== this.props.proof) {\r\n            this.updateEdgesAndFuncs();\r\n        }\r\n    }\r\n\r\n    updateEdgesAndFuncs() {\r\n        const { showingNodes, showingEdges } = this.state;\r\n        const { proof } = this.props;\r\n\r\n        // Update edges\r\n        proof.forEach((node) => {\r\n            if (showingNodes[node.parents[0]]) {\r\n                node.parents.forEach((parent) => {\r\n                    showingEdges[`${node.id}->${parent}`] = Line(\r\n                        this.LineProps(\r\n                            `${node.id}->${parent}`,\r\n                            showingNodes[node.id].props,\r\n                            showingNodes[parent].props,\r\n                        ),\r\n                    );\r\n                });\r\n            }\r\n        });\r\n        Object.keys(showingNodes).forEach((nodeId: string) => {\r\n            // Make sure a function is updated once\r\n            if (!showingNodes[parseInt(nodeId)].props.setNodeOnFocus.length) {\r\n                const { openDrawer } = this.props;\r\n\r\n                // Set the node functions\r\n                showingNodes[parseInt(nodeId)] = (\r\n                    <Node\r\n                        {...{\r\n                            ...showingNodes[parseInt(nodeId)].props,\r\n                            setNodeOnFocus: this.setNodeOnFocus,\r\n                            toggleNodeSelection: this.toggleNodeSelection,\r\n                            updateNodePosition: this.updateNodePosition,\r\n                            openDrawer: openDrawer,\r\n                            onDragEnd: this.saveNodePosition,\r\n                            createTree: this.createTree,\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n        });\r\n        this.setState({ showingEdges, showingNodes });\r\n    }\r\n\r\n    /* NODE MENU ACTIONS */\r\n    foldAllDescendants = (): void => {\r\n        const { nodeOnFocus } = this.state;\r\n        const { foldAllDescendants, reRender } = this.props;\r\n\r\n        reRender();\r\n        foldAllDescendants(nodeOnFocus);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    foldSelectedNodes = (): void => {\r\n        const { nodesSelected } = this.state;\r\n        const { hideNodes, reRender } = this.props;\r\n\r\n        reRender();\r\n        hideNodes(nodesSelected);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    unfold = (): void => {\r\n        const { nodeOnFocus, proof } = this.state;\r\n        const { unhideNodes, reRender } = this.props;\r\n\r\n        // Get the pi node (to be unfold)\r\n        const obj = proof.find((node) => node.id === nodeOnFocus);\r\n        // Get the hidden nodes and their ids\r\n        const hiddenNodes = obj ? (obj.hiddenNodes ? obj.hiddenNodes : []) : [];\r\n        const hiddenIds = hiddenNodes ? hiddenNodes.map((node) => node.id) : [];\r\n\r\n        reRender();\r\n        unhideNodes({ pi: nodeOnFocus, hiddens: hiddenIds });\r\n\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    changeNodeColor = (color: string): void => {\r\n        const { showingNodes, nodesSelected, nodeOnFocus } = this.state;\r\n        const { setVisualInfo } = this.props;\r\n        let { visualInfo } = this.props;\r\n\r\n        // Save the current position\r\n        nodesSelected.forEach((nodeId) => {\r\n            visualInfo = {\r\n                ...visualInfo,\r\n                [nodeId]: {\r\n                    ...visualInfo[nodeId],\r\n                    color: color,\r\n                    selected: false,\r\n                },\r\n            };\r\n        });\r\n        if (!nodesSelected.length && showingNodes[nodeOnFocus]) {\r\n            visualInfo = {\r\n                ...visualInfo,\r\n                [nodeOnFocus]: { ...visualInfo[nodeOnFocus], color: color, selected: false },\r\n            };\r\n        }\r\n\r\n        setVisualInfo(visualInfo);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    toggleNodeSelection = (id: number): void => {\r\n        let { nodesSelected } = this.state;\r\n        const { visualInfo, setVisualInfo } = this.props;\r\n\r\n        if (visualInfo[id].selected) {\r\n            nodesSelected = nodesSelected.filter((nodeId) => nodeId !== id);\r\n        } else {\r\n            nodesSelected.push(id);\r\n        }\r\n\r\n        // Save the current position\r\n        setVisualInfo({\r\n            ...visualInfo,\r\n            [id]: {\r\n                ...visualInfo[id],\r\n                selected: !visualInfo[id].selected,\r\n            },\r\n        });\r\n\r\n        this.setState({ nodesSelected });\r\n    };\r\n\r\n    /*TREE*/\r\n    createTree = (id: number): TreeNode[] => {\r\n        return this.props.createTree(this.state.proof, id);\r\n    };\r\n\r\n    /* UTILS */\r\n    setNodeOnFocus = (id: number): void => {\r\n        this.setState({ nodeOnFocus: id });\r\n    };\r\n\r\n    LineProps = (key: string, from: NodeProps, to: NodeProps): LineProps => ({\r\n        key,\r\n        points: [from.x + 150, from.y, to.x + 150, to.y + 105],\r\n    });\r\n\r\n    saveNodePosition = (): void => {\r\n        const { visualInfo, setVisualInfo } = this.props;\r\n        const { showingNodes } = this.state;\r\n\r\n        // Get the current position of the nodes and create a proofState with them included\r\n        setVisualInfo(Canvas.copyNodePosition(visualInfo, showingNodes));\r\n    };\r\n\r\n    updateNodePosition = (key: number, x: number, y: number): void => {\r\n        const { showingNodes, showingEdges } = this.state;\r\n\r\n        showingNodes[key] = <Node {...{ ...showingNodes[key].props, x, y }} />;\r\n\r\n        Object.keys(showingEdges)\r\n            .filter((edgeKey) => edgeKey.indexOf(key.toString()) !== -1)\r\n            .forEach((edge) => {\r\n                const [from, to] = edge.split('->').map((x) => parseInt(x));\r\n                showingEdges[edge] = Line(this.LineProps(edge, showingNodes[from].props, showingNodes[to].props));\r\n            });\r\n        this.setState({ showingNodes, showingEdges });\r\n    };\r\n\r\n    render(): JSX.Element {\r\n        const { canvasSize, stage, showingNodes, showingEdges, nodesSelected, nodeOnFocus, proof } = this.state;\r\n        const color = showingNodes[nodeOnFocus] ? showingNodes[nodeOnFocus].props.color : '';\r\n        const found = proof.find((o) => o.id === nodeOnFocus);\r\n\r\n        return (\r\n            <div>\r\n                <Menu\r\n                    unfold={this.unfold}\r\n                    foldSelectedNodes={this.foldSelectedNodes}\r\n                    foldAllDescendants={this.foldAllDescendants}\r\n                    changeNodeColor={this.changeNodeColor}\r\n                    options={{\r\n                        unfold: showingNodes[nodeOnFocus] ? Boolean(showingNodes[nodeOnFocus].props.nHided) : false,\r\n                        foldSelected: nodesSelected.length && nodesSelected.includes(nodeOnFocus) ? true : false,\r\n                        foldAllDescendants:\r\n                            Boolean(found?.children.length) && !Boolean(found?.hiddenNodes?.length) && found?.id != 0,\r\n                    }}\r\n                    currentColor={color}\r\n                ></Menu>\r\n                <Stage\r\n                    draggable\r\n                    onDragMove={() => null}\r\n                    onDragEnd={() => null}\r\n                    width={canvasSize.width}\r\n                    height={canvasSize.height}\r\n                    onWheel={(e) => this.setState({ stage: handleWheel(e) })}\r\n                    scaleX={stage.stageScale}\r\n                    scaleY={stage.stageScale}\r\n                    x={stage.stageX}\r\n                    y={stage.stageY}\r\n                    onContextMenu={(e) => e.evt.preventDefault()}\r\n                >\r\n                    <Layer>\r\n                        {Object.keys(showingEdges).length > 0 &&\r\n                            Object.keys(showingEdges).map(function (key) {\r\n                                return showingEdges[key];\r\n                            })}\r\n                        {Object.keys(showingNodes).length > 0 &&\r\n                            Object.keys(showingNodes).map(\r\n                                (value: string): JSX.Element => showingNodes[parseInt(value)],\r\n                            )}\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState, ownProps: CanvasProps) {\r\n    return {\r\n        visualInfo: selectVisualInfo(state),\r\n        nodeFindData: selectFindData(state),\r\n        renderData: selectRenderData(state),\r\n        ...ownProps,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    hideNodes,\r\n    unhideNodes,\r\n    foldAllDescendants,\r\n    applyView,\r\n    setVisualInfo,\r\n    findNode,\r\n    reRender,\r\n    addRenderCount,\r\n    blockRenderNewFile,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Canvas);\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Classes, Tree, TreeNodeInfo } from '@blueprintjs/core';\r\nimport { TreeProps } from '../../interfaces/interfaces';\r\nimport { castProofNodeToTreeNode } from '../VisualizerStage/VisualizerStage';\r\n\r\nconst VisualizerTree: React.FC<TreeProps> = ({ darkTheme, proof, positionMap, content, setNodeInfo }: TreeProps) => {\r\n    // STATES:\r\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\r\n    const [nodes, setNodes] = useState(content);\r\n    const [selected, setSelected] = useState(NaN);\r\n\r\n    // USE EFFECT:\r\n    useEffect(() => setNodes(content), [content]);\r\n\r\n    // UTILS:\r\n    const forEachNode = (nodes: TreeNodeInfo[], callback: (node: TreeNodeInfo) => void) => {\r\n        if (nodes == null) {\r\n            return;\r\n        }\r\n\r\n        for (const node of nodes) {\r\n            callback(node);\r\n            forEachNode(node.childNodes ? node.childNodes : [], callback);\r\n        }\r\n    };\r\n\r\n    const handleNodeClick = (nodeData: any, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\r\n        const toBeShow: any = selected !== nodeData.id ? nodeData : nodes[0];\r\n        setNodeInfo({\r\n            rule: toBeShow.rule ? toBeShow.rule : '',\r\n            args: toBeShow.args ? toBeShow.args : '',\r\n            conclusion: toBeShow.conclusion ? toBeShow.conclusion : '',\r\n            nHided: toBeShow.nHided ? toBeShow.nHided : 0,\r\n            nDescendants: toBeShow.descendants,\r\n            hiddenNodes: toBeShow.hiddenNodes,\r\n            dependencies: toBeShow.dependencies,\r\n        });\r\n        const originallySelected = nodeData.isSelected;\r\n\r\n        // Set all the nodes to be not selected\r\n        if (!e.shiftKey) forEachNode(nodes, (n) => (n.isSelected = false));\r\n\r\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\r\n        setSelected(selected === nodeData.id ? NaN : nodeData.id);\r\n    };\r\n\r\n    const handleNodeCollapse = (nodeData: TreeNodeInfo) => {\r\n        nodeData.isExpanded = false;\r\n        forceUpdate();\r\n    };\r\n\r\n    const handleNodeExpand = (nodeData: TreeNodeInfo) => {\r\n        nodeData.isExpanded = true;\r\n        if (nodeData.hasCaret && !nodeData.childNodes?.length) {\r\n            const currentNode = proof[positionMap[nodeData.id]];\r\n            currentNode.children.forEach((c) => {\r\n                const child = proof[positionMap[c]];\r\n                nodeData.childNodes?.push(castProofNodeToTreeNode(child));\r\n            });\r\n        }\r\n        forceUpdate();\r\n    };\r\n\r\n    return (\r\n        <div style={{ backgroundColor: darkTheme ? '#394b59' : 'white' }}>\r\n            <Tree\r\n                contents={nodes}\r\n                onNodeClick={handleNodeClick}\r\n                onNodeCollapse={handleNodeCollapse}\r\n                onNodeExpand={handleNodeExpand}\r\n                className={Classes.ELEVATION_0}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerTree;\r\n","interface Line {\r\n    value: string;\r\n    indentLevel: number;\r\n}\r\n\r\nclass Let {\r\n    name: string;\r\n    value: string;\r\n    lines: Line[];\r\n    biggerID: number;\r\n    isExpanded: boolean;\r\n    externalLets: { [key: string]: { let: Let; idx: number[] } };\r\n\r\n    constructor(name: string, letText: string, letsList: { [key: string]: Let }, indices: { [key: number]: string }) {\r\n        this.name = name;\r\n        this.value = letText;\r\n        this.lines = [{ value: letText, indentLevel: 0 }];\r\n        this.biggerID = 0;\r\n        this.isExpanded = false;\r\n\r\n        this.externalLets = {};\r\n        Object.keys(indices).forEach((key) => {\r\n            const numKey = Number(key);\r\n            const letName = indices[numKey];\r\n            this.externalLets[letName] = {\r\n                let: letsList[letName],\r\n                idx: this.externalLets[letName] ? [...this.externalLets[letName].idx, numKey] : [numKey],\r\n            };\r\n        });\r\n    }\r\n\r\n    getTextWidth = (text: string, font: string): number => {\r\n        const canvas = document.createElement('canvas');\r\n        const context = canvas.getContext('2d');\r\n        let size = 0;\r\n        if (context) {\r\n            context.font = font;\r\n            size = context.measureText(text).width;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    expandValue = (shouldUpdate = false): string => {\r\n        const keyList = Object.keys(this.externalLets).map((key) => this.externalLets[key].let.name);\r\n        let letText = this.value;\r\n\r\n        // Iterate from the last to the first external let\r\n        for (let i = keyList.length - 1; i >= 0; i--) {\r\n            const letName = keyList[i];\r\n\r\n            // For each let, iterate through all the indexes they show up inside the string\r\n            for (let k = this.externalLets[letName].idx.length - 1; k >= 0; k--) {\r\n                const idx = this.externalLets[letName].idx[k];\r\n\r\n                // Expand all the terms\r\n                letText =\r\n                    letText.substring(0, idx) +\r\n                    this.externalLets[letName].let.expandValue() +\r\n                    letText.substring(idx + letName.length, letText.length);\r\n            }\r\n        }\r\n        if (shouldUpdate) {\r\n            this.lines = [{ value: letText, indentLevel: 0 }];\r\n            this.biggerID = 0;\r\n        }\r\n        return letText;\r\n    };\r\n\r\n    expandPartialy = (externalRef: Let, letIdx: number): string => {\r\n        const key = externalRef.name;\r\n        const indentedText = this.printLines();\r\n\r\n        let lastLine = 0,\r\n            count = 0,\r\n            i;\r\n        // Iterates through the first lines until the point we reach the changed line\r\n        for (i = 0; i < this.lines.length; i++) {\r\n            lastLine = this.lines[i].value.length + 4 * this.lines[i].indentLevel + 1;\r\n            count += lastLine;\r\n            if (letIdx < count) break;\r\n        }\r\n        // New index (points to the start of the line content (ignores initial indent white space))\r\n        const newIdx = letIdx - (count - lastLine + 4 * this.lines[i].indentLevel);\r\n\r\n        // Update the new line to the new content\r\n        this.lines[i].value =\r\n            this.lines[i].value.substring(0, newIdx) +\r\n            externalRef.value +\r\n            this.lines[i].value.substring(newIdx + key.length, this.lines[i].value.length);\r\n\r\n        // Returns the indented text with the content to be replaced\r\n        return (\r\n            indentedText.substring(0, letIdx) +\r\n            externalRef.value +\r\n            indentedText.substring(letIdx + key.length, indentedText.length)\r\n        );\r\n    };\r\n\r\n    shrinkValue = (): string => {\r\n        this.lines = [{ value: this.value, indentLevel: 0 }];\r\n        this.biggerID = 0;\r\n        return this.value;\r\n    };\r\n\r\n    fitsTheWindow = (windowSize: number, font: string): boolean => {\r\n        const line = this.lines[this.biggerID];\r\n        const size = this.getTextWidth(`${'    '.repeat(line.indentLevel)}${line.value}`, font);\r\n        return size < windowSize;\r\n    };\r\n\r\n    indent = (windowSize: number, mode: boolean, font: string): string => {\r\n        let someDoesntFit;\r\n        if (mode) someDoesntFit = true;\r\n        else someDoesntFit = this.getTextWidth(this.lines[this.biggerID].value, font) < windowSize ? false : true;\r\n\r\n        // While there are lines that doesn't fit the window size\r\n        while (someDoesntFit) {\r\n            const { lines, biggerID } = this;\r\n            const newLines: Line[] = [];\r\n            const thisLevel = lines[biggerID].indentLevel;\r\n            const thisLine = lines[biggerID].value;\r\n\r\n            let lastSpace = -1,\r\n                lastUsedSpace = -1,\r\n                lastOpenParenthesis = -1,\r\n                indent = lines[biggerID].indentLevel - 1,\r\n                biggestSize = 0,\r\n                newBiggerID = 0;\r\n\r\n            // Iterate through the line and calculate the indentation levels\r\n            for (let i = 0; i < thisLine.length; i++) {\r\n                const c = thisLine[i];\r\n                // Opening parenthesis\r\n                if (c === '(') {\r\n                    indent++;\r\n                    // If it's one of the arguments of the operation\r\n                    if (indent === thisLevel + 1) lastOpenParenthesis = i;\r\n                }\r\n                // Closing parenthesis\r\n                else if (c === ')') {\r\n                    // If it's the end of this line\r\n                    if (indent === thisLevel) {\r\n                        // If the last argument was not inserted\r\n                        if (thisLine[i - 1] !== ')') {\r\n                            newLines.push({\r\n                                value: thisLine.substring(lastSpace + 1, i),\r\n                                indentLevel: indent + 1,\r\n                            });\r\n                        }\r\n                        newLines.push({ value: ')', indentLevel: indent });\r\n                    }\r\n                    // If it's the end of this argument\r\n                    else if (indent === thisLevel + 1) {\r\n                        newLines.push({\r\n                            value: thisLine.substring(lastOpenParenthesis, i + 1),\r\n                            indentLevel: indent,\r\n                        });\r\n                    }\r\n                    indent--;\r\n                }\r\n                // If a new space is detected in the current identation level\r\n                //   and the last argument is not between parenthesis\r\n                else if (c === ' ') {\r\n                    lastSpace = i;\r\n\r\n                    if (indent === thisLevel) {\r\n                        if (thisLine[i - 1] !== ')') {\r\n                            newLines.push({\r\n                                value: thisLine.substring(lastUsedSpace + 1, i),\r\n                                indentLevel: newLines.length ? indent + 1 : indent,\r\n                            });\r\n                        }\r\n                        lastUsedSpace = i;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Insert new lines if happend some indentation\r\n            if (newLines.length > 0) this.lines.splice(biggerID, 1, ...newLines);\r\n\r\n            // Find the new biggest line\r\n            this.lines.forEach((line, id) => {\r\n                // Get the size of this new line\r\n                const thisSize = this.getTextWidth(`${'    '.repeat(line.indentLevel)}${line.value}`, font);\r\n                if (thisSize > biggestSize) {\r\n                    biggestSize = thisSize;\r\n                    newBiggerID = id;\r\n                }\r\n            });\r\n\r\n            this.biggerID = newBiggerID;\r\n\r\n            // If the biggest size fits the window or no new line was found (minimal indentation)\r\n            if (biggestSize < windowSize || newLines.length < 1) someDoesntFit = false;\r\n        }\r\n        return this.printLines();\r\n    };\r\n\r\n    groupUp = (): string => {\r\n        let original = '';\r\n        // Group up all the lines into one single string\r\n        this.lines.forEach((line, id, self) => {\r\n            original += line.value;\r\n            if (id < self.length - 1 && self[id + 1].value !== ')') {\r\n                original += ' ';\r\n            }\r\n        });\r\n        return original;\r\n    };\r\n\r\n    printLines = (): string => {\r\n        return this.lines.reduce((ac, line) => (ac += `${'    '.repeat(line.indentLevel)}${line.value}\\n`), '');\r\n    };\r\n}\r\n\r\nexport default Let;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { LetRenderProps } from '../../interfaces/interfaces';\r\nimport { renderLetKind } from '../../interfaces/enum';\r\nimport Let from './let';\r\nimport { Pre } from '@blueprintjs/core';\r\n\r\nconst font = '13px monospace';\r\n\r\nconst LetRender: React.FC<LetRenderProps> = ({\r\n    id,\r\n    toRender,\r\n    letMap,\r\n    shouldExpand,\r\n    shouldRevert,\r\n    dispatchExpansion,\r\n}: LetRenderProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const widthRef = useRef(0);\r\n    const [resizeMode, setResizeMode] = useState(0);\r\n    const [letMapS, setLetMapS] = useState(\r\n        (() => {\r\n            const newMap = { ...letMap };\r\n            if (toRender[0] !== '(' && toRender[toRender.length] !== ')') {\r\n                toRender = `(${toRender})`;\r\n            }\r\n            newMap['this'] = toRender;\r\n            return newMap;\r\n        })(),\r\n    );\r\n\r\n    const initializeLet = (key = 'this', lets: { [key: string]: Let } = {}) => {\r\n        const currentLet = letMapS[key];\r\n        const indices: { [key: number]: string } = {};\r\n\r\n        // Finds all occurences of let in the currentLet\r\n        [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n            if (match.index) indices[match.index] = match[0];\r\n        });\r\n\r\n        // Call recursive for all the external lets\r\n        Object.keys(indices).forEach((indice) => {\r\n            initializeLet(indices[Number(indice)], lets);\r\n        });\r\n\r\n        // If this let was not created yet\r\n        if (Object.keys(lets).indexOf(key) === -1) {\r\n            lets[key] = new Let(key, currentLet, lets, indices);\r\n        }\r\n\r\n        return lets;\r\n    };\r\n    const letsRef = useRef<{ [key: string]: Let }>(initializeLet());\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Handler to call on window resize and set the value column width\r\n        function handleResize() {\r\n            const width = widthRef.current;\r\n\r\n            const newWidth = document.getElementsByClassName(`let-render-${id}`)[0].clientWidth - 30;\r\n            width === newWidth ? setResizeMode(1) : width > newWidth ? setResizeMode(0) : setResizeMode(2);\r\n\r\n            widthRef.current = newWidth;\r\n        }\r\n\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Expand\r\n        if (shouldExpand) {\r\n            expandAll('this');\r\n            dispatchExpansion({ type: renderLetKind.EXPAND, payload: false });\r\n        }\r\n        // Revert\r\n        else if (shouldRevert) {\r\n            revertLet('this');\r\n            dispatchExpansion({ type: renderLetKind.REVERT, payload: false });\r\n        }\r\n    }, [shouldExpand, shouldRevert]);\r\n\r\n    const expandLet = (parent: string, key: string, letIdx: number) => {\r\n        const lets = letsRef.current;\r\n\r\n        const externalRef = lets[key];\r\n        lets[parent].isExpanded = true;\r\n        letMapS[parent] = lets[parent].expandPartialy(externalRef, letIdx);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const expandAll = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        lets[key].isExpanded = true;\r\n        letMapS[key] = lets[key].expandValue(true);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const revertLet = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        // Only when is expanded\r\n        if (lets[key].isExpanded) {\r\n            lets[key].isExpanded = false;\r\n            letMapS[key] = lets[key].shrinkValue();\r\n            setLetMapS({ ...letMapS });\r\n        }\r\n    };\r\n\r\n    const renderLet = (): JSX.Element => {\r\n        const lets = letsRef.current;\r\n        const width = widthRef.current;\r\n        const key = 'this';\r\n\r\n        // Waits for the width to be updated and the DOM element to be updated\r\n        if (width) {\r\n            let currentLet = letMapS[key];\r\n            let indices: { [key: number]: string } = {};\r\n\r\n            // Finds all occurences of let in the currentLet\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index !== undefined) indices[match.index] = match[0];\r\n            });\r\n\r\n            // If doesn't fits, then indent\r\n            if (!lets[key].fitsTheWindow(width, font)) {\r\n                currentLet = lets[key].indent(width, true, font);\r\n                letMapS[key] = currentLet;\r\n\r\n                indices = {};\r\n                // Finds all occurences of let in the currentLet after indentation\r\n                [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                    if (match.index) indices[match.index] = match[0];\r\n                });\r\n            }\r\n            // If fits\r\n            else {\r\n                // Only in the momment the page size is growing and the line is broken\r\n                if (resizeMode >= 0 && lets[key].lines.length > 1) {\r\n                    // Reset the line\r\n                    lets[key].lines = [\r\n                        { value: lets[key].isExpanded ? lets[key].groupUp() : lets[key].value, indentLevel: 0 },\r\n                    ];\r\n                    lets[key].biggerID = 0;\r\n\r\n                    // Indent it again\r\n                    currentLet = lets[key].indent(width, false, font);\r\n                    letMapS[key] = currentLet;\r\n\r\n                    indices = {};\r\n                    // Finds all occurences of let in the currentLet after indentation\r\n                    [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                        if (match.index) indices[match.index] = match[0];\r\n                    });\r\n                }\r\n            }\r\n\r\n            const arr: (JSX.Element | string)[] = [];\r\n            let start = 0;\r\n\r\n            // Slice the currentLet into an array with strings and JSX elements\r\n            Object.keys(indices).forEach((index, i, self) => {\r\n                const idx = Number(index);\r\n                const thisLet = indices[idx];\r\n\r\n                // Add the elements to the arr\r\n                arr.push(currentLet.substring(start, idx));\r\n                arr.push(\r\n                    <a\r\n                        className={darkTheme ? 'let-literal-or' : 'let-literal'}\r\n                        onClick={() => {\r\n                            expandLet(key, thisLet, idx);\r\n                        }}\r\n                    >\r\n                        {thisLet}\r\n                    </a>,\r\n                );\r\n                // Defines a new start\r\n                start = idx + thisLet.length;\r\n\r\n                // If it's the last let\r\n                if (i === self.length - 1) {\r\n                    arr.push(currentLet.substring(start, currentLet.length));\r\n                }\r\n            });\r\n\r\n            // If there is a let in this current let\r\n            if (Object.keys(indices).length) {\r\n                return (\r\n                    <span className=\"let-instance\" style={{ overflowWrap: 'break-word' }}>\r\n                        {arr}\r\n                    </span>\r\n                );\r\n            } else {\r\n                return (\r\n                    <span className=\"let-instance\" style={{ overflowWrap: 'break-word' }}>\r\n                        {currentLet}\r\n                    </span>\r\n                );\r\n            }\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    return (\r\n        <Pre\r\n            className={`let-render-${id}`}\r\n            style={{ maxHeight: '300px', overflow: 'auto', margin: '0', whiteSpace: 'pre-wrap' }}\r\n        >\r\n            {renderLet()}\r\n        </Pre>\r\n    );\r\n};\r\n\r\nexport default LetRender;\r\n","import React, { useState, useReducer, useEffect } from 'react';\r\n\r\nimport { Icon, Collapse, Pre } from '@blueprintjs/core';\r\n\r\nimport '../../../scss/VisualizerDirectoryStyle.scss';\r\nimport { useAppSelector } from '../../../store/hooks';\r\nimport { selectTheme } from '../../../store/features/theme/themeSlice';\r\nimport { NodeInfo, DirectoryStyleProps } from '../../../interfaces/interfaces';\r\nimport { drawerHelpersKind, renderLetKind } from '../../../interfaces/enum';\r\nimport VisualizerTree from '../../VisualizerTree/VisualizerTree';\r\nimport { selectLetMap, selectOriginalProof } from '../../../store/features/proof/proofSlice';\r\nimport LetRender from '../../VisualizerLetDrawer/LetRender';\r\n\r\nconst VisualizerDirectoryStyle: React.FC<DirectoryStyleProps> = ({\r\n    proofTree,\r\n    ruleHelper,\r\n    indent,\r\n    translate,\r\n}: DirectoryStyleProps) => {\r\n    const letMap = useAppSelector(selectLetMap);\r\n    const proof = useAppSelector(selectOriginalProof);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const [nodeInfo, setNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n    const [[ruleHelperIsOpen, argsHelperIsOpen, concHelperIsOpen], dispatchHelper] = useReducer(\r\n        (state: boolean[], action: { type: drawerHelpersKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            // Act over all the positions\r\n            if (type === drawerHelpersKind.ALL) {\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = payload;\r\n                }\r\n            }\r\n            // If wanna set a position\r\n            else if (payload) {\r\n                // Reset everything and set the wanted\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = i === type ? payload : false;\r\n                }\r\n            }\r\n            // If wanna only reset a position\r\n            else state[type] = payload;\r\n\r\n            return [...state];\r\n        },\r\n        // Rule, args, conclusion\r\n        [false, false, false],\r\n    );\r\n    const [[expandAll, revertAll], dispatchLetExpansion] = useReducer(\r\n        (state: boolean[], action: { type: renderLetKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            for (let i = 0; i < state.length; i++) {\r\n                state[i] = i === type ? payload : false;\r\n            }\r\n\r\n            return [...state];\r\n        },\r\n        // Expand, revert\r\n        [false, false],\r\n    );\r\n    const [positionMap, setMap] = useState<any>({});\r\n    const [renderID, increaseRenderID] = useReducer((x) => x + 1, 0);\r\n\r\n    useEffect(() => {\r\n        const _map: any = {};\r\n        // Map the { [node id]: list array id }\r\n        proof.forEach((n, id) => (_map[n.id] = id));\r\n        setMap(_map);\r\n    }, [proof]);\r\n\r\n    useEffect(() => {\r\n        increaseRenderID();\r\n    }, [nodeInfo]);\r\n\r\n    const nodeInfoTable = () => {\r\n        return (\r\n            <table\r\n                id=\"table-node-info\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Property</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <strong>RULE </strong>\r\n                            <Icon\r\n                                id=\"icon\"\r\n                                icon=\"help\"\r\n                                onClick={() => {\r\n                                    dispatchHelper({ type: drawerHelpersKind.RULE, payload: !ruleHelperIsOpen });\r\n                                }}\r\n                            ></Icon>\r\n                        </td>\r\n                        <td>\r\n                            {nodeInfo.rule}\r\n                            <Collapse isOpen={ruleHelperIsOpen}>\r\n                                <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                    {ruleHelper(nodeInfo.rule)}\r\n                                </Pre>\r\n                            </Collapse>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.args && (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>ARGS</strong>{' '}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.ARGS,\r\n                                                payload: !argsHelperIsOpen,\r\n                                            });\r\n                                        }}\r\n                                    ></Icon>\r\n                                ) : null}\r\n                            </td>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                {nodeInfo.args}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Collapse isOpen={argsHelperIsOpen}>\r\n                                        <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                            {indent(translate(nodeInfo.args))}\r\n                                        </Pre>\r\n                                    </Collapse>\r\n                                ) : null}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n\r\n                    <tr>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            <strong>CONCLUSION</strong>{' '}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <>\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.CONC,\r\n                                                payload: !concHelperIsOpen,\r\n                                            });\r\n                                            dispatchLetExpansion({\r\n                                                type: renderLetKind.EXPAND,\r\n                                                payload: true,\r\n                                            });\r\n                                        }}\r\n                                    />\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"undo\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.CONC,\r\n                                                payload: false,\r\n                                            });\r\n                                            dispatchLetExpansion({\r\n                                                type: renderLetKind.REVERT,\r\n                                                payload: true,\r\n                                            });\r\n                                        }}\r\n                                    />\r\n                                </>\r\n                            ) : null}\r\n                        </td>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <LetRender\r\n                                    key={renderID}\r\n                                    id={0}\r\n                                    toRender={nodeInfo.conclusion}\r\n                                    letMap={letMap}\r\n                                    shouldExpand={expandAll}\r\n                                    shouldRevert={revertAll}\r\n                                    dispatchExpansion={dispatchLetExpansion}\r\n                                />\r\n                            ) : (\r\n                                nodeInfo.conclusion\r\n                            )}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.nDescendants ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#DESCENDANTS</strong>\r\n                            </td>\r\n                            <td>{nodeInfo.nDescendants}</td>\r\n                        </tr>\r\n                    ) : null}\r\n\r\n                    {nodeInfo.nHided ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#HIDDEN</strong>\r\n                            </td>\r\n                            <td>{`[${nodeInfo.hiddenNodes.map((node) => ' ' + node)} ]`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                    {nodeInfo.dependencies.length ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>DEPENDENCIES</strong>\r\n                            </td>\r\n                            <td>{`${nodeInfo.dependencies.map(\r\n                                (dependency) => ` ${dependency.piId}: [${dependency.depsId.map((dep) => ' ' + dep)} ] `,\r\n                            )}`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"dir-style\"\r\n            style={{\r\n                backgroundColor: darkTheme ? 'rgb(57, 75, 89)' : 'white',\r\n                height:\r\n                    window.innerHeight - (document.getElementsByClassName('bp3-navbar')[0] as HTMLElement).offsetHeight,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    width: '50%',\r\n                    height: '100%',\r\n                    float: 'left',\r\n                    clear: 'none',\r\n                    borderRight: '1px solid black',\r\n                    overflow: 'auto',\r\n                }}\r\n            >\r\n                <VisualizerTree\r\n                    darkTheme={darkTheme}\r\n                    proof={proof}\r\n                    positionMap={positionMap}\r\n                    content={proofTree}\r\n                    setNodeInfo={setNodeInfo}\r\n                ></VisualizerTree>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    width: '50%',\r\n                    height: '100%',\r\n                    float: 'left',\r\n                    clear: 'none',\r\n                }}\r\n            >\r\n                {nodeInfoTable()}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerDirectoryStyle;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Drawer, Position, Classes, Icon, Collapse, Pre, TreeNodeInfo } from '@blueprintjs/core';\r\nimport Canvas from './Canvas/VisualizerCanvas';\r\nimport VisualizerTree from '../VisualizerTree/VisualizerTree';\r\nimport VisualizerDirectoryStyle from './VisualizerDirectoryStyle/VisualizerDirectoryStyle';\r\n\r\nimport '../../scss/VisualizerStage.scss';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectFileCount } from '../../store/features/file/fileSlice';\r\nimport { selectStyle, selectLetMap, selectProof } from '../../store/features/proof/proofSlice';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { NodeInfo, NodeInterface, TreeNode } from '../../interfaces/interfaces';\r\nimport { renderLetKind, drawerHelpersKind } from '../../interfaces/enum';\r\nimport LetRender from '../VisualizerLetDrawer/LetRender';\r\n\r\nfunction ruleHelper(rule: string) {\r\n    switch (rule.split(' ')[0]) {\r\n        case 'π':\r\n            return 'This node hides some parts of the proof, you can unfold it.';\r\n        case 'ASSUME':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Assumption (a leaf)\\nChildren: none\\nArguments: (F)\\n--------------\\nConclusion: F\\n\\nThis rule has special status, in that an application of assume is an open leaf in a proof that is not (yet) justified. An assume leaf is analogous to a free variable in a term, where we say \"F is a free assumption in proof P\" if it contains an application of F that is not  bound by SCOPE.'\r\n            );\r\n        case 'SCOPE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Scope (a binder for assumptions)\\nChildren: (P:F)\\nArguments: (F1, ..., Fn)\\n--------------\\nConclusion: (=> (and F1 ... Fn) F) or (not (and F1 ... Fn)) if F is false\\n\\nThis rule has a dual purpose with ASSUME. It is a way to close assumptions in a proof. We require that F1 ... Fn are free assumptions in P and say that F1, ..., Fn are not free in (SCOPE P). In other words, they are bound by this application. For example, the proof node: (SCOPE (ASSUME F) :args F) has the conclusion (=> F F) and has no free assumptions. More generally, a proof with no free assumptions always concludes a valid formula.'\r\n            );\r\n        case 'SUBS':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Substitution\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids)?)\\n---------------------------------------------------------------\\nConclusion: (= t t*sigma{ids}(Fn)*...*sigma{ids}(F1))\\nwhere sigma{ids}(Fi) are substitutions, which notice are applied in reverse order. Notice that ids is a MethodId identifier, which determines how to convert the formulas F1, ..., Fn into substitutions.'\r\n            );\r\n        case 'REWRITE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Rewrite\\nChildren: none\\nArguments: (t, (idr)?)\\n----------------------------------------\\nConclusion: (= t Rewriter{idr}(t))\\nwhere idr is a MethodId identifier, which determines the kind of rewriter to apply, e.g. Rewriter::rewrite.'\r\n            );\r\n        case 'EVALUATE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Evaluate\\nChildren: none\\n\\nArguments: (t)\\n----------------------------------------\\nConclusion: (= t Evaluator::evaluate(t))\\nNote this is equivalent to: (REWRITE t MethodId::RW_EVALUATE)'\r\n            );\r\n        case 'MACRO_SR_EQ_INTRO':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, we provide a term t and conclude that it is equal to its rewritten form under a (proven) substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: (= t t')\\nwhere t' is Rewriter{idr}(t*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nIn other words, from the point of view of Skolem forms, this rule transforms t to t' by standard substitution + rewriting.\\n\\nThe arguments ids, ida and idr are optional and specify the identifier of the substitution, the substitution application and rewriter respectively to be used.\"\r\n            );\r\n        case 'MACRO_SR_PRED_INTRO':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, we provide a formula F and conclude it, under the condition that it rewrites to true under a proven substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (F, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == true where ids and idr are method identifiers.\\n\\nMore generally, this rule also holds when: Rewriter::rewrite(toOriginal(F')) == true where F' is the result of the left hand side of the equality above. Here, notice that we apply rewriting on the original form of F', meaning that this rule may conclude an F whose Skolem form is justified by the definition of its (fresh) Skolem variables. For example, this rule may justify the conclusion (= k t) where k is the purification Skolem for t, e.g. where the original form of k is t.\\n\\nFurthermore, notice that the rewriting and substitution is applied only within the side condition, meaning the rewritten form of the original form of F does not escape this rule.\"\r\n            );\r\n        case 'MACRO_SR_PRED_ELIM':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may conclude its rewritten form under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: ((ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: F'\\nwhere F' is Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)). where ids and idr are method identifiers.\\n\\nWe rewrite only on the Skolem form of F, similar to MACRO_SR_EQ_INTRO.\"\r\n            );\r\n        case 'MACRO_SR_PRED_TRANSFORM':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may provide a formula G and conclude it if F and G are equivalent after rewriting under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: (G, (ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: G\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == Rewriter{idr}(G*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nMore generally, this rule also holds when:\\n  Rewriter::rewrite(toOriginal(F')) == Rewriter::rewrite(toOriginal(G'))\\nwhere F' and G' are the result of each side of the equation above. Here, original forms are used in a similar manner to MACRO_SR_PRED_INTRO above.\"\r\n            );\r\n        case 'REMOVE_TERM_FORMULA_AXIOM':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Remove Term Formulas Axiom\\nChildren: none\\nArguments: (t)\\n---------------------------------------------------------------\\nConclusion: RemoveTermFormulas::getAxiomFor(t).'\r\n            );\r\n        case 'THEORY_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Theory lemma\\nChildren: none\\nArguments: (F, tid)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a (T-valid) theory lemma generated by theory with TheoryId tid. This is a \"coarse-grained\" rule that is used as a placeholder if a theory did not provide a proof for a lemma or conflict.'\r\n            );\r\n        case 'THEORY_REWRITE':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== Theory Rewrite\\nChildren: none\\nArguments: (F, tid, rid)\\n----------------------------------------\\nConclusion: F\\nwhere F is an equality of the form (= t t') where t' is obtained by applying the kind of rewriting given by the method identifier rid, which is one of: { RW_REWRITE_THEORY_PRE, RW_REWRITE_THEORY_POST, RW_REWRITE_EQ_EXT } Notice that the checker for this rule does not replay the rewrite to ensure correctness, since theory rewriter methods are not static. For example, the quantifiers rewriter involves constructing new bound variables that are not guaranteed to be consistent on each call.\"\r\n            );\r\n        case 'PREPROCESS':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on some preprocessing pass, or otherwise F was added as a new assertion by some preprocessing pass.\"\r\n            );\r\n        case 'PREPROCESS_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by some preprocessing pass.'\r\n            );\r\n        case 'THEORY_PREPROCESS':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = Theory::ppRewrite(t) for some theory. Notice this is a \"trusted\" rule.'\r\n            );\r\n        case 'THEORY_PREPROCESS_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by theory preprocessing.'\r\n            );\r\n        case 'THEORY_EXPAND_DEF':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on theory expand definitions.\"\r\n            );\r\n        case 'WITNESS_AXIOM':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an existential (exists ((x T)) (P x)) used for introducing a witness term (witness ((x T)) (P x)).'\r\n            );\r\n        case 'TRUST_REWRITE':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of rewriting that could not be replayed during proof postprocessing.\"\r\n            );\r\n        case 'TRUST_SUBS':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be replayed during proof postprocessing.\"\r\n            );\r\n        case 'TRUST_SUBS_MAP':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be determined by the TrustSubstitutionMap. This inference may contain possibly multiple children corresponding to the formulas used to derive the substitution.\"\r\n            );\r\n        case 'TRUST_SUBS_EQ':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a solved equality of the form (= x t) derived as the solved form of F', where F' is given as a child.\"\r\n            );\r\n        case 'SAT_REFUTATION':\r\n            return (\r\n                rule +\r\n                '\\n\\n========= SAT Refutation for assumption-based unsat cores\\nChildren: (P1, ..., Pn)\\nArguments: none\\n---------------------\\nConclusion: false\\nNote: P1, ..., Pn correspond to the unsat core determined by the SAT solver.'\r\n            );\r\n        case 'RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== Resolution\\nChildren:\\n(P1:C1, P2:C2)\\nArguments: (pol, L)\\n---------------------\\nConclusion: C\\nwhere\\n- C1 and C2 are nodes viewed as clauses, i.e., either an OR node with each children viewed as a literal or a node viewed as a literal. Note that an OR node could also be a literal.\\n- pol is either true or false, representing the polarity of the pivot on the first clause\\n- L is the pivot of the resolution, which occurs as is (resp. under a NOT) in C1 and negatively (as is) in C2 if pol = true (pol = false).\\nC is a clause resulting from collecting all the literals in C1, minus the first occurrence of the pivot or its negation, and C2, minus the first occurrence of the pivot or its negation, according to the policy above. If the resulting clause has a single literal, that literal itself is the result; if it has no literals, then the result is false; otherwise it's an OR node of the resulting literals.\\n\\nNote that it may be the case that the pivot does not occur in the clauses. In this case the rule is not unsound, but it does not correspond to resolution but rather to a weakening of the clause that did not have a literal eliminated.\"\r\n            );\r\n        case 'CHAIN_RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== N-ary Resolution\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined above\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined above\\n- let C_1' = C_1 (from P1),\\n- for each i > 1, let C_i' = C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C = C_n'\"\r\n            );\r\n        case 'FACTORING':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Factoring\\nChildren: (P:C1)\\nArguments: ()\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 is the same and the number of literals in C2 is smaller than that of C1'\r\n            );\r\n        case 'REORDERING':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Reordering\\nChildren: (P:C1)\\nArguments: (C2)\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 are the same and the number of literals in C2 is the same of that of C1'\r\n            );\r\n        case 'MACRO_RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\r\n            );\r\n        case 'MACRO_RESOLUTION_TRUST':\r\n            return (\r\n                rule +\r\n                \"\\n\\nAs MACRO_RESOLUTION but not checked\\n\\nMACRO_RESOLUTION definition:\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\r\n            );\r\n        default:\r\n            return rule;\r\n    }\r\n}\r\n\r\nexport function castProofNodeToTreeNode(node: NodeInterface): TreeNode {\r\n    const label = node.hiddenNodes?.length\r\n        ? // Pi node\r\n          `${node.id} : π ➜ ${node.conclusion}`\r\n        : node.dependencies.length\r\n        ? // Node with dependencies\r\n          `${node.id} : β ➜ ${node.conclusion}`\r\n        : //Normal node\r\n          `${node.id} : ${node.conclusion}`;\r\n\r\n    // Create the node tree\r\n    return {\r\n        id: node.id,\r\n        icon: 'graph',\r\n        label: label,\r\n        secondaryLabel: `${node.rule}`,\r\n        rule: node.rule,\r\n        args: node.args,\r\n        conclusion: node.conclusion,\r\n        parentId: node.parents[0],\r\n        descendants: node.descendants - 1,\r\n        nHided: node.hiddenNodes ? node.hiddenNodes.length : 0,\r\n        hiddenNodes: node.hiddenNodes ? node.hiddenNodes.map((n) => n.id) : [],\r\n        childNodes: [],\r\n        dependencies: node.dependencies,\r\n        parentsId: node.parents,\r\n        hasCaret: Boolean(node.descendants - 1),\r\n    };\r\n}\r\n\r\nfunction createTree(proof: NodeInterface[], id: number): TreeNode[] {\r\n    const rootNode = proof.find((o) => o.id === id);\r\n    const tree: TreeNode[] = [];\r\n\r\n    // Make sure found the root node\r\n    if (rootNode) {\r\n        tree.push(castProofNodeToTreeNode(rootNode));\r\n    }\r\n    return tree;\r\n}\r\n\r\nconst VisualizerStage: React.FC = () => {\r\n    // Proof data\r\n    const letMap = useAppSelector(selectLetMap);\r\n    const proof = useAppSelector(selectProof);\r\n    const fileID = useAppSelector(selectFileCount);\r\n    const style = useAppSelector(selectStyle);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    // Data structures\r\n    const [proofTree, setProofTree] = useState<TreeNodeInfo[]>([]);\r\n    const [nodeInfo, setNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n    const [map, setMap] = useState<any>({});\r\n    // Drawer\r\n    const [[ruleHelperIsOpen, argsHelperIsOpen, concHelperIsOpen], dispatchHelper] = useReducer(\r\n        (state: boolean[], action: { type: drawerHelpersKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            // Act over all the positions\r\n            if (type === drawerHelpersKind.ALL) {\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = payload;\r\n                }\r\n            }\r\n            // If wanna set a position\r\n            else if (payload) {\r\n                // Reset everything and set the wanted\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = i === type ? payload : false;\r\n                }\r\n            }\r\n            // If wanna only reset a position\r\n            else state[type] = payload;\r\n\r\n            return [...state];\r\n        },\r\n        // Rule, args, conclusion\r\n        [false, false, false],\r\n    );\r\n    const [[expandAll, revertAll], dispatchLetExpansion] = useReducer(\r\n        (state: boolean[], action: { type: renderLetKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            for (let i = 0; i < state.length; i++) {\r\n                state[i] = i === type ? payload : false;\r\n            }\r\n\r\n            return [...state];\r\n        },\r\n        // Expand, revert\r\n        [false, false],\r\n    );\r\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n    const [tree, setTree] = useState<TreeNodeInfo[]>([]);\r\n\r\n    // Make sure that a new tree is created only when a new dot is used\r\n    useEffect(() => setProofTree(createTree(proof, 0)), [fileID]);\r\n    useEffect(() => {\r\n        const _map: any = {};\r\n        // Map the { [node id]: list array id }\r\n        proof.forEach((n, id) => (_map[n.id] = id));\r\n        setMap(_map);\r\n    }, [proof]);\r\n\r\n    const openDrawer = (nodeInfo: NodeInfo, tree?: TreeNodeInfo[]) => {\r\n        setNodeInfo(nodeInfo);\r\n        setTree(tree ? tree : []);\r\n        setDrawerIsOpen(true);\r\n    };\r\n\r\n    const nodeInfoTable = (): JSX.Element => {\r\n        return (\r\n            <table\r\n                id=\"table-node-info\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Property</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <strong>RULE </strong>\r\n                            <Icon\r\n                                id=\"icon\"\r\n                                icon=\"help\"\r\n                                onClick={() => {\r\n                                    dispatchHelper({ type: drawerHelpersKind.RULE, payload: !ruleHelperIsOpen });\r\n                                }}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            {nodeInfo.rule}\r\n                            <Collapse isOpen={ruleHelperIsOpen}>\r\n                                <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                    {ruleHelper(nodeInfo.rule)}\r\n                                </Pre>\r\n                            </Collapse>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.args && (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>ARGS</strong>{' '}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.ARGS,\r\n                                                payload: !argsHelperIsOpen,\r\n                                            });\r\n                                        }}\r\n                                    />\r\n                                ) : null}\r\n                            </td>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                {nodeInfo.args}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Collapse isOpen={argsHelperIsOpen}>\r\n                                        <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                            {nodeInfo.args}\r\n                                        </Pre>\r\n                                    </Collapse>\r\n                                ) : null}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n\r\n                    <tr>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            <strong>CONCLUSION</strong>{' '}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <>\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.CONC,\r\n                                                payload: !concHelperIsOpen,\r\n                                            });\r\n                                            dispatchLetExpansion({\r\n                                                type: renderLetKind.EXPAND,\r\n                                                payload: true,\r\n                                            });\r\n                                        }}\r\n                                    />\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"undo\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.CONC,\r\n                                                payload: false,\r\n                                            });\r\n                                            dispatchLetExpansion({\r\n                                                type: renderLetKind.REVERT,\r\n                                                payload: true,\r\n                                            });\r\n                                        }}\r\n                                    />\r\n                                </>\r\n                            ) : null}\r\n                        </td>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <LetRender\r\n                                    id={0}\r\n                                    toRender={nodeInfo.conclusion}\r\n                                    letMap={letMap}\r\n                                    shouldExpand={expandAll}\r\n                                    shouldRevert={revertAll}\r\n                                    dispatchExpansion={dispatchLetExpansion}\r\n                                />\r\n                            ) : (\r\n                                nodeInfo.conclusion\r\n                            )}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.nDescendants ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#DESCENDANTS</strong>\r\n                            </td>\r\n                            <td>{nodeInfo.nDescendants}</td>\r\n                        </tr>\r\n                    ) : null}\r\n\r\n                    {nodeInfo.nHided ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#HIDDEN</strong>\r\n                            </td>\r\n                            <td>{`[${nodeInfo.hiddenNodes.map((node) => ' ' + node)} ]`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                    {nodeInfo.dependencies.length ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>DEPENDENCIES</strong>\r\n                            </td>\r\n                            <td>{`${nodeInfo.dependencies.map(\r\n                                (dependency) => ` ${dependency.piId}: [${dependency.depsId.map((dep) => ' ' + dep)} ] `,\r\n                            )}`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div onContextMenu={(e) => e.preventDefault()}>\r\n            {proof.length > 1 && (\r\n                <>\r\n                    {style === 'graph' ? (\r\n                        <Canvas key={fileID} proof={proof} openDrawer={openDrawer} createTree={createTree} />\r\n                    ) : (\r\n                        <VisualizerDirectoryStyle\r\n                            proofTree={proofTree}\r\n                            ruleHelper={ruleHelper}\r\n                            indent={() => ''}\r\n                            translate={() => ''}\r\n                        />\r\n                    )}\r\n                    <Drawer\r\n                        className={darkTheme ? 'bp3-dark' : ''}\r\n                        autoFocus={true}\r\n                        canEscapeKeyClose={true}\r\n                        canOutsideClickClose={true}\r\n                        enforceFocus={true}\r\n                        hasBackdrop={false}\r\n                        isOpen={drawerIsOpen}\r\n                        position={Position.BOTTOM}\r\n                        usePortal={true}\r\n                        onClose={(e) => {\r\n                            e.preventDefault();\r\n                            setDrawerIsOpen(false);\r\n                            dispatchHelper({ type: drawerHelpersKind.ALL, payload: false });\r\n                        }}\r\n                        icon=\"info-sign\"\r\n                        title=\"Node info\"\r\n                    >\r\n                        <div className={Classes.DRAWER_BODY}>\r\n                            <div style={{ maxHeight: '500px', overflow: 'auto' }}>\r\n                                <VisualizerTree\r\n                                    darkTheme={darkTheme}\r\n                                    proof={proof}\r\n                                    positionMap={map}\r\n                                    content={tree}\r\n                                    setNodeInfo={setNodeInfo}\r\n                                />\r\n                            </div>\r\n                            <div className={Classes.DIALOG_BODY}>{nodeInfoTable()}</div>\r\n                        </div>\r\n                    </Drawer>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerStage;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Classes } from '@blueprintjs/core';\r\n\r\nimport Let from './let';\r\nimport '../../scss/Let.scss';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { selectLetMap } from '../../store/features/proof/proofSlice';\r\nimport { DrawerVisualizerTabProps } from '../../interfaces/interfaces';\r\n\r\nconst font =\r\n    '14px / 18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", Icons16, sans-serif';\r\n\r\nconst VisualizerLetDrawer: React.FC<DrawerVisualizerTabProps> = ({ shouldResize }: DrawerVisualizerTabProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const widthRef = useRef(0);\r\n    const [resizeMode, setResizeMode] = useState(0);\r\n\r\n    const [letMap, setLetMap] = useState({ ...useAppSelector(selectLetMap) });\r\n    const letsRef = useRef<{ [key: string]: Let }>({});\r\n\r\n    // Handler to call on window resize and set the value column width\r\n    function handleResize() {\r\n        const width = widthRef.current;\r\n\r\n        // -22 from the fixed padding size\r\n        const newWidth = document.getElementsByClassName('letMap-value-column')[0].clientWidth - 24;\r\n        width === newWidth ? setResizeMode(1) : width > newWidth ? setResizeMode(0) : setResizeMode(2);\r\n\r\n        widthRef.current = newWidth;\r\n    }\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Init the let ref\r\n        Object.keys(letMap).forEach((key) => {\r\n            const currentLet = letMap[key];\r\n            const indices: { [key: number]: string } = {};\r\n            // Finds all occurences of let in the currentLet\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            letsRef.current[key] = new Let(key, currentLet, letsRef.current, indices);\r\n        });\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        handleResize();\r\n    }, [shouldResize]);\r\n\r\n    const expandLet = (parent: string, key: string, letIdx: number) => {\r\n        const lets = letsRef.current;\r\n\r\n        const externalRef = lets[key];\r\n        lets[parent].isExpanded = true;\r\n        letMap[parent] = lets[parent].expandPartialy(externalRef, letIdx);\r\n        setLetMap({ ...letMap });\r\n    };\r\n\r\n    const expandAll = (key: string) => {\r\n        const thisLet = letsRef.current[key];\r\n        thisLet.isExpanded = true;\r\n        letMap[key] = thisLet.expandValue(true);\r\n        setLetMap({ ...letMap });\r\n    };\r\n\r\n    const revertLet = (key: string) => {\r\n        const thisLet = letsRef.current[key];\r\n        // Only when is expanded\r\n        if (thisLet.isExpanded) {\r\n            thisLet.isExpanded = false;\r\n            letMap[key] = thisLet.shrinkValue();\r\n            setLetMap({ ...letMap });\r\n        }\r\n    };\r\n\r\n    const renderLet = (key: string): JSX.Element => {\r\n        const lets = letsRef.current;\r\n        const width = widthRef.current;\r\n\r\n        // Waits for the width to be updated and the DOM element to be updated\r\n        if (width) {\r\n            let currentLet = letMap[key];\r\n            const thisLet = lets[key];\r\n\r\n            // If doesn't fits, then indent\r\n            if (!thisLet.fitsTheWindow(width, font)) {\r\n                currentLet = thisLet.indent(width, true, font);\r\n                letMap[key] = currentLet;\r\n            }\r\n            // If fits, then only in the momment the page size is growing and the line is broken\r\n            else if (resizeMode >= 0 && thisLet.lines.length > 1) {\r\n                // Reset the line\r\n                thisLet.lines = [{ value: thisLet.isExpanded ? thisLet.groupUp() : thisLet.value, indentLevel: 0 }];\r\n                thisLet.biggerID = 0;\r\n\r\n                // Indent it again\r\n                currentLet = thisLet.indent(width, false, font);\r\n                letMap[key] = currentLet;\r\n            }\r\n\r\n            // Finds all occurences of let in the currentLet\r\n            const indices: { [key: number]: string } = {};\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            const arr: (JSX.Element | string)[] = [];\r\n            let start = 0;\r\n            // Slice the currentLet into an array with strings and JSX elements\r\n            Object.keys(indices).forEach((index, i, self) => {\r\n                const idx = Number(index);\r\n                const thisLet = indices[idx];\r\n\r\n                // Add the elements to the arr\r\n                arr.push(currentLet.substring(start, idx));\r\n                arr.push(\r\n                    <a\r\n                        className={darkTheme ? 'let-literal-or' : 'let-literal'}\r\n                        onClick={() => {\r\n                            expandLet(key, thisLet, idx);\r\n                        }}\r\n                    >\r\n                        {thisLet}\r\n                    </a>,\r\n                );\r\n                // Defines a new start\r\n                start = idx + thisLet.length;\r\n\r\n                // If it's the last let\r\n                if (i === self.length - 1) {\r\n                    arr.push(currentLet.substring(start, currentLet.length));\r\n                }\r\n            });\r\n\r\n            // If there is a let in this current let\r\n            if (Object.keys(indices).length) {\r\n                return <span className=\"let-instance\">{arr}</span>;\r\n            } else {\r\n                return <span className=\"let-instance\">{currentLet}</span>;\r\n            }\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    return (\r\n        <div className={Classes.DIALOG_BODY}>\r\n            <table\r\n                id=\"table-node-info-2\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{ width: '50px' }}>Property</th>\r\n                        <th className=\"letMap-value-column\">Value</th>\r\n                        <th style={{ width: '100px' }}>Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {Object.keys(letMap).map((key, id) => {\r\n                        return (\r\n                            <tr key={id}>\r\n                                <td>\r\n                                    <strong>{key}</strong>\r\n                                </td>\r\n                                <td style={{ width: '100%', whiteSpace: 'pre-wrap' }}>{renderLet(key)}</td>\r\n                                <td style={{ width: '100px', height: '100%' }}>\r\n                                    <Button\r\n                                        onClick={() => expandAll(key)}\r\n                                        className=\"bp3-minimal\"\r\n                                        icon=\"translate\"\r\n                                        text=\"Expand\"\r\n                                    />\r\n                                    <Button\r\n                                        onClick={() => revertLet(key)}\r\n                                        className=\"bp3-minimal\"\r\n                                        icon=\"undo\"\r\n                                        text=\"Revert\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerLetDrawer;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Classes } from '@blueprintjs/core';\r\nimport { selectLetMap, selectTheoryLemmas } from '../../store/features/proof/proofSlice';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport Let from '../VisualizerLetDrawer/let';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { DrawerVisualizerTabProps } from '../../interfaces/interfaces';\r\n\r\nconst font =\r\n    '14px / 18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", Icons16, sans-serif';\r\n\r\nconst VisualizerTheoryLemma: React.FC<DrawerVisualizerTabProps> = ({ shouldResize }: DrawerVisualizerTabProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const letMap = useAppSelector(selectLetMap);\r\n    const widthRef = useRef(0);\r\n\r\n    const [theoryLemmas, setTheoryLemmas] = useState([...useAppSelector(selectTheoryLemmas)]);\r\n    const [resizeMode, setResizeMode] = useState(0);\r\n    const letsRef = useRef<{ [key: string]: Let }>({});\r\n\r\n    // Handler to call on window resize and set the value column width\r\n    function handleResize() {\r\n        const width = widthRef.current;\r\n\r\n        // -22 from the fixed padding size\r\n        const newWidth = document.getElementsByClassName('theoryLemma-value-column')[0].clientWidth - 24;\r\n        width === newWidth ? setResizeMode(1) : width > newWidth ? setResizeMode(0) : setResizeMode(2);\r\n\r\n        widthRef.current = newWidth;\r\n    }\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Init the lets\r\n        Object.keys(letMap).forEach((key) => {\r\n            const currentLet = letMap[key];\r\n\r\n            const indices: { [key: number]: string } = {};\r\n            // Finds all occurences of let in the currentLet\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n            letsRef.current[key] = new Let(key, currentLet, letsRef.current, indices);\r\n        });\r\n\r\n        // Init the theory lemmas\r\n        theoryLemmas.forEach((tl, id) => {\r\n            const indices: { [key: number]: string } = {};\r\n            // Finds all occurences of let in the currentTL\r\n            [...tl.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            letsRef.current[id] = new Let(String(id), tl, letsRef.current, indices);\r\n        });\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        handleResize();\r\n    }, [shouldResize]);\r\n\r\n    const expandLet = (parent: number, key: string, letIdx: number) => {\r\n        const lets = letsRef.current;\r\n        const externalRef = lets[key];\r\n        lets[parent].isExpanded = true;\r\n        theoryLemmas[parent] = lets[parent].expandPartialy(externalRef, letIdx);\r\n        setTheoryLemmas([...theoryLemmas]);\r\n    };\r\n\r\n    const expandAll = (key: number) => {\r\n        const thisLet = letsRef.current[key];\r\n        thisLet.isExpanded = true;\r\n        theoryLemmas[key] = thisLet.expandValue(true);\r\n        setTheoryLemmas([...theoryLemmas]);\r\n    };\r\n\r\n    const revertLet = (key: number) => {\r\n        const thisLet = letsRef.current[key];\r\n        // Only when is expanded\r\n        if (thisLet.isExpanded) {\r\n            thisLet.isExpanded = false;\r\n            theoryLemmas[key] = thisLet.shrinkValue();\r\n            setTheoryLemmas([...theoryLemmas]);\r\n        }\r\n    };\r\n\r\n    const renderLet = (key: number): JSX.Element => {\r\n        const lets = letsRef.current;\r\n        const width = widthRef.current;\r\n\r\n        // Waits for the width to be updated and the DOM element to be updated\r\n        if (width) {\r\n            let currentTL = theoryLemmas[key];\r\n            const thisLet = lets[key];\r\n\r\n            // If doesn't fits, then indent\r\n            if (!thisLet.fitsTheWindow(width, font)) {\r\n                currentTL = thisLet.indent(width, true, font);\r\n                theoryLemmas[key] = currentTL;\r\n            }\r\n            // If fits, then only in the momment the page size is growing and the line is broken\r\n            else if (resizeMode >= 0 && thisLet.lines.length > 1) {\r\n                // Reset the line\r\n                thisLet.lines = [{ value: thisLet.isExpanded ? thisLet.groupUp() : thisLet.value, indentLevel: 0 }];\r\n                thisLet.biggerID = 0;\r\n\r\n                // Indent it again\r\n                currentTL = thisLet.indent(width, false, font);\r\n                theoryLemmas[key] = currentTL;\r\n            }\r\n\r\n            // Finds all occurences of let in the currentTL\r\n            const indices: { [key: number]: string } = {};\r\n            [...currentTL.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            const arr: (JSX.Element | string)[] = [];\r\n            let start = 0;\r\n            // Slice the currentTL into an array with strings and JSX elements\r\n            Object.keys(indices).forEach((index, i, self) => {\r\n                const idx = Number(index);\r\n                const thisLet = indices[idx];\r\n\r\n                // Add the elements to the arr\r\n                arr.push(currentTL.substring(start, idx));\r\n                arr.push(\r\n                    <a\r\n                        className={darkTheme ? 'let-literal-or' : 'let-literal'}\r\n                        onClick={() => {\r\n                            expandLet(key, thisLet, idx);\r\n                        }}\r\n                    >\r\n                        {thisLet}\r\n                    </a>,\r\n                );\r\n                // Defines a new start\r\n                start = idx + thisLet.length;\r\n\r\n                // If it's the last let\r\n                if (i === self.length - 1) {\r\n                    arr.push(currentTL.substring(start, currentTL.length));\r\n                }\r\n            });\r\n\r\n            // If there is a let in this current let\r\n            if (Object.keys(indices).length) {\r\n                return <span className=\"let-instance\">{arr}</span>;\r\n            } else {\r\n                return <span className=\"let-instance\">{currentTL}</span>;\r\n            }\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    return (\r\n        <div className={Classes.DIALOG_BODY}>\r\n            <table\r\n                id=\"table-node-info-2\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%', minWidth: '230px' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"theoryLemma-value-column\">Value</th>\r\n                        <th style={{ width: '100px' }}>Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {theoryLemmas.map((tl, id) => {\r\n                        return (\r\n                            <tr key={id}>\r\n                                <td style={{ width: '100%', whiteSpace: 'pre-wrap' }}>{renderLet(id)}</td>\r\n                                <td style={{ width: '100px', height: '100%' }}>\r\n                                    <Button\r\n                                        onClick={() => expandAll(id)}\r\n                                        className=\"bp3-minimal\"\r\n                                        icon=\"translate\"\r\n                                        text=\"Expand\"\r\n                                    />\r\n                                    <Button\r\n                                        onClick={() => revertLet(id)}\r\n                                        className=\"bp3-minimal\"\r\n                                        icon=\"undo\"\r\n                                        text=\"Revert\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerTheoryLemma;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport '../../scss/VisualizersDrawer.scss';\r\nimport { Drawer, Position, Classes, Tabs, Tab, Button } from '@blueprintjs/core';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { DrawerProps } from '../../interfaces/interfaces';\r\n\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\nimport { applyView, selectNodeClusters, selectNodes } from '../../store/features/proof/proofSlice';\r\nimport { reRender } from '../../store/features/externalCmd/externalCmd';\r\nimport VisualizerLetDrawer from '../VisualizerLetDrawer/VisualizerLetDrawer';\r\nimport VisualizerTheoryLemma from '../VisualizerTheoryLemma/VisualizerTheoryLemma';\r\nimport { ClusterKind } from '../../interfaces/enum';\r\n\r\nconst VisualizersDrawer: React.FC<DrawerProps> = ({ drawerIsOpen, setDrawerIsOpen }: DrawerProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const nodeClusters = useAppSelector(selectNodeClusters);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [tabID, setTabID] = useState('lm');\r\n    const [resizeFlag, setResizeFlag] = useState([false, false]);\r\n\r\n    useEffect(() => {\r\n        // When drawer is initialized it focus the escape button\r\n        const bt = document\r\n            .getElementsByClassName('visualizers-drawer')[0]\r\n            .getElementsByClassName('bp3-button')[0] as HTMLElement;\r\n        bt.tabIndex = 1;\r\n        bt.focus();\r\n    }, []);\r\n\r\n    const handleTabChange = (newTabId: string, _: any, e: any): void => {\r\n        setTabID(newTabId);\r\n        const newResizeFlag = [...resizeFlag];\r\n        if (newTabId === 'lm') newResizeFlag[0] = !newResizeFlag[0];\r\n        else if (newTabId === 'tl') newResizeFlag[1] = !newResizeFlag[1];\r\n        setResizeFlag(newResizeFlag);\r\n    };\r\n\r\n    const handleClusterClick = (type: ClusterKind): void => {\r\n        if (type === ClusterKind.NONE) {\r\n            dispatch(selectNodes(nodeClusters.reduce((acc: number[], c) => acc.concat(c.hiddenNodes), [])));\r\n        } else {\r\n            dispatch(\r\n                selectNodes(\r\n                    nodeClusters.reduce((acc: number[], c) => (c.type === type ? acc.concat(c.hiddenNodes) : acc), []),\r\n                ),\r\n            );\r\n        }\r\n    };\r\n\r\n    const menus = {\r\n        view: (\r\n            <div className={'view-infos ' + Classes.DIALOG_BODY}>\r\n                <div className=\"bts\">\r\n                    <Button\r\n                        text=\"Full\"\r\n                        onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                            e.preventDefault();\r\n                            dispatch(applyView('full'));\r\n                            dispatch(reRender());\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        text=\"Clustered\"\r\n                        onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                            e.preventDefault();\r\n                            dispatch(applyView('clustered'));\r\n                            dispatch(reRender());\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        text=\"Full and Colored\"\r\n                        onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                            e.preventDefault();\r\n                            dispatch(applyView('colored-full'));\r\n                            dispatch(reRender());\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"views-color-map\">\r\n                    <span onClick={() => handleClusterClick(ClusterKind.NONE)}>⬜ First Scope</span>\r\n                    <span onClick={() => handleClusterClick(ClusterKind.SAT)}>🟪 SAT</span>\r\n                    <span onClick={() => handleClusterClick(ClusterKind.CNF)}>🟨 CNF</span>\r\n                    <span onClick={() => handleClusterClick(ClusterKind.TL)}>🟩 Theory Lemma</span>\r\n                    <span onClick={() => handleClusterClick(ClusterKind.PP)}>🟫 Pre Processing</span>\r\n                    <span onClick={() => handleClusterClick(ClusterKind.IN)}>🟦 Input</span>\r\n                </div>\r\n            </div>\r\n        ),\r\n        letMap: <VisualizerLetDrawer shouldResize={resizeFlag[0]} />,\r\n        theoryLemma: <VisualizerTheoryLemma shouldResize={resizeFlag[1]} />,\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            className={`visualizers-drawer ${darkTheme ? 'bp3-dark' : ''}`}\r\n            style={{ maxHeight: '65%', width: '35%' }}\r\n            autoFocus={true}\r\n            canEscapeKeyClose={true}\r\n            canOutsideClickClose={false}\r\n            enforceFocus={false}\r\n            hasBackdrop={false}\r\n            isOpen={drawerIsOpen}\r\n            position={Position.RIGHT}\r\n            usePortal={false}\r\n            onClose={(e) => {\r\n                e.preventDefault();\r\n                setDrawerIsOpen(false);\r\n            }}\r\n            icon=\"applications\"\r\n            title=\"Visualizers\"\r\n        >\r\n            <div className={Classes.DRAWER_BODY}>\r\n                <Tabs id=\"services-tabs\" onChange={handleTabChange} selectedTabId={tabID}>\r\n                    <Tab id=\"vw\" title=\"View\" panel={menus['view']} className=\"services-tab\" />\r\n                    <Tab id=\"lm\" title=\"Let Map\" panel={menus['letMap']} className=\"services-tab\" />\r\n                    <Tab id=\"tl\" title=\"Theory Lemma\" panel={menus['theoryLemma']} className=\"services-tab\" />\r\n                </Tabs>\r\n            </div>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default VisualizersDrawer;\r\n","import { Button, Divider } from '@blueprintjs/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { TutorialPopoverProps } from '../../interfaces/interfaces';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { useAppSelector } from '../../store/hooks';\r\n\r\nconst TutorialPopover: React.FC<TutorialPopoverProps> = ({\r\n    setIsOpen,\r\n    nextTutorial,\r\n    stage,\r\n    content,\r\n    W,\r\n    position,\r\n}: TutorialPopoverProps) => {\r\n    const [page, setPage] = useState(0);\r\n\r\n    const darkTheme = useAppSelector(selectTheme);\r\n\r\n    const renderPageBall = (): JSX.Element[] => {\r\n        return content.map((_, id) => (\r\n            <div key={id} className={`page-ball ${id === page && (darkTheme ? 'page-on' : 'page-on-light')}`} />\r\n        ));\r\n    };\r\n\r\n    const changePage = (type: string): void => {\r\n        if (type === '>') setPage(page + 1);\r\n        else setPage(page - 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const parent = document.getElementsByClassName('tutorial-popover')[0];\r\n        // Set the focus\r\n        let bt = parent.getElementsByClassName('next-page progress');\r\n        if (!bt.length) {\r\n            bt = parent.getElementsByClassName('bp3-button');\r\n            // Make sure the next stage button will not be instantly clicked\r\n            setTimeout(() => (bt[bt.length - 1] as HTMLElement).focus(), 150);\r\n        } else {\r\n            (bt[0] as HTMLElement).focus();\r\n        }\r\n    }, [stage, page]);\r\n\r\n    useEffect(() => {\r\n        function handleEsc(e: KeyboardEvent): void {\r\n            e.stopPropagation();\r\n            if (e.key === 'Escape') {\r\n                setIsOpen(false);\r\n            }\r\n        }\r\n        window.addEventListener('keydown', handleEsc, false);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleEsc, false);\r\n        };\r\n    }, []);\r\n\r\n    const insertAnchors = (text: string): (JSX.Element | string)[] => {\r\n        const list: (JSX.Element | string)[] = [];\r\n\r\n        let i = -1,\r\n            last = 0;\r\n        const positions = [0, 0, 0];\r\n        for (let j = 0; j < text.length; j++) {\r\n            if (text[j] === '\\0') {\r\n                i++;\r\n                positions[i] = j;\r\n            }\r\n            if (i === 2) {\r\n                list.push(text.substring(last, positions[0]));\r\n                const name = text.substring(positions[0] + 1, positions[1]);\r\n                const link = text.substring(positions[1] + 1, positions[2]);\r\n                list.push(\r\n                    <a href={link} target=\"_blank\" rel=\"noreferrer\">\r\n                        {name}\r\n                    </a>,\r\n                );\r\n\r\n                last = positions[2] + 1;\r\n                i = -1;\r\n            }\r\n        }\r\n        list.push(text.substring(last, text.length));\r\n\r\n        return list;\r\n    };\r\n\r\n    return (\r\n        <div className={darkTheme ? 'bp3-dark' : ''}>\r\n            <div\r\n                className=\"arrow-up\"\r\n                style={{\r\n                    left: position.tW,\r\n                    top: position.y - 7,\r\n                    borderBottomColor: darkTheme ? 'rgb(48, 65, 71)' : 'rgb(255,255,255)',\r\n                }}\r\n            />\r\n            <div\r\n                className=\"arrow-up arrow-2\"\r\n                style={{\r\n                    left: position.tW - 2,\r\n                    top: position.y - 9,\r\n                    borderBottomColor: darkTheme ? '#bdbdbd' : 'rgba(71, 64, 64, 0.281)',\r\n                }}\r\n            />\r\n            <div className=\"tutorial-popover bp3-dialog\" style={{ width: W, left: position.x, top: position.y }}>\r\n                <div className=\"bp3-dialog-header\">\r\n                    <div className=\"cur-page\">{renderPageBall()}</div>\r\n                    <Button icon=\"small-cross\" onClick={() => setIsOpen(false)} tabIndex={-1} />\r\n                </div>\r\n                <body>\r\n                    {page > 0 && (\r\n                        <button\r\n                            className=\"next-page regress\"\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                changePage('<');\r\n                            }}\r\n                        >\r\n                            {'<'}\r\n                        </button>\r\n                    )}\r\n                    <p className=\"content\">{stage ? content[page] : insertAnchors(content[page])}</p>\r\n                    {page < content.length - 1 && (\r\n                        <button\r\n                            className=\"next-page progress\"\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                changePage('>');\r\n                            }}\r\n                        >\r\n                            {'>'}\r\n                        </button>\r\n                    )}\r\n                </body>\r\n                {page === content.length - 1 && (\r\n                    <>\r\n                        <Divider style={{ backgroundColor: darkTheme ? 'white' : '' }} />\r\n                        <div className=\"bp3-dialog-footer\">\r\n                            <Button\r\n                                text=\"Next\"\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    nextTutorial();\r\n                                    setPage(0);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TutorialPopover;\r\n","import { Portal } from '@blueprintjs/core';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { TutorialProps } from '../../interfaces/interfaces';\r\nimport '../../scss/Tutorial.scss';\r\nimport TutorialPopover from './TutorialPopover';\r\n\r\nconst W = 340;\r\nconst divsIds = [\r\n    'proof-visualizer-name',\r\n    'upload-proof-bt',\r\n    'examples-bt',\r\n    'input-smt-bt',\r\n    'file-name-title',\r\n    'command',\r\n    'style-bt',\r\n    'visualizers-bt',\r\n    'download-bt',\r\n    'switch-button-dark-theme',\r\n];\r\nconst tutorials: string[][] = [\r\n    [\r\n        'This website is a SMT solver proof visualizer. It was developed by \\0Vinícius Braga Freire\\0https://github.com/vinciusb\\0, \\0Diego Della Rocca\\0https://github.com/diegodrc\\0 and \\0Haniel Barbosa\\0https://homepages.dcc.ufmg.br/~hbarbosa/\\0. It was funded by AWS and the main SMT solver supported is CVC5.',\r\n    ],\r\n    [\r\n        'Here you can upload your proofs to be visualized.',\r\n        'The proofs can have the .dot or .json file extension.',\r\n        'The .json file is obtained in the download section.',\r\n    ],\r\n    ['Here you can visualize some examples of different proofs.'],\r\n    ['Here you can see the examples SMT code or insert your own SMT and run the CVC5 solver to generate a new proof.'],\r\n    ['This is the name of the current proof uploaded'],\r\n    [\r\n        'This is the command section. Here you can use some commands that will transform the proof, changing the way you comprehend it.',\r\n        \"Click in the '?' button to see a description of all commands available.\",\r\n    ],\r\n    [\r\n        'Here you can change the way the visualizer presents the proof.',\r\n        \"The graph style is the default and it's where the commands transformations happen.\",\r\n        \"In the directory style each proof node is a 'folder' and your children nodes are inside it.\",\r\n    ],\r\n    [\r\n        'Here you have access to 3 visualizers:',\r\n        'View: It allow you to change the way the proof nodes are visualized.',\r\n        'Let Map: Here you can see a map of all the LETS used inside the proofs. A let is a therm that shorten some expression (e.g.: let1 = (and A B))',\r\n        'Theory Lemma: It allow you to see all the theory lemmas in the proof.',\r\n    ],\r\n    [\r\n        'This section allow you to download the proof in different ways.',\r\n        '.DOT is the default format. It only holds informations about the proof structure and your clusters.',\r\n        '.JSON allow the user to save all the visual informations about the proof (i.e. the nodes positions, colors and foldings after any transformation applied) and your structural infos just like the .DOT.',\r\n        '.PNG prints the proof in the current state (i.e. includes all the transformations) into a image.',\r\n    ],\r\n    ['Allow to change between dark/light mode.'],\r\n];\r\n\r\n// panel stack\r\nconst VisualizerTutorial: React.FC<TutorialProps> = ({ inTutorial, setInTutorial }: TutorialProps) => {\r\n    const [stage, setStage] = useState(-1);\r\n    const [position, setPosition] = useState({ x: 0, y: 0, tW: 0 });\r\n    const sizeRef = useRef({ w: 0, h: 0 });\r\n\r\n    const increaseStage = () => {\r\n        if (stage < tutorials.length - 1) setStage(stage + 1);\r\n        else setInTutorial(false);\r\n    };\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Handler to call on window resize and set the value column width\r\n        function handleResize() {\r\n            sizeRef.current.w = window.innerWidth;\r\n            sizeRef.current.h = window.innerHeight;\r\n        }\r\n\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (inTutorial) setStage(0);\r\n        else setStage(-1);\r\n    }, [inTutorial]);\r\n\r\n    useEffect(() => {\r\n        const toBeWrapped: HTMLElement | null = document.getElementById(divsIds[stage]);\r\n        if (toBeWrapped) {\r\n            const { x, y, width, height } = toBeWrapped.getClientRects()[0];\r\n            const newY = y + height;\r\n            let newX = x + width / 2;\r\n            const newTW = newX;\r\n            // Positioning in the beggining\r\n            if (newX < W) newX = 3;\r\n            // Positioning in the end\r\n            else if (newX + W / 2 > sizeRef.current.w) newX = sizeRef.current.w - W - 3;\r\n            // Positioning in the normal position\r\n            else newX -= W / 2;\r\n\r\n            setPosition({ x: newX, y: newY, tW: newTW });\r\n        }\r\n    }, [stage]);\r\n\r\n    return (\r\n        <Portal className={`tutorial-portal`}>\r\n            <div\r\n                className=\"bp3-overlay-enter-done\"\r\n                style={{\r\n                    width: sizeRef.current.w,\r\n                    height: sizeRef.current.h,\r\n                    pointerEvents: stage >= 0 ? 'auto' : 'none',\r\n                    backgroundColor: stage >= 0 ? 'rgba(87, 82, 82, 0.233)' : 'transparent',\r\n                }}\r\n            >\r\n                {stage >= 0 && (\r\n                    <TutorialPopover\r\n                        setIsOpen={setInTutorial}\r\n                        nextTutorial={increaseStage}\r\n                        stage={stage}\r\n                        content={tutorials[stage]}\r\n                        W={W}\r\n                        position={position}\r\n                    />\r\n                )}\r\n            </div>\r\n        </Portal>\r\n    );\r\n};\r\n\r\nexport default VisualizerTutorial;\r\n","import React, { useEffect, useReducer, useRef, useState } from 'react';\r\n\r\nimport MonacoEditor from '@monaco-editor/react';\r\nimport { Drawer, Position, Classes, Button, FormGroup, Switch, InputGroup } from '@blueprintjs/core';\r\nimport { Popover2 } from '@blueprintjs/popover2';\r\n\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { SmtDrawerProps } from '../../interfaces/interfaces';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\n\r\nimport { selectSmt, setSmt } from '../../store/features/proof/proofSlice';\r\n\r\nconst VisualizerSmtDrawer: React.FC<SmtDrawerProps> = ({ isOpen, setDrawerIsOpen }: SmtDrawerProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const proofSmt = useAppSelector(selectSmt);\r\n\r\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\r\n    const [optionsIsOpen, setOptionsIsOpen] = useReducer((open) => !open, false);\r\n    const textRef = useRef(proofSmt + '\\n');\r\n    const [argsType, setArgsType] = useState(true);\r\n    const [[shouldClusterize, printAsDag], setDefaultOptions] = useState([true, true]);\r\n    const [customArgs, setCustomArgs] = useState('');\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        // When smt drawer is initialized it focus the escape button\r\n        const bt = document\r\n            .getElementsByClassName('smt-drawer')[0]\r\n            .getElementsByClassName('bp3-button')[0] as HTMLElement;\r\n        bt.tabIndex = 1;\r\n        bt.focus();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        textRef.current = proofSmt;\r\n        forceUpdate();\r\n    }, [proofSmt]);\r\n\r\n    const options = {\r\n        theme: darkTheme ? 'vs-dark' : 'vs',\r\n        tabIndex: 5,\r\n    };\r\n\r\n    const divColor = darkTheme ? 'rgb(255, 255, 255, 0.15)' : 'rgb(0, 0, 0, 0.15)';\r\n\r\n    const helpDiv = (\r\n        <div\r\n            className={`bp3-menu ${darkTheme ? 'bp3-dark' : ''}`}\r\n            style={{\r\n                maxWidth: '200px',\r\n                padding: '5px 8px !important',\r\n                boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.651)',\r\n                textAlign: 'justify',\r\n            }}\r\n        >\r\n            Look at{' '}\r\n            <a href=\"https://cvc5.github.io/docs/cvc5-1.0.0/\" target=\"_blank\" rel=\"noreferrer\">\r\n                CVC5 documentation\r\n            </a>{' '}\r\n            to understand more about the argument parser.\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <Drawer\r\n            className={`smt-drawer ${darkTheme ? 'bp3-dark' : ''}`}\r\n            style={{ maxHeight: '65%', width: '35%' }}\r\n            autoFocus={true}\r\n            canEscapeKeyClose={true}\r\n            canOutsideClickClose={true}\r\n            enforceFocus={false}\r\n            hasBackdrop={false}\r\n            isOpen={isOpen}\r\n            position={Position.LEFT}\r\n            usePortal={false}\r\n            onClose={(e) => {\r\n                e.preventDefault();\r\n                setDrawerIsOpen();\r\n            }}\r\n            icon=\"applications\"\r\n            title=\"Visualizers\"\r\n        >\r\n            <div className={Classes.DRAWER_BODY} style={{ overflow: 'hidden' }}>\r\n                <MonacoEditor\r\n                    height={'300px'}\r\n                    language=\"graphql\"\r\n                    value={textRef.current}\r\n                    onChange={(value) => value !== undefined && (textRef.current = value)}\r\n                    onMount={() => forceUpdate()}\r\n                    options={options}\r\n                />\r\n                <div\r\n                    style={{\r\n                        height: optionsIsOpen ? '220px' : '0',\r\n                        position: 'relative',\r\n                        overflow: 'auto',\r\n                        transition: 'height 0.24s ease-out',\r\n                        visibility: optionsIsOpen ? 'visible' : 'hidden',\r\n                    }}\r\n                >\r\n                    <Switch\r\n                        className=\"switch\"\r\n                        label=\"Default args or custom args\"\r\n                        style={{ margin: '10px 20px' }}\r\n                        checked={argsType}\r\n                        onChange={() => setArgsType(!argsType)}\r\n                        tabIndex={4}\r\n                    />\r\n                    <FormGroup\r\n                        label=\"Default args\"\r\n                        style={{\r\n                            padding: '10px 20px',\r\n                            borderBottom: `1px solid ${divColor}`,\r\n                            borderTop: `1px solid ${divColor}`,\r\n                            marginBottom: '0',\r\n                        }}\r\n                        disabled={!argsType}\r\n                    >\r\n                        <Switch\r\n                            label=\"Should clusterize proof\"\r\n                            disabled={!argsType}\r\n                            checked={shouldClusterize}\r\n                            onChange={() => setDefaultOptions([!shouldClusterize, printAsDag])}\r\n                            tabIndex={4}\r\n                        />\r\n                        <Switch\r\n                            label=\"Should print as tree or as DAG\"\r\n                            disabled={!argsType}\r\n                            checked={printAsDag}\r\n                            onChange={() => setDefaultOptions([shouldClusterize, !printAsDag])}\r\n                            tabIndex={4}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup\r\n                        label=\"Custom args\"\r\n                        style={{ padding: '10px 20px', marginBottom: '0' }}\r\n                        disabled={argsType}\r\n                    >\r\n                        <InputGroup\r\n                            id=\"text-input\"\r\n                            placeholder=\"Placeholder text\"\r\n                            disabled={argsType}\r\n                            rightElement={\r\n                                <Popover2\r\n                                    disabled={argsType}\r\n                                    content={helpDiv}\r\n                                    placement=\"auto\"\r\n                                    modifiers={{\r\n                                        arrow: { enabled: true },\r\n                                    }}\r\n                                    hoverCloseDelay={200}\r\n                                    hoverOpenDelay={200}\r\n                                >\r\n                                    <Button disabled={argsType} icon=\"help\" className=\"bp3-minimal\" tabIndex={4} />\r\n                                </Popover2>\r\n                            }\r\n                            value={customArgs}\r\n                            onChange={(e) => setCustomArgs(e.target.value)}\r\n                            tabIndex={4}\r\n                        />\r\n                    </FormGroup>\r\n                </div>\r\n                <footer\r\n                    style={{\r\n                        position: 'relative',\r\n                        borderTop: optionsIsOpen ? `solid 1px ${divColor}` : '',\r\n                    }}\r\n                >\r\n                    <Button\r\n                        style={{ float: 'left', margin: '5px' }}\r\n                        className=\"bp3-minimal\"\r\n                        icon=\"more\"\r\n                        text=\"Options\"\r\n                        onClick={() => setOptionsIsOpen()}\r\n                        tabIndex={1}\r\n                    />\r\n                    <div style={{ float: 'right', display: 'flex' }}>\r\n                        <Button\r\n                            style={{ margin: '5px' }}\r\n                            className=\"bp3-minimal\"\r\n                            icon=\"floppy-disk\"\r\n                            text=\"Save\"\r\n                            onClick={() => dispatch(setSmt(textRef.current))}\r\n                            tabIndex={2}\r\n                        />\r\n                        <Button\r\n                            style={{ margin: '5px' }}\r\n                            className=\"bp3-minimal\"\r\n                            icon=\"code\"\r\n                            text=\"Generate proof\"\r\n                            onClick={() => {\r\n                                dispatch(setSmt(textRef.current));\r\n                                // Run cvc5\r\n                            }}\r\n                            tabIndex={3}\r\n                        />\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default VisualizerSmtDrawer;\r\n","import React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Intent, Position, Toaster } from '@blueprintjs/core';\r\n\r\nimport VisualizerNavbar from '../VisualizerNavbar/VisualizerNavbar';\r\nimport VisualizerDialog from '../VisualizerDialog/VisualizerDialog';\r\nimport VisualizerStage from '../VisualizerStage/VisualizerStage';\r\nimport VisualizersDrawer from '../VisualizersDrawer/VisualizersDrawer';\r\n\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport VisualizerTutorial from '../VisualizerTutorial/VisualizerTutorial';\r\nimport VisualizerSmtDrawer from '../VisualizerSmtDrawer/VisualizerSmtDrawer';\r\n\r\nconst App: React.FC = () => {\r\n    const [dialogIsOpen, setDialogIsOpen] = useState(true);\r\n    const [inTutorial, setInTutorial] = useState(false);\r\n    const [drawerIsOpen, setDrawerOpenState] = useReducer((isOpen) => !isOpen, false);\r\n    const [smtDrawerIsOpen, setSmtDrawerIsOpen] = useReducer((isOpen) => !isOpen, false);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n\r\n    // Toaster\r\n    let toaster: Toaster;\r\n    const refHandlers = {\r\n        toaster: (ref: Toaster) => (toaster = ref),\r\n    };\r\n\r\n    const addErrorToast = (err: string) => {\r\n        toaster.show({ icon: 'warning-sign', intent: Intent.DANGER, message: err });\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.getElementsByClassName('bp3-overlay')[0]\r\n            ? (document.getElementsByClassName('bp3-overlay')[0].className = '')\r\n            : null;\r\n    }, [drawerIsOpen]);\r\n\r\n    return (\r\n        <div className={darkTheme ? ' bp3-dark' : ''} style={{ height: '100%' }}>\r\n            <VisualizerTutorial inTutorial={inTutorial} setInTutorial={setInTutorial} />\r\n            <Toaster position={Position.TOP} ref={refHandlers.toaster} />\r\n            <VisualizerNavbar\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                setDrawerIsOpen={setDrawerOpenState}\r\n                addErrorToast={addErrorToast}\r\n                inTutorial={inTutorial}\r\n                setInTutorial={setInTutorial}\r\n                setSmtDrawerIsOpen={setSmtDrawerIsOpen}\r\n            />\r\n            <VisualizerDialog\r\n                dialogIsOpen={dialogIsOpen}\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                addErrorToast={addErrorToast}\r\n            />\r\n            <VisualizerStage />\r\n            {drawerIsOpen ? (\r\n                <VisualizersDrawer drawerIsOpen={drawerIsOpen} setDrawerIsOpen={setDrawerOpenState}></VisualizersDrawer>\r\n            ) : null}\r\n            {smtDrawerIsOpen ? (\r\n                <VisualizerSmtDrawer isOpen={smtDrawerIsOpen} setDrawerIsOpen={setSmtDrawerIsOpen} />\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport externalCmdReducer from './features/externalCmd/externalCmd';\r\nimport fileReducer from './features/file/fileSlice';\r\nimport proofReducer from './features/proof/proofSlice';\r\nimport themeReducer from './features/theme/themeSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        file: fileReducer,\r\n        proof: proofReducer,\r\n        theme: themeReducer,\r\n        externalCmd: externalCmdReducer,\r\n    },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport { store } from './store/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './scss/index.scss';\r\n\r\nimport reportWebVitals from './ReactUtils/reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}