{"version":3,"sources":["interfaces/enum.ts","store/hooks.ts","store/features/file/fileSlice.ts","store/features/proof/auxi.ts","store/features/theme/auxi.ts","store/features/proof/proofSlice.ts","store/features/theme/themeSlice.ts","store/features/externalCmd/externalCmd.ts","components/VisualizerNavbar/VisualizerNavbar.tsx","components/VisualizerDialog/VisualizerDialog.tsx","components/VisualizerStage/Canvas/VisualizerNode.tsx","components/VisualizerStage/Canvas/VisualizerLine.tsx","components/VisualizerStage/Canvas/VisualizerMenu.tsx","components/VisualizerStage/Canvas/VisualizerCanvas.tsx","components/VisualizerTree/VisualizerTree.tsx","components/VisualizerStage/VisualizerDirectoryStyle/VisualizerDirectoryStyle.tsx","components/VisualizerLetDrawer/let.ts","components/VisualizerLetDrawer/LetRender.tsx","components/VisualizerStage/VisualizerStage.tsx","components/VisualizerLetDrawer/VisualizerLetDrawer.tsx","components/VisualizerTheoryLemma/VisualizerTheoryLemma.tsx","components/VisualizersDrawer/VisualizersDrawer.tsx","components/App/App.tsx","store/store.ts","ReactUtils/reportWebVitals.ts","index.tsx"],"names":["drawerHelpersKind","renderLetKind","ClusterKind","useAppDispatch","useDispatch","useAppSelector","useSelector","fileSlice","createSlice","name","initialState","value","filesCount","reducers","set","state","action","payload","actions","selectFileName","file","selectDot","split","pop","JSON","parse","dot","selectFileCount","removeEscapedCharacters","s","newS","i","length","descendants","proof","nodeId","children","concat","reduce","acc","childId","sliceNodesCluster","clusterMap","slicedClusters","currentNode","id","parentsClusters","parents","forEach","p","clusterType","keys","Object","target","Number","push","clusterID","c","child","colorConverter","colorName","color","proofSlice","view","style","hiddenNodes","letMap","visualInfo","clustersInfos","process","proofJSON","isJSON","indexOf","nodes","conclusion","rule","args","views","NaN","dependencies","NONE","comment","slice","lastIndexOf","replace","line","search","label","idx","thisType","numbers","substring","filter","str","map","num","SAT","CNF","TL","PP","IN","parseInt","trim","attributes","commentJSON","subProofQty","x","parent","isNaN","processDot","clustersColors","clustersMap","Array","fill","cluster","type","size","node","y","selected","hideNodes","toHideNodes","every","hiddenNodesArray","clusters","clusteredNodes","hiddenNode","hiddenID","some","_p","pastCluster","stringify","clusterParents","parentCluster","splice","findNodesClusters","piNodeId","foldAllDescendants","index","self","unhideNodes","pi","hiddens","setVisualInfo","selectNodes","len","unselectNodes","changeStyle","applyView","visualInfoSize","proofSize","applyColor","selectProof","piNodeChildren","haveHiddenParent","n","piNodeParents","piNodeDependencies","depMap","dep","String","piId","depsId","groupPiNodeDependencies","piNode","proofNode","parentId","highHierarchyNodes","ac","childID","selectOriginalProof","selectView","selectStyle","selectLetMap","selectVisualInfo","selectHiddenNodes","selectNodeClusters","themeSlice","toggle","selectTheme","theme","externalCmd","findData","nodeToFind","findOption","renderData","count","fileChanged","findNode","option","reRender","addRenderCount","blockRender","allowRenderNewFile","blockRenderNewFile","selectFindData","selectRenderData","mapDispatchToProps","connect","ownProps","setDialogIsOpen","setDialogContent","setDrawerIsOpen","addErrorToast","fileName","darkTheme","windowSize","useState","width","height","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","command","setCommand","lastCommands","setLastCommands","commandId","setCommandId","dispatch","runCommands","hiddenIds","commands","cmdArg","string","matches","matchAll","idList","insideBracket","insideMatches","rangeLim","numS","from","_","listStr","match","word","argMatch","argIsConclusion","regexString","regex","RegExp","test","err","allNodesIds","obj","find","menus","icon","text","onClick","e","preventDefault","download","downloadJSON","fName","link","document","createElement","href","encodeURIComponent","click","replaceAll","getElementsByClassName","toDataURL","help","className","Group","align","Alignment","LEFT","Heading","Divider","content","RIGHT","placeholder","onChange","onKeyDown","key","unshift","newId","rightElement","placement","autoComplete","marginLeft","undefined","disabled","checked","readUploadedFileAsText","inputFile","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","VisualizerDialog","dialogIsOpen","dialogContent","dialogProps","title","dialogBody","succesButton","changeFileName","changeFile","useReducer","newFlag","focusFlag","flagCount","setFocusFlag","Classes","DIALOG_BODY","childNodes","focus","DIALOG_FOOTER_ACTIONS","closeDialog","hasSelection","onInputChange","a","files","File","fileContents","message","ext","intent","Intent","SUCCESS","isOpen","onClose","usePortal","DIALOG_FOOTER","textColorFromBg","bgColor","sixDigitColor","charAt","join","Node","props","nHided","nDescendants","setNodeOnFocus","toggleNodeSelection","updateNodePosition","openDrawer","onDragEnd","createTree","tag","stroke","strokeWidth","this","fontSize","padding","depSize","infos","idSize","setIdSize","descendantSize","setDescendantSize","font","calc","context","getContext","measureText","getTextWidth","toString","draggable","onDragMove","attrs","evt","button","shiftKey","menuNode","getElementById","top","clientY","left","clientX","display","points","depLineSize","radius","depText","Line","Menu","unfold","foldSelectedNodes","changeNodeColor","currentColor","options","setColor","foldSelected","stopPropagation","vertical","handleWheel","stage","getStage","oldScale","scaleX","pointerPosition","getPointerPosition","mousePointTo","newScale","deltaY","stageScale","stageX","stageY","Canvas","nodeOnFocus","setState","nodesSelected","showingNodes","LineProps","to","saveNodePosition","copyNodePosition","showingEdges","edgeKey","edge","componentDidUpdate","bind","canvasSize","newShowingNodes","newNodeProps","updateEdgesAndFuncs","prevProps","found","o","Boolean","includes","onWheel","scaleY","onContextMenu","current_state","proofChanged","visualInfoChanged","nodeFindData","nodeWidth","nodeHeight","g","dagre","graphlib","Graph","setGraph","rankdir","ranker","setDefaultEdgeLabel","setNode","setEdge","layout","xOffset","yOffset","v","console","log","Component","newVisualInfo","visualInfos","VisualizerTree","originalNodeInfo","setNodeInfo","forceUpdate","setNodes","setSelected","forEachNode","callback","backgroundColor","contents","onNodeClick","nodeData","_nodePath","originallySelected","isSelected","onNodeCollapse","isExpanded","onNodeExpand","ELEVATION_0","VisualizerDirectoryStyle","proofTree","ruleHelper","indent","translate","nodeInfo","ALL","ruleHelperIsOpen","argsHelperIsOpen","concHelperIsOpen","dispatchHelper","offsetHeight","float","clear","borderRight","overflow","RULE","maxHeight","ARGS","CONC","dependency","Let","letText","letsList","indices","lines","biggerID","externalLets","expandValue","shouldUpdate","keyList","let","letName","k","indentLevel","expandPartialy","externalRef","letIdx","indentedText","printLines","lastLine","newIdx","shrinkValue","fitsTheWindow","repeat","mode","someDoesntFit","newLines","thisLevel","thisLine","lastSpace","lastUsedSpace","lastOpenParenthesis","biggestSize","newBiggerID","thisSize","groupUp","original","numKey","LetRender","toRender","shouldExpand","shouldRevert","dispatchExpansion","widthRef","useRef","resizeMode","setResizeMode","newMap","letMapS","setLetMapS","letsRef","initializeLet","lets","currentLet","indice","current","newWidth","clientWidth","expandAll","EXPAND","revertLet","REVERT","margin","whiteSpace","arr","start","thisLet","expandLet","overflowWrap","renderLet","castProofNodeToTreeNode","secondaryLabel","parentsId","hasCaret","rootNode","tree","roots","stack","childrenStack","insertedStack","lastNode","lastChild","nextNode","VisualizerStage","fileID","setProofTree","setOriginalNodeInfo","revertAll","dispatchLetExpansion","drawerIsOpen","setTree","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","position","Position","BOTTOM","DRAWER_BODY","VisualizerLetDrawer","VisualizerTheoryLemma","tl","VisualizersDrawer","nodeClusters","tabID","setTabID","handleClusterClick","theoryLemma","newTabId","selectedTabId","panel","App","toaster","setDrawerOpenState","refHandlers","ref","show","DANGER","TOP","store","configureStore","reducer","fileReducer","proofReducer","themeReducer","externalCmdReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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,OAEjB,uBAAMgP,UAAU,eAAehN,MAAO,CAAEggB,aAAc,cAAtD,SACKJ,IAKL,uBAAM5S,UAAU,eAAehN,MAAO,CAAEggB,aAAc,cAAtD,SACKf,IAKjB,OAAO,+BAQFgB,MCxMb,SAASxF,GAAW9Z,GAChB,OAAQA,EAAKrD,MAAM,KAAK,IACpB,IAAK,SACD,MAAO,8DACX,IAAK,SACD,OACIqD,EACA,uYAER,IAAK,QACD,OACIA,EACA,gnBAER,IAAK,OACD,OACIA,EACA,sZAER,IAAK,UACD,OACIA,EACA,0PAER,IAAK,WACD,OACIA,EACA,6MAER,IAAK,oBACD,OACIA,EACA,moBAER,IAAK,sBACD,OACIA,EACA,6iCAER,IAAK,qBACD,OACIA,EACA,gcAER,IAAK,0BACD,OACIA,EACA,qsBAER,IAAK,4BACD,OACIA,EACA,4LAER,IAAK,eACD,OACIA,EACA,wVAER,IAAK,iBACD,OACIA,EACA,6mBAER,IAAK,aACD,OACIA,EACA,qRAER,IAAK,mBACD,OACIA,EACA,uKAER,IAAK,oBACD,OACIA,EACA,oNAER,IAAK,0BACD,OACIA,EACA,oKAER,IAAK,oBACD,OACIA,EACA,+MAER,IAAK,gBACD,OACIA,EACA,oNAER,IAAK,gBACD,OACIA,EACA,gOAER,IAAK,aACD,OACIA,EACA,mOAER,IAAK,iBACD,OACIA,EACA,0VAER,IAAK,gBACD,OACIA,EACA,uNAER,IAAK,iBACD,OACIA,EACA,kOAER,IAAK,aACD,OACIA,EACA,kpCAER,IAAK,mBACD,OACIA,EACA,ueAER,IAAK,YACD,OACIA,EACA,iNAER,IAAK,aACD,OACIA,EACA,oNAER,IAAK,mBACD,OACIA,EACA,4oBAER,IAAK,yBACD,OACIA,EACA,itBAER,QACI,OAAOA,GAInB,SAASuf,GAAwB7c,GAAgC,IAAD,EACtD9B,GAAQ,UAAA8B,EAAKpD,mBAAL,eAAkBjC,QAAlB,UAELqF,EAAKxE,GAFA,4BAEYwE,EAAK3C,YACzB2C,EAAKtC,aAAa/C,OAAlB,UAEGqF,EAAKxE,GAFR,4BAEoBwE,EAAK3C,YAFzB,UAIG2C,EAAKxE,GAJR,cAIgBwE,EAAK3C,YAG3B,MAAO,CACH7B,GAAIwE,EAAKxE,GACTiN,KAAM,QACNvK,MAAOA,EACP4e,eAAe,GAAD,OAAK9c,EAAK1C,MACxBA,KAAM0C,EAAK1C,KACXC,KAAMyC,EAAKzC,KACXF,WAAY2C,EAAK3C,WACjB4F,SAAUjD,EAAKtE,QAAQ,GACvBd,YAAaoF,EAAKpF,YAAc,EAChC4T,OAAQxO,EAAKpD,YAAcoD,EAAKpD,YAAYjC,OAAS,EACrDiC,YAAaoD,EAAKpD,YAAcoD,EAAKpD,YAAY6B,KAAI,SAAC6D,GAAD,OAAOA,EAAE9G,MAAM,GACpEsR,WAAY,GACZpP,aAAcsC,EAAKtC,aACnBqf,UAAW/c,EAAKtE,QAChBshB,SAAU/I,QAAQjU,EAAKpF,YAAc,IAI7C,SAASmU,GAAWlU,EAAwBW,GACxC,IAAMyhB,EAAWpiB,EAAM0N,MAAK,SAACyL,GAAD,OAAOA,EAAExY,KAAOA,KACtC0hB,EAAmB,GACrBC,EAAoB,GAmExB,OAhEIF,GAAW,WACX,IAII1hB,EAJE6hB,EAAkB,CAACH,EAASzhB,IAC5B6hB,EAAgB,EAAE,GAClBC,EAA0B,GAGhCJ,EAAKhhB,KAAK2gB,GAAwBI,IAClCK,EAAcphB,KAAK+gB,EAASzhB,IAG5B,IAVU,iBAWN,IAAM+hB,EAAWH,EAAMA,EAAMziB,OAAS,GAClC6iB,EAAYH,EAAcA,EAAc1iB,OAAS,GAIrD,GAHAY,EAAcV,EAAM0N,MAAK,SAACyL,GAAD,OAAOA,EAAExY,KAAO+hB,KAGrCC,EAAYjiB,EAAYR,SAASJ,OAAS,EAAG,CAC7C6iB,IACAJ,EAAMlhB,KAAKX,EAAYR,SAASyiB,IAChCH,EAAcnhB,MAAM,GAEpB,IAAMuhB,EAAgB5iB,EAAM0N,MAAK,SAACyL,GAAD,OAAOA,EAAExY,KAAOD,EAAYR,SAASyiB,OAG1B,IAAxCF,EAAcngB,QAAQsgB,EAASjiB,MAC/B0hB,EAAKhhB,KAAK2gB,GAAwBY,IAClCH,EAAcphB,KAAKuhB,EAASjiB,UAKhC4hB,EAAMljB,MACNmjB,EAAcnjB,MACdmjB,EAAcA,EAAc1iB,OAAS,MAvBtCyiB,EAAMziB,QAAS,IA4BtB,IACIqF,EAAgBtF,EADd+D,EAAW,GAIjB,IAAK/D,EAAI,EAAGA,EAAIwiB,EAAKviB,OAAQD,IACzB+D,EAAIye,EAAKxiB,GAAGc,IAAMd,EAGtB,IAAKA,EAAI,EAAGA,EAAIwiB,EAAKviB,OAAQD,GAAK,GAC9BsF,EAAOkd,EAAKxiB,IAEPqiB,UAAUphB,SAAQ,SAACsH,GAEf1D,MAAMd,EAAIwE,KAAevI,KAErB6E,MAAM0D,IAAaia,EAAKze,EAAIwE,IAC7Bia,EAAKze,EAAIwE,IAAW6J,WAAW5Q,KAAK8D,GAG9Bmd,EAAMxiB,QACZwiB,EAAMjhB,KAAK8D,OA1DhB,GAgERmd,EAGX,IAiReO,GAjRmB,WAE9B,IAAM7gB,EAAS7D,EAAewK,GACxB3I,EAAQ7B,EAAeqK,GACvBhJ,EAAMrB,EAAegB,GACrB2jB,EAAS3kB,EAAesB,GACxBqC,EAAQ3D,EAAeuK,GACvBiC,EAAYxM,EAAe8K,IAEjC,EAAkC4B,mBAAyB,IAA3D,mBAAOyR,EAAP,KAAkByG,EAAlB,KACA,EAAgClY,mBAAmB,CAC/CpI,KAAM,GACNC,KAAM,GACNF,WAAY,GACZmR,OAAQ,EACRC,aAAc,EACd7R,YAAa,GACbc,aAAc,KAPlB,mBAAO6Z,EAAP,KAAiBtB,EAAjB,KASA,EAAgDvQ,mBAAmB,CAC/DpI,KAAM,GACNC,KAAM,GACNF,WAAY,GACZmR,OAAQ,EACRC,aAAc,EACd7R,YAAa,GACbc,aAAc,KAPlB,mBAAOsY,EAAP,KAAyB6H,EAAzB,KAUA,EAAiFtR,sBAC7E,SAAC7S,EAAkBC,GACf,IAAQmG,EAAkBnG,EAAlBmG,KAAMlG,EAAYD,EAAZC,QAGd,GAAIkG,IAASnH,EAAkB6e,IAC3B,IAAK,IAAI9c,EAAI,EAAGA,EAAIhB,EAAMiB,OAAQD,IAC9BhB,EAAMgB,GAAKd,OAId,GAAIA,EAEL,IAAK,IAAIc,EAAI,EAAGA,EAAIhB,EAAMiB,OAAQD,IAC9BhB,EAAMgB,GAAKA,IAAMoF,GAAOlG,OAI3BF,EAAMoG,GAAQlG,EAEnB,OAAO,YAAIF,KAGf,EAAC,GAAO,GAAO,IAvBnB,yCAAQ+d,EAAR,KAA0BC,EAA1B,KAA4CC,EAA5C,KAA+DC,EAA/D,KAyBA,EAAuDrL,sBACnD,SAAC7S,EAAkBC,GAGf,IAFA,IAAQmG,EAAkBnG,EAAlBmG,KAAMlG,EAAYD,EAAZC,QAELc,EAAI,EAAGA,EAAIhB,EAAMiB,OAAQD,IAC9BhB,EAAMgB,GAAKA,IAAMoF,GAAOlG,EAG5B,OAAO,YAAIF,KAGf,EAAC,GAAO,IAXZ,yCAAQuiB,EAAR,KAAmB6B,EAAnB,KAA+BC,EAA/B,KAaA,EAAwCrY,oBAAS,GAAjD,mBAAOsY,EAAP,KAAqB3Y,EAArB,KACA,EAAwBK,mBAAyB,IAAjD,mBAAOwX,EAAP,KAAae,EAAb,KAGAnY,qBAAU,kBAAM8X,EAAa7O,GAAWlU,EAAO,MAAK,CAACR,IA4JrD,OACI,uBAAKga,cAAe,SAACzL,GAAD,OAAOA,EAAEC,kBAA7B,UACKhO,EAAMF,OAAS,EACF,UAAVgC,EACI,eAAC,GAAD,CAAqBkS,WA9JlB,SAAC0I,EAAoB2F,GACpCjH,EAAYsB,GACZ0G,EAAQf,GAAc,IACtBW,EAAoBtG,GACpBlS,GAAgB,IA0JyC0J,WAAYA,IAA5C4O,GAEb,eAAC,GAAD,CACIxG,UAAWA,EACXC,WAAYA,GACZC,OAAQ,iBAAM,IACdC,UAAW,iBAAM,MAGzB,KACJ,eAAC,IAAD,CACI3N,UAAWnE,EAAY,WAAa,GACpC0Y,WAAW,EACXC,mBAAmB,EACnBC,sBAAsB,EACtBC,cAAc,EACdC,aAAa,EACbzQ,OAAQmQ,EACRO,SAAUC,IAASC,OACnB1Q,WAAW,EACXD,QAAS,SAAClF,GACNA,EAAEC,iBACFxD,GAAgB,GAChBuS,EAAe,CAAE9X,KAAMnH,EAAkB6e,IAAK5d,SAAS,KAE3D6O,KAAK,YACLyD,MAAM,YAhBV,SAkBI,uBAAKvC,UAAWiD,KAAQ8R,YAAxB,UACI,eAAC,GAAD,CACIlZ,UAAWA,EACX0E,QAASgT,EACTjH,YAAaA,EACbD,iBAAkBA,IAEtB,sBAAKrM,UAAWiD,KAAQC,YAAxB,SAxLR,yBACIrR,GAAG,kBACHmO,UAAU,yFACVhN,MAAO,CAAEgJ,MAAO,QAHpB,UAKI,iCACI,gCACI,2CACA,6CAGR,mCACI,gCACI,gCACI,4CACA,eAAC,IAAD,CACInK,GAAG,OACHiN,KAAK,OACLE,QAAS,WACLiP,EAAe,CAAE9X,KAAMnH,EAAkBuf,KAAMte,SAAU6d,UAIrE,gCACKF,EAASja,KACV,eAAC,IAAD,CAAUuQ,OAAQ4J,EAAlB,SACI,eAAC,IAAD,CAAK9a,MAAO,CAAEwb,UAAW,QAASF,SAAU,QAAUzc,GAAG,WAAzD,SACK4b,GAAWG,EAASja,gBAMpCia,EAASha,MACN,gCACI,gCACI,2CAAsB,KACa,IAAlCga,EAASha,KAAKJ,QAAQ,OACnB,eAAC,IAAD,CACI3B,GAAG,OACHiN,KAAK,YACLE,QAAS,WACLiP,EAAe,CACX9X,KAAMnH,EAAkByf,KACxBxe,SAAU8d,OAItB,QAER,sBAAI/a,MAAO,CAAEwb,UAAW,QAASF,SAAU,QAA3C,UACKV,EAASha,MACyB,IAAlCga,EAASha,KAAKJ,QAAQ,OACnB,eAAC,IAAD,CAAU0Q,OAAQ6J,EAAlB,SACI,eAAC,IAAD,CAAK/a,MAAO,CAAEwb,UAAW,QAASF,SAAU,QAAUzc,GAAG,WAAzD,SACK+b,EAASha,SAGlB,WAKhB,gCACI,sBAAIZ,MAAO,CAAEwb,UAAW,QAASF,SAAU,QAA3C,UACI,iDAA4B,KACa,IAAxCV,EAASla,WAAWF,QAAQ,OACzB,uCACI,eAAC,IAAD,CACI3B,GAAG,OACHiN,KAAK,YACLE,QAAS,WACLiP,EAAe,CACX9X,KAAMnH,EAAkB0f,KACxBze,SAAU+d,IAEdoG,EAAqB,CACjBje,KAAMlH,EAAcsjB,OACpBtiB,SAAS,OAIrB,eAAC,IAAD,CACI4B,GAAG,OACHiN,KAAK,OACLE,QAAS,WACLiP,EAAe,CACX9X,KAAMnH,EAAkB0f,KACxBze,SAAS,IAEbmkB,EAAqB,CACjBje,KAAMlH,EAAcwjB,OACpBxiB,SAAS,UAKzB,QAER,qBAAI+C,MAAO,CAAEwb,UAAW,QAASF,SAAU,QAA3C,UAC6C,IAAxCV,EAASla,WAAWF,QAAQ,OACzB,eAAC,GAAD,CACI3B,GAAI,EACJsf,SAAUvD,EAASla,WACnBR,OAAQA,EACRke,aAAckB,EACdjB,aAAc8C,EACd7C,kBAAmB8C,IAEvB,UAIXxG,EAAS9I,aACN,gCACI,8BACI,qDAEJ,8BAAK8I,EAAS9I,kBAElB,KAEH8I,EAAS/I,OACN,gCACI,8BACI,gDAEJ,yCAAS+I,EAAS3a,YAAY6B,KAAI,SAACuB,GAAD,MAAU,IAAMA,KAAlD,WAEJ,KACHuX,EAAS7Z,aAAa/C,OACnB,gCACI,8BACI,qDAEJ,wCAAQ4c,EAAS7Z,aAAae,KAC1B,SAAC6Z,GAAD,iBAAoBA,EAAW1V,KAA/B,cAAyC0V,EAAWzV,OAAOpE,KAAI,SAACiE,GAAD,MAAS,IAAMA,KAA9E,gBAGR,sBCtelBkN,I,cACF,oJAsMW+O,GApMuB,WAClC,IAAMnZ,EAAYxM,EAAe8K,IAC3BjH,EAAS7D,EAAewK,GACxB0X,EAAWC,iBAAO,GAExB,EAA8BzV,mBAAS,eAAK7I,IAA5C,mBAAO0e,EAAP,KAAgBC,EAAhB,KACA,EAAoC9V,mBAAS,GAA7C,mBAAO0V,EAAP,KAAmBC,EAAnB,KACMI,EAAUN,iBAA+B,IAG/CrV,qBAAU,WAEN,SAASC,IACL,IAAMJ,EAAQuV,EAASY,QAGjBC,EAAW7S,SAASM,uBAAuB,uBAAuB,GAAGwS,YAAc,GACpEX,EAArB1V,IAAUoW,EAAyB,EAAKpW,EAAQoW,EAAyB,EAAmB,GAE5Fb,EAASY,QAAUC,EASvB,OALA/V,OAAOG,iBAAiB,SAAUJ,GAElCA,IAGO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACnD,IAEH,IA4BM6W,EAAY,SAACrS,GACf,IAAMoR,EAAOF,EAAQK,QACfnW,EAAQuV,EAASY,QAGvB,GAAInW,EAAO,CACP,IAAIiW,EAAaL,EAAQhR,GAErBmO,EAAqC,GAEzC,YAAIkD,EAAWzU,SAAS,YAAYxL,SAAQ,SAACiM,GACrCA,EAAMvG,QAAOqX,EAAQ9Q,EAAMvG,OAASuG,EAAM,OAI9C7L,OAAOD,KAAK6f,GAAMhhB,SAAWoB,OAAOD,KAAKyf,GAAS5gB,SAClDghB,EAAKpR,GAAO,IAAIgO,GAAIhO,EAAKqR,EAAYD,EAAMjD,IAI1CiD,EAAKpR,GAAKsP,cAAclU,EAAOiK,IAa5BwL,GAAc,GAAKO,EAAKpR,GAAKoO,MAAMhe,OAAS,IAE5CghB,EAAKpR,GAAKoO,MAAQ,CACd,CAAErf,MAAOqiB,EAAKpR,GAAKwM,WAAa4E,EAAKpR,GAAKmQ,UAAYiB,EAAKpR,GAAKjR,MAAO8f,YAAa,IAExFuC,EAAKpR,GAAKqO,SAAW,EAGrBgD,EAAaD,EAAKpR,GAAK8M,OAAO1R,GAAO,EAAOiK,IAC5C2L,EAAQhR,GAAOqR,EAEflD,EAAU,GAEV,YAAIkD,EAAWzU,SAAS,YAAYxL,SAAQ,SAACiM,GACrCA,EAAMvG,QAAOqX,EAAQ9Q,EAAMvG,OAASuG,EAAM,SA1BtDgU,EAAaD,EAAKpR,GAAK8M,OAAO1R,GAAO,EAAMiK,IAC3C2L,EAAQhR,GAAOqR,EAEflD,EAAU,GAEV,YAAIkD,EAAWzU,SAAS,YAAYxL,SAAQ,SAACiM,GACrCA,EAAMvG,QAAOqX,EAAQ9Q,EAAMvG,OAASuG,EAAM,QAyBtD,IAAM2U,EAAgC,GAClCC,EAAQ,EA4BZ,OA1BAzgB,OAAOD,KAAK4c,GAAS/c,SAAQ,SAAC0F,EAAO3G,EAAG4G,GACpC,IAAMnD,EAAMlC,OAAOoF,GACbob,EAAU/D,EAAQva,GAGxBoe,EAAIrgB,KAAK0f,EAAWtd,UAAUke,EAAOre,IACrCoe,EAAIrgB,KACA,oBACIyN,UAAWnE,EAAY,iBAAmB,cAC1CmD,QAAS,YA5FX,SAACrJ,EAAgBiL,EAAagP,GAC5C,IAAMoC,EAAOF,EAAQK,QAEfxC,EAAcqC,EAAKpR,GACzBoR,EAAKrc,GAAQyX,YAAa,EAC1BwE,EAAQjc,GAAUqc,EAAKrc,GAAQ+Z,eAAeC,EAAaC,GAC3DiC,EAAW,eAAKD,IAuFImB,CAAUnS,EAAKkS,EAASte,IAHhC,SAMKse,KAITD,EAAQre,EAAMse,EAAQ9hB,OAGlBD,IAAM4G,EAAK3G,OAAS,GACpB4hB,EAAIrgB,KAAK0f,EAAWtd,UAAUke,EAAOZ,EAAWjhB,YAKpDoB,OAAOD,KAAK4c,GAAS/d,OACd,uBAAMgP,UAAU,eAAhB,SAAgC4S,IAEhC,uBAAM5S,UAAU,eAAhB,SAAgCiS,IAG/C,OAAO,gCAGX,OACI,sBAAKjS,UAAWiD,KAAQ8R,YAAxB,SACI,sBAAK/U,UAAWiD,KAAQC,YAAxB,SACI,yBACIrR,GAAG,kBACHmO,UAAU,yFACVhN,MAAO,CAAEgJ,MAAO,QAHpB,UAKI,iCACI,gCACI,qBAAIhJ,MAAO,CAAEgJ,MAAO,SAApB,sBACA,qBAAIgE,UAAU,sBAAd,mBACA,qBAAIhN,MAAO,CAAEgJ,MAAO,SAApB,yBAGR,iCACK5J,OAAOD,KAAKyf,GAAS9c,KAAI,SAAC8L,GACvB,OACI,gCACI,8BACI,kCAASA,MAEb,qBAAI5N,MAAO,CAAEgJ,MAAO,OAAQ2W,WAAY,YAAxC,SAAuDM,EAAUrS,KACjE,sBAAI5N,MAAO,CAAEgJ,MAAO,QAASC,OAAQ,QAArC,UACI,eAAC,IAAD,CACI+C,QAAS,kBAtI/B,SAAC4B,GACf,IAAMoR,EAAOF,EAAQK,QAErBH,EAAKpR,GAAKwM,YAAa,EACvBwE,EAAQhR,GAAOoR,EAAKpR,GAAKuO,aAAY,GACrC0C,EAAW,eAAKD,IAiImCU,CAAU1R,IACzBZ,UAAU,cACVlB,KAAK,YACLC,KAAK,WAET,eAAC,IAAD,CACIC,QAAS,kBApI/B,SAAC4B,GACf,IAAMoR,EAAOF,EAAQK,QAGjBH,EAAKpR,GAAKwM,aACV4E,EAAKpR,GAAKwM,YAAa,EACvBwE,EAAQhR,GAAOoR,EAAKpR,GAAKqP,cACzB4B,EAAW,eAAKD,KA6H+BY,CAAU5R,IACzBZ,UAAU,cACVlB,KAAK,OACLC,KAAK,gBAhBR6B,gBC5H1BqU,GAjDyB,WAEpC,OACI,sBAAKjV,UAAWiD,KAAQ8R,YAAxB,SACI,sBAAK/U,UAAWiD,KAAQC,YAAxB,SACI,yBACIrR,GAAG,kBACHmO,UAAU,yFACVhN,MAAO,CAAEgJ,MAAO,QAHpB,UAKI,iCACI,gCACI,qBAAIhJ,MAAO,CAAEgJ,MAAO,SAApB,sBACA,qBAAIgE,UAAU,sBAAd,mBACA,qBAAIhN,MAAO,CAAEgJ,MAAO,SAApB,yBAGR,iCAhBK,CAAC,EAAG,GAiBSlH,KAAI,SAACogB,GACf,OACI,gCACI,8BACI,kCAASA,MAEb,qBAAIliB,MAAO,CAAEgJ,MAAO,OAAQ2W,WAAY,YAAxC,SAAuD,OACvD,sBAAI3f,MAAO,CAAEgJ,MAAO,QAASC,OAAQ,QAArC,UACI,eAAC,IAAD,CACI+C,QAAS,kBAAM,MACfgB,UAAU,cACVlB,KAAK,YACLC,KAAK,WAET,eAAC,IAAD,CACIC,QAAS,kBAAM,MACfgB,UAAU,cACVlB,KAAK,OACLC,KAAK,gBAhBRmW,gBC+F1BC,GA5GkC,SAAC,GAAoD,IAAlDd,EAAiD,EAAjDA,aAAc3Y,EAAmC,EAAnCA,gBACxDG,EAAYxM,EAAe8K,IAC3Bib,EAAe/lB,EAAe2K,GAC9BiD,EAAW9N,IAEjB,EAA0B4M,mBAAS,MAAnC,mBAAOsZ,EAAP,KAAcC,EAAd,KAMMC,EAAqB,SAACrf,GAExB,OAAQA,GACJ,IAAK,MACD+G,EAASjF,EAAYod,EAAa9jB,QAAO,SAACC,EAAekB,GAAhB,OAAsBlB,EAAIF,OAAOoB,EAAEQ,eAAc,MAC1F,MACJ,IAAK,MACDgK,EAASjF,EAAYod,EAAa,GAAGniB,cACrC,MACJ,IAAK,MACDgK,EAASjF,EAAYod,EAAa,GAAGniB,cACrC,MACJ,IAAK,KACDgK,EAASjF,EAAYod,EAAa,GAAGniB,cACrC,MACJ,IAAK,KACDgK,EAASjF,EAAYod,EAAa,GAAGniB,cACrC,MACJ,IAAK,KACDgK,EAASjF,EAAYod,EAAa,GAAGniB,gBAK3C4L,EAAQ,CACV9L,KACI,uBAAKiN,UAAW,cAAgBiD,KAAQC,YAAxC,UACI,uBAAKlD,UAAU,MAAf,UACI,eAAC,IAAD,CACIjB,KAAK,OACLC,QAAS,SAACC,GACNA,EAAEC,iBACFjC,EAAS7E,EAAU,SACnB6E,EAASnC,SAGjB,eAAC,IAAD,CACIiE,KAAK,YACLC,QAAS,SAACC,GACNA,EAAEC,iBACFjC,EAAS7E,EAAU,cACnB6E,EAASnC,SAGjB,eAAC,IAAD,CACIiE,KAAK,mBACLC,QAAS,SAACC,GACNA,EAAEC,iBACFjC,EAAS7E,EAAU,iBACnB6E,EAASnC,YAIrB,uBAAKkF,UAAU,kBAAf,UACI,uBAAMhB,QAAS,kBAAMuW,EAAmB,QAAxC,gCACA,uBAAMvW,QAAS,kBAAMuW,EAAmB,QAAxC,8BACA,uBAAMvW,QAAS,kBAAMuW,EAAmB,QAAxC,8BACA,uBAAMvW,QAAS,kBAAMuW,EAAmB,OAAxC,uCACA,uBAAMvW,QAAS,kBAAMuW,EAAmB,OAAxC,yCACA,uBAAMvW,QAAS,kBAAMuW,EAAmB,OAAxC,sCAIZriB,OAAQ,eAAC,GAAD,IACRsiB,YAAa,eAAC,GAAD,KAGjB,OACI,eAAC,IAAD,CACIxV,UAAWnE,EAAY,WAAa,GACpC7I,MAAO,CAAEwb,UAAW,MAAOxS,MAAO,OAClCuY,WAAW,EACXC,mBAAmB,EACnBC,sBAAsB,EACtBC,cAAc,EACdC,aAAa,EACbzQ,OAAQmQ,EACRO,SAAUC,IAASrU,MACnB4D,WAAW,EACXD,QAAS,SAAClF,GACNA,EAAEC,iBACFxD,GAAgB,IAEpBoD,KAAK,eACLyD,MAAM,cAhBV,SAkBI,sBAAKvC,UAAWiD,KAAQ8R,YAAxB,SACI,gBAAC,IAAD,CAAMljB,GAAG,gBAAgB6O,SA3Fb,SAAC+U,EAAiB1X,EAAQkB,GAC9CqW,EAA6B,kBAAbG,EAAwBA,EAAWzc,OAAOyc,KA0FEC,cAAeL,EAAnE,UACI,eAAC,IAAD,CAAKxjB,GAAG,KAAK0Q,MAAM,OAAOoT,MAAO9W,EAAK,KAAUmB,UAAU,iBAC1D,eAAC,IAAD,CAAKnO,GAAG,KAAK0Q,MAAM,UAAUoT,MAAO9W,EAAK,OAAYmB,UAAU,iBAC/D,eAAC,IAAD,CAAKnO,GAAG,KAAK0Q,MAAM,eAAeoT,MAAO9W,EAAK,YAAiBmB,UAAU,yBCxD9E4V,GA9CO,WAClB,IAMIC,EANJ,EAAwC9Z,oBAAS,GAAjD,mBAAOqG,EAAP,KAAqB5G,EAArB,KACA,EAA0CO,mBAAS,gBAAnD,mBAAOsG,EAAP,KAAsB5G,EAAtB,KACA,EAA2CmH,sBAAW,SAACsB,GAAD,OAAaA,KAAQ,GAA3E,mBAAOmQ,EAAP,KAAqByB,EAArB,KACMja,EAAYxM,EAAe8K,IAI3B4b,EAAc,CAChBF,QAAS,SAACG,GAAD,OAAmBH,EAAUG,IAGpCra,EAAgB,SAAC8C,GACnBoX,EAAQI,KAAK,CAAEnX,KAAM,eAAgBiF,OAAQC,IAAOkS,OAAQrS,QAASpF,KASzE,OANAtC,qBAAU,WACNoD,SAASM,uBAAuB,eAAe,KACxCN,SAASM,uBAAuB,eAAe,GAAGG,UAAY,MAEtE,CAACqU,IAGA,uBAAKrU,UAAWnE,EAAY,YAAc,GAA1C,UACI,eAAC,IAAD,CAAS+Y,SAAUC,IAASsB,IAAKH,IAAKD,EAAYF,UAClD,eAAC,GAAD,CACIra,gBAAiBA,EACjBC,iBAAkBA,EAClBC,gBAAiBoa,EACjBna,cAAeA,IAEnB,eAAC,GAAD,CACIyG,aAAcA,EACd5G,gBAAiBA,EACjB6G,cAAeA,EACf5G,iBAAkBA,EAClBE,cAAeA,IAEnB,eAAC,GAAD,IACC0Y,EACG,eAAC,GAAD,CAAmBA,aAAcA,EAAc3Y,gBAAiBoa,IAChE,SC/CHM,GAAQC,YAAe,CAChCC,QAAS,CACLlmB,KAAMmmB,EACNrlB,MAAOslB,EACPpc,MAAOqc,GACPpc,YAAaqc,MCGNC,I,OAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCCpBQ,IAASC,OACL,eAAC,IAAMC,WAAP,UACI,eAAC,IAAD,CAAUlB,MAAOA,GAAjB,SACI,eAAC,GAAD,QAGR7W,SAASwH,eAAe,SAM5B4P,O","file":"static/js/main.e2f4fd42.chunk.js","sourcesContent":["export enum drawerHelpersKind {\r\n    RULE,\r\n    ARGS,\r\n    CONC,\r\n    ALL,\r\n}\r\n\r\nexport enum renderLetKind {\r\n    EXPAND,\r\n    REVERT,\r\n}\r\n\r\nexport enum ClusterKind {\r\n    NONE,\r\n    SAT,\r\n    CNF,\r\n    TL,\r\n    PP,\r\n    IN,\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { FileState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: FileState = {\r\n    name: 'ex.smt2',\r\n    value: 'digraph proof {\\n\\trankdir=\"BT\";\\n\\tnode [shape=record];\\n\\t0 [label=\"{SCOPE((not a), a)|(not (and (not a) a))}\", class = \" basic \", comment = \"{\\'subProofQty\\':1}\" ];\\n\\t1 [label=\"{CHAIN_RESOLUTION(true, a)|false}\", class = \" propositional \", comment = \"{\\'subProofQty\\':2}\" ];\\n\\t2 [label=\"{ASSUME(a)|a}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t3 [label=\"{ASSUME((not a))|(not a)}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t1->0;\\n\\t2->1;\\n\\t3->1;\\n}',\r\n    filesCount: 0,\r\n};\r\n\r\nexport const fileSlice = createSlice({\r\n    name: 'file',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        set: (state, action: PayloadAction<{ name: string; value: string }>) => {\r\n            state.name = action.payload.name;\r\n            state.value = action.payload.value;\r\n            state.filesCount++;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { set } = fileSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectFileName = (state: RootState): string => state.file.name;\r\n\r\nexport const selectFileExtension = (state: RootState): string => {\r\n    const ext = state.file.name.split('.').pop();\r\n    return ext ? ext : '';\r\n};\r\n\r\nexport const selectDot = (state: RootState): string =>\r\n    state.file.name.split('.').pop() === 'json' ? JSON.parse(state.file.value).dot : state.file.value;\r\n\r\nexport const selectFile = (state: RootState): string => state.file.value;\r\n\r\nexport const selectFileCount = (state: RootState): number => state.file.filesCount;\r\n\r\nexport default fileSlice.reducer;\r\n","import { ClusterKind } from '../../../interfaces/enum';\r\nimport { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\n\r\ninterface ClusterColorMap {\r\n    [type: number]: string;\r\n}\r\n\r\nfunction removeEscapedCharacters(s: string): string {\r\n    let newS = '';\r\n    for (let i = 0; i < s.length; i += 1) {\r\n        if (\r\n            !(\r\n                s[i] === '\\\\' &&\r\n                (s[i + 1] === '\"' ||\r\n                    s[i + 1] === '>' ||\r\n                    s[i + 1] === '<' ||\r\n                    s[i + 1] === '{' ||\r\n                    s[i + 1] === '}' ||\r\n                    s[i + 1] === '|')\r\n            )\r\n        ) {\r\n            newS += s[i];\r\n        }\r\n    }\r\n\r\n    return newS;\r\n}\r\n\r\nexport function processDot(dot: string): [NodeInterface[], ProofState['letMap'], ClusterColorMap] {\r\n    const nodes: NodeInterface[] = [\r\n        {\r\n            id: 0,\r\n            conclusion: '',\r\n            rule: '',\r\n            args: '',\r\n            views: [],\r\n            children: [],\r\n            parents: [NaN],\r\n            descendants: 0,\r\n            dependencies: [],\r\n            clusterType: ClusterKind.NONE,\r\n        },\r\n    ];\r\n    let comment: string | null = dot.slice(dot.indexOf('comment='));\r\n    comment = comment\r\n        ? removeEscapedCharacters(\r\n              removeEscapedCharacters(comment.slice(comment.indexOf('=') + 2, comment.indexOf(';') - 1)),\r\n          )\r\n        : null;\r\n\r\n    const clustersInfos: ClusterColorMap = {};\r\n    const lines = dot\r\n        .slice(dot.indexOf('{') + 1, dot.lastIndexOf('}') - 2)\r\n        .replace(/(\\n|\\t)/gm, '')\r\n        .split(';');\r\n    lines.forEach((line) => {\r\n        if (line.search('subgraph') !== -1) {\r\n            // Get the label of this node subgraph\r\n            let label = '';\r\n            let idx = line.indexOf('label=\"') + 7;\r\n            while (line[idx] !== '\"') {\r\n                label += line[idx];\r\n                idx++;\r\n            }\r\n\r\n            // Get the label of this node subgraph\r\n            let color = '';\r\n            idx = line.indexOf('bgcolor=\"') + 9;\r\n            while (line[idx] !== '\"') {\r\n                color += line[idx];\r\n                idx++;\r\n            }\r\n\r\n            // Get the nodes ID's\r\n            const numbers = line\r\n                .substring(idx + 1, line.length - 1)\r\n                .split(/\\s/)\r\n                .filter((str) => str.length)\r\n                .map((num) => Number(num));\r\n\r\n            let thisType: ClusterKind;\r\n            switch (label) {\r\n                case 'SAT':\r\n                    thisType = ClusterKind.SAT;\r\n                    break;\r\n                case 'CNF':\r\n                    thisType = ClusterKind.CNF;\r\n                    break;\r\n                case 'TL':\r\n                    thisType = ClusterKind.TL;\r\n                    break;\r\n                case 'PP':\r\n                    thisType = ClusterKind.PP;\r\n                    break;\r\n                case 'IN':\r\n                    thisType = ClusterKind.IN;\r\n                    break;\r\n                default:\r\n                    thisType = ClusterKind.NONE;\r\n            }\r\n\r\n            // Assign the type for each node\r\n            numbers.forEach((num) => {\r\n                nodes[num].clusterType = thisType;\r\n            });\r\n            clustersInfos[thisType] = color;\r\n        } else if (line.search('label') !== -1) {\r\n            const id = parseInt(line.slice(0, line.indexOf('[')).trim());\r\n            let attributes = line.slice(line.indexOf('[') + 1, line.lastIndexOf(']')).trim();\r\n\r\n            let label = attributes.slice(attributes.search(/(?<!\\\\)\"/) + 2);\r\n            label = label.slice(0, label.search(/(?<!\\\\)\"/) - 1);\r\n            let [conclusion, rule, args] = ['', '', ''];\r\n            [conclusion, rule] = label.split(/(?<!\\\\)\\|/);\r\n            [rule, args] = rule.indexOf(':args') != -1 ? rule.split(':args') : [rule, ''];\r\n\r\n            attributes = attributes.slice(attributes.indexOf(', class = ') + ', class = '.length);\r\n            attributes = attributes.slice(attributes.indexOf('\"') + 1, attributes.slice(1).indexOf('\"') + 1);\r\n            const views = attributes.trim().split(' ');\r\n            const comment: string = removeEscapedCharacters(line.slice(line.indexOf('comment'), line.lastIndexOf('\"')));\r\n            const commentJSON = JSON.parse(comment.slice(comment.indexOf('\"') + 1).replace(/'/g, '\"'));\r\n\r\n            if (!nodes[id]) {\r\n                nodes[id] = {\r\n                    id: id,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    views: [],\r\n                    children: [],\r\n                    parents: [NaN],\r\n                    descendants: 0,\r\n                    dependencies: [],\r\n                    clusterType: ClusterKind.NONE,\r\n                };\r\n            }\r\n            nodes[id].conclusion = removeEscapedCharacters(conclusion);\r\n            nodes[id].rule = removeEscapedCharacters(rule);\r\n            nodes[id].args = removeEscapedCharacters(args);\r\n            nodes[id].views = views;\r\n            nodes[id].descendants = commentJSON.subProofQty;\r\n        }\r\n        // TODO: Se o filho ja existe, isso aqui vai resetar os dados setados do filho\r\n        else if (line.search('->') !== -1) {\r\n            const [child, parent] = line.split('->').map((x) => parseInt(x.trim()));\r\n            nodes[parent].children.push(child);\r\n            // If there isn't a child node\r\n            if (!nodes[child]) {\r\n                nodes[child] = {\r\n                    id: child,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    views: [],\r\n                    children: [],\r\n                    parents: [],\r\n                    descendants: 0,\r\n                    dependencies: [],\r\n                    clusterType: ClusterKind.NONE,\r\n                };\r\n            }\r\n            // If there is and is an invalid parent\r\n            else if (isNaN(nodes[child].parents[0])) {\r\n                nodes[child].parents = [];\r\n            }\r\n            nodes[child].parents.push(parent);\r\n        }\r\n    });\r\n\r\n    return comment ? [nodes, JSON.parse(comment)['letMap'], clustersInfos] : [nodes, {}, clustersInfos];\r\n}\r\n\r\nexport const piNodeParents = (\r\n    proof: NodeInterface[],\r\n    hiddenNodesArray: number[],\r\n    dependencies: { [parentId: number]: number[] } = {},\r\n): number[] => {\r\n    const parents = hiddenNodesArray\r\n        // Concat all the parents\r\n        .reduce((acc: number[], hiddenNode) => {\r\n            let haveHiddenParent = false;\r\n\r\n            proof[hiddenNode].parents.forEach((parent) => {\r\n                // If this parent is a hidden node\r\n                if (hiddenNodesArray.indexOf(parent) !== -1) {\r\n                    haveHiddenParent = true;\r\n                } else {\r\n                    dependencies[parent]\r\n                        ? dependencies[parent].push(hiddenNode)\r\n                        : (dependencies[parent] = [hiddenNode]);\r\n                }\r\n            });\r\n\r\n            if (haveHiddenParent) return acc;\r\n            return acc.concat(proof[hiddenNode].parents);\r\n        }, [])\r\n        // Filter the duplicated elements\r\n        .filter((parent, i, self) => self.indexOf(parent) === i)\r\n        // Only the parents that aren't in he hidden nodes array remains\r\n        .filter((parent) => hiddenNodesArray.indexOf(parent) === -1);\r\n\r\n    // Removes the pi node parents from the dependencies\r\n    Object.keys(dependencies).forEach((parent) => {\r\n        const n = Number(parent);\r\n        if (parents.indexOf(n) !== -1) delete dependencies[n];\r\n    });\r\n\r\n    return parents;\r\n};\r\n\r\nexport const descendants = (proof: NodeInterface[], nodeId: number): number[] => {\r\n    return proof[nodeId].children.concat(\r\n        proof[nodeId].children.reduce((acc: number[], childId) => acc.concat(descendants(proof, childId)), []),\r\n    );\r\n};\r\n\r\nexport const piNodeChildren = (proof: NodeInterface[], hiddenNodesArray: number[]): number[] => {\r\n    const children = hiddenNodesArray\r\n        // Get all the childrens\r\n        .reduce((acc: number[], hiddenNode) => acc.concat(proof[hiddenNode].children), [])\r\n        // Exclude the childrens that are part of the hidden nodes\r\n        .filter((child) => hiddenNodesArray.indexOf(child) === -1);\r\n    return children;\r\n};\r\n\r\nexport const findNodesClusters = (proof: NodeInterface[], hiddenNodesArray: number[]): number[][] => {\r\n    const hiddenNodes = [...hiddenNodesArray];\r\n    const clusters: number[][] = [];\r\n    let clusteredNodes = 0;\r\n    const parents = hiddenNodes.map((hiddenNode) => proof[hiddenNode].parents);\r\n\r\n    // Cluster the nodes based on similiar parents\r\n    parents.forEach((parent, clusterID) => {\r\n        // If not all of the nodes where clustered and is a non empty cluster\r\n        if (clusteredNodes !== parents.length && parents[clusterID].length) {\r\n            clusters.push([]);\r\n            parents.forEach((p, hiddenID) => {\r\n                // If those nodes have some parent in commom and they weren't verified yet\r\n                if (parents[hiddenID].length && parent.some((_p) => p.indexOf(_p) !== -1)) {\r\n                    clusters[clusters.length - 1].push(hiddenNodes[hiddenID]);\r\n                    // Removes these parents from the array, making shure they will not get verified again (already clustered)\r\n                    parents[hiddenID] = [];\r\n                    // Increases the number o clustered nodes\r\n                    clusteredNodes++;\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    let pastCluster: number[][] = [];\r\n    // Cluster the nodes until there aren't changes being made\r\n    while (JSON.stringify(pastCluster) != JSON.stringify(clusters)) {\r\n        pastCluster = [...clusters];\r\n        clusters.forEach((cluster, clusterID) => {\r\n            const clusterParents = proof[cluster[0]].parents;\r\n\r\n            // For each cluster\r\n            clusters.forEach((parentCluster, id) => {\r\n                // If this parentCluster (cluster) is parent of the current cluster\r\n                if (parentCluster.some((hiddenID) => clusterParents.indexOf(hiddenID) !== -1)) {\r\n                    // Group the nodes couple in one single cluster (the parent cluster)\r\n                    clusters[id] = clusters[id].concat(clusters[clusterID]);\r\n                    clusters.splice(clusterID, 1);\r\n                    clusterID--;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Filter the nodes with length 1\r\n    return clusters.filter((cluster) => cluster.length > 1);\r\n};\r\n\r\nexport const groupPiNodeDependencies = (\r\n    proof: NodeInterface[],\r\n    hiddenNodesArray: number[],\r\n): NodeInterface['dependencies'] => {\r\n    const piNodeDependencies: NodeInterface['dependencies'] = [];\r\n    const depMap: { [piID: number]: number } = {};\r\n\r\n    // Copy all the hidden nodes dependencies to the new pi node\r\n    proof.forEach((node) => {\r\n        // Search for all the hidden nodes that have deps\r\n        if (hiddenNodesArray.indexOf(node.id) !== -1 && node.dependencies.length) {\r\n            // For each dependence in this node\r\n            node.dependencies.forEach((dep) => {\r\n                // This pi node dependence wasn't inserted yet\r\n                if (Object.keys(depMap).indexOf(String(dep.piId)) === -1) {\r\n                    piNodeDependencies.push(dep);\r\n                    depMap[dep.piId] = piNodeDependencies.length - 1;\r\n                }\r\n                // Concat the nodes inside the pi node already inserted\r\n                else {\r\n                    piNodeDependencies[depMap[dep.piId]].depsId = piNodeDependencies[depMap[dep.piId]].depsId.concat(\r\n                        dep.depsId,\r\n                    );\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return piNodeDependencies;\r\n};\r\n\r\nexport const sliceNodesCluster = (\r\n    proof: NodeInterface[],\r\n    clusterMap: number[],\r\n    nodeId = 0,\r\n    slicedClusters: number[][] = [],\r\n): number[][] => {\r\n    const currentNode = proof[nodeId];\r\n\r\n    // If the node id is valid and wasn't inserted yet\r\n    if (nodeId && clusterMap[currentNode.id] === -1) {\r\n        // Get all parents with the same type\r\n        const parentsClusters: { [parentID: number]: number } = {};\r\n        currentNode.parents.forEach((p) => {\r\n            if (proof[p].clusterType === currentNode.clusterType) {\r\n                parentsClusters[p] = clusterMap[p];\r\n            }\r\n        });\r\n        const keys = Object.keys(parentsClusters);\r\n\r\n        // If the current node has the same type as (at least) one of it's parents\r\n        if (keys.length) {\r\n            // Put the current node in the cluster of the first parent with the same type\r\n            const target = parentsClusters[Number(keys[0])];\r\n            slicedClusters[target].push(currentNode.id);\r\n            clusterMap[currentNode.id] = target;\r\n        }\r\n        // Parent with different type\r\n        else {\r\n            const clusterID = slicedClusters.length;\r\n            clusterMap[currentNode.id] = clusterID;\r\n            slicedClusters.push([currentNode.id]);\r\n\r\n            // Add the brothers with the same type in the same cluster\r\n            proof[currentNode.parents[0]].children.forEach((c) => {\r\n                // If the brother node has the same type as the current one\r\n                if (proof[c].clusterType === currentNode.clusterType && c !== currentNode.id) {\r\n                    slicedClusters[clusterID].push(c);\r\n                    clusterMap[c] = clusterID;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    currentNode.children.forEach((child) => {\r\n        sliceNodesCluster(proof, clusterMap, child, slicedClusters);\r\n    });\r\n    return slicedClusters;\r\n};\r\n","export const colorConverter = (colorName: string): string => {\r\n    let color = '#fff';\r\n    switch (colorName) {\r\n        case 'red':\r\n            color = '#f72b34';\r\n            break;\r\n        case 'orange':\r\n            color = '#ff8334';\r\n            break;\r\n        case 'yellow':\r\n            color = '#ffc149';\r\n            break;\r\n        case 'green':\r\n            color = '#60aa51';\r\n            break;\r\n        case 'blue':\r\n            color = '#0097e4';\r\n            break;\r\n        case 'purple':\r\n            color = '#a73da5';\r\n            break;\r\n        case 'brown':\r\n            color = '#a95a49';\r\n            break;\r\n        case 'black':\r\n            color = '#464646';\r\n            break;\r\n\r\n        case 'white':\r\n            color = '#f0f0f0';\r\n            break;\r\n    }\r\n    return color;\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport {\r\n    processDot,\r\n    piNodeChildren,\r\n    piNodeParents,\r\n    descendants,\r\n    findNodesClusters,\r\n    groupPiNodeDependencies,\r\n    sliceNodesCluster,\r\n} from './auxi';\r\nimport { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\nimport { colorConverter } from '../theme/auxi';\r\nimport { ClusterKind } from '../../../interfaces/enum';\r\n\r\nconst initialState: ProofState = {\r\n    proof: [],\r\n    view: 'full',\r\n    style: 'graph',\r\n    hiddenNodes: [],\r\n    letMap: {},\r\n    visualInfo: [],\r\n    clustersInfos: [],\r\n};\r\n\r\nexport const proofSlice = createSlice({\r\n    name: 'proof',\r\n    initialState,\r\n\r\n    reducers: {\r\n        process: (state, action: PayloadAction<string>) => {\r\n            let proofJSON;\r\n            let dot = action.payload;\r\n            let isJSON = false;\r\n\r\n            // If the payload is a .json file\r\n            if (dot.indexOf('{\"dot\":\"') !== -1) {\r\n                proofJSON = JSON.parse(dot);\r\n                dot = proofJSON.dot;\r\n                isJSON = true;\r\n            }\r\n\r\n            const [proof, letMap, clustersColors] = processDot(dot);\r\n            state.proof = proof;\r\n            state.letMap = letMap;\r\n\r\n            if (isJSON) {\r\n                state.view = proofJSON.view;\r\n                state.hiddenNodes = proofJSON.hiddenNodes;\r\n                state.visualInfo = proofJSON.visualInfo;\r\n            }\r\n            // Is .dot\r\n            else {\r\n                state.view = 'full';\r\n\r\n                if (Object.keys(clustersColors).length) {\r\n                    state.view = 'clustered';\r\n\r\n                    // Slice the clusters\r\n                    const clustersMap: number[] = Array(state.proof.length).fill(-1);\r\n                    state.hiddenNodes = sliceNodesCluster(state.proof, clustersMap);\r\n\r\n                    // Maps the cluster infos\r\n                    state.hiddenNodes.forEach((cluster) => {\r\n                        const type = state.proof[cluster[0]].clusterType;\r\n                        state.clustersInfos.push({\r\n                            hiddenNodes: cluster,\r\n                            type: type,\r\n                            color: colorConverter(clustersColors[type]),\r\n                        });\r\n                    });\r\n                }\r\n\r\n                // Init the visual info\r\n                const visualInfo: ProofState['visualInfo'] = {};\r\n                let size = 0;\r\n                state.proof.forEach((node) => {\r\n                    visualInfo[node.id] = {\r\n                        color: '#fff',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    };\r\n                    size++;\r\n                });\r\n\r\n                state.clustersInfos.forEach((cluster) => {\r\n                    visualInfo[size] = {\r\n                        color: cluster.color,\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    };\r\n                    size++;\r\n                });\r\n\r\n                state.visualInfo = visualInfo;\r\n            }\r\n        },\r\n        hideNodes: (state, action: PayloadAction<number[]>) => {\r\n            const toHideNodes = action.payload.filter(\r\n                (id) =>\r\n                    id > 0 &&\r\n                    id < state.proof.length &&\r\n                    state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1),\r\n            );\r\n\r\n            const clusters = findNodesClusters(state.proof, toHideNodes);\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat(clusters)\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi nodes\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            for (let i = 0; i < clusters.length; i++) {\r\n                state.visualInfo = {\r\n                    ...state.visualInfo,\r\n                    [piNodeId + i]: {\r\n                        color: '#555',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    },\r\n                };\r\n            }\r\n\r\n            // Unselect the selected nodes\r\n            toHideNodes.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        foldAllDescendants: (state, action: PayloadAction<number>) => {\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat([\r\n                    [action.payload, ...descendants(state.proof, action.payload)].filter(\r\n                        (id, index, self) =>\r\n                            id > 0 &&\r\n                            id < state.proof.length &&\r\n                            state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1) &&\r\n                            self.indexOf(id) === index,\r\n                    ),\r\n                ])\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi node and the root node\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            state.visualInfo = {\r\n                ...state.visualInfo,\r\n                [action.payload]: {\r\n                    ...state.visualInfo[action.payload],\r\n                    selected: false,\r\n                },\r\n                [piNodeId]: {\r\n                    color: '#555',\r\n                    x: 0,\r\n                    y: 0,\r\n                    selected: false,\r\n                },\r\n            };\r\n        },\r\n        unhideNodes: (state, action: PayloadAction<{ pi: number; hiddens: number[] }>) => {\r\n            const { pi, hiddens } = action.payload;\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .map((hiddenNodesArray) => hiddenNodesArray.filter((id) => hiddens.indexOf(id) === -1))\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Make sure the ids are realocated\r\n            const size = Object.keys(state.visualInfo).length;\r\n            for (let i = pi; i < size - 1; i++) {\r\n                state.visualInfo[i] = state.visualInfo[i + 1];\r\n            }\r\n            // Delete the last position\r\n            delete state.visualInfo[size - 1];\r\n\r\n            // Unselect the hidden nodes\r\n            hiddens.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        setVisualInfo: (state, action: PayloadAction<ProofState['visualInfo']>) => {\r\n            state.visualInfo = action.payload;\r\n        },\r\n        selectNodes: (state, action: PayloadAction<number[]>) => {\r\n            const len = Object.keys(state.visualInfo).length;\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < len) {\r\n                    state.visualInfo[id].selected = true;\r\n                }\r\n            });\r\n        },\r\n        unselectNodes: (state, action: PayloadAction<number[]>) => {\r\n            const len = Object.keys(state.visualInfo).length;\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < len) {\r\n                    state.visualInfo[id].selected = false;\r\n                }\r\n            });\r\n        },\r\n        changeStyle: (state, action: PayloadAction<'graph' | 'directory'>) => {\r\n            switch (action.payload) {\r\n                case 'graph':\r\n                    state.style = 'graph';\r\n                    break;\r\n                case 'directory':\r\n                    state.style = 'directory';\r\n                    break;\r\n            }\r\n        },\r\n        applyView: (state, action: PayloadAction<ProofState['view']>) => {\r\n            const visualInfoSize = Object.keys(state.visualInfo).length;\r\n            const proofSize = state.proof.length;\r\n            // Delete all the pi nodes\r\n            for (let i = 0; i < visualInfoSize - proofSize; i++) {\r\n                delete state.visualInfo[proofSize + i];\r\n            }\r\n\r\n            switch (action.payload) {\r\n                // View without hidden Nodes\r\n                case 'full':\r\n                    if (state.hiddenNodes.length || state.view === 'colored-full') {\r\n                        state.proof.forEach((node) => {\r\n                            state.visualInfo[node.id] = {\r\n                                color: '#fff',\r\n                                x: 0,\r\n                                y: 0,\r\n                                selected: false,\r\n                            };\r\n                        });\r\n\r\n                        state.hiddenNodes = [];\r\n                    }\r\n                    state.view = 'full';\r\n                    break;\r\n                // Cluster all the nodes in your respective group\r\n                case 'clustered':\r\n                    state.view = 'clustered';\r\n\r\n                    // If there are clusters infos\r\n                    if (state.clustersInfos.length) {\r\n                        state.hiddenNodes = [];\r\n                        const size = Object.keys(state.visualInfo).length;\r\n\r\n                        state.clustersInfos.forEach((cluster, i) => {\r\n                            state.visualInfo[size + i] = {\r\n                                color: cluster.color,\r\n                                x: 0,\r\n                                y: 0,\r\n                                selected: false,\r\n                            };\r\n\r\n                            state.hiddenNodes.push(cluster.hiddenNodes);\r\n                        });\r\n                    }\r\n                    break;\r\n                // Apply full view but apply the clustrer color\r\n                case 'colored-full':\r\n                    state.view = 'colored-full';\r\n                    state.hiddenNodes = [];\r\n\r\n                    // If there are clusters infos\r\n                    if (state.clustersInfos.length) {\r\n                        state.clustersInfos.forEach((cluster) => {\r\n                            cluster.hiddenNodes.forEach((node) => {\r\n                                state.visualInfo[node] = {\r\n                                    color: cluster.color,\r\n                                    x: 0,\r\n                                    y: 0,\r\n                                    selected: false,\r\n                                };\r\n                            });\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n        applyColor: (state, action: PayloadAction<string>) => {\r\n            Object.keys(state.visualInfo).forEach((id) => {\r\n                if (state.visualInfo[Number(id)].selected) {\r\n                    state.visualInfo[Number(id)].color = action.payload;\r\n                    state.visualInfo[Number(id)].selected = false;\r\n                }\r\n            });\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    process,\r\n    hideNodes,\r\n    foldAllDescendants,\r\n    unhideNodes,\r\n    setVisualInfo,\r\n    selectNodes,\r\n    unselectNodes,\r\n    changeStyle,\r\n    applyView,\r\n    applyColor,\r\n} = proofSlice.actions;\r\n\r\nexport const selectProof = (state: RootState): NodeInterface[] => {\r\n    let proof = state.proof.proof;\r\n    const hiddenNodes = state.proof.hiddenNodes;\r\n\r\n    hiddenNodes.forEach((hiddenNodesArray) => {\r\n        const dependencies: { [parentId: number]: number[] } = {};\r\n        const children = piNodeChildren(proof, hiddenNodesArray);\r\n        const parents = piNodeParents(proof, hiddenNodesArray, dependencies);\r\n        const piNodeDependencies = groupPiNodeDependencies(proof, hiddenNodesArray);\r\n\r\n        const piNodeId = proof.length;\r\n        proof = proof.concat({\r\n            id: piNodeId,\r\n            conclusion: '∴',\r\n            rule: 'π',\r\n            args: '',\r\n            views: [],\r\n            children: children,\r\n            parents: parents,\r\n            hiddenNodes: hiddenNodesArray.map((hiddenNode) => proof[hiddenNode]),\r\n            descendants: 1,\r\n            dependencies: piNodeDependencies,\r\n            clusterType: ClusterKind.NONE,\r\n        });\r\n\r\n        const piNode = proof[piNodeId];\r\n\r\n        children.forEach(\r\n            (childId) =>\r\n                (proof[childId] = {\r\n                    ...proof[childId],\r\n                    parents: proof[childId].parents\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n        parents.forEach(\r\n            (parentId) =>\r\n                (proof[parentId] = {\r\n                    ...proof[parentId],\r\n                    children: proof[parentId].children\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n\r\n        // Set the dependencies array of each parent that has deps and remove\r\n        //  the children that are dependencies\r\n        Object.keys(dependencies).forEach((parent) => {\r\n            const parentId = Number(parent);\r\n            proof[parentId] = {\r\n                ...proof[parentId],\r\n                children: proof[parentId].children.filter((c) => dependencies[parentId].indexOf(c) === -1),\r\n                dependencies: [...proof[parentId].dependencies, { piId: piNodeId, depsId: dependencies[parentId] }],\r\n            };\r\n        });\r\n\r\n        // Get the high hierarchy nodes in this pi node\r\n        const highHierarchyNodes = hiddenNodesArray?.filter((node) =>\r\n            proof[node].parents.every((parentId) => piNode.parents.indexOf(parentId) !== -1),\r\n        );\r\n\r\n        // Get the conclusion array\r\n        const conclusion = highHierarchyNodes.map((node) => ' ' + proof[node].conclusion);\r\n        piNode.conclusion = conclusion.length > 1 ? `[${conclusion} ]` : `${conclusion}`;\r\n\r\n        // Get the rule array\r\n        const rule = highHierarchyNodes.map((node) => ' ' + proof[node].rule);\r\n        piNode.rule = rule.length > 1 ? `[${rule} ]` : `${rule} `;\r\n\r\n        // Set the descendants number\r\n        piNode.descendants = piNode.children.reduce(\r\n            (ac: number, childID) => ((ac += proof[childID].descendants), ac),\r\n            1,\r\n        );\r\n    });\r\n\r\n    proof = proof.filter((proofNode) =>\r\n        hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(proofNode.id) === -1),\r\n    );\r\n\r\n    return proof;\r\n};\r\n\r\nexport const selectOriginalProof = (state: RootState): NodeInterface[] => {\r\n    return state.proof.proof;\r\n};\r\n\r\nexport const selectView = (state: RootState): ProofState['view'] => {\r\n    return state.proof.view;\r\n};\r\n\r\nexport const selectStyle = (state: RootState): 'graph' | 'directory' => {\r\n    return state.proof.style;\r\n};\r\n\r\nexport const selectLetMap = (state: RootState): { [Key: string]: string } => {\r\n    return state.proof.letMap;\r\n};\r\n\r\nexport const selectVisualInfo = (state: RootState): ProofState['visualInfo'] => {\r\n    if (state.proof.proof.length) return state.proof.visualInfo;\r\n    // If there is no proof node\r\n    return { 0: { color: '#555', x: 0, y: 0, selected: false } };\r\n};\r\n\r\nexport const selectHiddenNodes = (state: RootState): number[][] => {\r\n    return state.proof.hiddenNodes;\r\n};\r\n\r\nexport const selectNodeClusters = (state: RootState): ProofState['clustersInfos'] => {\r\n    return state.proof.clustersInfos;\r\n};\r\n\r\nexport default proofSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ThemeState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ThemeState = {\r\n    value: true,\r\n};\r\n\r\nexport const themeSlice = createSlice({\r\n    name: 'theme',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        toggle: (state) => {\r\n            state.value = !state.value;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { toggle } = themeSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice theme. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectTheme = (state: RootState): boolean => state.theme.value;\r\n\r\nexport default themeSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ExternalCmdState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ExternalCmdState = {\r\n    findData: {\r\n        nodeToFind: -1,\r\n        findOption: false,\r\n    },\r\n    renderData: {\r\n        count: 0,\r\n        fileChanged: false,\r\n    },\r\n};\r\n\r\nexport const externalCmd = createSlice({\r\n    name: 'externalCmd',\r\n    initialState,\r\n    reducers: {\r\n        findNode: (state, action: PayloadAction<{ nodeId: number; option: boolean }>) => {\r\n            state.findData = { nodeToFind: action.payload.nodeId, findOption: action.payload.option };\r\n        },\r\n        reRender: (state) => {\r\n            state.renderData.count = 0;\r\n        },\r\n        addRenderCount: (state) => {\r\n            state.renderData.count++;\r\n        },\r\n        blockRender: (state) => {\r\n            state.renderData.count = 2;\r\n        },\r\n        allowRenderNewFile: (state) => {\r\n            state.renderData.fileChanged = true;\r\n        },\r\n        blockRenderNewFile: (state) => {\r\n            state.renderData.fileChanged = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { findNode, reRender, addRenderCount, blockRender, allowRenderNewFile, blockRenderNewFile } =\r\n    externalCmd.actions;\r\n\r\nexport const selectFindData = (state: RootState): { nodeToFind: number; findOption: boolean } =>\r\n    state.externalCmd.findData;\r\n\r\nexport const selectRenderData = (state: RootState): { count: number; fileChanged: boolean } =>\r\n    state.externalCmd.renderData;\r\n\r\nexport default externalCmd.reducer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\nimport { selectDot, selectFileName } from '../../store/features/file/fileSlice';\r\nimport {\r\n    applyView,\r\n    changeStyle,\r\n    selectNodes,\r\n    applyColor,\r\n    hideNodes,\r\n    foldAllDescendants,\r\n    unhideNodes,\r\n    selectVisualInfo,\r\n    selectProof,\r\n    selectHiddenNodes,\r\n    selectView,\r\n    unselectNodes,\r\n} from '../../store/features/proof/proofSlice';\r\nimport { ReduxState, NavbarPropsAndRedux, NavbarProps } from '../../interfaces/interfaces';\r\n\r\nimport { Alignment, Button, Icon, InputGroup, Navbar, Switch, Menu, MenuItem } from '@blueprintjs/core';\r\nimport { Popover2 } from '@blueprintjs/popover2';\r\nimport { selectTheme, toggle } from '../../store/features/theme/themeSlice';\r\nimport '../../scss/VisualizerNavbar.scss';\r\nimport { findNode, reRender } from '../../store/features/externalCmd/externalCmd';\r\n\r\nfunction useWindowSize() {\r\n    // Initialize state with undefined width/height so server and client renders match\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n    const [windowSize, setWindowSize] = useState({\r\n        width: 0,\r\n        height: 0,\r\n    });\r\n    useEffect(() => {\r\n        // Handler to call on window resize\r\n        function handleResize() {\r\n            // Set window width/height to state\r\n            setWindowSize({\r\n                width: window.innerWidth,\r\n                height: window.innerHeight,\r\n            });\r\n        }\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return windowSize;\r\n}\r\n\r\nconst VisualizerNavbar: React.FC<NavbarPropsAndRedux> = ({\r\n    setDialogIsOpen,\r\n    setDialogContent,\r\n    setDrawerIsOpen,\r\n    addErrorToast,\r\n    visualInfo,\r\n    proof,\r\n    dot,\r\n    view,\r\n    hiddenNodes,\r\n    hideNodes,\r\n}: NavbarPropsAndRedux) => {\r\n    const fileName = useAppSelector(selectFileName);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const windowSize = useWindowSize();\r\n    const [command, setCommand] = useState('');\r\n    const [lastCommands, setLastCommands] = useState(['']);\r\n    const [commandId, setCommandId] = useState(0);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const openDialog = (content: string): void => {\r\n        setDialogIsOpen(true);\r\n        setDialogContent(content);\r\n    };\r\n\r\n    const handleInputKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        // Creates an commands historic, registering the past 4 commands\r\n        switch (e.key) {\r\n            case 'Enter':\r\n                // If the command is not a white space\r\n                if (command.trim() !== '') {\r\n                    runCommands(command);\r\n                    if (lastCommands.length === 5) {\r\n                        lastCommands.pop();\r\n                    }\r\n                    lastCommands.unshift('');\r\n                    setLastCommands(lastCommands);\r\n                    setCommand('');\r\n                }\r\n                break;\r\n            case 'ArrowUp':\r\n                if (commandId < lastCommands.length - 1) {\r\n                    const newId = commandId + 1;\r\n                    setCommandId(newId);\r\n                    setCommand(lastCommands[newId]);\r\n                }\r\n                break;\r\n            case 'ArrowDown':\r\n                if (commandId > 0) {\r\n                    const newId = commandId - 1;\r\n                    setCommandId(newId);\r\n                    setCommand(lastCommands[newId]);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    const runCommands = (command: string): void => {\r\n        const commands = command.trim().split(/ +/);\r\n        let hiddenIds: number[];\r\n\r\n        switch (commands[0]) {\r\n            case '/view':\r\n                switch (commands[1]) {\r\n                    case 'clustered':\r\n                        dispatch(applyView('clustered'));\r\n                        dispatch(reRender());\r\n                        break;\r\n                    case 'full':\r\n                        dispatch(applyView('full'));\r\n                        dispatch(reRender());\r\n                        break;\r\n                }\r\n                break;\r\n            case '/select':\r\n                if (commands[1]) {\r\n                    let cmdArg = '';\r\n                    commands.forEach((string, id) => id !== 0 && (cmdArg += string + ' '));\r\n                    // Matches all the brackets\r\n                    const matches = [...cmdArg.matchAll(/\\[([^\\[\\]]+)\\]/g)];\r\n                    let idList: number[] = [];\r\n\r\n                    // There is a case with brackets\r\n                    if (matches[0]) {\r\n                        const insideBracket = matches[0][1].trim();\r\n                        let insideMatches = [...insideBracket.matchAll(/\\s*\\d+\\s*-\\s*\\d+\\s*/g)];\r\n\r\n                        // Number range notation\r\n                        if (insideMatches[0]) {\r\n                            // Get the range limits\r\n                            const rangeLim = insideMatches[0][0].split(/\\s*-\\s*/).map((numS) => Number(numS));\r\n                            idList = Array.from({ length: rangeLim[1] - rangeLim[0] + 1 }, (_, i) => rangeLim[0] + i);\r\n                        }\r\n                        // List notation\r\n                        else {\r\n                            insideMatches = [...insideBracket.matchAll(/(\\s*\\d+\\s*,*)+/g)];\r\n                            // Number list notation\r\n                            if (insideMatches[0]) {\r\n                                // Group all the matches\r\n                                let listStr = '';\r\n                                insideMatches.forEach((match) => (listStr += match[0]));\r\n                                // Convert to number\r\n                                idList = listStr\r\n                                    .split(/,\\s*/)\r\n                                    .filter((word) => word.length > 0 && !isNaN(Number(word)))\r\n                                    .map((id) => Number(id));\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // Is a regex select?\r\n                        const matches = [...cmdArg.matchAll(/\\/[^\\/]*\\//g)];\r\n                        const argMatch = [...cmdArg.matchAll(/--(c|r)/g)];\r\n                        // If there is a regex\r\n                        if (matches[0]) {\r\n                            let argIsConclusion = true;\r\n                            // Try to find the option\r\n                            if (argMatch[0]) {\r\n                                switch (argMatch[0][1]) {\r\n                                    case 'r':\r\n                                        argIsConclusion = false;\r\n                                        break;\r\n                                    case 'c':\r\n                                        argIsConclusion = true;\r\n                                        break;\r\n                                }\r\n                            }\r\n\r\n                            const regexString = matches[0][0].substring(1, matches[0][0].length - 1);\r\n                            try {\r\n                                // Search all the nodes with the specific regex matching in the conclusion\r\n                                const regex = new RegExp(regexString);\r\n                                idList = proof\r\n                                    .filter((node) => regex.test(argIsConclusion ? node.conclusion : node.rule))\r\n                                    .map((node) => node.id);\r\n                            } catch (err) {\r\n                                // If the inserted regex expression is invalid (probably missing \\)\r\n                                addErrorToast('Regex error: probably and wrong regex expression');\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch(selectNodes(idList));\r\n                }\r\n                break;\r\n            case '/unselect':\r\n                const allNodesIds = proof.map((node) => node.id);\r\n                dispatch(unselectNodes(allNodesIds));\r\n                break;\r\n            case '/color':\r\n                if (commands[1]) {\r\n                    // Hex color\r\n                    if (RegExp(/^#([0-9a-f]{3}){1,2}$/i).test(commands[1])) {\r\n                        dispatch(applyColor(commands[1]));\r\n                        break;\r\n                    }\r\n                    // Default colors\r\n                    switch (commands[1]) {\r\n                        case 'red':\r\n                            dispatch(applyColor('#f72b34'));\r\n                            break;\r\n                        case 'orange':\r\n                            dispatch(applyColor('#ff8334'));\r\n                            break;\r\n                        case 'yellow':\r\n                            dispatch(applyColor('#ffc149'));\r\n                            break;\r\n                        case 'green':\r\n                            dispatch(applyColor('#60aa51'));\r\n                            break;\r\n                        case 'blue':\r\n                            dispatch(applyColor('#0097e4'));\r\n                            break;\r\n                        case 'purple':\r\n                            dispatch(applyColor('#a73da5'));\r\n                            break;\r\n                        case 'brown':\r\n                            dispatch(applyColor('#a95a49'));\r\n                            break;\r\n                        case 'gray':\r\n                            dispatch(applyColor('#464646'));\r\n                            break;\r\n                        case 'white':\r\n                            dispatch(applyColor('#f0f0f0'));\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n            case '/hide':\r\n                // Hide all the selected nodes\r\n                hiddenIds = Object.keys(visualInfo)\r\n                    .map((id) => Number(id))\r\n                    .filter((id) => visualInfo[id].selected);\r\n                // Make sure there are nodes selected\r\n                if (hiddenIds.length > 1) {\r\n                    // Re-render the canvas and update the store\r\n                    dispatch(reRender());\r\n                    dispatch(hideNodes(hiddenIds));\r\n                }\r\n                break;\r\n            case '/fold':\r\n                // If the option is a number\r\n                if (commands[1] && !isNaN(Number(commands[1]))) {\r\n                    const nodeId = Number(commands[1]);\r\n                    // Is a valid node\r\n                    if (nodeId >= 0 && nodeId < proof.length) {\r\n                        // Re-render the canvas and update the store\r\n                        dispatch(reRender());\r\n                        dispatch(foldAllDescendants(nodeId));\r\n                    }\r\n                }\r\n                break;\r\n            case '/unfold':\r\n                // If there is a number argument\r\n                if (commands[1] && !isNaN(Number(commands[1]))) {\r\n                    const id = Number(commands[1]);\r\n                    // Get the pi node (to be unfold)\r\n                    const obj = proof.find((node) => node.id === id);\r\n                    // If it's a pi node\r\n                    if (obj && obj.hiddenNodes?.length) {\r\n                        // Get the hidden nodes and their ids\r\n                        const hiddenNodes = obj.hiddenNodes ? obj.hiddenNodes : [];\r\n                        hiddenIds = hiddenNodes ? hiddenNodes.map((node) => node.id) : [];\r\n                        // Re-render the canvas and update the store\r\n                        dispatch(reRender());\r\n                        dispatch(unhideNodes({ pi: id, hiddens: hiddenIds }));\r\n                    }\r\n                }\r\n                break;\r\n            case '/find':\r\n                // If there is an argument and is a number\r\n                if (commands[1] && !isNaN(Number(commands[1]))) {\r\n                    // Find the node\r\n                    dispatch(\r\n                        findNode({\r\n                            nodeId: Number(commands[1]),\r\n                            option: commands[2] === '--s' ? true : false,\r\n                        }),\r\n                    );\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    const exportJSON = () => {\r\n        const downloadJSON = {\r\n            dot: dot,\r\n            visualInfo: visualInfo,\r\n            hiddenNodes: hiddenNodes,\r\n            view: view,\r\n        };\r\n        const fName = fileName.split('.');\r\n        fName.splice(fName.length - 1, 1);\r\n\r\n        const link = document.createElement('a');\r\n        link.download = fName + '.json';\r\n        link.href = `data:attachment/text,${encodeURIComponent(JSON.stringify(downloadJSON))}`;\r\n        link.click();\r\n    };\r\n\r\n    const menus = {\r\n        style: (\r\n            <Menu>\r\n                <MenuItem\r\n                    icon=\"diagram-tree\"\r\n                    text=\"Graph\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(changeStyle('graph'));\r\n                    }}\r\n                />\r\n                <MenuItem\r\n                    icon=\"folder-open\"\r\n                    text=\"Directory\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(changeStyle('directory'));\r\n                    }}\r\n                />\r\n            </Menu>\r\n        ),\r\n        download: (\r\n            <Menu>\r\n                <MenuItem icon=\"layout\" text=\"JSON\" onClick={exportJSON} />\r\n                <MenuItem\r\n                    icon=\"graph\"\r\n                    text=\"DOT\"\r\n                    href={`data:attachment/text,${encodeURIComponent(dot ? dot : '')}`}\r\n                    download={fileName ? `${fileName.replaceAll(' ', '_')}.dot` : ''}\r\n                />\r\n                <MenuItem\r\n                    icon=\"square\"\r\n                    text=\"PNG\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        const link = document.createElement('a');\r\n                        link.download = fileName ? `${fileName.replaceAll(' ', '_')}.png` : '';\r\n                        link.href = (\r\n                            document.getElementsByClassName('konvajs-content')[0].children[0] as HTMLCanvasElement\r\n                        ).toDataURL('image/png');\r\n                        link.click();\r\n                    }}\r\n                />\r\n            </Menu>\r\n        ),\r\n        help: (\r\n            <Menu>\r\n                <MenuItem text=\"/view\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that changes the view mode.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /view {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> basic, propositional, full.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/select\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that select a group of nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /select {'<option>'} {'<argument>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Options:</u>\r\n                            <div className=\"option\">\r\n                                1 - A list of node {`id's`} wrapped by brackets and separated by commas (and spaces if\r\n                                wanted) (eg.: [1, 15, 6,3]).\r\n                            </div>\r\n                            <div className=\"option\">\r\n                                2 - A range of node {`id's`} wrapped by brackets and separated by hyphen (and spaces if\r\n                                wanted) (eg.: [ 4 -15]). This range will include the last element.\r\n                            </div>\r\n                            <div className=\"option\">\r\n                                3 - A regex expression used to select all the nodes which the conclusion owns a match\r\n                                (eg.: /\\.*false\\.*/ {'->'} selects all the nodes with false anywhere in the conclusion).\r\n                                <br />\r\n                                <br />\r\n                                If wanted to search a match in the rule just insert the --r argument. The --c argument\r\n                                exists but the /select will by default search in the conclusion.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/unselect\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that unselect all the nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /unselect.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/color\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that changes the color of the current selected\r\n                            nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /color {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Options:</u>\r\n                            <div className=\"option\">1 - A valid hex color notation (eg.: #A7B).</div>\r\n                            <div className=\"option\">\r\n                                2 - A color name between: red, orange, yellow, green, blue, purple, brown, gray, white.\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Prerequisites:</u> a group of nodes being selected.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/hide\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that try to fold (hide) a group of selected nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /hide.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Prerequisites:</u> a group of nodes being selected.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/fold\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that fold all descendants of a specific node.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /fold {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> a valid node id.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/unfold\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that unfold a specific pi node.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /unfold {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> a valid pi node id.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/find\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that find a node and centralize the canvas at it.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /find {'<node number>'} {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> --s: find and select the node.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n            </Menu>\r\n        ),\r\n    };\r\n\r\n    return (\r\n        <Navbar>\r\n            <Navbar.Group align={Alignment.LEFT}>\r\n                <Navbar.Heading>\r\n                    <b>{windowSize.width >= 1035 ? 'Proof Visualizer' : 'PV'}</b>\r\n                </Navbar.Heading>\r\n                <Navbar.Divider />\r\n                <Button\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        openDialog('upload-proof');\r\n                    }}\r\n                    className=\"bp3-minimal\"\r\n                    icon=\"upload\"\r\n                    text={windowSize.width >= 1035 ? 'Upload Proof' : ''}\r\n                />\r\n            </Navbar.Group>\r\n\r\n            <Navbar.Group align={Alignment.RIGHT}>\r\n                {fileName ? (\r\n                    <>\r\n                        <Navbar.Heading>{fileName}</Navbar.Heading>\r\n                        <Navbar.Divider />\r\n                        <InputGroup\r\n                            id=\"command\"\r\n                            placeholder=\"/command\"\r\n                            value={command}\r\n                            onChange={(e) => {\r\n                                setCommandId(0);\r\n                                lastCommands[0] = e.target.value;\r\n                                setLastCommands(lastCommands);\r\n                                setCommand(e.target.value);\r\n                            }}\r\n                            onKeyDown={handleInputKeyDown}\r\n                            rightElement={\r\n                                <Popover2 content={menus.help} placement=\"bottom-end\">\r\n                                    <Button icon=\"help\" className=\"bp3-minimal\" />\r\n                                </Popover2>\r\n                            }\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        <Button\r\n                            style={{ marginLeft: '5px' }}\r\n                            icon=\"play\"\r\n                            onClick={() => {\r\n                                runCommands(command);\r\n                                lastCommands.pop();\r\n                                lastCommands.unshift(command);\r\n                                lastCommands[0] = '';\r\n                                setLastCommands(lastCommands);\r\n                                setCommand('');\r\n                            }}\r\n                        />\r\n                        <Navbar.Divider />\r\n                        <Popover2\r\n                            content={fileName ? menus.style : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                        >\r\n                            <Button\r\n                                icon=\"presentation\"\r\n                                className=\"bp3-minimal\"\r\n                                text={windowSize.width >= 1035 ? 'Style' : ''}\r\n                                disabled={fileName ? false : true}\r\n                            />\r\n                        </Popover2>\r\n                        <Button\r\n                            className=\"bp3-minimal\"\r\n                            icon=\"applications\"\r\n                            text={windowSize.width >= 1035 ? 'Visualizers' : ''}\r\n                            disabled={fileName ? false : true}\r\n                            onClick={() => setDrawerIsOpen(true)}\r\n                        />\r\n                        <Popover2\r\n                            content={fileName ? menus.download : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                        >\r\n                            <Button\r\n                                className=\"bp3-minimal\"\r\n                                icon=\"download\"\r\n                                text={windowSize.width >= 1035 ? 'Download' : ''}\r\n                                disabled={fileName ? false : true}\r\n                            />\r\n                        </Popover2>\r\n                        <Navbar.Divider />\r\n                    </>\r\n                ) : null}\r\n\r\n                <span id=\"switch-button-dark-theme\">\r\n                    <Switch checked={useAppSelector(selectTheme)} onChange={() => dispatch(toggle())} />\r\n                    <Icon icon={darkTheme ? 'moon' : 'flash'}></Icon>\r\n                </span>\r\n            </Navbar.Group>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: ReduxState, ownProps: NavbarProps) {\r\n    return {\r\n        ...ownProps,\r\n        proof: selectProof(state),\r\n        dot: selectDot(state),\r\n        view: selectView(state),\r\n        visualInfo: selectVisualInfo(state),\r\n        hiddenNodes: selectHiddenNodes(state),\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = { hideNodes };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VisualizerNavbar);\r\n","import React, { useState, useReducer, useEffect } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { Dispatch, SetStateAction } from 'react';\r\nimport { MaybeElement } from '@blueprintjs/core/lib/esm/common/props';\r\nimport { IconName } from '@blueprintjs/core/lib/esm/components/icon/icon';\r\n\r\nimport { Button, Classes, Dialog, FileInput, Intent } from '@blueprintjs/core';\r\n\r\nimport '../../scss/VisualizerDialog.scss';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { set } from '../../store/features/file/fileSlice';\r\nimport { process } from '../../store/features/proof/proofSlice';\r\nimport { allowRenderNewFile, blockRender, reRender } from '../../store/features/externalCmd/externalCmd';\r\n\r\ninterface DialogProps {\r\n    icon: IconName | MaybeElement;\r\n    title: React.ReactNode;\r\n}\r\n\r\ninterface VisualizerDialogProps {\r\n    dialogIsOpen: boolean;\r\n    setDialogIsOpen: Dispatch<SetStateAction<boolean>>;\r\n    dialogContent: string;\r\n    setDialogContent: Dispatch<SetStateAction<string>>;\r\n    addErrorToast: (err: string) => void;\r\n}\r\n\r\nconst readUploadedFileAsText = (inputFile: File) => {\r\n    const temporaryFileReader = new FileReader();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        temporaryFileReader.onerror = () => {\r\n            temporaryFileReader.abort();\r\n            reject(new DOMException('Problem parsing input file.'));\r\n        };\r\n\r\n        temporaryFileReader.onload = () => {\r\n            resolve(temporaryFileReader.result);\r\n        };\r\n        temporaryFileReader.readAsText(inputFile);\r\n    });\r\n};\r\n\r\nconst VisualizerDialog: React.FC<VisualizerDialogProps> = ({\r\n    dialogIsOpen,\r\n    dialogContent,\r\n    setDialogContent,\r\n    setDialogIsOpen,\r\n    addErrorToast,\r\n}: VisualizerDialogProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const dispatch = useAppDispatch();\r\n\r\n    let dialogProps: DialogProps = { icon: 'error', title: 'Error' };\r\n    let dialogBody = <p>This wasn&apos;t supposed to happen. Please contact the developers.</p>;\r\n    let succesButton = <></>;\r\n\r\n    const [fileName, changeFileName] = useState('Choose file...');\r\n    const [file, changeFile] = useState('');\r\n    const [[focusFlag, flagCount], setFocusFlag] = useReducer(\r\n        (state: number[], newFlag: number): number[] => [newFlag, state[1] + 1],\r\n        [0, 0],\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (dialogIsOpen && dialogContent === 'upload-proof') setFocusFlag(1);\r\n    }, [dialogIsOpen, dialogContent]);\r\n\r\n    useEffect(() => {\r\n        let el;\r\n        switch (focusFlag) {\r\n            // Focus the file input\r\n            case 1:\r\n                el = document.getElementsByClassName(Classes.DIALOG_BODY + ' dialog-body');\r\n                (el[0].childNodes[0] as HTMLElement).focus();\r\n                break;\r\n            // Focus the upload button\r\n            case 2:\r\n                el = document.getElementsByClassName(Classes.DIALOG_FOOTER_ACTIONS);\r\n                (el[0].childNodes[0] as HTMLElement).focus();\r\n                break;\r\n        }\r\n    }, [flagCount]);\r\n\r\n    const closeDialog = () => {\r\n        setDialogIsOpen(false);\r\n        changeFileName('Choose file...');\r\n        changeFile('');\r\n    };\r\n\r\n    switch (dialogContent) {\r\n        case 'upload-proof':\r\n            dialogProps = { icon: 'upload', title: 'Upload Proof' };\r\n            dialogBody = (\r\n                <FileInput\r\n                    text={fileName}\r\n                    hasSelection={fileName !== 'Choose file...'}\r\n                    onInputChange={async (e) => {\r\n                        const target = e.target as HTMLInputElement;\r\n                        const file = target.files ? target.files[0] : new File([''], 'filename');\r\n                        if (\r\n                            target.files &&\r\n                            target.files[0] &&\r\n                            target.files[0].name.split('.').slice(-1)[0] !== 'dot' &&\r\n                            target.files[0].name.split('.').slice(-1)[0] !== 'json'\r\n                        ) {\r\n                            addErrorToast('Sorry! Our app only support DOT and JSON files.');\r\n                            return;\r\n                        }\r\n\r\n                        try {\r\n                            // Make sure the file was selected and none error\r\n                            //  of \"no file select\" will be prompted\r\n                            if (file) {\r\n                                const fileContents = await readUploadedFileAsText(file);\r\n                                changeFile(fileContents as string);\r\n                                changeFileName(file.name);\r\n\r\n                                // If succeded, set the focus of the page to the upload button\r\n                                setFocusFlag(2);\r\n                            }\r\n                        } catch (er: any) {\r\n                            addErrorToast(er.message);\r\n                        }\r\n                    }}\r\n                    fill={true}\r\n                />\r\n            );\r\n            succesButton = (\r\n                <Button\r\n                    onClick={() => {\r\n                        dispatch(set({ name: fileName, value: file }));\r\n\r\n                        dispatch(allowRenderNewFile());\r\n                        const ext = fileName.split('.').pop();\r\n                        if (ext === 'json') dispatch(blockRender());\r\n                        else if (ext === 'dot') dispatch(reRender());\r\n\r\n                        dispatch(process(file));\r\n                        closeDialog();\r\n                    }}\r\n                    intent={Intent.SUCCESS}\r\n                    disabled={fileName === 'Choose file...'}\r\n                >\r\n                    Upload Proof\r\n                </Button>\r\n            );\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className={darkTheme ? ' bp3-dark' : ''}\r\n                isOpen={dialogIsOpen}\r\n                onClose={(): void => closeDialog()}\r\n                usePortal={true}\r\n                {...dialogProps}\r\n            >\r\n                <div className={Classes.DIALOG_BODY + ' dialog-body'}>{dialogBody}</div>\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>{succesButton}</div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default VisualizerDialog;\r\n","import { KonvaEventObject } from 'konva/types/Node';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Label, Text, Tag, Group, Circle, Arrow } from 'react-konva';\r\nimport { NodeProps } from '../../../interfaces/interfaces';\r\n\r\nfunction getTextWidth(text: string, font: string): number {\r\n    const canvas = document.createElement('canvas');\r\n    const context = canvas.getContext('2d');\r\n    let size = 0;\r\n    if (context) {\r\n        context.font = font;\r\n        size = context.measureText(text).width;\r\n    }\r\n    return size;\r\n}\r\n\r\nfunction textColorFromBg(bgColor: string) {\r\n    const r = parseInt(bgColor.substring(0, 2), 16);\r\n    const g = parseInt(bgColor.substring(2, 4), 16);\r\n    const b = parseInt(bgColor.substring(4, 6), 16);\r\n    return r * 0.299 + g * 0.587 + b * 0.114 > 150 ? '#000000' : '#ffffff';\r\n}\r\n\r\nfunction sixDigitColor(bgColor: string): string {\r\n    if (bgColor.charAt(0) === '#') {\r\n        if (bgColor.length == 4) {\r\n            return bgColor\r\n                .substring(1, 7)\r\n                .split('')\r\n                .map((c) => c + c)\r\n                .join('');\r\n        } else if (bgColor.length == 7) {\r\n            return bgColor.substring(1, 7);\r\n        }\r\n    } else {\r\n        if (bgColor.length == 3) {\r\n            return bgColor\r\n                .split('')\r\n                .map((c) => c + c)\r\n                .join('');\r\n        } else if (bgColor.length == 6) {\r\n            return bgColor;\r\n        }\r\n    }\r\n    return '000000';\r\n}\r\n\r\nconst Node: React.FC<NodeProps> = (props: NodeProps): JSX.Element => {\r\n    const {\r\n        id,\r\n        conclusion,\r\n        rule,\r\n        args,\r\n        x,\r\n        y,\r\n        nHided,\r\n        nDescendants,\r\n        hiddenNodes,\r\n        dependencies,\r\n        selected,\r\n        color,\r\n        setNodeOnFocus,\r\n        toggleNodeSelection,\r\n        updateNodePosition,\r\n        openDrawer,\r\n        onDragEnd,\r\n        createTree,\r\n    } = props;\r\n\r\n    const handleClick = (e: KonvaEventObject<MouseEvent>): void => {\r\n        if (e.evt.button === 0) {\r\n            if (e.evt.shiftKey) {\r\n                toggleNodeSelection(id);\r\n            } else {\r\n                openDrawer(\r\n                    {\r\n                        rule: rule,\r\n                        args: args,\r\n                        conclusion: conclusion,\r\n                        nHided: nHided,\r\n                        nDescendants: nDescendants - (rule === 'π' ? 0 : 0),\r\n                        hiddenNodes: hiddenNodes,\r\n                        dependencies: dependencies,\r\n                    },\r\n                    createTree(id),\r\n                );\r\n            }\r\n        } else if (e.evt.button === 2) {\r\n            setNodeOnFocus(id);\r\n            const menuNode = document.getElementById('menu');\r\n            if (menuNode) {\r\n                menuNode.style.top = `${e.evt.clientY}px`;\r\n                menuNode.style.left = `${e.evt.clientX}px`;\r\n                menuNode.style.display = 'initial';\r\n                window.addEventListener('click', () => {\r\n                    menuNode.style.display = 'none';\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const depSize = 25,\r\n        depLineSize = 25;\r\n    const bgColor = color;\r\n\r\n    const style = {\r\n        tag: {\r\n            fill: bgColor,\r\n            stroke: selected ? 'red' : 'black',\r\n            strokeWidth: selected ? 3 : 1,\r\n        },\r\n        get dep() {\r\n            return { ...this.tag };\r\n        },\r\n        text: {\r\n            align: 'center',\r\n            fill: textColorFromBg(sixDigitColor(bgColor)),\r\n            fontSize: 15,\r\n            height: 35,\r\n            padding: 10,\r\n            width: 300,\r\n        },\r\n        get depText() {\r\n            return {\r\n                ...this.text,\r\n                padding: 0,\r\n                width: depSize * 2,\r\n            };\r\n        },\r\n    };\r\n    const infos = {\r\n        nHided: nHided ? `#hidden: ${nHided}` : '',\r\n        nDescendants: ` #descendants: ${nDescendants}`,\r\n        rule: nHided ? 'π' : rule,\r\n        dependencies: dependencies.length === 1 ? String(dependencies[0].piId) : 'π',\r\n    };\r\n\r\n    const [idSize, setIdSize] = useState(50);\r\n    const [descendantSize, setDescendantSize] = useState(style.text.width - 50);\r\n\r\n    // Component Did Mount\r\n    useEffect(() => {\r\n        const font = `${style.text.fontSize}px -apple-system, \"BlinkMacSystemFont\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Open Sans\", \"Helvetica Neue\", \"Icons16\", sans-serif`;\r\n        const calc = getTextWidth(id.toString(), font) + style.text.padding * 3;\r\n        setIdSize(calc);\r\n        setDescendantSize(style.text.width - calc);\r\n    }, []);\r\n\r\n    return (\r\n        <Group\r\n            draggable\r\n            id={id.toString()}\r\n            key={id}\r\n            onDragMove={(e) => {\r\n                updateNodePosition(id, e.target.attrs.x, e.target.attrs.y);\r\n            }}\r\n            onDragEnd={onDragEnd}\r\n            x={x}\r\n            y={y}\r\n            onClick={handleClick}\r\n        >\r\n            <Label x={0} y={0}>\r\n                <Tag {...style.tag} />\r\n                <Text {...style.text} text={conclusion} />\r\n            </Label>\r\n            <Label x={0} y={35}>\r\n                <Tag {...style.tag} />\r\n                <Text {...style.text} text={infos.rule} />\r\n            </Label>\r\n            <Label x={0} y={70} {...{ align: 'right' }}>\r\n                <Tag {...style.tag} />\r\n                <Text {...{ ...style.text, width: idSize }} text={id.toString()} />\r\n            </Label>\r\n            <Label x={idSize} y={70}>\r\n                <Tag {...style.tag} />\r\n                <Text {...{ ...style.text, width: descendantSize }} text={infos.nHided + infos.nDescendants} />\r\n            </Label>\r\n            {dependencies.length ? (\r\n                <Label x={300} y={0}>\r\n                    <Arrow strokeWidth={1} stroke=\"black\" fill=\"black\" points={[depLineSize, 53, 0, 53]} />\r\n                    <Circle x={depLineSize + depSize} y={53} radius={depSize} {...style.dep}></Circle>\r\n                    <Label x={depLineSize} y={45}>\r\n                        <Text {...style.depText} text={infos.dependencies} />\r\n                    </Label>\r\n                </Label>\r\n            ) : null}\r\n        </Group>\r\n    );\r\n};\r\n\r\nexport default Node;\r\n","import React from 'react';\r\nimport { Arrow } from 'react-konva';\r\n\r\nimport { LineProps } from '../../../interfaces/interfaces';\r\n\r\nconst Line = ({ key, points }: LineProps): JSX.Element => {\r\n    return <Arrow key={key} strokeWidth={1} stroke=\"black\" fill=\"black\" points={[...points]} />;\r\n};\r\n\r\nexport default Line;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ControlGroup, Button, InputGroup } from '@blueprintjs/core';\r\nimport { colorConverter } from '../../../store/features/theme/auxi';\r\n\r\nconst Menu = ({\r\n    unfold,\r\n    foldSelectedNodes,\r\n    foldAllDescendants,\r\n    changeNodeColor,\r\n    currentColor,\r\n    options,\r\n}: {\r\n    unfold: () => void;\r\n    foldSelectedNodes: () => void;\r\n    foldAllDescendants: () => void;\r\n    changeNodeColor: (color: string) => void;\r\n    currentColor: string;\r\n    options: { unfold: boolean; foldSelected: boolean; foldAllDescendants: boolean };\r\n}): JSX.Element => {\r\n    const [color, setColor] = useState(currentColor);\r\n\r\n    useEffect(() => {\r\n        setColor(currentColor);\r\n    }, [currentColor]);\r\n\r\n    return (\r\n        <div className=\"bp3-popover2-content\">\r\n            <ul id=\"menu\" className=\"bp3-menu\">\r\n                {options.unfold ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => unfold()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-open\">\r\n                                <span> Unfold</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                {options.foldSelected ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => foldSelectedNodes()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\r\n                                <span> Fold selected nodes</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                {options.foldAllDescendants ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => foldAllDescendants()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\r\n                                <span> Fold all descendants</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                <li className=\"\">\r\n                    <a className=\"bp3-menu-item\">\r\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\r\n                            <span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('red'))}> 🟥</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('orange'))}> 🟧</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('yellow'))}> 🟨</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('green'))}> 🟩</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('blue'))}> 🟦</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('purple'))}> 🟪</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('brown'))}> 🟫</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('black'))}> ⬛</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('white'))}> ⬜</span>\r\n                            </span>\r\n                        </div>\r\n                    </a>\r\n                </li>\r\n                <li className=\"\">\r\n                    <a className=\"bp3-menu-item\">\r\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\r\n                            <ControlGroup\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                }}\r\n                                fill={true}\r\n                                vertical={false}\r\n                            >\r\n                                <InputGroup\r\n                                    placeholder={currentColor}\r\n                                    value={color}\r\n                                    onChange={(e) => setColor(e.target.value)}\r\n                                />\r\n                                <Button\r\n                                    icon=\"style\"\r\n                                    onClick={() => {\r\n                                        changeNodeColor(color);\r\n                                        setColor('');\r\n                                    }}\r\n                                    disabled={color.match(/^#([0-9a-f]{3}){1,2}$/i) === null}\r\n                                ></Button>\r\n                            </ControlGroup>\r\n                        </div>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport Konva from 'konva';\r\nimport dagre from 'dagre';\r\nimport Node from './VisualizerNode';\r\nimport Line from './VisualizerLine';\r\nimport Menu from './VisualizerMenu';\r\n\r\nimport {\r\n    NodeProps,\r\n    LineProps,\r\n    TreeNode,\r\n    CanvasPropsAndRedux,\r\n    NodeInterface,\r\n    ProofState,\r\n    ReduxState,\r\n} from '../../../interfaces/interfaces';\r\n\r\nimport '../../../scss/VisualizerCanvas.scss';\r\n\r\nimport { CanvasProps, CanvasState } from '../../../interfaces/interfaces';\r\nimport { connect } from 'react-redux';\r\nimport { selectProof, selectVisualInfo } from '../../../store/features/proof/proofSlice';\r\nimport {\r\n    hideNodes,\r\n    unhideNodes,\r\n    foldAllDescendants,\r\n    applyView,\r\n    setVisualInfo,\r\n} from '../../../store/features/proof/proofSlice';\r\nimport {\r\n    selectFindData,\r\n    findNode,\r\n    selectRenderData,\r\n    reRender,\r\n    addRenderCount,\r\n    blockRenderNewFile,\r\n} from '../../../store/features/externalCmd/externalCmd';\r\n\r\nconst nodeWidth = 300,\r\n    nodeHeight = 130;\r\n\r\nfunction handleWheel(e: Konva.KonvaEventObject<WheelEvent>): { stageScale: number; stageX: number; stageY: number } {\r\n    e.evt.preventDefault();\r\n\r\n    const scaleBy = 1.08;\r\n    const stage = e.target.getStage();\r\n    if (stage) {\r\n        const oldScale = stage.scaleX();\r\n        const pointerPosition = stage.getPointerPosition();\r\n        let x, y;\r\n\r\n        if (pointerPosition) {\r\n            [x, y] = [pointerPosition.x, pointerPosition.y];\r\n        } else {\r\n            [x, y] = [0, 0];\r\n        }\r\n\r\n        const mousePointTo = {\r\n            x: x / oldScale - stage.x() / oldScale,\r\n            y: y / oldScale - stage.y() / oldScale,\r\n        };\r\n\r\n        const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\r\n\r\n        return {\r\n            stageScale: newScale,\r\n            stageX: -(mousePointTo.x - x / newScale) * newScale,\r\n            stageY: -(mousePointTo.y - y / newScale) * newScale,\r\n        };\r\n    }\r\n    return {\r\n        stageScale: 1,\r\n        stageX: 0,\r\n        stageY: 0,\r\n    };\r\n}\r\n\r\nclass Canvas extends Component<CanvasPropsAndRedux, CanvasState> {\r\n    constructor(props: CanvasPropsAndRedux) {\r\n        super(props);\r\n        this.componentDidUpdate = this.componentDidUpdate.bind(this);\r\n        this.setNodeOnFocus = this.setNodeOnFocus.bind(this);\r\n\r\n        this.state = {\r\n            canvasSize: {\r\n                width: 520,\r\n                height: 300,\r\n            },\r\n            stage: {\r\n                stageScale: 1,\r\n                stageX: 0,\r\n                stageY: 0,\r\n            },\r\n            showingNodes: {},\r\n            showingEdges: {},\r\n            nodeOnFocus: NaN,\r\n            nodesSelected: [],\r\n            proof: [],\r\n            visualInfo: {},\r\n        };\r\n    }\r\n\r\n    static copyNodePosition = (\r\n        visualInfo: ProofState['visualInfo'],\r\n        showingNodes: CanvasState['showingNodes'],\r\n    ): ProofState['visualInfo'] => {\r\n        // Get the current position of the nodes and create a proofState with them included\r\n        const newVisualInfo: ProofState['visualInfo'] = {};\r\n        Object.keys(visualInfo).forEach((id) => {\r\n            const key = Number(id);\r\n\r\n            if (showingNodes[key]) {\r\n                newVisualInfo[key] = {\r\n                    ...visualInfo[key],\r\n                    x: showingNodes[key].props.x,\r\n                    y: showingNodes[key].props.y,\r\n                };\r\n            } else {\r\n                newVisualInfo[key] = {\r\n                    ...visualInfo[key],\r\n                };\r\n            }\r\n        });\r\n        return newVisualInfo;\r\n    };\r\n\r\n    static newNodeProps = (node: NodeInterface, visualInfos: ProofState['visualInfo']): NodeProps => {\r\n        const visualInfo = visualInfos[node.id];\r\n        return {\r\n            id: node.id,\r\n            conclusion: node.conclusion,\r\n            rule: node.rule,\r\n            args: node.args,\r\n            x: visualInfo.x,\r\n            y: visualInfo.y,\r\n            nHided: node.hiddenNodes ? node.hiddenNodes.length : 0,\r\n            nDescendants: node.descendants - 1,\r\n            hiddenNodes: node.hiddenNodes ? node.hiddenNodes.map((node) => node.id) : [],\r\n            dependencies: node.dependencies ? node.dependencies : [],\r\n            selected: visualInfo.selected,\r\n            color: visualInfo.color,\r\n            setNodeOnFocus: () => undefined,\r\n            toggleNodeSelection: () => undefined,\r\n            updateNodePosition: () => undefined,\r\n            openDrawer: () => undefined,\r\n            onDragEnd: () => undefined,\r\n            createTree: () => {\r\n                return [];\r\n            },\r\n        };\r\n    };\r\n\r\n    static getDerivedStateFromProps(props: CanvasPropsAndRedux, current_state: CanvasState) {\r\n        const proofChanged = JSON.stringify(current_state.proof) !== JSON.stringify(props.proof);\r\n        const visualInfoChanged = JSON.stringify(current_state.visualInfo) !== JSON.stringify(props.visualInfo);\r\n        const { nodeToFind, findOption } = props.nodeFindData;\r\n        const { count, fileChanged } = props.renderData;\r\n        const stage = current_state.stage;\r\n\r\n        // If there is a node to be found\r\n        if (nodeToFind > -1) {\r\n            // Is valid node\r\n            if (nodeToFind <= props.proof[props.proof.length - 1].id) {\r\n                // Change the stage position\r\n                const { x, y } = props.visualInfo[nodeToFind];\r\n                stage.stageX = current_state.canvasSize.width / 2 - (x + nodeWidth / 2) * stage.stageScale;\r\n                stage.stageY = current_state.canvasSize.height / 2 - (y + nodeHeight / 2) * stage.stageScale;\r\n\r\n                // Select the finded node\r\n                if (findOption) {\r\n                    props.setVisualInfo({\r\n                        ...props.visualInfo,\r\n                        [nodeToFind]: { ...props.visualInfo[nodeToFind], selected: true },\r\n                    });\r\n                }\r\n            }\r\n            // Reset the node finder\r\n            props.findNode({ nodeId: -1, option: false });\r\n        }\r\n\r\n        // If the proof or visual info changed or we have a new file being uploaded\r\n        if (proofChanged || visualInfoChanged || fileChanged) {\r\n            // Create the showing nodes array\r\n            const showingNodes: CanvasState['showingNodes'] = {};\r\n            props.proof.forEach((node, id) => {\r\n                showingNodes[node.id] = <Node key={id} {...Canvas.newNodeProps(node, props.visualInfo)} />;\r\n            });\r\n\r\n            // If has nodes and can render\r\n            if (showingNodes[0] && count < 2) {\r\n                props.addRenderCount();\r\n\r\n                const g = new dagre.graphlib.Graph();\r\n                g.setGraph({ rankdir: 'BT', ranker: 'tight-tree' });\r\n                g.setDefaultEdgeLabel(function () {\r\n                    return {};\r\n                });\r\n                props.proof.forEach((node) => {\r\n                    g.setNode(node.id.toString(), {\r\n                        width: nodeWidth + (node.dependencies.length ? 95 : 0),\r\n                        height: nodeHeight,\r\n                    });\r\n                    node.children.forEach((child) => {\r\n                        g.setEdge(child.toString(), node.id.toString());\r\n                    });\r\n                });\r\n                dagre.layout(g);\r\n\r\n                const xOffset = g.node('0').x - (showingNodes[0].props.x ? showingNodes[0].props.x : 0);\r\n                const yOffset = g.node('0').y - (showingNodes[0].props.y ? showingNodes[0].props.y : 0);\r\n                g.nodes().forEach((v) => {\r\n                    try {\r\n                        const { x, y } = g.node(v);\r\n                        const key = parseInt(v);\r\n                        showingNodes[key] = (\r\n                            <Node\r\n                                {...{\r\n                                    ...showingNodes[key].props,\r\n                                    x: x - xOffset,\r\n                                    y: y - yOffset,\r\n                                }}\r\n                            />\r\n                        );\r\n                    } catch (e) {\r\n                        console.log(e);\r\n                    }\r\n                });\r\n\r\n                props.setVisualInfo(Canvas.copyNodePosition(props.visualInfo, showingNodes));\r\n            }\r\n            // Reset the new file indicator if it's true\r\n            if (fileChanged) props.blockRenderNewFile();\r\n\r\n            return {\r\n                showingNodes: showingNodes,\r\n                showingEdges: {},\r\n                proof: props.proof,\r\n                visualInfo: props.visualInfo,\r\n                stage: stage,\r\n            };\r\n        }\r\n        return { stage: stage };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        const { showingNodes } = this.state;\r\n        const { proof, visualInfo } = this.props;\r\n\r\n        const newShowingNodes: CanvasState['showingNodes'] = {};\r\n        proof.forEach((node, id) => {\r\n            newShowingNodes[node.id] = <Node key={id} {...Canvas.newNodeProps(node, visualInfo)} />;\r\n        });\r\n\r\n        this.setState({ proof: proof, showingNodes: newShowingNodes });\r\n\r\n        if (showingNodes[0]) {\r\n            const [width, height] = [window.innerWidth, window.innerHeight - 50];\r\n\r\n            // Make sure every time the Canvas is mounted the props are passed to the showing nodes\r\n            this.updateEdgesAndFuncs();\r\n\r\n            this.setState({\r\n                canvasSize: {\r\n                    width,\r\n                    height,\r\n                },\r\n                stage: {\r\n                    stageScale: 1,\r\n                    stageX: width / 2 - (showingNodes[0].props.x + 300 / 2),\r\n                    stageY: height / 10 - (showingNodes[0].props.y + 30 / 2),\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: CanvasPropsAndRedux) {\r\n        // If the proof changed\r\n        if (prevProps.proof !== this.props.proof) {\r\n            this.updateEdgesAndFuncs();\r\n        }\r\n    }\r\n\r\n    updateEdgesAndFuncs() {\r\n        const { showingNodes, showingEdges } = this.state;\r\n        const { proof } = this.props;\r\n\r\n        // Update edges\r\n        proof.forEach((node) => {\r\n            if (showingNodes[node.parents[0]]) {\r\n                node.parents.forEach((parent) => {\r\n                    showingEdges[`${node.id}->${parent}`] = Line(\r\n                        this.LineProps(\r\n                            `${node.id}->${parent}`,\r\n                            showingNodes[node.id].props,\r\n                            showingNodes[parent].props,\r\n                        ),\r\n                    );\r\n                });\r\n            }\r\n        });\r\n        Object.keys(showingNodes).forEach((nodeId: string) => {\r\n            // Make sure a function is updated once\r\n            if (!showingNodes[parseInt(nodeId)].props.setNodeOnFocus.length) {\r\n                const { openDrawer } = this.props;\r\n\r\n                // Set the node functions\r\n                showingNodes[parseInt(nodeId)] = (\r\n                    <Node\r\n                        {...{\r\n                            ...showingNodes[parseInt(nodeId)].props,\r\n                            setNodeOnFocus: this.setNodeOnFocus,\r\n                            toggleNodeSelection: this.toggleNodeSelection,\r\n                            updateNodePosition: this.updateNodePosition,\r\n                            openDrawer: openDrawer,\r\n                            onDragEnd: this.saveNodePosition,\r\n                            createTree: this.createTree,\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n        });\r\n        this.setState({ showingEdges, showingNodes });\r\n    }\r\n\r\n    /* NODE MENU ACTIONS */\r\n    foldAllDescendants = (): void => {\r\n        const { nodeOnFocus } = this.state;\r\n        const { foldAllDescendants, reRender } = this.props;\r\n\r\n        reRender();\r\n        foldAllDescendants(nodeOnFocus);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    foldSelectedNodes = (): void => {\r\n        const { nodesSelected } = this.state;\r\n        const { hideNodes, reRender } = this.props;\r\n\r\n        reRender();\r\n        hideNodes(nodesSelected);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    unfold = (): void => {\r\n        const { nodeOnFocus, proof } = this.state;\r\n        const { unhideNodes, reRender } = this.props;\r\n\r\n        // Get the pi node (to be unfold)\r\n        const obj = proof.find((node) => node.id === nodeOnFocus);\r\n        // Get the hidden nodes and their ids\r\n        const hiddenNodes = obj ? (obj.hiddenNodes ? obj.hiddenNodes : []) : [];\r\n        const hiddenIds = hiddenNodes ? hiddenNodes.map((node) => node.id) : [];\r\n\r\n        reRender();\r\n        unhideNodes({ pi: nodeOnFocus, hiddens: hiddenIds });\r\n\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    changeNodeColor = (color: string): void => {\r\n        const { showingNodes, nodesSelected, nodeOnFocus } = this.state;\r\n        const { setVisualInfo } = this.props;\r\n        let { visualInfo } = this.props;\r\n\r\n        // Save the current position\r\n        nodesSelected.forEach((nodeId) => {\r\n            visualInfo = {\r\n                ...visualInfo,\r\n                [nodeId]: {\r\n                    ...visualInfo[nodeId],\r\n                    color: color,\r\n                    selected: false,\r\n                },\r\n            };\r\n        });\r\n        if (!nodesSelected.length && showingNodes[nodeOnFocus]) {\r\n            visualInfo = {\r\n                ...visualInfo,\r\n                [nodeOnFocus]: { ...visualInfo[nodeOnFocus], color: color, selected: false },\r\n            };\r\n        }\r\n\r\n        setVisualInfo(visualInfo);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    toggleNodeSelection = (id: number): void => {\r\n        let { nodesSelected } = this.state;\r\n        const { visualInfo, setVisualInfo } = this.props;\r\n\r\n        if (visualInfo[id].selected) {\r\n            nodesSelected = nodesSelected.filter((nodeId) => nodeId !== id);\r\n        } else {\r\n            nodesSelected.push(id);\r\n        }\r\n\r\n        // Save the current position\r\n        setVisualInfo({\r\n            ...visualInfo,\r\n            [id]: {\r\n                ...visualInfo[id],\r\n                selected: !visualInfo[id].selected,\r\n            },\r\n        });\r\n\r\n        this.setState({ nodesSelected });\r\n    };\r\n\r\n    /*TREE*/\r\n    createTree = (id: number): TreeNode[] => {\r\n        return this.props.createTree(this.state.proof, id);\r\n    };\r\n\r\n    /* UTILS */\r\n    setNodeOnFocus = (id: number): void => {\r\n        this.setState({ nodeOnFocus: id });\r\n    };\r\n\r\n    LineProps = (key: string, from: NodeProps, to: NodeProps): LineProps => ({\r\n        key,\r\n        points: [from.x + 150, from.y, to.x + 150, to.y + 105],\r\n    });\r\n\r\n    saveNodePosition = (): void => {\r\n        const { visualInfo, setVisualInfo } = this.props;\r\n        const { showingNodes } = this.state;\r\n\r\n        // Get the current position of the nodes and create a proofState with them included\r\n        setVisualInfo(Canvas.copyNodePosition(visualInfo, showingNodes));\r\n    };\r\n\r\n    updateNodePosition = (key: number, x: number, y: number): void => {\r\n        const { showingNodes, showingEdges } = this.state;\r\n\r\n        showingNodes[key] = <Node {...{ ...showingNodes[key].props, x, y }} />;\r\n\r\n        Object.keys(showingEdges)\r\n            .filter((edgeKey) => edgeKey.indexOf(key.toString()) !== -1)\r\n            .forEach((edge) => {\r\n                const [from, to] = edge.split('->').map((x) => parseInt(x));\r\n                showingEdges[edge] = Line(this.LineProps(edge, showingNodes[from].props, showingNodes[to].props));\r\n            });\r\n        this.setState({ showingNodes, showingEdges });\r\n    };\r\n\r\n    render(): JSX.Element {\r\n        const { canvasSize, stage, showingNodes, showingEdges, nodesSelected, nodeOnFocus, proof } = this.state;\r\n        const color = showingNodes[nodeOnFocus] ? showingNodes[nodeOnFocus].props.color : '';\r\n        const found = proof.find((o) => o.id === nodeOnFocus);\r\n\r\n        return (\r\n            <div>\r\n                <Menu\r\n                    unfold={this.unfold}\r\n                    foldSelectedNodes={this.foldSelectedNodes}\r\n                    foldAllDescendants={this.foldAllDescendants}\r\n                    changeNodeColor={this.changeNodeColor}\r\n                    options={{\r\n                        unfold: showingNodes[nodeOnFocus] ? Boolean(showingNodes[nodeOnFocus].props.nHided) : false,\r\n                        foldSelected: nodesSelected.length && nodesSelected.includes(nodeOnFocus) ? true : false,\r\n                        foldAllDescendants:\r\n                            Boolean(found?.children.length) && !Boolean(found?.hiddenNodes?.length) && found?.id != 0,\r\n                    }}\r\n                    currentColor={color}\r\n                ></Menu>\r\n                <Stage\r\n                    draggable\r\n                    onDragMove={() => null}\r\n                    onDragEnd={() => null}\r\n                    width={canvasSize.width}\r\n                    height={canvasSize.height}\r\n                    onWheel={(e) => this.setState({ stage: handleWheel(e) })}\r\n                    scaleX={stage.stageScale}\r\n                    scaleY={stage.stageScale}\r\n                    x={stage.stageX}\r\n                    y={stage.stageY}\r\n                    onContextMenu={(e) => e.evt.preventDefault()}\r\n                >\r\n                    <Layer>\r\n                        {Object.keys(showingEdges).length > 0 &&\r\n                            Object.keys(showingEdges).map(function (key) {\r\n                                return showingEdges[key];\r\n                            })}\r\n                        {Object.keys(showingNodes).length > 0 &&\r\n                            Object.keys(showingNodes).map(\r\n                                (value: string): JSX.Element => showingNodes[parseInt(value)],\r\n                            )}\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState, ownProps: CanvasProps) {\r\n    return {\r\n        proof: selectProof(state),\r\n        visualInfo: selectVisualInfo(state),\r\n        nodeFindData: selectFindData(state),\r\n        renderData: selectRenderData(state),\r\n        ...ownProps,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    hideNodes,\r\n    unhideNodes,\r\n    foldAllDescendants,\r\n    applyView,\r\n    setVisualInfo,\r\n    findNode,\r\n    reRender,\r\n    addRenderCount,\r\n    blockRenderNewFile,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Canvas);\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Classes, Tree, TreeNodeInfo } from '@blueprintjs/core';\r\nimport { TreeProps } from '../../interfaces/interfaces';\r\n\r\nconst VisualizerTree: React.FC<TreeProps> = ({ darkTheme, content, originalNodeInfo, setNodeInfo }: TreeProps) => {\r\n    // STATES:\r\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\r\n    const [nodes, setNodes] = useState(content);\r\n    const [selected, setSelected] = useState(NaN);\r\n\r\n    // USE EFFECT:\r\n    useEffect(() => setNodes(content), [content]);\r\n\r\n    // UTILS:\r\n    const forEachNode = (nodes: TreeNodeInfo[], callback: (node: TreeNodeInfo) => void) => {\r\n        if (nodes == null) {\r\n            return;\r\n        }\r\n\r\n        for (const node of nodes) {\r\n            callback(node);\r\n            forEachNode(node.childNodes ? node.childNodes : [], callback);\r\n        }\r\n    };\r\n\r\n    const handleNodeClick = (nodeData: any, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\r\n        setNodeInfo(\r\n            selected !== nodeData.id\r\n                ? {\r\n                      rule: nodeData.rule ? nodeData.rule : '',\r\n                      args: nodeData.args ? nodeData.args : '',\r\n                      conclusion: nodeData.conclusion ? nodeData.conclusion : '',\r\n                      nHided: nodeData.nHided ? nodeData.nHided : 0,\r\n                      nDescendants: nodeData.descendants,\r\n                      hiddenNodes: nodeData.hiddenNodes,\r\n                      dependencies: nodeData.dependencies,\r\n                  }\r\n                : originalNodeInfo,\r\n        );\r\n        const originallySelected = nodeData.isSelected;\r\n\r\n        // Set all the nodes to be not selected\r\n        if (!e.shiftKey) forEachNode(nodes, (n) => (n.isSelected = false));\r\n\r\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\r\n        setSelected(selected === nodeData.id ? NaN : nodeData.id);\r\n    };\r\n\r\n    const handleNodeCollapse = (nodeData: TreeNodeInfo) => {\r\n        nodeData.isExpanded = false;\r\n        forceUpdate();\r\n    };\r\n\r\n    const handleNodeExpand = (nodeData: TreeNodeInfo) => {\r\n        nodeData.isExpanded = true;\r\n        forceUpdate();\r\n    };\r\n\r\n    return (\r\n        <div style={{ backgroundColor: darkTheme ? '#394b59' : 'white' }}>\r\n            <Tree\r\n                contents={nodes}\r\n                onNodeClick={handleNodeClick}\r\n                onNodeCollapse={handleNodeCollapse}\r\n                onNodeExpand={handleNodeExpand}\r\n                className={Classes.ELEVATION_0}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerTree;\r\n","import React, { useState, useReducer } from 'react';\r\n\r\nimport { Icon, Collapse, Pre } from '@blueprintjs/core';\r\n\r\nimport '../../../scss/VisualizerDirectoryStyle.scss';\r\nimport { useAppSelector } from '../../../store/hooks';\r\nimport { selectTheme } from '../../../store/features/theme/themeSlice';\r\nimport { NodeInfo, DirectoryStyleProps } from '../../../interfaces/interfaces';\r\nimport { drawerHelpersKind } from '../../../interfaces/enum';\r\nimport VisualizerTree from '../../VisualizerTree/VisualizerTree';\r\n\r\nconst VisualizerDirectoryStyle: React.FC<DirectoryStyleProps> = ({\r\n    proofTree,\r\n    ruleHelper,\r\n    indent,\r\n    translate,\r\n}: DirectoryStyleProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const [nodeInfo, setNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n    const [[ruleHelperIsOpen, argsHelperIsOpen, concHelperIsOpen], dispatchHelper] = useReducer(\r\n        (state: boolean[], action: { type: drawerHelpersKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            // Act over all the positions\r\n            if (type === drawerHelpersKind.ALL) {\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = payload;\r\n                }\r\n            }\r\n            // If wanna set a position\r\n            else if (payload) {\r\n                // Reset everything and set the wanted\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = i === type ? payload : false;\r\n                }\r\n            }\r\n            // If wanna only reset a position\r\n            else state[type] = payload;\r\n\r\n            return [...state];\r\n        },\r\n        // Rule, args, conclusion\r\n        [false, false, false],\r\n    );\r\n\r\n    const nodeInfoTable = () => {\r\n        return (\r\n            <table\r\n                id=\"table-node-info\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Property</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <strong>RULE </strong>\r\n                            <Icon\r\n                                id=\"icon\"\r\n                                icon=\"help\"\r\n                                onClick={() => {\r\n                                    dispatchHelper({ type: drawerHelpersKind.RULE, payload: !ruleHelperIsOpen });\r\n                                }}\r\n                            ></Icon>\r\n                        </td>\r\n                        <td>\r\n                            {nodeInfo.rule}\r\n                            <Collapse isOpen={ruleHelperIsOpen}>\r\n                                <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                    {ruleHelper(nodeInfo.rule)}\r\n                                </Pre>\r\n                            </Collapse>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.args && (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>ARGS</strong>{' '}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.ARGS,\r\n                                                payload: !argsHelperIsOpen,\r\n                                            });\r\n                                        }}\r\n                                    ></Icon>\r\n                                ) : null}\r\n                            </td>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                {nodeInfo.args}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Collapse isOpen={argsHelperIsOpen}>\r\n                                        <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                            {indent(translate(nodeInfo.args))}\r\n                                        </Pre>\r\n                                    </Collapse>\r\n                                ) : null}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n\r\n                    <tr>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            <strong>CONCLUSION</strong>{' '}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <Icon\r\n                                    id=\"icon\"\r\n                                    icon=\"translate\"\r\n                                    onClick={() => {\r\n                                        dispatchHelper({ type: drawerHelpersKind.CONC, payload: !concHelperIsOpen });\r\n                                    }}\r\n                                ></Icon>\r\n                            ) : null}\r\n                        </td>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            {nodeInfo.conclusion}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <Collapse isOpen={concHelperIsOpen}>\r\n                                    <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                        {indent(translate(nodeInfo.conclusion))}\r\n                                    </Pre>\r\n                                </Collapse>\r\n                            ) : null}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.nDescendants ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#DESCENDANTS</strong>\r\n                            </td>\r\n                            <td>{nodeInfo.nDescendants}</td>\r\n                        </tr>\r\n                    ) : null}\r\n\r\n                    {nodeInfo.nHided ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#HIDDEN</strong>\r\n                            </td>\r\n                            <td>{`[${nodeInfo.hiddenNodes.map((node) => ' ' + node)} ]`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                    {nodeInfo.dependencies.length ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>DEPENDENCIES</strong>\r\n                            </td>\r\n                            <td>{`${nodeInfo.dependencies.map(\r\n                                (dependency) => ` ${dependency.piId}: [${dependency.depsId.map((dep) => ' ' + dep)} ] `,\r\n                            )}`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"dir-style\"\r\n            style={{\r\n                backgroundColor: darkTheme ? 'rgb(57, 75, 89)' : 'white',\r\n                height:\r\n                    window.innerHeight - (document.getElementsByClassName('bp3-navbar')[0] as HTMLElement).offsetHeight,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    width: '50%',\r\n                    height: '100%',\r\n                    float: 'left',\r\n                    clear: 'none',\r\n                    borderRight: '1px solid black',\r\n                    overflow: 'auto',\r\n                }}\r\n            >\r\n                <VisualizerTree\r\n                    darkTheme={darkTheme}\r\n                    content={proofTree}\r\n                    setNodeInfo={setNodeInfo}\r\n                    originalNodeInfo={{\r\n                        rule: '',\r\n                        args: '',\r\n                        conclusion: '',\r\n                        nHided: 0,\r\n                        nDescendants: 0,\r\n                        hiddenNodes: [],\r\n                        dependencies: [],\r\n                    }}\r\n                ></VisualizerTree>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    width: '50%',\r\n                    height: '100%',\r\n                    float: 'left',\r\n                    clear: 'none',\r\n                }}\r\n            >\r\n                {nodeInfoTable()}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerDirectoryStyle;\r\n","interface Line {\r\n    value: string;\r\n    indentLevel: number;\r\n}\r\n\r\nclass Let {\r\n    name: string;\r\n    value: string;\r\n    lines: Line[];\r\n    biggerID: number;\r\n    isExpanded: boolean;\r\n    externalLets: { [key: string]: { let: Let; idx: number[] } };\r\n\r\n    constructor(name: string, letText: string, letsList: { [key: string]: Let }, indices: { [key: number]: string }) {\r\n        this.name = name;\r\n        this.value = letText;\r\n        this.lines = [{ value: letText, indentLevel: 0 }];\r\n        this.biggerID = 0;\r\n        this.isExpanded = false;\r\n\r\n        this.externalLets = {};\r\n        Object.keys(indices).forEach((key) => {\r\n            const numKey = Number(key);\r\n            const letName = indices[numKey];\r\n            this.externalLets[letName] = {\r\n                let: letsList[letName],\r\n                idx: this.externalLets[letName] ? [...this.externalLets[letName].idx, numKey] : [numKey],\r\n            };\r\n        });\r\n    }\r\n\r\n    getTextWidth = (text: string, font: string): number => {\r\n        const canvas = document.createElement('canvas');\r\n        const context = canvas.getContext('2d');\r\n        let size = 0;\r\n        if (context) {\r\n            context.font = font;\r\n            size = context.measureText(text).width;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    expandValue = (shouldUpdate = false): string => {\r\n        const keyList = Object.keys(this.externalLets).map((key) => this.externalLets[key].let.name);\r\n        let letText = this.value;\r\n\r\n        // Iterate from the last to the first external let\r\n        for (let i = keyList.length - 1; i >= 0; i--) {\r\n            const letName = keyList[i];\r\n\r\n            // For each let, iterate through all the indexes they show up inside the string\r\n            for (let k = this.externalLets[letName].idx.length - 1; k >= 0; k--) {\r\n                const idx = this.externalLets[letName].idx[k];\r\n\r\n                // Expand all the terms\r\n                letText =\r\n                    letText.substring(0, idx) +\r\n                    this.externalLets[letName].let.expandValue() +\r\n                    letText.substring(idx + letName.length, letText.length);\r\n            }\r\n        }\r\n        if (shouldUpdate) {\r\n            this.lines = [{ value: letText, indentLevel: 0 }];\r\n            this.biggerID = 0;\r\n        }\r\n        return letText;\r\n    };\r\n\r\n    expandPartialy = (externalRef: Let, letIdx: number): string => {\r\n        const key = externalRef.name;\r\n        const indentedText = this.printLines();\r\n\r\n        let lastLine = 0,\r\n            count = 0,\r\n            i;\r\n        // Iterates through the first lines until the point we reach the changed line\r\n        for (i = 0; i < this.lines.length; i++) {\r\n            lastLine = this.lines[i].value.length + 4 * this.lines[i].indentLevel + 1;\r\n            count += lastLine;\r\n            if (letIdx < count) break;\r\n        }\r\n        // New index (points to the start of the line content (ignores initial indent white space))\r\n        const newIdx = letIdx - (count - lastLine + 4 * this.lines[i].indentLevel);\r\n\r\n        // Update the new line to the new content\r\n        this.lines[i].value =\r\n            this.lines[i].value.substring(0, newIdx) +\r\n            externalRef.value +\r\n            this.lines[i].value.substring(newIdx + key.length, this.lines[i].value.length);\r\n\r\n        // Returns the indented text with the content to be replaced\r\n        return (\r\n            indentedText.substring(0, letIdx) +\r\n            externalRef.value +\r\n            indentedText.substring(letIdx + key.length, indentedText.length)\r\n        );\r\n    };\r\n\r\n    shrinkValue = (): string => {\r\n        this.lines = [{ value: this.value, indentLevel: 0 }];\r\n        this.biggerID = 0;\r\n        return this.value;\r\n    };\r\n\r\n    fitsTheWindow = (windowSize: number, font: string): boolean => {\r\n        const line = this.lines[this.biggerID];\r\n        const size = this.getTextWidth(`${'    '.repeat(line.indentLevel)}${line.value}`, font);\r\n        return size < windowSize;\r\n    };\r\n\r\n    indent = (windowSize: number, mode: boolean, font: string): string => {\r\n        let someDoesntFit;\r\n        if (mode) someDoesntFit = true;\r\n        else someDoesntFit = this.getTextWidth(this.lines[this.biggerID].value, font) < windowSize ? false : true;\r\n\r\n        // While there are lines that doesn't fit the window size\r\n        while (someDoesntFit) {\r\n            const { lines, biggerID } = this;\r\n            const newLines: Line[] = [];\r\n            const thisLevel = lines[biggerID].indentLevel;\r\n            const thisLine = lines[biggerID].value;\r\n\r\n            let lastSpace = -1,\r\n                lastUsedSpace = -1,\r\n                lastOpenParenthesis = -1,\r\n                indent = lines[biggerID].indentLevel - 1,\r\n                biggestSize = 0,\r\n                newBiggerID = 0;\r\n\r\n            // Iterate through the line and calculate the indentation levels\r\n            for (let i = 0; i < thisLine.length; i++) {\r\n                const c = thisLine[i];\r\n                // Opening parenthesis\r\n                if (c === '(') {\r\n                    indent++;\r\n                    // If it's one of the arguments of the operation\r\n                    if (indent === thisLevel + 1) lastOpenParenthesis = i;\r\n                }\r\n                // Closing parenthesis\r\n                else if (c === ')') {\r\n                    // If it's the end of this line\r\n                    if (indent === thisLevel) {\r\n                        // If the last argument was not inserted\r\n                        if (thisLine[i - 1] !== ')') {\r\n                            newLines.push({\r\n                                value: thisLine.substring(lastSpace + 1, i),\r\n                                indentLevel: indent + 1,\r\n                            });\r\n                        }\r\n                        newLines.push({ value: ')', indentLevel: indent });\r\n                    }\r\n                    // If it's the end of this argument\r\n                    else if (indent === thisLevel + 1) {\r\n                        newLines.push({\r\n                            value: thisLine.substring(lastOpenParenthesis, i + 1),\r\n                            indentLevel: indent,\r\n                        });\r\n                    }\r\n                    indent--;\r\n                }\r\n                // If a new space is detected in the current identation level\r\n                //   and the last argument is not between parenthesis\r\n                else if (c === ' ') {\r\n                    lastSpace = i;\r\n\r\n                    if (indent === thisLevel) {\r\n                        if (thisLine[i - 1] !== ')') {\r\n                            newLines.push({\r\n                                value: thisLine.substring(lastUsedSpace + 1, i),\r\n                                indentLevel: newLines.length ? indent + 1 : indent,\r\n                            });\r\n                        }\r\n                        lastUsedSpace = i;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Insert new lines if happend some indentation\r\n            if (newLines.length > 0) this.lines.splice(biggerID, 1, ...newLines);\r\n\r\n            // Find the new biggest line\r\n            this.lines.forEach((line, id) => {\r\n                // Get the size of this new line\r\n                const thisSize = this.getTextWidth(`${'    '.repeat(line.indentLevel)}${line.value}`, font);\r\n                if (thisSize > biggestSize) {\r\n                    biggestSize = thisSize;\r\n                    newBiggerID = id;\r\n                }\r\n            });\r\n\r\n            this.biggerID = newBiggerID;\r\n\r\n            // If the biggest size fits the window or no new line was found (minimal indentation)\r\n            if (biggestSize < windowSize || newLines.length < 1) someDoesntFit = false;\r\n        }\r\n        return this.printLines();\r\n    };\r\n\r\n    groupUp = (): string => {\r\n        let original = '';\r\n        // Group up all the lines into one single string\r\n        this.lines.forEach((line, id, self) => {\r\n            original += line.value;\r\n            if (id < self.length - 1 && self[id + 1].value !== ')') {\r\n                original += ' ';\r\n            }\r\n        });\r\n        return original;\r\n    };\r\n\r\n    printLines = (): string => {\r\n        return this.lines.reduce((ac, line) => (ac += `${'    '.repeat(line.indentLevel)}${line.value}\\n`), '');\r\n    };\r\n}\r\n\r\nexport default Let;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { LetRenderProps } from '../../interfaces/interfaces';\r\nimport { renderLetKind } from '../../interfaces/enum';\r\nimport Let from './let';\r\nimport { Pre } from '@blueprintjs/core';\r\n\r\nconst font = '13px monospace';\r\n\r\nconst LetRender: React.FC<LetRenderProps> = ({\r\n    id,\r\n    toRender,\r\n    letMap,\r\n    shouldExpand,\r\n    shouldRevert,\r\n    dispatchExpansion,\r\n}: LetRenderProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const widthRef = useRef(0);\r\n    const [resizeMode, setResizeMode] = useState(0);\r\n    const [letMapS, setLetMapS] = useState(\r\n        (() => {\r\n            const newMap = { ...letMap };\r\n            if (toRender[0] !== '(' && toRender[toRender.length] !== ')') {\r\n                toRender = `(${toRender})`;\r\n            }\r\n            newMap['this'] = toRender;\r\n            return newMap;\r\n        })(),\r\n    );\r\n\r\n    const initializeLet = (key = 'this', lets: { [key: string]: Let } = {}) => {\r\n        const currentLet = letMapS[key];\r\n        const indices: { [key: number]: string } = {};\r\n\r\n        // Finds all occurences of let in the currentLet\r\n        [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n            if (match.index) indices[match.index] = match[0];\r\n        });\r\n\r\n        // Call recursive for all the external lets\r\n        Object.keys(indices).forEach((indice) => {\r\n            initializeLet(indices[Number(indice)], lets);\r\n        });\r\n\r\n        // If this let was not created yet\r\n        if (Object.keys(lets).indexOf(key) === -1) {\r\n            lets[key] = new Let(key, currentLet, lets, indices);\r\n        }\r\n\r\n        return lets;\r\n    };\r\n    const letsRef = useRef<{ [key: string]: Let }>(initializeLet());\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Handler to call on window resize and set the value column width\r\n        function handleResize() {\r\n            const width = widthRef.current;\r\n\r\n            const newWidth = document.getElementsByClassName(`let-render-${id}`)[0].clientWidth - 30;\r\n            width === newWidth ? setResizeMode(1) : width > newWidth ? setResizeMode(0) : setResizeMode(2);\r\n\r\n            widthRef.current = newWidth;\r\n        }\r\n\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Expand\r\n        if (shouldExpand) {\r\n            expandAll('this');\r\n            dispatchExpansion({ type: renderLetKind.EXPAND, payload: false });\r\n        }\r\n        // Revert\r\n        else if (shouldRevert) {\r\n            revertLet('this');\r\n            dispatchExpansion({ type: renderLetKind.REVERT, payload: false });\r\n        }\r\n    }, [shouldExpand, shouldRevert]);\r\n\r\n    const expandLet = (parent: string, key: string, letIdx: number) => {\r\n        const lets = letsRef.current;\r\n\r\n        const externalRef = lets[key];\r\n        lets[parent].isExpanded = true;\r\n        letMapS[parent] = lets[parent].expandPartialy(externalRef, letIdx);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const expandAll = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        lets[key].isExpanded = true;\r\n        letMapS[key] = lets[key].expandValue(true);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const revertLet = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        // Only when is expanded\r\n        if (lets[key].isExpanded) {\r\n            lets[key].isExpanded = false;\r\n            letMapS[key] = lets[key].shrinkValue();\r\n            setLetMapS({ ...letMapS });\r\n        }\r\n    };\r\n\r\n    const renderLet = (): JSX.Element => {\r\n        const lets = letsRef.current;\r\n        const width = widthRef.current;\r\n        const key = 'this';\r\n\r\n        // Waits for the width to be updated and the DOM element to be updated\r\n        if (width) {\r\n            let currentLet = letMapS[key];\r\n            let indices: { [key: number]: string } = {};\r\n\r\n            // Finds all occurences of let in the currentLet\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index !== undefined) indices[match.index] = match[0];\r\n            });\r\n\r\n            // If doesn't fits, then indent\r\n            if (!lets[key].fitsTheWindow(width, font)) {\r\n                currentLet = lets[key].indent(width, true, font);\r\n                letMapS[key] = currentLet;\r\n\r\n                indices = {};\r\n                // Finds all occurences of let in the currentLet after indentation\r\n                [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                    if (match.index) indices[match.index] = match[0];\r\n                });\r\n            }\r\n            // If fits\r\n            else {\r\n                // Only in the momment the page size is growing and the line is broken\r\n                if (resizeMode >= 0 && lets[key].lines.length > 1) {\r\n                    // Reset the line\r\n                    lets[key].lines = [\r\n                        { value: lets[key].isExpanded ? lets[key].groupUp() : lets[key].value, indentLevel: 0 },\r\n                    ];\r\n                    lets[key].biggerID = 0;\r\n\r\n                    // Indent it again\r\n                    currentLet = lets[key].indent(width, false, font);\r\n                    letMapS[key] = currentLet;\r\n\r\n                    indices = {};\r\n                    // Finds all occurences of let in the currentLet after indentation\r\n                    [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                        if (match.index) indices[match.index] = match[0];\r\n                    });\r\n                }\r\n            }\r\n\r\n            const arr: (JSX.Element | string)[] = [];\r\n            let start = 0;\r\n\r\n            // Slice the currentLet into an array with strings and JSX elements\r\n            Object.keys(indices).forEach((index, i, self) => {\r\n                const idx = Number(index);\r\n                const thisLet = indices[idx];\r\n\r\n                // Add the elements to the arr\r\n                arr.push(currentLet.substring(start, idx));\r\n                arr.push(\r\n                    <a\r\n                        className={darkTheme ? 'let-literal-or' : 'let-literal'}\r\n                        onClick={() => {\r\n                            expandLet(key, thisLet, idx);\r\n                        }}\r\n                    >\r\n                        {thisLet}\r\n                    </a>,\r\n                );\r\n                // Defines a new start\r\n                start = idx + thisLet.length;\r\n\r\n                // If it's the last let\r\n                if (i === self.length - 1) {\r\n                    arr.push(currentLet.substring(start, currentLet.length));\r\n                }\r\n            });\r\n\r\n            // If there is a let in this current let\r\n            if (Object.keys(indices).length) {\r\n                return (\r\n                    <span className=\"let-instance\" style={{ overflowWrap: 'break-word' }}>\r\n                        {arr}\r\n                    </span>\r\n                );\r\n            } else {\r\n                return (\r\n                    <span className=\"let-instance\" style={{ overflowWrap: 'break-word' }}>\r\n                        {currentLet}\r\n                    </span>\r\n                );\r\n            }\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    return (\r\n        <Pre\r\n            className={`let-render-${id}`}\r\n            style={{ maxHeight: '300px', overflow: 'auto', margin: '0', whiteSpace: 'pre-wrap' }}\r\n        >\r\n            {renderLet()}\r\n        </Pre>\r\n    );\r\n};\r\n\r\nexport default LetRender;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Drawer, Position, Classes, Icon, Collapse, Pre, TreeNodeInfo } from '@blueprintjs/core';\r\nimport Canvas from './Canvas/VisualizerCanvas';\r\nimport VisualizerTree from '../VisualizerTree/VisualizerTree';\r\nimport VisualizerDirectoryStyle from './VisualizerDirectoryStyle/VisualizerDirectoryStyle';\r\n\r\nimport '../../scss/VisualizerStage.scss';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectDot, selectFileCount } from '../../store/features/file/fileSlice';\r\nimport { selectStyle, selectLetMap, selectOriginalProof } from '../../store/features/proof/proofSlice';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { NodeInfo, NodeInterface, TreeNode } from '../../interfaces/interfaces';\r\nimport { renderLetKind, drawerHelpersKind } from '../../interfaces/enum';\r\nimport LetRender from '../VisualizerLetDrawer/LetRender';\r\n\r\nfunction ruleHelper(rule: string) {\r\n    switch (rule.split(' ')[0]) {\r\n        case 'π':\r\n            return 'This node hides some parts of the proof, you can unfold it.';\r\n        case 'ASSUME':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Assumption (a leaf)\\nChildren: none\\nArguments: (F)\\n--------------\\nConclusion: F\\n\\nThis rule has special status, in that an application of assume is an open leaf in a proof that is not (yet) justified. An assume leaf is analogous to a free variable in a term, where we say \"F is a free assumption in proof P\" if it contains an application of F that is not  bound by SCOPE.'\r\n            );\r\n        case 'SCOPE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Scope (a binder for assumptions)\\nChildren: (P:F)\\nArguments: (F1, ..., Fn)\\n--------------\\nConclusion: (=> (and F1 ... Fn) F) or (not (and F1 ... Fn)) if F is false\\n\\nThis rule has a dual purpose with ASSUME. It is a way to close assumptions in a proof. We require that F1 ... Fn are free assumptions in P and say that F1, ..., Fn are not free in (SCOPE P). In other words, they are bound by this application. For example, the proof node: (SCOPE (ASSUME F) :args F) has the conclusion (=> F F) and has no free assumptions. More generally, a proof with no free assumptions always concludes a valid formula.'\r\n            );\r\n        case 'SUBS':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Substitution\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids)?)\\n---------------------------------------------------------------\\nConclusion: (= t t*sigma{ids}(Fn)*...*sigma{ids}(F1))\\nwhere sigma{ids}(Fi) are substitutions, which notice are applied in reverse order. Notice that ids is a MethodId identifier, which determines how to convert the formulas F1, ..., Fn into substitutions.'\r\n            );\r\n        case 'REWRITE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Rewrite\\nChildren: none\\nArguments: (t, (idr)?)\\n----------------------------------------\\nConclusion: (= t Rewriter{idr}(t))\\nwhere idr is a MethodId identifier, which determines the kind of rewriter to apply, e.g. Rewriter::rewrite.'\r\n            );\r\n        case 'EVALUATE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Evaluate\\nChildren: none\\n\\nArguments: (t)\\n----------------------------------------\\nConclusion: (= t Evaluator::evaluate(t))\\nNote this is equivalent to: (REWRITE t MethodId::RW_EVALUATE)'\r\n            );\r\n        case 'MACRO_SR_EQ_INTRO':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, we provide a term t and conclude that it is equal to its rewritten form under a (proven) substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: (= t t')\\nwhere t' is Rewriter{idr}(t*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nIn other words, from the point of view of Skolem forms, this rule transforms t to t' by standard substitution + rewriting.\\n\\nThe arguments ids, ida and idr are optional and specify the identifier of the substitution, the substitution application and rewriter respectively to be used.\"\r\n            );\r\n        case 'MACRO_SR_PRED_INTRO':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, we provide a formula F and conclude it, under the condition that it rewrites to true under a proven substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (F, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == true where ids and idr are method identifiers.\\n\\nMore generally, this rule also holds when: Rewriter::rewrite(toOriginal(F')) == true where F' is the result of the left hand side of the equality above. Here, notice that we apply rewriting on the original form of F', meaning that this rule may conclude an F whose Skolem form is justified by the definition of its (fresh) Skolem variables. For example, this rule may justify the conclusion (= k t) where k is the purification Skolem for t, e.g. where the original form of k is t.\\n\\nFurthermore, notice that the rewriting and substitution is applied only within the side condition, meaning the rewritten form of the original form of F does not escape this rule.\"\r\n            );\r\n        case 'MACRO_SR_PRED_ELIM':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may conclude its rewritten form under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: ((ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: F'\\nwhere F' is Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)). where ids and idr are method identifiers.\\n\\nWe rewrite only on the Skolem form of F, similar to MACRO_SR_EQ_INTRO.\"\r\n            );\r\n        case 'MACRO_SR_PRED_TRANSFORM':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may provide a formula G and conclude it if F and G are equivalent after rewriting under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: (G, (ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: G\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == Rewriter{idr}(G*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nMore generally, this rule also holds when:\\n  Rewriter::rewrite(toOriginal(F')) == Rewriter::rewrite(toOriginal(G'))\\nwhere F' and G' are the result of each side of the equation above. Here, original forms are used in a similar manner to MACRO_SR_PRED_INTRO above.\"\r\n            );\r\n        case 'REMOVE_TERM_FORMULA_AXIOM':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Remove Term Formulas Axiom\\nChildren: none\\nArguments: (t)\\n---------------------------------------------------------------\\nConclusion: RemoveTermFormulas::getAxiomFor(t).'\r\n            );\r\n        case 'THEORY_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Theory lemma\\nChildren: none\\nArguments: (F, tid)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a (T-valid) theory lemma generated by theory with TheoryId tid. This is a \"coarse-grained\" rule that is used as a placeholder if a theory did not provide a proof for a lemma or conflict.'\r\n            );\r\n        case 'THEORY_REWRITE':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== Theory Rewrite\\nChildren: none\\nArguments: (F, tid, rid)\\n----------------------------------------\\nConclusion: F\\nwhere F is an equality of the form (= t t') where t' is obtained by applying the kind of rewriting given by the method identifier rid, which is one of: { RW_REWRITE_THEORY_PRE, RW_REWRITE_THEORY_POST, RW_REWRITE_EQ_EXT } Notice that the checker for this rule does not replay the rewrite to ensure correctness, since theory rewriter methods are not static. For example, the quantifiers rewriter involves constructing new bound variables that are not guaranteed to be consistent on each call.\"\r\n            );\r\n        case 'PREPROCESS':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on some preprocessing pass, or otherwise F was added as a new assertion by some preprocessing pass.\"\r\n            );\r\n        case 'PREPROCESS_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by some preprocessing pass.'\r\n            );\r\n        case 'THEORY_PREPROCESS':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = Theory::ppRewrite(t) for some theory. Notice this is a \"trusted\" rule.'\r\n            );\r\n        case 'THEORY_PREPROCESS_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by theory preprocessing.'\r\n            );\r\n        case 'THEORY_EXPAND_DEF':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on theory expand definitions.\"\r\n            );\r\n        case 'WITNESS_AXIOM':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an existential (exists ((x T)) (P x)) used for introducing a witness term (witness ((x T)) (P x)).'\r\n            );\r\n        case 'TRUST_REWRITE':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of rewriting that could not be replayed during proof postprocessing.\"\r\n            );\r\n        case 'TRUST_SUBS':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be replayed during proof postprocessing.\"\r\n            );\r\n        case 'TRUST_SUBS_MAP':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be determined by the TrustSubstitutionMap. This inference may contain possibly multiple children corresponding to the formulas used to derive the substitution.\"\r\n            );\r\n        case 'TRUST_SUBS_EQ':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a solved equality of the form (= x t) derived as the solved form of F', where F' is given as a child.\"\r\n            );\r\n        case 'SAT_REFUTATION':\r\n            return (\r\n                rule +\r\n                '\\n\\n========= SAT Refutation for assumption-based unsat cores\\nChildren: (P1, ..., Pn)\\nArguments: none\\n---------------------\\nConclusion: false\\nNote: P1, ..., Pn correspond to the unsat core determined by the SAT solver.'\r\n            );\r\n        case 'RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== Resolution\\nChildren:\\n(P1:C1, P2:C2)\\nArguments: (pol, L)\\n---------------------\\nConclusion: C\\nwhere\\n- C1 and C2 are nodes viewed as clauses, i.e., either an OR node with each children viewed as a literal or a node viewed as a literal. Note that an OR node could also be a literal.\\n- pol is either true or false, representing the polarity of the pivot on the first clause\\n- L is the pivot of the resolution, which occurs as is (resp. under a NOT) in C1 and negatively (as is) in C2 if pol = true (pol = false).\\nC is a clause resulting from collecting all the literals in C1, minus the first occurrence of the pivot or its negation, and C2, minus the first occurrence of the pivot or its negation, according to the policy above. If the resulting clause has a single literal, that literal itself is the result; if it has no literals, then the result is false; otherwise it's an OR node of the resulting literals.\\n\\nNote that it may be the case that the pivot does not occur in the clauses. In this case the rule is not unsound, but it does not correspond to resolution but rather to a weakening of the clause that did not have a literal eliminated.\"\r\n            );\r\n        case 'CHAIN_RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== N-ary Resolution\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined above\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined above\\n- let C_1' = C_1 (from P1),\\n- for each i > 1, let C_i' = C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C = C_n'\"\r\n            );\r\n        case 'FACTORING':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Factoring\\nChildren: (P:C1)\\nArguments: ()\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 is the same and the number of literals in C2 is smaller than that of C1'\r\n            );\r\n        case 'REORDERING':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Reordering\\nChildren: (P:C1)\\nArguments: (C2)\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 are the same and the number of literals in C2 is the same of that of C1'\r\n            );\r\n        case 'MACRO_RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\r\n            );\r\n        case 'MACRO_RESOLUTION_TRUST':\r\n            return (\r\n                rule +\r\n                \"\\n\\nAs MACRO_RESOLUTION but not checked\\n\\nMACRO_RESOLUTION definition:\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\r\n            );\r\n        default:\r\n            return rule;\r\n    }\r\n}\r\n\r\nfunction castProofNodeToTreeNode(node: NodeInterface): TreeNode {\r\n    const label = node.hiddenNodes?.length\r\n        ? // Pi node\r\n          `${node.id} : π ➜ ${node.conclusion}`\r\n        : node.dependencies.length\r\n        ? // Node with dependencies\r\n          `${node.id} : β ➜ ${node.conclusion}`\r\n        : //Normal node\r\n          `${node.id} : ${node.conclusion}`;\r\n\r\n    // Create the node tree\r\n    return {\r\n        id: node.id,\r\n        icon: 'graph',\r\n        label: label,\r\n        secondaryLabel: `${node.rule}`,\r\n        rule: node.rule,\r\n        args: node.args,\r\n        conclusion: node.conclusion,\r\n        parentId: node.parents[0],\r\n        descendants: node.descendants - 1,\r\n        nHided: node.hiddenNodes ? node.hiddenNodes.length : 0,\r\n        hiddenNodes: node.hiddenNodes ? node.hiddenNodes.map((n) => n.id) : [],\r\n        childNodes: [],\r\n        dependencies: node.dependencies,\r\n        parentsId: node.parents,\r\n        hasCaret: Boolean(node.descendants - 1),\r\n    };\r\n}\r\n\r\nfunction createTree(proof: NodeInterface[], id: number): TreeNode[] {\r\n    const rootNode = proof.find((o) => o.id === id);\r\n    const tree: TreeNode[] = [],\r\n        roots: TreeNode[] = [];\r\n\r\n    // Make sure found the root node\r\n    if (rootNode) {\r\n        const stack: number[] = [rootNode.id];\r\n        const childrenStack = [-1];\r\n        const insertedStack: number[] = [];\r\n\r\n        let currentNode: any;\r\n        tree.push(castProofNodeToTreeNode(rootNode));\r\n        insertedStack.push(rootNode.id);\r\n\r\n        //While stack isn't empty\r\n        while (stack.length) {\r\n            const lastNode = stack[stack.length - 1];\r\n            let lastChild = childrenStack[childrenStack.length - 1];\r\n            currentNode = proof.find((o) => o.id === lastNode);\r\n\r\n            // If still has children\r\n            if (lastChild < currentNode.children.length - 1) {\r\n                lastChild++;\r\n                stack.push(currentNode.children[lastChild]);\r\n                childrenStack.push(-1);\r\n                // Add the node to the tree\r\n                const nextNode: any = proof.find((o) => o.id === currentNode.children[lastChild]);\r\n\r\n                // Avoid duplicate nodes\r\n                if (insertedStack.indexOf(nextNode.id) === -1) {\r\n                    tree.push(castProofNodeToTreeNode(nextNode));\r\n                    insertedStack.push(nextNode.id);\r\n                }\r\n            }\r\n            // Hasn't children\r\n            else {\r\n                stack.pop();\r\n                childrenStack.pop();\r\n                childrenStack[childrenStack.length - 1]++;\r\n            }\r\n        }\r\n\r\n        // Make the id's list\r\n        const map: any = {};\r\n        let node: TreeNode, i: number;\r\n\r\n        // Map the { [node id]: list array id }\r\n        for (i = 0; i < tree.length; i++) {\r\n            map[tree[i].id] = i;\r\n        }\r\n\r\n        for (i = 0; i < tree.length; i += 1) {\r\n            node = tree[i];\r\n            // For all the parents\r\n            node.parentsId.forEach((parentId) => {\r\n                // If this parent was mapped or it's the root node\r\n                if (!isNaN(map[parentId]) || !i) {\r\n                    // If the parent is valid and exist in the list\r\n                    if (!isNaN(parentId) && tree[map[parentId]]) {\r\n                        tree[map[parentId]].childNodes.push(node);\r\n                    }\r\n                    // If root node was already inserted\r\n                    else if (!roots.length) {\r\n                        roots.push(node);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    return roots;\r\n}\r\n\r\nconst VisualizerStage: React.FC = () => {\r\n    // Proof data\r\n    const letMap = useAppSelector(selectLetMap);\r\n    const proof = useAppSelector(selectOriginalProof);\r\n    const dot = useAppSelector(selectDot);\r\n    const fileID = useAppSelector(selectFileCount);\r\n    const style = useAppSelector(selectStyle);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    // Data structures\r\n    const [proofTree, setProofTree] = useState<TreeNodeInfo[]>([]);\r\n    const [nodeInfo, setNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n    const [originalNodeInfo, setOriginalNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n    // Drawer\r\n    const [[ruleHelperIsOpen, argsHelperIsOpen, concHelperIsOpen], dispatchHelper] = useReducer(\r\n        (state: boolean[], action: { type: drawerHelpersKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            // Act over all the positions\r\n            if (type === drawerHelpersKind.ALL) {\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = payload;\r\n                }\r\n            }\r\n            // If wanna set a position\r\n            else if (payload) {\r\n                // Reset everything and set the wanted\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = i === type ? payload : false;\r\n                }\r\n            }\r\n            // If wanna only reset a position\r\n            else state[type] = payload;\r\n\r\n            return [...state];\r\n        },\r\n        // Rule, args, conclusion\r\n        [false, false, false],\r\n    );\r\n    const [[expandAll, revertAll], dispatchLetExpansion] = useReducer(\r\n        (state: boolean[], action: { type: renderLetKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            for (let i = 0; i < state.length; i++) {\r\n                state[i] = i === type ? payload : false;\r\n            }\r\n\r\n            return [...state];\r\n        },\r\n        // Expand, revert\r\n        [false, false],\r\n    );\r\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n    const [tree, setTree] = useState<TreeNodeInfo[]>([]);\r\n\r\n    // Make sure that a new tree is created only when a new dot is used\r\n    useEffect(() => setProofTree(createTree(proof, 0)), [dot]);\r\n\r\n    const openDrawer = (nodeInfo: NodeInfo, tree?: TreeNodeInfo[]) => {\r\n        setNodeInfo(nodeInfo);\r\n        setTree(tree ? tree : []);\r\n        setOriginalNodeInfo(nodeInfo);\r\n        setDrawerIsOpen(true);\r\n    };\r\n\r\n    const nodeInfoTable = (): JSX.Element => {\r\n        return (\r\n            <table\r\n                id=\"table-node-info\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Property</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <strong>RULE </strong>\r\n                            <Icon\r\n                                id=\"icon\"\r\n                                icon=\"help\"\r\n                                onClick={() => {\r\n                                    dispatchHelper({ type: drawerHelpersKind.RULE, payload: !ruleHelperIsOpen });\r\n                                }}\r\n                            ></Icon>\r\n                        </td>\r\n                        <td>\r\n                            {nodeInfo.rule}\r\n                            <Collapse isOpen={ruleHelperIsOpen}>\r\n                                <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                    {ruleHelper(nodeInfo.rule)}\r\n                                </Pre>\r\n                            </Collapse>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.args && (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>ARGS</strong>{' '}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.ARGS,\r\n                                                payload: !argsHelperIsOpen,\r\n                                            });\r\n                                        }}\r\n                                    ></Icon>\r\n                                ) : null}\r\n                            </td>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                {nodeInfo.args}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Collapse isOpen={argsHelperIsOpen}>\r\n                                        <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                            {nodeInfo.args}\r\n                                        </Pre>\r\n                                    </Collapse>\r\n                                ) : null}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n\r\n                    <tr>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            <strong>CONCLUSION</strong>{' '}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <>\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.CONC,\r\n                                                payload: !concHelperIsOpen,\r\n                                            });\r\n                                            dispatchLetExpansion({\r\n                                                type: renderLetKind.EXPAND,\r\n                                                payload: true,\r\n                                            });\r\n                                        }}\r\n                                    ></Icon>\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"undo\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.CONC,\r\n                                                payload: false,\r\n                                            });\r\n                                            dispatchLetExpansion({\r\n                                                type: renderLetKind.REVERT,\r\n                                                payload: true,\r\n                                            });\r\n                                        }}\r\n                                    ></Icon>\r\n                                </>\r\n                            ) : null}\r\n                        </td>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <LetRender\r\n                                    id={0}\r\n                                    toRender={nodeInfo.conclusion}\r\n                                    letMap={letMap}\r\n                                    shouldExpand={expandAll}\r\n                                    shouldRevert={revertAll}\r\n                                    dispatchExpansion={dispatchLetExpansion}\r\n                                />\r\n                            ) : null}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.nDescendants ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#DESCENDANTS</strong>\r\n                            </td>\r\n                            <td>{nodeInfo.nDescendants}</td>\r\n                        </tr>\r\n                    ) : null}\r\n\r\n                    {nodeInfo.nHided ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#HIDDEN</strong>\r\n                            </td>\r\n                            <td>{`[${nodeInfo.hiddenNodes.map((node) => ' ' + node)} ]`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                    {nodeInfo.dependencies.length ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>DEPENDENCIES</strong>\r\n                            </td>\r\n                            <td>{`${nodeInfo.dependencies.map(\r\n                                (dependency) => ` ${dependency.piId}: [${dependency.depsId.map((dep) => ' ' + dep)} ] `,\r\n                            )}`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div onContextMenu={(e) => e.preventDefault()}>\r\n            {proof.length > 1 ? (\r\n                style === 'graph' ? (\r\n                    <Canvas key={fileID} openDrawer={openDrawer} createTree={createTree}></Canvas>\r\n                ) : (\r\n                    <VisualizerDirectoryStyle\r\n                        proofTree={proofTree}\r\n                        ruleHelper={ruleHelper}\r\n                        indent={() => ''}\r\n                        translate={() => ''}\r\n                    />\r\n                )\r\n            ) : null}\r\n            <Drawer\r\n                className={darkTheme ? 'bp3-dark' : ''}\r\n                autoFocus={true}\r\n                canEscapeKeyClose={true}\r\n                canOutsideClickClose={true}\r\n                enforceFocus={true}\r\n                hasBackdrop={false}\r\n                isOpen={drawerIsOpen}\r\n                position={Position.BOTTOM}\r\n                usePortal={true}\r\n                onClose={(e) => {\r\n                    e.preventDefault();\r\n                    setDrawerIsOpen(false);\r\n                    dispatchHelper({ type: drawerHelpersKind.ALL, payload: false });\r\n                }}\r\n                icon=\"info-sign\"\r\n                title=\"Node info\"\r\n            >\r\n                <div className={Classes.DRAWER_BODY}>\r\n                    <VisualizerTree\r\n                        darkTheme={darkTheme}\r\n                        content={tree}\r\n                        setNodeInfo={setNodeInfo}\r\n                        originalNodeInfo={originalNodeInfo}\r\n                    ></VisualizerTree>\r\n                    <div className={Classes.DIALOG_BODY}>{nodeInfoTable()}</div>\r\n                </div>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerStage;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Classes } from '@blueprintjs/core';\r\n\r\nimport Let from './let';\r\nimport '../../scss/Let.scss';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { selectLetMap } from '../../store/features/proof/proofSlice';\r\n\r\nconst font =\r\n    '14px / 18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", Icons16, sans-serif';\r\n\r\nconst VisualizerLetDrawer: React.FC = () => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const letMap = useAppSelector(selectLetMap);\r\n    const widthRef = useRef(0);\r\n\r\n    const [letMapS, setLetMapS] = useState({ ...letMap });\r\n    const [resizeMode, setResizeMode] = useState(0);\r\n    const letsRef = useRef<{ [key: string]: Let }>({});\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Handler to call on window resize and set the value column width\r\n        function handleResize() {\r\n            const width = widthRef.current;\r\n\r\n            // -22 from the fixed padding size\r\n            const newWidth = document.getElementsByClassName('letMap-value-column')[0].clientWidth - 24;\r\n            width === newWidth ? setResizeMode(1) : width > newWidth ? setResizeMode(0) : setResizeMode(2);\r\n\r\n            widthRef.current = newWidth;\r\n        }\r\n\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    const expandLet = (parent: string, key: string, letIdx: number) => {\r\n        const lets = letsRef.current;\r\n\r\n        const externalRef = lets[key];\r\n        lets[parent].isExpanded = true;\r\n        letMapS[parent] = lets[parent].expandPartialy(externalRef, letIdx);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const expandAll = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        lets[key].isExpanded = true;\r\n        letMapS[key] = lets[key].expandValue(true);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const revertLet = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        // Only when is expanded\r\n        if (lets[key].isExpanded) {\r\n            lets[key].isExpanded = false;\r\n            letMapS[key] = lets[key].shrinkValue();\r\n            setLetMapS({ ...letMapS });\r\n        }\r\n    };\r\n\r\n    const renderLet = (key: string): JSX.Element => {\r\n        const lets = letsRef.current;\r\n        const width = widthRef.current;\r\n\r\n        // Waits for the width to be updated and the DOM element to be updated\r\n        if (width) {\r\n            let currentLet = letMapS[key];\r\n\r\n            let indices: { [key: number]: string } = {};\r\n            // Finds all occurences of let in the currentLet\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            // If it's the first render (make sure that the lets obj is not calculated every time)\r\n            if (Object.keys(lets).length !== Object.keys(letMapS).length) {\r\n                lets[key] = new Let(key, currentLet, lets, indices);\r\n            }\r\n\r\n            // If doesn't fits, then indent\r\n            if (!lets[key].fitsTheWindow(width, font)) {\r\n                currentLet = lets[key].indent(width, true, font);\r\n                letMapS[key] = currentLet;\r\n\r\n                indices = {};\r\n                // Finds all occurences of let in the currentLet after indentation\r\n                [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                    if (match.index) indices[match.index] = match[0];\r\n                });\r\n            }\r\n            // If fits\r\n            else {\r\n                // Only in the momment the page size is growing and the line is broken\r\n                if (resizeMode >= 0 && lets[key].lines.length > 1) {\r\n                    // Reset the line\r\n                    lets[key].lines = [\r\n                        { value: lets[key].isExpanded ? lets[key].groupUp() : lets[key].value, indentLevel: 0 },\r\n                    ];\r\n                    lets[key].biggerID = 0;\r\n\r\n                    // Indent it again\r\n                    currentLet = lets[key].indent(width, false, font);\r\n                    letMapS[key] = currentLet;\r\n\r\n                    indices = {};\r\n                    // Finds all occurences of let in the currentLet after indentation\r\n                    [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                        if (match.index) indices[match.index] = match[0];\r\n                    });\r\n                }\r\n            }\r\n\r\n            const arr: (JSX.Element | string)[] = [];\r\n            let start = 0;\r\n            // Slice the currentLet into an array with strings and JSX elements\r\n            Object.keys(indices).forEach((index, i, self) => {\r\n                const idx = Number(index);\r\n                const thisLet = indices[idx];\r\n\r\n                // Add the elements to the arr\r\n                arr.push(currentLet.substring(start, idx));\r\n                arr.push(\r\n                    <a\r\n                        className={darkTheme ? 'let-literal-or' : 'let-literal'}\r\n                        onClick={() => {\r\n                            expandLet(key, thisLet, idx);\r\n                        }}\r\n                    >\r\n                        {thisLet}\r\n                    </a>,\r\n                );\r\n                // Defines a new start\r\n                start = idx + thisLet.length;\r\n\r\n                // If it's the last let\r\n                if (i === self.length - 1) {\r\n                    arr.push(currentLet.substring(start, currentLet.length));\r\n                }\r\n            });\r\n\r\n            // If there is a let in this current let\r\n            if (Object.keys(indices).length) {\r\n                return <span className=\"let-instance\">{arr}</span>;\r\n            } else {\r\n                return <span className=\"let-instance\">{currentLet}</span>;\r\n            }\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    return (\r\n        <div className={Classes.DRAWER_BODY}>\r\n            <div className={Classes.DIALOG_BODY}>\r\n                <table\r\n                    id=\"table-node-info\"\r\n                    className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    <thead>\r\n                        <tr>\r\n                            <th style={{ width: '100px' }}>Property</th>\r\n                            <th className=\"letMap-value-column\">Value</th>\r\n                            <th style={{ width: '250px' }}>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {Object.keys(letMapS).map((key) => {\r\n                            return (\r\n                                <tr key={key}>\r\n                                    <td>\r\n                                        <strong>{key}</strong>\r\n                                    </td>\r\n                                    <td style={{ width: '100%', whiteSpace: 'pre-wrap' }}>{renderLet(key)}</td>\r\n                                    <td style={{ width: '150px', height: '100%' }}>\r\n                                        <Button\r\n                                            onClick={() => expandAll(key)}\r\n                                            className=\"bp3-minimal\"\r\n                                            icon=\"translate\"\r\n                                            text=\"Expand\"\r\n                                        />\r\n                                        <Button\r\n                                            onClick={() => revertLet(key)}\r\n                                            className=\"bp3-minimal\"\r\n                                            icon=\"undo\"\r\n                                            text=\"Revert\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerLetDrawer;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Classes } from '@blueprintjs/core';\r\n\r\nconst font =\r\n    '14px / 18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", Icons16, sans-serif';\r\n\r\nconst VisualizerTheoryLemma: React.FC = () => {\r\n    const TheoryLemmas = [1, 2];\r\n    return (\r\n        <div className={Classes.DRAWER_BODY}>\r\n            <div className={Classes.DIALOG_BODY}>\r\n                <table\r\n                    id=\"table-node-info\"\r\n                    className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    <thead>\r\n                        <tr>\r\n                            <th style={{ width: '100px' }}>Property</th>\r\n                            <th className=\"letMap-value-column\">Value</th>\r\n                            <th style={{ width: '250px' }}>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {TheoryLemmas.map((tl) => {\r\n                            return (\r\n                                <tr key={tl}>\r\n                                    <td>\r\n                                        <strong>{tl}</strong>\r\n                                    </td>\r\n                                    <td style={{ width: '100%', whiteSpace: 'pre-wrap' }}>{null}</td>\r\n                                    <td style={{ width: '150px', height: '100%' }}>\r\n                                        <Button\r\n                                            onClick={() => null}\r\n                                            className=\"bp3-minimal\"\r\n                                            icon=\"translate\"\r\n                                            text=\"Expand\"\r\n                                        />\r\n                                        <Button\r\n                                            onClick={() => null}\r\n                                            className=\"bp3-minimal\"\r\n                                            icon=\"undo\"\r\n                                            text=\"Revert\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerTheoryLemma;\r\n","import React, { useState } from 'react';\r\n\r\nimport '../../scss/VisualizersDrawer.scss';\r\nimport { Drawer, Position, Classes, Tabs, Tab, TabId, Button } from '@blueprintjs/core';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { DrawerProps } from '../../interfaces/interfaces';\r\n\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\nimport { applyView, selectNodeClusters, selectNodes } from '../../store/features/proof/proofSlice';\r\nimport { reRender } from '../../store/features/externalCmd/externalCmd';\r\nimport VisualizerLetDrawer from '../VisualizerLetDrawer/VisualizerLetDrawer';\r\nimport VisualizerTheoryLemma from '../VisualizerTheoryLemma/VisualizerTheoryLemma';\r\n\r\nconst VisualizersDrawer: React.FC<DrawerProps> = ({ drawerIsOpen, setDrawerIsOpen }: DrawerProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const nodeClusters = useAppSelector(selectNodeClusters);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [tabID, setTabID] = useState('lm');\r\n\r\n    const handleTabChange = (newTabId: TabId, _: any, e: any): void => {\r\n        setTabID(typeof newTabId === 'string' ? newTabId : String(newTabId));\r\n    };\r\n\r\n    const handleClusterClick = (cluster: string): void => {\r\n        //\r\n        switch (cluster) {\r\n            case 'ALL':\r\n                dispatch(selectNodes(nodeClusters.reduce((acc: number[], c) => acc.concat(c.hiddenNodes), [])));\r\n                break;\r\n            case 'SAT':\r\n                dispatch(selectNodes(nodeClusters[0].hiddenNodes));\r\n                break;\r\n            case 'CNF':\r\n                dispatch(selectNodes(nodeClusters[1].hiddenNodes));\r\n                break;\r\n            case 'TL':\r\n                dispatch(selectNodes(nodeClusters[2].hiddenNodes));\r\n                break;\r\n            case 'PP':\r\n                dispatch(selectNodes(nodeClusters[3].hiddenNodes));\r\n                break;\r\n            case 'IN':\r\n                dispatch(selectNodes(nodeClusters[4].hiddenNodes));\r\n                break;\r\n        }\r\n    };\r\n\r\n    const menus = {\r\n        view: (\r\n            <div className={'view-infos ' + Classes.DIALOG_BODY}>\r\n                <div className=\"bts\">\r\n                    <Button\r\n                        text=\"Full\"\r\n                        onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                            e.preventDefault();\r\n                            dispatch(applyView('full'));\r\n                            dispatch(reRender());\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        text=\"Clustered\"\r\n                        onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                            e.preventDefault();\r\n                            dispatch(applyView('clustered'));\r\n                            dispatch(reRender());\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        text=\"Full and Colored\"\r\n                        onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                            e.preventDefault();\r\n                            dispatch(applyView('colored-full'));\r\n                            dispatch(reRender());\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"views-color-map\">\r\n                    <span onClick={() => handleClusterClick('ALL')}>⬜ First Scope</span>\r\n                    <span onClick={() => handleClusterClick('SAT')}>🟪 SAT</span>\r\n                    <span onClick={() => handleClusterClick('CNF')}>🟨 CNF</span>\r\n                    <span onClick={() => handleClusterClick('TL')}>🟩 Theory Lemma</span>\r\n                    <span onClick={() => handleClusterClick('PP')}>🟫 Pre Processing</span>\r\n                    <span onClick={() => handleClusterClick('IN')}>🟦 Input</span>\r\n                </div>\r\n            </div>\r\n        ),\r\n        letMap: <VisualizerLetDrawer />,\r\n        theoryLemma: <VisualizerTheoryLemma />,\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            className={darkTheme ? 'bp3-dark' : ''}\r\n            style={{ maxHeight: '65%', width: '35%' }}\r\n            autoFocus={true}\r\n            canEscapeKeyClose={true}\r\n            canOutsideClickClose={false}\r\n            enforceFocus={false}\r\n            hasBackdrop={false}\r\n            isOpen={drawerIsOpen}\r\n            position={Position.RIGHT}\r\n            usePortal={false}\r\n            onClose={(e) => {\r\n                e.preventDefault();\r\n                setDrawerIsOpen(false);\r\n            }}\r\n            icon=\"applications\"\r\n            title=\"Visualizers\"\r\n        >\r\n            <div className={Classes.DRAWER_BODY}>\r\n                <Tabs id=\"services-tabs\" onChange={handleTabChange} selectedTabId={tabID}>\r\n                    <Tab id=\"vw\" title=\"View\" panel={menus['view']} className=\"services-tab\" />\r\n                    <Tab id=\"lm\" title=\"Let Map\" panel={menus['letMap']} className=\"services-tab\" />\r\n                    <Tab id=\"tl\" title=\"Theory Lemma\" panel={menus['theoryLemma']} className=\"services-tab\" />\r\n                </Tabs>\r\n            </div>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default VisualizersDrawer;\r\n","import React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Intent, Position, Toaster } from '@blueprintjs/core';\r\n\r\nimport VisualizerNavbar from '../VisualizerNavbar/VisualizerNavbar';\r\nimport VisualizerDialog from '../VisualizerDialog/VisualizerDialog';\r\nimport VisualizerStage from '../VisualizerStage/VisualizerStage';\r\nimport VisualizersDrawer from '../VisualizersDrawer/VisualizersDrawer';\r\n\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\n\r\nconst App: React.FC = () => {\r\n    const [dialogIsOpen, setDialogIsOpen] = useState(true);\r\n    const [dialogContent, setDialogContent] = useState('upload-proof');\r\n    const [drawerIsOpen, setDrawerOpenState] = useReducer((isOpen) => !isOpen, false);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n\r\n    // Toaster\r\n    let toaster: Toaster;\r\n    const refHandlers = {\r\n        toaster: (ref: Toaster) => (toaster = ref),\r\n    };\r\n\r\n    const addErrorToast = (err: string) => {\r\n        toaster.show({ icon: 'warning-sign', intent: Intent.DANGER, message: err });\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.getElementsByClassName('bp3-overlay')[0]\r\n            ? (document.getElementsByClassName('bp3-overlay')[0].className = '')\r\n            : null;\r\n    }, [drawerIsOpen]);\r\n\r\n    return (\r\n        <div className={darkTheme ? ' bp3-dark' : ''}>\r\n            <Toaster position={Position.TOP} ref={refHandlers.toaster} />\r\n            <VisualizerNavbar\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                setDialogContent={setDialogContent}\r\n                setDrawerIsOpen={setDrawerOpenState}\r\n                addErrorToast={addErrorToast}\r\n            ></VisualizerNavbar>\r\n            <VisualizerDialog\r\n                dialogIsOpen={dialogIsOpen}\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                dialogContent={dialogContent}\r\n                setDialogContent={setDialogContent}\r\n                addErrorToast={addErrorToast}\r\n            ></VisualizerDialog>\r\n            <VisualizerStage></VisualizerStage>\r\n            {drawerIsOpen ? (\r\n                <VisualizersDrawer drawerIsOpen={drawerIsOpen} setDrawerIsOpen={setDrawerOpenState}></VisualizersDrawer>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport externalCmdReducer from './features/externalCmd/externalCmd';\r\nimport fileReducer from './features/file/fileSlice';\r\nimport proofReducer from './features/proof/proofSlice';\r\nimport themeReducer from './features/theme/themeSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        file: fileReducer,\r\n        proof: proofReducer,\r\n        theme: themeReducer,\r\n        externalCmd: externalCmdReducer,\r\n    },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport { store } from './store/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './scss/index.scss';\r\n\r\nimport reportWebVitals from './ReactUtils/reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}