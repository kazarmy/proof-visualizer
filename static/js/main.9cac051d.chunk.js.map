{"version":3,"sources":["interfaces/enum.ts","store/hooks.ts","store/features/theme/themeSlice.ts","store/features/file/fileSlice.ts","store/features/proof/auxi.ts","store/features/theme/auxi.ts","store/features/proof/proofSlice.ts","store/features/externalCmd/externalCmd.ts","components/VisualizerDialog/VisualizerDialog.tsx","components/VisualizerStage/Canvas/VisualizerNode.tsx","components/VisualizerStage/Canvas/VisualizerLine.tsx","components/VisualizerStage/Canvas/VisualizerMenu.tsx","components/VisualizerStage/Canvas/VisualizerCanvas.tsx","components/VisualizerTree/VisualizerTree.tsx","components/VisualizerLetDrawer/let.ts","components/VisualizerLetDrawer/LetRender.tsx","components/VisualizerStage/VisualizerDirectoryStyle/VisualizerDirectoryStyle.tsx","components/VisualizerStage/VisualizerStage.tsx","components/VisualizerLetDrawer/VisualizerLetDrawer.tsx","components/VisualizerTheoryLemma/VisualizerTheoryLemma.tsx","components/VisualizersDrawer/VisualizersDrawer.tsx","components/VisualizerTutorial/TutorialPopover.tsx","components/VisualizerTutorial/VisualizerTutorial.tsx","components/VisualizerSmtDrawer/VisualizerSmtDrawer.tsx","components/App/App.tsx","store/store.ts","ReactUtils/reportWebVitals.ts","index.tsx"],"names":["drawerHelpersKind","renderLetKind","ClusterKind","useAppDispatch","useDispatch","useAppSelector","useSelector","themeSlice","createSlice","name","initialState","value","reducers","toggle","state","selectTheme","actions","theme","fileSlice","filesCount","set","action","payload","selectFileCount","file","removeEscapedCharacters","s","newS","i","length","descendants","proof","nodeId","children","concat","reduce","acc","childId","sliceNodesCluster","clusterMap","slicedClusters","currentNode","id","parentsClusters","parents","p","clusterType","keys","Object","target","Number","push","clusterID","forEach","c","child","extractTheoryLemmas","clusters","haveCluster","conclusion","filter","type","TL","map","hiddenNodes","n","rule","colorConverter","colorName","color","proofSlice","view","style","letMap","theoryLemmaMap","visualInfo","clustersInfos","smt","process","proofJSON","dot","isJSON","indexOf","JSON","parse","nodes","args","NaN","dependencies","NONE","comment","slice","lastIndexOf","replace","split","line","search","label","idx","thisType","numbers","substring","str","num","SAT","CNF","PP","IN","parseInt","trim","attributes","commentJSON","subProofQty","x","parent","isNaN","processDot","clustersColors","clustersMap","Array","fill","cluster","node","y","selected","size","hideNodes","toHideNodes","every","hiddenNodesArray","clusteredNodes","hiddenNode","hiddenID","some","_p","pastCluster","stringify","clusterParents","parentCluster","splice","findNodesClusters","piNodeId","foldAllDescendants","index","self","unhideNodes","pi","hiddens","setVisualInfo","selectNodes","len","unselectNodes","changeStyle","applyView","visualInfoSize","proofSize","applyColor","setSmt","selectProof","piNodeChildren","haveHiddenParent","piNodeParents","piNodeDependencies","depMap","dep","String","piId","depsId","groupPiNodeDependencies","piNode","proofNode","parentId","highHierarchyNodes","ac","childID","selectOriginalProof","selectStyle","selectLetMap","selectTheoryLemmas","selectVisualInfo","selectNodeClusters","selectSmt","externalCmd","findData","nodeToFind","findOption","renderData","count","fileChanged","findNode","option","reRender","addRenderCount","blockRender","allowRenderNewFile","blockRenderNewFile","selectFindData","selectRenderData","readUploadedFileAsText","inputFile","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","VisualizerDialog","dialogIsOpen","setDialogIsOpen","addErrorToast","darkTheme","dispatch","useState","inputIsFocused","setInputIsFocused","fileName","changeFileName","changeFile","useReducer","newFlag","focusFlag","flagCount","setFocusFlag","useEffect","document","getElementsByClassName","Classes","DIALOG_BODY","childNodes","focus","DIALOG_FOOTER_ACTIONS","closeDialog","dialogBody","outline","borderRadius","text","hasSelection","onInputChange","e","files","File","fileContents","message","onFocus","stopPropagation","onBlur","succesButton","onClick","ext","pop","intent","Intent","SUCCESS","disabled","className","isOpen","onClose","usePortal","icon","title","DIALOG_FOOTER","textColorFromBg","bgColor","sixDigitColor","charAt","join","Node","props","nHided","nDescendants","setNodeOnFocus","toggleNodeSelection","updateNodePosition","openDrawer","onDragEnd","createTree","tag","stroke","strokeWidth","this","align","fontSize","height","padding","width","depText","depSize","infos","idSize","setIdSize","descendantSize","setDescendantSize","font","calc","context","createElement","getContext","measureText","getTextWidth","toString","draggable","onDragMove","attrs","evt","button","shiftKey","menuNode","getElementById","top","clientY","left","clientX","display","window","addEventListener","points","depLineSize","radius","Line","key","Menu","unfold","foldSelectedNodes","changeNodeColor","currentColor","options","setColor","foldSelected","vertical","placeholder","onChange","match","handleWheel","preventDefault","stage","getStage","oldScale","scaleX","pointerPosition","getPointerPosition","mousePointTo","newScale","deltaY","stageScale","stageX","stageY","Canvas","nodeOnFocus","setState","nodesSelected","obj","find","hiddenIds","showingNodes","LineProps","from","to","saveNodePosition","copyNodePosition","showingEdges","edgeKey","edge","componentDidUpdate","bind","canvasSize","newShowingNodes","newNodeProps","innerWidth","innerHeight","updateEdgesAndFuncs","prevProps","found","o","Boolean","includes","onWheel","scaleY","onContextMenu","current_state","proofChanged","visualInfoChanged","nodeFindData","nodeWidth","nodeHeight","g","dagre","graphlib","Graph","setGraph","rankdir","ranker","setDefaultEdgeLabel","setNode","setEdge","layout","xOffset","yOffset","v","console","log","Component","newVisualInfo","visualInfos","mapDispatchToProps","connect","ownProps","VisualizerTree","positionMap","content","setNodeInfo","forceUpdate","setNodes","setSelected","forEachNode","callback","backgroundColor","contents","onNodeClick","nodeData","_nodePath","toBeShow","originallySelected","isSelected","onNodeCollapse","isExpanded","onNodeExpand","hasCaret","castProofNodeToTreeNode","ELEVATION_0","Let","letText","letsList","indices","lines","biggerID","externalLets","expandValue","shouldUpdate","keyList","let","letName","k","indentLevel","expandPartialy","externalRef","letIdx","indentedText","printLines","lastLine","newIdx","shrinkValue","fitsTheWindow","windowSize","repeat","indent","mode","someDoesntFit","newLines","thisLevel","thisLine","lastSpace","lastUsedSpace","lastOpenParenthesis","biggestSize","newBiggerID","thisSize","groupUp","original","numKey","LetRender","toRender","shouldExpand","shouldRevert","dispatchExpansion","widthRef","useRef","resizeMode","setResizeMode","newMap","letMapS","setLetMapS","letsRef","initializeLet","lets","currentLet","matchAll","indice","handleResize","current","newWidth","clientWidth","removeEventListener","expandAll","EXPAND","revertLet","REVERT","maxHeight","overflow","margin","whiteSpace","undefined","arr","start","thisLet","expandLet","overflowWrap","renderLet","VisualizerDirectoryStyle","proofTree","ruleHelper","translate","nodeInfo","ALL","ruleHelperIsOpen","argsHelperIsOpen","concHelperIsOpen","dispatchHelper","revertAll","dispatchLetExpansion","setMap","renderID","increaseRenderID","_map","offsetHeight","float","clear","borderRight","RULE","ARGS","CONC","dependency","secondaryLabel","parentsId","rootNode","tree","VisualizerStage","fileID","setProofTree","drawerIsOpen","setDrawerIsOpen","setTree","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","position","Position","BOTTOM","DRAWER_BODY","VisualizerLetDrawer","shouldResize","setLetMap","VisualizerTheoryLemma","theoryLemmas","setTheoryLemmas","tl","currentTL","minWidth","VisualizersDrawer","nodeClusters","tabID","setTabID","resizeFlag","setResizeFlag","bt","tabIndex","handleClusterClick","menus","theoryLemma","RIGHT","newTabId","_","newResizeFlag","selectedTabId","panel","TutorialPopover","setIsOpen","nextTutorial","W","page","setPage","changePage","setTimeout","handleEsc","tW","borderBottomColor","list","last","positions","j","link","href","rel","insertAnchors","divsIds","tutorials","VisualizerTutorial","inTutorial","setInTutorial","setStage","setPosition","sizeRef","w","h","toBeWrapped","getClientRects","newY","newX","newTW","pointerEvents","VisualizerSmtDrawer","proofSmt","open","optionsIsOpen","setOptionsIsOpen","textRef","argsType","setArgsType","shouldClusterize","printAsDag","setDefaultOptions","customArgs","setCustomArgs","divColor","helpDiv","maxWidth","boxShadow","textAlign","LEFT","language","onMount","transition","visibility","checked","borderBottom","borderTop","marginBottom","rightElement","placement","modifiers","arrow","enabled","hoverCloseDelay","hoverOpenDelay","App","toaster","setDrawerOpenState","smtDrawerIsOpen","setSmtDrawerIsOpen","refHandlers","ref","TOP","err","show","DANGER","store","configureStore","reducer","fileReducer","proofReducer","themeReducer","externalCmdReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9cac051d.chunk.js","sourcesContent":["export enum drawerHelpersKind {\r\n    RULE,\r\n    ARGS,\r\n    CONC,\r\n    ALL,\r\n}\r\n\r\nexport enum renderLetKind {\r\n    EXPAND,\r\n    REVERT,\r\n}\r\n\r\nexport enum ClusterKind {\r\n    NONE,\r\n    SAT,\r\n    CNF,\r\n    TL,\r\n    PP,\r\n    IN,\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ThemeState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ThemeState = {\r\n    value: true,\r\n};\r\n\r\nexport const themeSlice = createSlice({\r\n    name: 'theme',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        toggle: (state) => {\r\n            state.value = !state.value;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { toggle } = themeSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice theme. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectTheme = (state: RootState): boolean => state.theme.value;\r\n\r\nexport default themeSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { FileState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: FileState = {\r\n    name: 'ex.smt2',\r\n    value: 'digraph proof {\\n\\trankdir=\"BT\";\\n\\tnode [shape=record];\\n\\t0 [label=\"{SCOPE((not a), a)|(not (and (not a) a))}\", class = \" basic \", comment = \"{\\'subProofQty\\':1}\" ];\\n\\t1 [label=\"{CHAIN_RESOLUTION(true, a)|false}\", class = \" propositional \", comment = \"{\\'subProofQty\\':2}\" ];\\n\\t2 [label=\"{ASSUME(a)|a}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t3 [label=\"{ASSUME((not a))|(not a)}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t1->0;\\n\\t2->1;\\n\\t3->1;\\n}',\r\n    filesCount: 0,\r\n};\r\n\r\nexport const fileSlice = createSlice({\r\n    name: 'file',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        set: (state, action: PayloadAction<{ name: string; value: string }>) => {\r\n            state.name = action.payload.name;\r\n            if (state.value !== action.payload.value) {\r\n                state.value = action.payload.value;\r\n                state.filesCount++;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { set } = fileSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectFileName = (state: RootState): string => state.file.name;\r\n\r\nexport const selectFileExtension = (state: RootState): string => {\r\n    const ext = state.file.name.split('.').pop();\r\n    return ext ? ext : '';\r\n};\r\n\r\nexport const selectDot = (state: RootState): string =>\r\n    state.file.name.split('.').pop() === 'json' ? JSON.parse(state.file.value).dot : state.file.value;\r\n\r\nexport const selectFile = (state: RootState): string => state.file.value;\r\n\r\nexport const selectFileCount = (state: RootState): number => state.file.filesCount;\r\n\r\nexport default fileSlice.reducer;\r\n","import { ClusterKind } from '../../../interfaces/enum';\r\nimport { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\n\r\ninterface ClusterColorMap {\r\n    [type: number]: string;\r\n}\r\n\r\nfunction removeEscapedCharacters(s: string): string {\r\n    let newS = '';\r\n    for (let i = 0; i < s.length; i += 1) {\r\n        if (\r\n            !(\r\n                s[i] === '\\\\' &&\r\n                (s[i + 1] === '\"' ||\r\n                    s[i + 1] === '>' ||\r\n                    s[i + 1] === '<' ||\r\n                    s[i + 1] === '{' ||\r\n                    s[i + 1] === '}' ||\r\n                    s[i + 1] === '|')\r\n            )\r\n        ) {\r\n            newS += s[i];\r\n        }\r\n    }\r\n\r\n    return newS;\r\n}\r\n\r\nexport function processDot(dot: string): [NodeInterface[], ProofState['letMap'], ClusterColorMap] {\r\n    const nodes: NodeInterface[] = [\r\n        {\r\n            id: 0,\r\n            conclusion: '',\r\n            rule: '',\r\n            args: '',\r\n            children: [],\r\n            parents: [NaN],\r\n            descendants: 0,\r\n            dependencies: [],\r\n            clusterType: ClusterKind.NONE,\r\n        },\r\n    ];\r\n    let comment: string | null = dot.slice(dot.indexOf('comment='));\r\n    comment = comment\r\n        ? removeEscapedCharacters(\r\n              removeEscapedCharacters(comment.slice(comment.indexOf('=') + 2, comment.indexOf(';') - 1)),\r\n          )\r\n        : null;\r\n\r\n    const clustersInfos: ClusterColorMap = {};\r\n    const lines = dot\r\n        .slice(dot.indexOf('{') + 1, dot.lastIndexOf('}') - 2)\r\n        .replace(/(\\n|\\t)/gm, '')\r\n        .split(';');\r\n    lines.forEach((line) => {\r\n        if (line.search('subgraph') !== -1) {\r\n            // Get the label of this node subgraph\r\n            let label = '';\r\n            let idx = line.indexOf('label=\"') + 7;\r\n            while (line[idx] !== '\"') {\r\n                label += line[idx];\r\n                idx++;\r\n            }\r\n\r\n            // Get the label of this node subgraph\r\n            let color = '';\r\n            idx = line.indexOf('bgcolor=\"') + 9;\r\n            while (line[idx] !== '\"') {\r\n                color += line[idx];\r\n                idx++;\r\n            }\r\n\r\n            // Get the nodes ID's\r\n            const numbers = line\r\n                .substring(idx + 1, line.length - 1)\r\n                .split(/\\s/)\r\n                .filter((str) => str.length)\r\n                .map((num) => Number(num));\r\n\r\n            let thisType: ClusterKind;\r\n            switch (label) {\r\n                case 'SAT':\r\n                    thisType = ClusterKind.SAT;\r\n                    break;\r\n                case 'CNF':\r\n                    thisType = ClusterKind.CNF;\r\n                    break;\r\n                case 'TL':\r\n                    thisType = ClusterKind.TL;\r\n                    break;\r\n                case 'PP':\r\n                    thisType = ClusterKind.PP;\r\n                    break;\r\n                case 'IN':\r\n                    thisType = ClusterKind.IN;\r\n                    break;\r\n                default:\r\n                    thisType = ClusterKind.NONE;\r\n            }\r\n\r\n            // Assign the type for each node\r\n            numbers.forEach((num) => {\r\n                nodes[num].clusterType = thisType;\r\n            });\r\n            clustersInfos[thisType] = color;\r\n        } else if (line.search('label') !== -1) {\r\n            const id = parseInt(line.slice(0, line.indexOf('[')).trim());\r\n            const attributes = line.slice(line.indexOf('[') + 1, line.lastIndexOf(']')).trim();\r\n\r\n            let label = attributes.slice(attributes.search(/(?<!\\\\)\"/) + 2);\r\n            label = label.slice(0, label.search(/(?<!\\\\)\"/) - 1);\r\n            let [conclusion, rule, args] = ['', '', ''];\r\n            [conclusion, rule] = label.split(/(?<!\\\\)\\|/);\r\n            [rule, args] = rule.indexOf(' :args ') != -1 ? rule.split(' :args ') : [rule, ''];\r\n\r\n            const comment: string = removeEscapedCharacters(line.slice(line.indexOf('comment'), line.lastIndexOf('\"')));\r\n            const commentJSON = JSON.parse(comment.slice(comment.indexOf('\"') + 1).replace(/'/g, '\"'));\r\n\r\n            if (!nodes[id]) {\r\n                nodes[id] = {\r\n                    id: id,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    children: [],\r\n                    parents: [NaN],\r\n                    descendants: 0,\r\n                    dependencies: [],\r\n                    clusterType: ClusterKind.NONE,\r\n                };\r\n            }\r\n            nodes[id].conclusion = removeEscapedCharacters(conclusion);\r\n            nodes[id].rule = removeEscapedCharacters(rule);\r\n            nodes[id].args = removeEscapedCharacters(args);\r\n            nodes[id].descendants = commentJSON.subProofQty;\r\n        } else if (line.search('->') !== -1) {\r\n            const [child, parent] = line.split('->').map((x) => parseInt(x.trim()));\r\n            nodes[parent].children.push(child);\r\n            // If there isn't a child node\r\n            if (!nodes[child]) {\r\n                nodes[child] = {\r\n                    id: child,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    children: [],\r\n                    parents: [],\r\n                    descendants: 0,\r\n                    dependencies: [],\r\n                    clusterType: ClusterKind.NONE,\r\n                };\r\n            }\r\n            // If there is and is an invalid parent\r\n            else if (isNaN(nodes[child].parents[0])) {\r\n                nodes[child].parents = [];\r\n            }\r\n            nodes[child].parents.push(parent);\r\n        }\r\n    });\r\n\r\n    return comment ? [nodes, JSON.parse(comment)['letMap'], clustersInfos] : [nodes, {}, clustersInfos];\r\n}\r\n\r\nexport const piNodeParents = (\r\n    proof: NodeInterface[],\r\n    hiddenNodesArray: number[],\r\n    dependencies: { [parentId: number]: number[] } = {},\r\n): number[] => {\r\n    const parents = hiddenNodesArray\r\n        // Concat all the parents\r\n        .reduce((acc: number[], hiddenNode) => {\r\n            let haveHiddenParent = false;\r\n\r\n            proof[hiddenNode].parents.forEach((parent) => {\r\n                // If this parent is a hidden node\r\n                if (hiddenNodesArray.indexOf(parent) !== -1) {\r\n                    haveHiddenParent = true;\r\n                } else {\r\n                    dependencies[parent]\r\n                        ? dependencies[parent].push(hiddenNode)\r\n                        : (dependencies[parent] = [hiddenNode]);\r\n                }\r\n            });\r\n\r\n            if (haveHiddenParent) return acc;\r\n            return acc.concat(proof[hiddenNode].parents);\r\n        }, [])\r\n        // Filter the duplicated elements\r\n        .filter((parent, i, self) => self.indexOf(parent) === i)\r\n        // Only the parents that aren't in he hidden nodes array remains\r\n        .filter((parent) => hiddenNodesArray.indexOf(parent) === -1);\r\n\r\n    // Removes the pi node parents from the dependencies\r\n    Object.keys(dependencies).forEach((parent) => {\r\n        const n = Number(parent);\r\n        if (parents.indexOf(n) !== -1) delete dependencies[n];\r\n    });\r\n\r\n    return parents;\r\n};\r\n\r\nexport const descendants = (proof: NodeInterface[], nodeId: number): number[] => {\r\n    return proof[nodeId].children.concat(\r\n        proof[nodeId].children.reduce((acc: number[], childId) => acc.concat(descendants(proof, childId)), []),\r\n    );\r\n};\r\n\r\nexport const piNodeChildren = (proof: NodeInterface[], hiddenNodesArray: number[]): number[] => {\r\n    const children = hiddenNodesArray\r\n        // Get all the childrens\r\n        .reduce((acc: number[], hiddenNode) => acc.concat(proof[hiddenNode].children), [])\r\n        // Exclude the childrens that are part of the hidden nodes\r\n        .filter((child) => hiddenNodesArray.indexOf(child) === -1);\r\n    return children;\r\n};\r\n\r\nexport const findNodesClusters = (proof: NodeInterface[], hiddenNodesArray: number[]): number[][] => {\r\n    const hiddenNodes = [...hiddenNodesArray];\r\n    const clusters: number[][] = [];\r\n    let clusteredNodes = 0;\r\n    const parents = hiddenNodes.map((hiddenNode) => proof[hiddenNode].parents);\r\n\r\n    // Cluster the nodes based on similiar parents\r\n    parents.forEach((parent, clusterID) => {\r\n        // If not all of the nodes where clustered and is a non empty cluster\r\n        if (clusteredNodes !== parents.length && parents[clusterID].length) {\r\n            clusters.push([]);\r\n            parents.forEach((p, hiddenID) => {\r\n                // If those nodes have some parent in commom and they weren't verified yet\r\n                if (parents[hiddenID].length && parent.some((_p) => p.indexOf(_p) !== -1)) {\r\n                    clusters[clusters.length - 1].push(hiddenNodes[hiddenID]);\r\n                    // Removes these parents from the array, making shure they will not get verified again (already clustered)\r\n                    parents[hiddenID] = [];\r\n                    // Increases the number o clustered nodes\r\n                    clusteredNodes++;\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    let pastCluster: number[][] = [];\r\n    // Cluster the nodes until there aren't changes being made\r\n    while (JSON.stringify(pastCluster) != JSON.stringify(clusters)) {\r\n        pastCluster = [...clusters];\r\n        clusters.forEach((cluster, clusterID) => {\r\n            const clusterParents = proof[cluster[0]].parents;\r\n\r\n            // For each cluster\r\n            clusters.forEach((parentCluster, id) => {\r\n                // If this parentCluster (cluster) is parent of the current cluster\r\n                if (parentCluster.some((hiddenID) => clusterParents.indexOf(hiddenID) !== -1)) {\r\n                    // Group the nodes couple in one single cluster (the parent cluster)\r\n                    clusters[id] = clusters[id].concat(clusters[clusterID]);\r\n                    clusters.splice(clusterID, 1);\r\n                    clusterID--;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Filter the nodes with length 1\r\n    return clusters.filter((cluster) => cluster.length > 1);\r\n};\r\n\r\nexport const groupPiNodeDependencies = (\r\n    proof: NodeInterface[],\r\n    hiddenNodesArray: number[],\r\n): NodeInterface['dependencies'] => {\r\n    const piNodeDependencies: NodeInterface['dependencies'] = [];\r\n    const depMap: { [piID: number]: number } = {};\r\n\r\n    // Copy all the hidden nodes dependencies to the new pi node\r\n    proof.forEach((node) => {\r\n        // Search for all the hidden nodes that have deps\r\n        if (hiddenNodesArray.indexOf(node.id) !== -1 && node.dependencies.length) {\r\n            // For each dependence in this node\r\n            node.dependencies.forEach((dep) => {\r\n                // This pi node dependence wasn't inserted yet\r\n                if (Object.keys(depMap).indexOf(String(dep.piId)) === -1) {\r\n                    piNodeDependencies.push(dep);\r\n                    depMap[dep.piId] = piNodeDependencies.length - 1;\r\n                }\r\n                // Concat the nodes inside the pi node already inserted\r\n                else {\r\n                    piNodeDependencies[depMap[dep.piId]].depsId = piNodeDependencies[depMap[dep.piId]].depsId.concat(\r\n                        dep.depsId,\r\n                    );\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return piNodeDependencies;\r\n};\r\n\r\nexport const sliceNodesCluster = (\r\n    proof: NodeInterface[],\r\n    clusterMap: number[],\r\n    nodeId = 0,\r\n    slicedClusters: number[][] = [],\r\n): number[][] => {\r\n    const currentNode = proof[nodeId];\r\n\r\n    // If the node id is valid and wasn't inserted yet\r\n    if (nodeId && clusterMap[currentNode.id] === -1) {\r\n        // Get all parents with the same type\r\n        const parentsClusters: { [parentID: number]: number } = {};\r\n        for (let i = 0; i < currentNode.parents.length; i++) {\r\n            const p = currentNode.parents[i];\r\n            if (proof[p].clusterType === currentNode.clusterType) {\r\n                parentsClusters[p] = clusterMap[p];\r\n                break;\r\n            }\r\n        }\r\n\r\n        const keys = Object.keys(parentsClusters);\r\n\r\n        // If the current node has the same type as (at least) one of it's parents\r\n        if (keys.length) {\r\n            // Put the current node in the cluster of the first parent with the same type\r\n            const target = parentsClusters[Number(keys[0])];\r\n            slicedClusters[target].push(currentNode.id);\r\n            clusterMap[currentNode.id] = target;\r\n        }\r\n        // Parent with different type\r\n        else {\r\n            const clusterID = slicedClusters.length;\r\n            clusterMap[currentNode.id] = clusterID;\r\n            slicedClusters.push([currentNode.id]);\r\n\r\n            // Add the brothers with the same type in the same cluster\r\n            proof[currentNode.parents[0]].children.forEach((c) => {\r\n                // If the brother node has the same type as the current one\r\n                if (proof[c].clusterType === currentNode.clusterType && c !== currentNode.id) {\r\n                    slicedClusters[clusterID].push(c);\r\n                    clusterMap[c] = clusterID;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    currentNode.children.forEach((child) => {\r\n        sliceNodesCluster(proof, clusterMap, child, slicedClusters);\r\n    });\r\n    return slicedClusters;\r\n};\r\n\r\nexport const extractTheoryLemmas = (\r\n    proof: NodeInterface[],\r\n    clusters: ProofState['clustersInfos'],\r\n    haveCluster: boolean,\r\n): ProofState['theoryLemmaMap'] => {\r\n    // If have clusters registered\r\n    if (haveCluster) {\r\n        return [proof[0].conclusion].concat(\r\n            clusters.filter((c) => c.type === ClusterKind.TL).map((c) => proof[c.hiddenNodes[0]].conclusion),\r\n        );\r\n    } else {\r\n        return proof.filter((n) => n.rule === 'SCOPE').map((n) => n.conclusion);\r\n    }\r\n};\r\n","export const colorConverter = (colorName: string): string => {\r\n    let color = '#fff';\r\n    switch (colorName) {\r\n        case 'red':\r\n            color = '#f72b34';\r\n            break;\r\n        case 'orange':\r\n            color = '#ff8334';\r\n            break;\r\n        case 'yellow':\r\n            color = '#ffc149';\r\n            break;\r\n        case 'green':\r\n            color = '#60aa51';\r\n            break;\r\n        case 'blue':\r\n            color = '#0097e4';\r\n            break;\r\n        case 'purple':\r\n            color = '#a73da5';\r\n            break;\r\n        case 'brown':\r\n            color = '#a95a49';\r\n            break;\r\n        case 'black':\r\n            color = '#464646';\r\n            break;\r\n\r\n        case 'white':\r\n            color = '#f0f0f0';\r\n            break;\r\n    }\r\n    return color;\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport {\r\n    processDot,\r\n    piNodeChildren,\r\n    piNodeParents,\r\n    descendants,\r\n    findNodesClusters,\r\n    groupPiNodeDependencies,\r\n    sliceNodesCluster,\r\n    extractTheoryLemmas,\r\n} from './auxi';\r\nimport { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\nimport { colorConverter } from '../theme/auxi';\r\nimport { ClusterKind } from '../../../interfaces/enum';\r\n\r\nconst initialState: ProofState = {\r\n    proof: [],\r\n    view: 'full',\r\n    style: 'graph',\r\n    hiddenNodes: [],\r\n    letMap: {},\r\n    theoryLemmaMap: [],\r\n    visualInfo: [],\r\n    clustersInfos: [],\r\n    smt: '',\r\n};\r\n\r\nexport const proofSlice = createSlice({\r\n    name: 'proof',\r\n    initialState,\r\n\r\n    reducers: {\r\n        process: (state, action: PayloadAction<string>) => {\r\n            // Reset the state\r\n            state.clustersInfos = [];\r\n\r\n            let proofJSON;\r\n            let dot = action.payload;\r\n            let isJSON = false;\r\n\r\n            // If the payload is a .json file\r\n            if (dot.indexOf('{\"dot\":\"') !== -1) {\r\n                proofJSON = JSON.parse(dot);\r\n                dot = proofJSON.dot;\r\n                isJSON = true;\r\n            }\r\n\r\n            const [proof, letMap, clustersColors] = processDot(dot);\r\n            state.proof = proof;\r\n            state.letMap = letMap;\r\n            state.view = 'full';\r\n\r\n            // If there are clusters\r\n            let clusters: number[][] = [];\r\n            if (Object.keys(clustersColors).length) {\r\n                state.view = 'clustered';\r\n\r\n                // Slice the clusters\r\n                const clustersMap: number[] = Array(state.proof.length).fill(-1);\r\n                clusters = sliceNodesCluster(state.proof, clustersMap);\r\n\r\n                // Maps the cluster infos\r\n                clusters.forEach((cluster) => {\r\n                    const type = state.proof[cluster[0]].clusterType;\r\n                    state.clustersInfos.push({\r\n                        hiddenNodes: cluster,\r\n                        type: type,\r\n                        color: colorConverter(clustersColors[type]),\r\n                    });\r\n                });\r\n\r\n                // Extract the theory lemmas\r\n                state.theoryLemmaMap = extractTheoryLemmas(state.proof, state.clustersInfos, true);\r\n            } else {\r\n                state.theoryLemmaMap = extractTheoryLemmas(state.proof, state.clustersInfos, false);\r\n            }\r\n\r\n            if (isJSON) {\r\n                state.view = proofJSON.view;\r\n                state.hiddenNodes = proofJSON.hiddenNodes;\r\n                state.visualInfo = proofJSON.visualInfo;\r\n            }\r\n            // Is .dot\r\n            else {\r\n                state.hiddenNodes = clusters.filter((c) => c.length > 1);\r\n\r\n                // Init the visual info\r\n                const visualInfo: ProofState['visualInfo'] = {};\r\n                state.proof.forEach((node) => {\r\n                    visualInfo[node.id] = {\r\n                        color: '#fff',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    };\r\n                });\r\n\r\n                let size = state.proof.length;\r\n                state.clustersInfos.forEach((cluster) => {\r\n                    visualInfo[cluster.hiddenNodes.length !== 1 ? size++ : cluster.hiddenNodes[0]] = {\r\n                        color: cluster.color,\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    };\r\n                });\r\n\r\n                state.visualInfo = visualInfo;\r\n            }\r\n        },\r\n        hideNodes: (state, action: PayloadAction<number[]>) => {\r\n            const toHideNodes = action.payload.filter(\r\n                (id) =>\r\n                    id > 0 &&\r\n                    id < state.proof.length &&\r\n                    state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1),\r\n            );\r\n\r\n            const clusters = findNodesClusters(state.proof, toHideNodes);\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat(clusters)\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi nodes\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            for (let i = 0; i < clusters.length; i++) {\r\n                state.visualInfo = {\r\n                    ...state.visualInfo,\r\n                    [piNodeId + i]: {\r\n                        color: '#555',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    },\r\n                };\r\n            }\r\n\r\n            // Unselect the selected nodes\r\n            toHideNodes.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        foldAllDescendants: (state, action: PayloadAction<number>) => {\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat([\r\n                    [action.payload, ...descendants(state.proof, action.payload)].filter(\r\n                        (id, index, self) =>\r\n                            id > 0 &&\r\n                            id < state.proof.length &&\r\n                            state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1) &&\r\n                            self.indexOf(id) === index,\r\n                    ),\r\n                ])\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi node and the root node\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            state.visualInfo = {\r\n                ...state.visualInfo,\r\n                [action.payload]: {\r\n                    ...state.visualInfo[action.payload],\r\n                    selected: false,\r\n                },\r\n                [piNodeId]: {\r\n                    color: '#555',\r\n                    x: 0,\r\n                    y: 0,\r\n                    selected: false,\r\n                },\r\n            };\r\n        },\r\n        unhideNodes: (state, action: PayloadAction<{ pi: number; hiddens: number[] }>) => {\r\n            const { pi, hiddens } = action.payload;\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .map((hiddenNodesArray) => hiddenNodesArray.filter((id) => hiddens.indexOf(id) === -1))\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Make sure the ids are realocated\r\n            const size = Object.keys(state.visualInfo).length;\r\n            for (let i = pi; i < size - 1; i++) {\r\n                state.visualInfo[i] = state.visualInfo[i + 1];\r\n            }\r\n            // Delete the last position\r\n            delete state.visualInfo[size - 1];\r\n\r\n            // Unselect the hidden nodes\r\n            hiddens.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        setVisualInfo: (state, action: PayloadAction<ProofState['visualInfo']>) => {\r\n            state.visualInfo = action.payload;\r\n        },\r\n        selectNodes: (state, action: PayloadAction<number[]>) => {\r\n            const len = Object.keys(state.visualInfo).length;\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < len) {\r\n                    state.visualInfo[id].selected = true;\r\n                }\r\n            });\r\n        },\r\n        unselectNodes: (state, action: PayloadAction<number[]>) => {\r\n            const len = Object.keys(state.visualInfo).length;\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < len) {\r\n                    state.visualInfo[id].selected = false;\r\n                }\r\n            });\r\n        },\r\n        changeStyle: (state, action: PayloadAction<ProofState['style']>) => {\r\n            switch (action.payload) {\r\n                case 'graph':\r\n                    state.style = 'graph';\r\n                    break;\r\n                case 'directory':\r\n                    state.style = 'directory';\r\n                    break;\r\n            }\r\n        },\r\n        applyView: (state, action: PayloadAction<ProofState['view']>) => {\r\n            const visualInfoSize = Object.keys(state.visualInfo).length;\r\n            const proofSize = state.proof.length;\r\n            // Delete all the pi nodes\r\n            for (let i = 0; i < visualInfoSize - proofSize; i++) {\r\n                delete state.visualInfo[proofSize + i];\r\n            }\r\n\r\n            switch (action.payload) {\r\n                // View without hidden Nodes\r\n                case 'full':\r\n                    if (state.hiddenNodes.length || state.view === 'colored-full') {\r\n                        state.proof.forEach((node) => {\r\n                            state.visualInfo[node.id] = {\r\n                                color: '#fff',\r\n                                x: 0,\r\n                                y: 0,\r\n                                selected: false,\r\n                            };\r\n                        });\r\n\r\n                        state.hiddenNodes = [];\r\n                    }\r\n                    state.view = 'full';\r\n                    break;\r\n                // Cluster all the nodes in your respective group\r\n                case 'clustered':\r\n                    // If there are clusters infos\r\n                    if (state.clustersInfos.length) {\r\n                        state.view = 'clustered';\r\n\r\n                        state.hiddenNodes = [];\r\n                        let size = Object.keys(state.visualInfo).length;\r\n\r\n                        state.clustersInfos.forEach((cluster) => {\r\n                            if (cluster.hiddenNodes.length !== 1) {\r\n                                state.visualInfo[size++] = {\r\n                                    color: cluster.color,\r\n                                    x: 0,\r\n                                    y: 0,\r\n                                    selected: false,\r\n                                };\r\n\r\n                                state.hiddenNodes.push(cluster.hiddenNodes);\r\n                            }\r\n                            // Cluster with 1 node\r\n                            else {\r\n                                state.visualInfo[cluster.hiddenNodes[0]] = {\r\n                                    color: cluster.color,\r\n                                    x: 0,\r\n                                    y: 0,\r\n                                    selected: false,\r\n                                };\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                // Apply full view but apply the clustrer color\r\n                case 'colored-full':\r\n                    state.view = 'colored-full';\r\n                    state.hiddenNodes = [];\r\n\r\n                    // If there are clusters infos\r\n                    if (state.clustersInfos.length) {\r\n                        state.clustersInfos.forEach((cluster) => {\r\n                            cluster.hiddenNodes.forEach((node) => {\r\n                                state.visualInfo[node] = {\r\n                                    color: cluster.color,\r\n                                    x: 0,\r\n                                    y: 0,\r\n                                    selected: false,\r\n                                };\r\n                            });\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n        applyColor: (state, action: PayloadAction<string>) => {\r\n            Object.keys(state.visualInfo).forEach((id) => {\r\n                if (state.visualInfo[Number(id)].selected) {\r\n                    state.visualInfo[Number(id)].color = action.payload;\r\n                    state.visualInfo[Number(id)].selected = false;\r\n                }\r\n            });\r\n        },\r\n        setSmt: (state, action: PayloadAction<string>) => {\r\n            state.smt = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    process,\r\n    hideNodes,\r\n    foldAllDescendants,\r\n    unhideNodes,\r\n    setVisualInfo,\r\n    selectNodes,\r\n    unselectNodes,\r\n    changeStyle,\r\n    applyView,\r\n    applyColor,\r\n    setSmt,\r\n} = proofSlice.actions;\r\n\r\nexport const selectProof = (state: RootState): NodeInterface[] => {\r\n    let proof = state.proof.proof;\r\n    const hiddenNodes = state.proof.hiddenNodes;\r\n\r\n    hiddenNodes.forEach((hiddenNodesArray) => {\r\n        const dependencies: { [parentId: number]: number[] } = {};\r\n        const children = piNodeChildren(proof, hiddenNodesArray);\r\n        const parents = piNodeParents(proof, hiddenNodesArray, dependencies);\r\n        const piNodeDependencies = groupPiNodeDependencies(proof, hiddenNodesArray);\r\n\r\n        const piNodeId = proof.length;\r\n        proof = proof.concat({\r\n            id: piNodeId,\r\n            conclusion: '∴',\r\n            rule: 'π',\r\n            args: '',\r\n            children: children,\r\n            parents: parents,\r\n            hiddenNodes: hiddenNodesArray.map((hiddenNode) => proof[hiddenNode]),\r\n            descendants: 1,\r\n            dependencies: piNodeDependencies,\r\n            clusterType: ClusterKind.NONE,\r\n        });\r\n\r\n        const piNode = proof[piNodeId];\r\n\r\n        children.forEach(\r\n            (childId) =>\r\n                (proof[childId] = {\r\n                    ...proof[childId],\r\n                    parents: proof[childId].parents\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n        parents.forEach(\r\n            (parentId) =>\r\n                (proof[parentId] = {\r\n                    ...proof[parentId],\r\n                    children: proof[parentId].children\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n\r\n        // Set the dependencies array of each parent that has deps and remove\r\n        //  the children that are dependencies\r\n        Object.keys(dependencies).forEach((parent) => {\r\n            const parentId = Number(parent);\r\n            proof[parentId] = {\r\n                ...proof[parentId],\r\n                children: proof[parentId].children.filter((c) => dependencies[parentId].indexOf(c) === -1),\r\n                dependencies: [...proof[parentId].dependencies, { piId: piNodeId, depsId: dependencies[parentId] }],\r\n            };\r\n        });\r\n\r\n        // Get the high hierarchy nodes in this pi node\r\n        const highHierarchyNodes = hiddenNodesArray?.filter((node) =>\r\n            proof[node].parents.every((parentId) => piNode.parents.indexOf(parentId) !== -1),\r\n        );\r\n\r\n        // Get the conclusion array\r\n        const conclusion = highHierarchyNodes.map((node) => ' ' + proof[node].conclusion);\r\n        piNode.conclusion = conclusion.length > 1 ? `[${conclusion} ]` : `${conclusion}`;\r\n\r\n        // Get the rule array\r\n        const rule = highHierarchyNodes.map((node) => ' ' + proof[node].rule);\r\n        piNode.rule = rule.length > 1 ? `[${rule} ]` : `${rule} `;\r\n\r\n        // Set the descendants number\r\n        piNode.descendants = piNode.children.reduce(\r\n            (ac: number, childID) => ((ac += proof[childID].descendants), ac),\r\n            1,\r\n        );\r\n    });\r\n\r\n    proof = proof.filter((proofNode) =>\r\n        hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(proofNode.id) === -1),\r\n    );\r\n\r\n    return proof;\r\n};\r\n\r\nexport const selectOriginalProof = (state: RootState): NodeInterface[] => {\r\n    return state.proof.proof;\r\n};\r\n\r\nexport const selectView = (state: RootState): ProofState['view'] => {\r\n    return state.proof.view;\r\n};\r\n\r\nexport const selectStyle = (state: RootState): 'graph' | 'directory' => {\r\n    return state.proof.style;\r\n};\r\n\r\nexport const selectLetMap = (state: RootState): { [Key: string]: string } => {\r\n    return state.proof.letMap;\r\n};\r\n\r\nexport const selectTheoryLemmas = (state: RootState): ProofState['theoryLemmaMap'] => {\r\n    return state.proof.theoryLemmaMap;\r\n};\r\n\r\nexport const selectVisualInfo = (state: RootState): ProofState['visualInfo'] => {\r\n    if (state.proof.proof.length) return state.proof.visualInfo;\r\n    // If there is no proof node\r\n    return { 0: { color: '#555', x: 0, y: 0, selected: false } };\r\n};\r\n\r\nexport const selectHiddenNodes = (state: RootState): number[][] => {\r\n    return state.proof.hiddenNodes;\r\n};\r\n\r\nexport const selectNodeClusters = (state: RootState): ProofState['clustersInfos'] => {\r\n    return state.proof.clustersInfos;\r\n};\r\n\r\nexport const selectSmt = (state: RootState): ProofState['smt'] => {\r\n    return state.proof.smt;\r\n};\r\n\r\nexport default proofSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ExternalCmdState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ExternalCmdState = {\r\n    findData: {\r\n        nodeToFind: -1,\r\n        findOption: false,\r\n    },\r\n    renderData: {\r\n        count: 0,\r\n        fileChanged: false,\r\n    },\r\n};\r\n\r\nexport const externalCmd = createSlice({\r\n    name: 'externalCmd',\r\n    initialState,\r\n    reducers: {\r\n        findNode: (state, action: PayloadAction<{ nodeId: number; option: boolean }>) => {\r\n            state.findData = { nodeToFind: action.payload.nodeId, findOption: action.payload.option };\r\n        },\r\n        reRender: (state) => {\r\n            state.renderData.count = 0;\r\n        },\r\n        addRenderCount: (state) => {\r\n            state.renderData.count++;\r\n        },\r\n        blockRender: (state) => {\r\n            state.renderData.count = 2;\r\n        },\r\n        allowRenderNewFile: (state) => {\r\n            state.renderData.fileChanged = true;\r\n        },\r\n        blockRenderNewFile: (state) => {\r\n            state.renderData.fileChanged = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { findNode, reRender, addRenderCount, blockRender, allowRenderNewFile, blockRenderNewFile } =\r\n    externalCmd.actions;\r\n\r\nexport const selectFindData = (state: RootState): { nodeToFind: number; findOption: boolean } =>\r\n    state.externalCmd.findData;\r\n\r\nexport const selectRenderData = (state: RootState): { count: number; fileChanged: boolean } =>\r\n    state.externalCmd.renderData;\r\n\r\nexport default externalCmd.reducer;\r\n","import React, { useState, useReducer, useEffect } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { MaybeElement } from '@blueprintjs/core/lib/esm/common/props';\r\nimport { IconName } from '@blueprintjs/core/lib/esm/components/icon/icon';\r\n\r\nimport { Button, Classes, Dialog, FileInput, Intent } from '@blueprintjs/core';\r\n\r\nimport '../../scss/VisualizerDialog.scss';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { set } from '../../store/features/file/fileSlice';\r\nimport { process } from '../../store/features/proof/proofSlice';\r\nimport { allowRenderNewFile, blockRender, reRender } from '../../store/features/externalCmd/externalCmd';\r\nimport { VisualizerDialogProps } from '../../interfaces/interfaces';\r\n\r\ninterface DialogProps {\r\n    icon: IconName | MaybeElement;\r\n    title: React.ReactNode;\r\n}\r\n\r\nconst readUploadedFileAsText = (inputFile: File) => {\r\n    const temporaryFileReader = new FileReader();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        temporaryFileReader.onerror = () => {\r\n            temporaryFileReader.abort();\r\n            reject(new DOMException('Problem parsing input file.'));\r\n        };\r\n\r\n        temporaryFileReader.onload = () => {\r\n            resolve(temporaryFileReader.result);\r\n        };\r\n        temporaryFileReader.readAsText(inputFile);\r\n    });\r\n};\r\n\r\nconst VisualizerDialog: React.FC<VisualizerDialogProps> = ({\r\n    dialogIsOpen,\r\n    setDialogIsOpen,\r\n    addErrorToast,\r\n}: VisualizerDialogProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [inputIsFocused, setInputIsFocused] = useState(false);\r\n    const [fileName, changeFileName] = useState('Choose file...');\r\n    const [file, changeFile] = useState('');\r\n    const [[focusFlag, flagCount], setFocusFlag] = useReducer(\r\n        (state: number[], newFlag: number): number[] => [newFlag, state[1] + 1],\r\n        [0, 0],\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (dialogIsOpen) setFocusFlag(1);\r\n    }, [dialogIsOpen]);\r\n\r\n    useEffect(() => {\r\n        let el;\r\n        switch (focusFlag) {\r\n            // Focus the file input\r\n            case 1:\r\n                el = document.getElementsByClassName(Classes.DIALOG_BODY + ' dialog-body');\r\n                (el[0].childNodes[0] as HTMLElement).focus();\r\n                break;\r\n            // Focus the upload button\r\n            case 2:\r\n                el = document.getElementsByClassName(Classes.DIALOG_FOOTER_ACTIONS);\r\n                (el[0].childNodes[0] as HTMLElement).focus();\r\n                break;\r\n        }\r\n    }, [flagCount]);\r\n\r\n    const closeDialog = () => {\r\n        setDialogIsOpen(false);\r\n        changeFileName('Choose file...');\r\n        changeFile('');\r\n    };\r\n\r\n    const dialogProps: DialogProps = { icon: 'upload', title: 'Upload Proof' };\r\n    const dialogBody = (\r\n        <FileInput\r\n            style={{\r\n                outline: inputIsFocused ? '2px  white solid' : '',\r\n                borderRadius: '3px',\r\n            }}\r\n            text={fileName}\r\n            hasSelection={fileName !== 'Choose file...'}\r\n            onInputChange={async (e) => {\r\n                const target = e.target as HTMLInputElement;\r\n                const file = target.files ? target.files[0] : new File([''], 'filename');\r\n                if (\r\n                    target.files &&\r\n                    target.files[0] &&\r\n                    target.files[0].name.split('.').slice(-1)[0] !== 'dot' &&\r\n                    target.files[0].name.split('.').slice(-1)[0] !== 'json'\r\n                ) {\r\n                    addErrorToast('Sorry! Our app only support DOT and JSON files.');\r\n                    return;\r\n                }\r\n\r\n                try {\r\n                    // Make sure the file was selected and none error of \"no\r\n                    //  file select\" will be prompted\r\n                    if (file) {\r\n                        const fileContents = await readUploadedFileAsText(file);\r\n                        changeFile(fileContents as string);\r\n                        changeFileName(file.name);\r\n\r\n                        // If succeded, set the focus of the page to the upload button\r\n                        setFocusFlag(2);\r\n                    }\r\n                } catch (er: any) {\r\n                    addErrorToast(er.message);\r\n                }\r\n            }}\r\n            fill={true}\r\n            onFocus={(e) => {\r\n                e.stopPropagation();\r\n                setInputIsFocused(true);\r\n            }}\r\n            onBlur={(e) => {\r\n                e.stopPropagation();\r\n                setInputIsFocused(false);\r\n            }}\r\n        />\r\n    );\r\n    const succesButton = (\r\n        <Button\r\n            onClick={() => {\r\n                dispatch(set({ name: fileName, value: file }));\r\n\r\n                dispatch(allowRenderNewFile());\r\n                const ext = fileName.split('.').pop();\r\n                if (ext === 'json') dispatch(blockRender());\r\n                else if (ext === 'dot') dispatch(reRender());\r\n\r\n                dispatch(process(file));\r\n                closeDialog();\r\n            }}\r\n            intent={Intent.SUCCESS}\r\n            disabled={fileName === 'Choose file...'}\r\n        >\r\n            Upload Proof\r\n        </Button>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className={darkTheme ? ' bp3-dark' : ''}\r\n                isOpen={dialogIsOpen}\r\n                onClose={(): void => closeDialog()}\r\n                usePortal={true}\r\n                {...dialogProps}\r\n            >\r\n                <div className={Classes.DIALOG_BODY + ' dialog-body'}>{dialogBody}</div>\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>{succesButton}</div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default VisualizerDialog;\r\n","import { KonvaEventObject } from 'konva/types/Node';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Label, Text, Tag, Group, Circle, Arrow } from 'react-konva';\r\nimport { NodeProps } from '../../../interfaces/interfaces';\r\n\r\nfunction getTextWidth(text: string, font: string): number {\r\n    const canvas = document.createElement('canvas');\r\n    const context = canvas.getContext('2d');\r\n    let size = 0;\r\n    if (context) {\r\n        context.font = font;\r\n        size = context.measureText(text).width;\r\n    }\r\n    return size;\r\n}\r\n\r\nfunction textColorFromBg(bgColor: string) {\r\n    const r = parseInt(bgColor.substring(0, 2), 16);\r\n    const g = parseInt(bgColor.substring(2, 4), 16);\r\n    const b = parseInt(bgColor.substring(4, 6), 16);\r\n    return r * 0.299 + g * 0.587 + b * 0.114 > 150 ? '#000000' : '#ffffff';\r\n}\r\n\r\nfunction sixDigitColor(bgColor: string): string {\r\n    if (bgColor.charAt(0) === '#') {\r\n        if (bgColor.length == 4) {\r\n            return bgColor\r\n                .substring(1, 7)\r\n                .split('')\r\n                .map((c) => c + c)\r\n                .join('');\r\n        } else if (bgColor.length == 7) {\r\n            return bgColor.substring(1, 7);\r\n        }\r\n    } else {\r\n        if (bgColor.length == 3) {\r\n            return bgColor\r\n                .split('')\r\n                .map((c) => c + c)\r\n                .join('');\r\n        } else if (bgColor.length == 6) {\r\n            return bgColor;\r\n        }\r\n    }\r\n    return '000000';\r\n}\r\n\r\nconst Node: React.FC<NodeProps> = (props: NodeProps): JSX.Element => {\r\n    const {\r\n        id,\r\n        conclusion,\r\n        rule,\r\n        args,\r\n        x,\r\n        y,\r\n        nHided,\r\n        nDescendants,\r\n        hiddenNodes,\r\n        dependencies,\r\n        selected,\r\n        color,\r\n        setNodeOnFocus,\r\n        toggleNodeSelection,\r\n        updateNodePosition,\r\n        openDrawer,\r\n        onDragEnd,\r\n        createTree,\r\n    } = props;\r\n\r\n    const handleClick = (e: KonvaEventObject<MouseEvent>): void => {\r\n        if (e.evt.button === 0) {\r\n            if (e.evt.shiftKey) {\r\n                toggleNodeSelection(id);\r\n            } else {\r\n                openDrawer(\r\n                    {\r\n                        rule: rule,\r\n                        args: args,\r\n                        conclusion: conclusion,\r\n                        nHided: nHided,\r\n                        nDescendants: nDescendants - (rule === 'π' ? 0 : 0),\r\n                        hiddenNodes: hiddenNodes,\r\n                        dependencies: dependencies,\r\n                    },\r\n                    createTree(id),\r\n                );\r\n            }\r\n        } else if (e.evt.button === 2) {\r\n            setNodeOnFocus(id);\r\n            const menuNode = document.getElementById('menu');\r\n            if (menuNode) {\r\n                menuNode.style.top = `${e.evt.clientY}px`;\r\n                menuNode.style.left = `${e.evt.clientX}px`;\r\n                menuNode.style.display = 'initial';\r\n                window.addEventListener('click', () => {\r\n                    menuNode.style.display = 'none';\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const depSize = 25,\r\n        depLineSize = 25;\r\n    const bgColor = color;\r\n\r\n    const style = {\r\n        tag: {\r\n            fill: bgColor,\r\n            stroke: selected ? 'red' : 'black',\r\n            strokeWidth: selected ? 3 : 1,\r\n        },\r\n        get dep() {\r\n            return { ...this.tag };\r\n        },\r\n        text: {\r\n            align: 'center',\r\n            fill: textColorFromBg(sixDigitColor(bgColor)),\r\n            fontSize: 15,\r\n            height: 35,\r\n            padding: 10,\r\n            width: 300,\r\n        },\r\n        get depText() {\r\n            return {\r\n                ...this.text,\r\n                padding: 0,\r\n                width: depSize * 2,\r\n            };\r\n        },\r\n    };\r\n    const infos = {\r\n        nHided: nHided ? `#hidden: ${nHided}` : '',\r\n        nDescendants: ` #descendants: ${nDescendants}`,\r\n        rule: nHided ? 'π' : rule,\r\n        dependencies: dependencies.length === 1 ? String(dependencies[0].piId) : 'π',\r\n    };\r\n\r\n    const [idSize, setIdSize] = useState(50);\r\n    const [descendantSize, setDescendantSize] = useState(style.text.width - 50);\r\n\r\n    // Component Did Mount\r\n    useEffect(() => {\r\n        const font = `${style.text.fontSize}px -apple-system, \"BlinkMacSystemFont\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Open Sans\", \"Helvetica Neue\", \"Icons16\", sans-serif`;\r\n        const calc = getTextWidth(id.toString(), font) + style.text.padding * 3;\r\n        setIdSize(calc);\r\n        setDescendantSize(style.text.width - calc);\r\n    }, []);\r\n\r\n    return (\r\n        <Group\r\n            draggable\r\n            id={id.toString()}\r\n            key={id}\r\n            onDragMove={(e) => {\r\n                updateNodePosition(id, e.target.attrs.x, e.target.attrs.y);\r\n            }}\r\n            onDragEnd={onDragEnd}\r\n            x={x}\r\n            y={y}\r\n            onClick={handleClick}\r\n        >\r\n            <Label x={0} y={0}>\r\n                <Tag {...style.tag} />\r\n                <Text {...style.text} text={conclusion} />\r\n            </Label>\r\n            <Label x={0} y={35}>\r\n                <Tag {...style.tag} />\r\n                <Text {...style.text} text={infos.rule} />\r\n            </Label>\r\n            <Label x={0} y={70} {...{ align: 'right' }}>\r\n                <Tag {...style.tag} />\r\n                <Text {...{ ...style.text, width: idSize }} text={id.toString()} />\r\n            </Label>\r\n            <Label x={idSize} y={70}>\r\n                <Tag {...style.tag} />\r\n                <Text {...{ ...style.text, width: descendantSize }} text={infos.nHided + infos.nDescendants} />\r\n            </Label>\r\n            {dependencies.length ? (\r\n                <Label x={300} y={0}>\r\n                    <Arrow strokeWidth={1} stroke=\"black\" fill=\"black\" points={[depLineSize, 53, 0, 53]} />\r\n                    <Circle x={depLineSize + depSize} y={53} radius={depSize} {...style.dep}></Circle>\r\n                    <Label x={depLineSize} y={45}>\r\n                        <Text {...style.depText} text={infos.dependencies} />\r\n                    </Label>\r\n                </Label>\r\n            ) : null}\r\n        </Group>\r\n    );\r\n};\r\n\r\nexport default Node;\r\n","import React from 'react';\r\nimport { Arrow } from 'react-konva';\r\n\r\nimport { LineProps } from '../../../interfaces/interfaces';\r\n\r\nconst Line = ({ key, points }: LineProps): JSX.Element => {\r\n    return <Arrow key={key} strokeWidth={1} stroke=\"black\" fill=\"black\" points={[...points]} />;\r\n};\r\n\r\nexport default Line;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ControlGroup, Button, InputGroup } from '@blueprintjs/core';\r\nimport { colorConverter } from '../../../store/features/theme/auxi';\r\n\r\nconst Menu = ({\r\n    unfold,\r\n    foldSelectedNodes,\r\n    foldAllDescendants,\r\n    changeNodeColor,\r\n    currentColor,\r\n    options,\r\n}: {\r\n    unfold: () => void;\r\n    foldSelectedNodes: () => void;\r\n    foldAllDescendants: () => void;\r\n    changeNodeColor: (color: string) => void;\r\n    currentColor: string;\r\n    options: { unfold: boolean; foldSelected: boolean; foldAllDescendants: boolean };\r\n}): JSX.Element => {\r\n    const [color, setColor] = useState(currentColor);\r\n\r\n    useEffect(() => {\r\n        setColor(currentColor);\r\n    }, [currentColor]);\r\n\r\n    return (\r\n        <div className=\"bp3-popover2-content\">\r\n            <ul id=\"menu\" className=\"bp3-menu\">\r\n                {options.unfold ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => unfold()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-open\">\r\n                                <span> Unfold</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                {options.foldSelected ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => foldSelectedNodes()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\r\n                                <span> Fold selected nodes</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                {options.foldAllDescendants ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => foldAllDescendants()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\r\n                                <span> Fold all descendants</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                <li className=\"\">\r\n                    <a className=\"bp3-menu-item\">\r\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\r\n                            <span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('red'))}> 🟥</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('orange'))}> 🟧</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('yellow'))}> 🟨</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('green'))}> 🟩</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('blue'))}> 🟦</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('purple'))}> 🟪</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('brown'))}> 🟫</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('black'))}> ⬛</span>\r\n                                <span onClick={() => changeNodeColor(colorConverter('white'))}> ⬜</span>\r\n                            </span>\r\n                        </div>\r\n                    </a>\r\n                </li>\r\n                <li className=\"\">\r\n                    <a className=\"bp3-menu-item\">\r\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\r\n                            <ControlGroup\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                }}\r\n                                fill={true}\r\n                                vertical={false}\r\n                            >\r\n                                <InputGroup\r\n                                    placeholder={currentColor}\r\n                                    value={color}\r\n                                    onChange={(e) => setColor(e.target.value)}\r\n                                />\r\n                                <Button\r\n                                    icon=\"style\"\r\n                                    onClick={() => {\r\n                                        changeNodeColor(color);\r\n                                        setColor('');\r\n                                    }}\r\n                                    disabled={color.match(/^#([0-9a-f]{3}){1,2}$/i) === null}\r\n                                ></Button>\r\n                            </ControlGroup>\r\n                        </div>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport Konva from 'konva';\r\nimport dagre from 'dagre';\r\nimport Node from './VisualizerNode';\r\nimport Line from './VisualizerLine';\r\nimport Menu from './VisualizerMenu';\r\n\r\nimport {\r\n    NodeProps,\r\n    LineProps,\r\n    TreeNode,\r\n    CanvasPropsAndRedux,\r\n    NodeInterface,\r\n    ProofState,\r\n    ReduxState,\r\n} from '../../../interfaces/interfaces';\r\n\r\nimport '../../../scss/VisualizerCanvas.scss';\r\n\r\nimport { CanvasProps, CanvasState } from '../../../interfaces/interfaces';\r\nimport { connect } from 'react-redux';\r\nimport { selectProof, selectVisualInfo } from '../../../store/features/proof/proofSlice';\r\nimport {\r\n    hideNodes,\r\n    unhideNodes,\r\n    foldAllDescendants,\r\n    applyView,\r\n    setVisualInfo,\r\n} from '../../../store/features/proof/proofSlice';\r\nimport {\r\n    selectFindData,\r\n    findNode,\r\n    selectRenderData,\r\n    reRender,\r\n    addRenderCount,\r\n    blockRenderNewFile,\r\n} from '../../../store/features/externalCmd/externalCmd';\r\n\r\nconst nodeWidth = 300,\r\n    nodeHeight = 130;\r\n\r\nfunction handleWheel(e: Konva.KonvaEventObject<WheelEvent>): { stageScale: number; stageX: number; stageY: number } {\r\n    e.evt.preventDefault();\r\n\r\n    const scaleBy = 1.08;\r\n    const stage = e.target.getStage();\r\n    if (stage) {\r\n        const oldScale = stage.scaleX();\r\n        const pointerPosition = stage.getPointerPosition();\r\n        let x, y;\r\n\r\n        if (pointerPosition) {\r\n            [x, y] = [pointerPosition.x, pointerPosition.y];\r\n        } else {\r\n            [x, y] = [0, 0];\r\n        }\r\n\r\n        const mousePointTo = {\r\n            x: x / oldScale - stage.x() / oldScale,\r\n            y: y / oldScale - stage.y() / oldScale,\r\n        };\r\n\r\n        const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\r\n\r\n        return {\r\n            stageScale: newScale,\r\n            stageX: -(mousePointTo.x - x / newScale) * newScale,\r\n            stageY: -(mousePointTo.y - y / newScale) * newScale,\r\n        };\r\n    }\r\n    return {\r\n        stageScale: 1,\r\n        stageX: 0,\r\n        stageY: 0,\r\n    };\r\n}\r\n\r\nclass Canvas extends Component<CanvasPropsAndRedux, CanvasState> {\r\n    constructor(props: CanvasPropsAndRedux) {\r\n        super(props);\r\n        this.componentDidUpdate = this.componentDidUpdate.bind(this);\r\n        this.setNodeOnFocus = this.setNodeOnFocus.bind(this);\r\n\r\n        this.state = {\r\n            canvasSize: {\r\n                width: 520,\r\n                height: 300,\r\n            },\r\n            stage: {\r\n                stageScale: 1,\r\n                stageX: 0,\r\n                stageY: 0,\r\n            },\r\n            showingNodes: {},\r\n            showingEdges: {},\r\n            nodeOnFocus: NaN,\r\n            nodesSelected: [],\r\n            proof: [],\r\n            visualInfo: {},\r\n        };\r\n    }\r\n\r\n    static copyNodePosition = (\r\n        visualInfo: ProofState['visualInfo'],\r\n        showingNodes: CanvasState['showingNodes'],\r\n    ): ProofState['visualInfo'] => {\r\n        // Get the current position of the nodes and create a proofState with them included\r\n        const newVisualInfo: ProofState['visualInfo'] = {};\r\n        Object.keys(visualInfo).forEach((id) => {\r\n            const key = Number(id);\r\n\r\n            if (showingNodes[key]) {\r\n                newVisualInfo[key] = {\r\n                    ...visualInfo[key],\r\n                    x: showingNodes[key].props.x,\r\n                    y: showingNodes[key].props.y,\r\n                };\r\n            } else {\r\n                newVisualInfo[key] = {\r\n                    ...visualInfo[key],\r\n                };\r\n            }\r\n        });\r\n        return newVisualInfo;\r\n    };\r\n\r\n    static newNodeProps = (node: NodeInterface, visualInfos: ProofState['visualInfo']): NodeProps => {\r\n        const visualInfo = visualInfos[node.id];\r\n        return {\r\n            id: node.id,\r\n            conclusion: node.conclusion,\r\n            rule: node.rule,\r\n            args: node.args,\r\n            x: visualInfo.x,\r\n            y: visualInfo.y,\r\n            nHided: node.hiddenNodes ? node.hiddenNodes.length : 0,\r\n            nDescendants: node.descendants - 1,\r\n            hiddenNodes: node.hiddenNodes ? node.hiddenNodes.map((node) => node.id) : [],\r\n            dependencies: node.dependencies ? node.dependencies : [],\r\n            selected: visualInfo.selected,\r\n            color: visualInfo.color,\r\n            setNodeOnFocus: () => undefined,\r\n            toggleNodeSelection: () => undefined,\r\n            updateNodePosition: () => undefined,\r\n            openDrawer: () => undefined,\r\n            onDragEnd: () => undefined,\r\n            createTree: () => {\r\n                return [];\r\n            },\r\n        };\r\n    };\r\n\r\n    static getDerivedStateFromProps(props: CanvasPropsAndRedux, current_state: CanvasState) {\r\n        const proofChanged = JSON.stringify(current_state.proof) !== JSON.stringify(props.proof);\r\n        const visualInfoChanged = JSON.stringify(current_state.visualInfo) !== JSON.stringify(props.visualInfo);\r\n        const { nodeToFind, findOption } = props.nodeFindData;\r\n        const { count, fileChanged } = props.renderData;\r\n        const stage = current_state.stage;\r\n\r\n        // If there is a node to be found\r\n        if (nodeToFind > -1) {\r\n            // Is valid node\r\n            if (nodeToFind <= props.proof[props.proof.length - 1].id) {\r\n                // Change the stage position\r\n                const { x, y } = props.visualInfo[nodeToFind];\r\n                stage.stageX = current_state.canvasSize.width / 2 - (x + nodeWidth / 2) * stage.stageScale;\r\n                stage.stageY = current_state.canvasSize.height / 2 - (y + nodeHeight / 2) * stage.stageScale;\r\n\r\n                // Select the finded node\r\n                if (findOption) {\r\n                    props.setVisualInfo({\r\n                        ...props.visualInfo,\r\n                        [nodeToFind]: { ...props.visualInfo[nodeToFind], selected: true },\r\n                    });\r\n                }\r\n            }\r\n            // Reset the node finder\r\n            props.findNode({ nodeId: -1, option: false });\r\n        }\r\n\r\n        // If the proof or visual info changed or we have a new file being uploaded\r\n        if (proofChanged || visualInfoChanged || fileChanged) {\r\n            // Create the showing nodes array\r\n            const showingNodes: CanvasState['showingNodes'] = {};\r\n            props.proof.forEach((node, id) => {\r\n                showingNodes[node.id] = <Node key={id} {...Canvas.newNodeProps(node, props.visualInfo)} />;\r\n            });\r\n\r\n            // If has nodes and can render\r\n            if (showingNodes[0] && count < 2) {\r\n                props.addRenderCount();\r\n\r\n                const g = new dagre.graphlib.Graph();\r\n                g.setGraph({ rankdir: 'BT', ranker: 'tight-tree' });\r\n                g.setDefaultEdgeLabel(function () {\r\n                    return {};\r\n                });\r\n                props.proof.forEach((node) => {\r\n                    g.setNode(node.id.toString(), {\r\n                        width: nodeWidth + (node.dependencies.length ? 95 : 0),\r\n                        height: nodeHeight,\r\n                    });\r\n                    node.children.forEach((child) => {\r\n                        g.setEdge(child.toString(), node.id.toString());\r\n                    });\r\n                });\r\n                dagre.layout(g);\r\n\r\n                const xOffset = g.node('0').x - (showingNodes[0].props.x ? showingNodes[0].props.x : 0);\r\n                const yOffset = g.node('0').y - (showingNodes[0].props.y ? showingNodes[0].props.y : 0);\r\n                g.nodes().forEach((v) => {\r\n                    try {\r\n                        const { x, y } = g.node(v);\r\n                        const key = parseInt(v);\r\n                        showingNodes[key] = (\r\n                            <Node\r\n                                {...{\r\n                                    ...showingNodes[key].props,\r\n                                    x: x - xOffset,\r\n                                    y: y - yOffset,\r\n                                }}\r\n                            />\r\n                        );\r\n                    } catch (e) {\r\n                        console.log(e);\r\n                    }\r\n                });\r\n\r\n                props.setVisualInfo(Canvas.copyNodePosition(props.visualInfo, showingNodes));\r\n            }\r\n            // Reset the new file indicator if it's true\r\n            if (fileChanged) props.blockRenderNewFile();\r\n\r\n            return {\r\n                showingNodes: showingNodes,\r\n                showingEdges: {},\r\n                proof: props.proof,\r\n                visualInfo: props.visualInfo,\r\n                stage: stage,\r\n            };\r\n        }\r\n        return { stage: stage };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        const { showingNodes } = this.state;\r\n        const { proof, visualInfo } = this.props;\r\n\r\n        const newShowingNodes: CanvasState['showingNodes'] = {};\r\n        proof.forEach((node, id) => {\r\n            newShowingNodes[node.id] = <Node key={id} {...Canvas.newNodeProps(node, visualInfo)} />;\r\n        });\r\n\r\n        this.setState({ proof: proof, showingNodes: newShowingNodes });\r\n\r\n        if (showingNodes[0]) {\r\n            const [width, height] = [window.innerWidth, window.innerHeight - 50];\r\n\r\n            // Make sure every time the Canvas is mounted the props are passed to the showing nodes\r\n            this.updateEdgesAndFuncs();\r\n\r\n            this.setState({\r\n                canvasSize: {\r\n                    width,\r\n                    height,\r\n                },\r\n                stage: {\r\n                    stageScale: 1,\r\n                    stageX: width / 2 - (showingNodes[0].props.x + 300 / 2),\r\n                    stageY: height / 10 - (showingNodes[0].props.y + 30 / 2),\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: CanvasPropsAndRedux) {\r\n        // If the proof changed\r\n        if (prevProps.proof !== this.props.proof) {\r\n            this.updateEdgesAndFuncs();\r\n        }\r\n    }\r\n\r\n    updateEdgesAndFuncs() {\r\n        const { showingNodes, showingEdges } = this.state;\r\n        const { proof } = this.props;\r\n\r\n        // Update edges\r\n        proof.forEach((node) => {\r\n            if (showingNodes[node.parents[0]]) {\r\n                node.parents.forEach((parent) => {\r\n                    showingEdges[`${node.id}->${parent}`] = Line(\r\n                        this.LineProps(\r\n                            `${node.id}->${parent}`,\r\n                            showingNodes[node.id].props,\r\n                            showingNodes[parent].props,\r\n                        ),\r\n                    );\r\n                });\r\n            }\r\n        });\r\n        Object.keys(showingNodes).forEach((nodeId: string) => {\r\n            // Make sure a function is updated once\r\n            if (!showingNodes[parseInt(nodeId)].props.setNodeOnFocus.length) {\r\n                const { openDrawer } = this.props;\r\n\r\n                // Set the node functions\r\n                showingNodes[parseInt(nodeId)] = (\r\n                    <Node\r\n                        {...{\r\n                            ...showingNodes[parseInt(nodeId)].props,\r\n                            setNodeOnFocus: this.setNodeOnFocus,\r\n                            toggleNodeSelection: this.toggleNodeSelection,\r\n                            updateNodePosition: this.updateNodePosition,\r\n                            openDrawer: openDrawer,\r\n                            onDragEnd: this.saveNodePosition,\r\n                            createTree: this.createTree,\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n        });\r\n        this.setState({ showingEdges, showingNodes });\r\n    }\r\n\r\n    /* NODE MENU ACTIONS */\r\n    foldAllDescendants = (): void => {\r\n        const { nodeOnFocus } = this.state;\r\n        const { foldAllDescendants, reRender } = this.props;\r\n\r\n        reRender();\r\n        foldAllDescendants(nodeOnFocus);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    foldSelectedNodes = (): void => {\r\n        const { nodesSelected } = this.state;\r\n        const { hideNodes, reRender } = this.props;\r\n\r\n        reRender();\r\n        hideNodes(nodesSelected);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    unfold = (): void => {\r\n        const { nodeOnFocus, proof } = this.state;\r\n        const { unhideNodes, reRender } = this.props;\r\n\r\n        // Get the pi node (to be unfold)\r\n        const obj = proof.find((node) => node.id === nodeOnFocus);\r\n        // Get the hidden nodes and their ids\r\n        const hiddenNodes = obj ? (obj.hiddenNodes ? obj.hiddenNodes : []) : [];\r\n        const hiddenIds = hiddenNodes ? hiddenNodes.map((node) => node.id) : [];\r\n\r\n        reRender();\r\n        unhideNodes({ pi: nodeOnFocus, hiddens: hiddenIds });\r\n\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    changeNodeColor = (color: string): void => {\r\n        const { showingNodes, nodesSelected, nodeOnFocus } = this.state;\r\n        const { setVisualInfo } = this.props;\r\n        let { visualInfo } = this.props;\r\n\r\n        // Save the current position\r\n        nodesSelected.forEach((nodeId) => {\r\n            visualInfo = {\r\n                ...visualInfo,\r\n                [nodeId]: {\r\n                    ...visualInfo[nodeId],\r\n                    color: color,\r\n                    selected: false,\r\n                },\r\n            };\r\n        });\r\n        if (!nodesSelected.length && showingNodes[nodeOnFocus]) {\r\n            visualInfo = {\r\n                ...visualInfo,\r\n                [nodeOnFocus]: { ...visualInfo[nodeOnFocus], color: color, selected: false },\r\n            };\r\n        }\r\n\r\n        setVisualInfo(visualInfo);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    toggleNodeSelection = (id: number): void => {\r\n        let { nodesSelected } = this.state;\r\n        const { visualInfo, setVisualInfo } = this.props;\r\n\r\n        if (visualInfo[id].selected) {\r\n            nodesSelected = nodesSelected.filter((nodeId) => nodeId !== id);\r\n        } else {\r\n            nodesSelected.push(id);\r\n        }\r\n\r\n        // Save the current position\r\n        setVisualInfo({\r\n            ...visualInfo,\r\n            [id]: {\r\n                ...visualInfo[id],\r\n                selected: !visualInfo[id].selected,\r\n            },\r\n        });\r\n\r\n        this.setState({ nodesSelected });\r\n    };\r\n\r\n    /*TREE*/\r\n    createTree = (id: number): TreeNode[] => {\r\n        return this.props.createTree(this.state.proof, id);\r\n    };\r\n\r\n    /* UTILS */\r\n    setNodeOnFocus = (id: number): void => {\r\n        this.setState({ nodeOnFocus: id });\r\n    };\r\n\r\n    LineProps = (key: string, from: NodeProps, to: NodeProps): LineProps => ({\r\n        key,\r\n        points: [from.x + 150, from.y, to.x + 150, to.y + 105],\r\n    });\r\n\r\n    saveNodePosition = (): void => {\r\n        const { visualInfo, setVisualInfo } = this.props;\r\n        const { showingNodes } = this.state;\r\n\r\n        // Get the current position of the nodes and create a proofState with them included\r\n        setVisualInfo(Canvas.copyNodePosition(visualInfo, showingNodes));\r\n    };\r\n\r\n    updateNodePosition = (key: number, x: number, y: number): void => {\r\n        const { showingNodes, showingEdges } = this.state;\r\n\r\n        showingNodes[key] = <Node {...{ ...showingNodes[key].props, x, y }} />;\r\n\r\n        Object.keys(showingEdges)\r\n            .filter((edgeKey) => edgeKey.indexOf(key.toString()) !== -1)\r\n            .forEach((edge) => {\r\n                const [from, to] = edge.split('->').map((x) => parseInt(x));\r\n                showingEdges[edge] = Line(this.LineProps(edge, showingNodes[from].props, showingNodes[to].props));\r\n            });\r\n        this.setState({ showingNodes, showingEdges });\r\n    };\r\n\r\n    render(): JSX.Element {\r\n        const { canvasSize, stage, showingNodes, showingEdges, nodesSelected, nodeOnFocus, proof } = this.state;\r\n        const color = showingNodes[nodeOnFocus] ? showingNodes[nodeOnFocus].props.color : '';\r\n        const found = proof.find((o) => o.id === nodeOnFocus);\r\n\r\n        return (\r\n            <div>\r\n                <Menu\r\n                    unfold={this.unfold}\r\n                    foldSelectedNodes={this.foldSelectedNodes}\r\n                    foldAllDescendants={this.foldAllDescendants}\r\n                    changeNodeColor={this.changeNodeColor}\r\n                    options={{\r\n                        unfold: showingNodes[nodeOnFocus] ? Boolean(showingNodes[nodeOnFocus].props.nHided) : false,\r\n                        foldSelected: nodesSelected.length && nodesSelected.includes(nodeOnFocus) ? true : false,\r\n                        foldAllDescendants:\r\n                            Boolean(found?.children.length) && !Boolean(found?.hiddenNodes?.length) && found?.id != 0,\r\n                    }}\r\n                    currentColor={color}\r\n                ></Menu>\r\n                <Stage\r\n                    draggable\r\n                    onDragMove={() => null}\r\n                    onDragEnd={() => null}\r\n                    width={canvasSize.width}\r\n                    height={canvasSize.height}\r\n                    onWheel={(e) => this.setState({ stage: handleWheel(e) })}\r\n                    scaleX={stage.stageScale}\r\n                    scaleY={stage.stageScale}\r\n                    x={stage.stageX}\r\n                    y={stage.stageY}\r\n                    onContextMenu={(e) => e.evt.preventDefault()}\r\n                >\r\n                    <Layer>\r\n                        {Object.keys(showingEdges).length > 0 &&\r\n                            Object.keys(showingEdges).map(function (key) {\r\n                                return showingEdges[key];\r\n                            })}\r\n                        {Object.keys(showingNodes).length > 0 &&\r\n                            Object.keys(showingNodes).map(\r\n                                (value: string): JSX.Element => showingNodes[parseInt(value)],\r\n                            )}\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState, ownProps: CanvasProps) {\r\n    return {\r\n        visualInfo: selectVisualInfo(state),\r\n        nodeFindData: selectFindData(state),\r\n        renderData: selectRenderData(state),\r\n        ...ownProps,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    hideNodes,\r\n    unhideNodes,\r\n    foldAllDescendants,\r\n    applyView,\r\n    setVisualInfo,\r\n    findNode,\r\n    reRender,\r\n    addRenderCount,\r\n    blockRenderNewFile,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Canvas);\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Classes, Tree, TreeNodeInfo } from '@blueprintjs/core';\r\nimport { TreeProps } from '../../interfaces/interfaces';\r\nimport { castProofNodeToTreeNode } from '../VisualizerStage/VisualizerStage';\r\n\r\nconst VisualizerTree: React.FC<TreeProps> = ({ darkTheme, proof, positionMap, content, setNodeInfo }: TreeProps) => {\r\n    // STATES:\r\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\r\n    const [nodes, setNodes] = useState(content);\r\n    const [selected, setSelected] = useState(NaN);\r\n\r\n    // USE EFFECT:\r\n    useEffect(() => setNodes(content), [content]);\r\n\r\n    // UTILS:\r\n    const forEachNode = (nodes: TreeNodeInfo[], callback: (node: TreeNodeInfo) => void) => {\r\n        if (nodes == null) {\r\n            return;\r\n        }\r\n\r\n        for (const node of nodes) {\r\n            callback(node);\r\n            forEachNode(node.childNodes ? node.childNodes : [], callback);\r\n        }\r\n    };\r\n\r\n    const handleNodeClick = (nodeData: any, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\r\n        const toBeShow: any = selected !== nodeData.id ? nodeData : nodes[0];\r\n        setNodeInfo({\r\n            rule: toBeShow.rule ? toBeShow.rule : '',\r\n            args: toBeShow.args ? toBeShow.args : '',\r\n            conclusion: toBeShow.conclusion ? toBeShow.conclusion : '',\r\n            nHided: toBeShow.nHided ? toBeShow.nHided : 0,\r\n            nDescendants: toBeShow.descendants,\r\n            hiddenNodes: toBeShow.hiddenNodes,\r\n            dependencies: toBeShow.dependencies,\r\n        });\r\n        const originallySelected = nodeData.isSelected;\r\n\r\n        // Set all the nodes to be not selected\r\n        if (!e.shiftKey) forEachNode(nodes, (n) => (n.isSelected = false));\r\n\r\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\r\n        setSelected(selected === nodeData.id ? NaN : nodeData.id);\r\n    };\r\n\r\n    const handleNodeCollapse = (nodeData: TreeNodeInfo) => {\r\n        nodeData.isExpanded = false;\r\n        forceUpdate();\r\n    };\r\n\r\n    const handleNodeExpand = (nodeData: TreeNodeInfo) => {\r\n        nodeData.isExpanded = true;\r\n        if (nodeData.hasCaret && !nodeData.childNodes?.length) {\r\n            const currentNode = proof[positionMap[nodeData.id]];\r\n            currentNode.children.forEach((c) => {\r\n                const child = proof[positionMap[c]];\r\n                nodeData.childNodes?.push(castProofNodeToTreeNode(child));\r\n            });\r\n        }\r\n        forceUpdate();\r\n    };\r\n\r\n    return (\r\n        <div style={{ backgroundColor: darkTheme ? '#394b59' : 'white' }}>\r\n            <Tree\r\n                contents={nodes}\r\n                onNodeClick={handleNodeClick}\r\n                onNodeCollapse={handleNodeCollapse}\r\n                onNodeExpand={handleNodeExpand}\r\n                className={Classes.ELEVATION_0}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerTree;\r\n","interface Line {\r\n    value: string;\r\n    indentLevel: number;\r\n}\r\n\r\nclass Let {\r\n    name: string;\r\n    value: string;\r\n    lines: Line[];\r\n    biggerID: number;\r\n    isExpanded: boolean;\r\n    externalLets: { [key: string]: { let: Let; idx: number[] } };\r\n\r\n    constructor(name: string, letText: string, letsList: { [key: string]: Let }, indices: { [key: number]: string }) {\r\n        this.name = name;\r\n        this.value = letText;\r\n        this.lines = [{ value: letText, indentLevel: 0 }];\r\n        this.biggerID = 0;\r\n        this.isExpanded = false;\r\n\r\n        this.externalLets = {};\r\n        Object.keys(indices).forEach((key) => {\r\n            const numKey = Number(key);\r\n            const letName = indices[numKey];\r\n            this.externalLets[letName] = {\r\n                let: letsList[letName],\r\n                idx: this.externalLets[letName] ? [...this.externalLets[letName].idx, numKey] : [numKey],\r\n            };\r\n        });\r\n    }\r\n\r\n    getTextWidth = (text: string, font: string): number => {\r\n        const canvas = document.createElement('canvas');\r\n        const context = canvas.getContext('2d');\r\n        let size = 0;\r\n        if (context) {\r\n            context.font = font;\r\n            size = context.measureText(text).width;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    expandValue = (shouldUpdate = false): string => {\r\n        const keyList = Object.keys(this.externalLets).map((key) => this.externalLets[key].let.name);\r\n        let letText = this.value;\r\n\r\n        // Iterate from the last to the first external let\r\n        for (let i = keyList.length - 1; i >= 0; i--) {\r\n            const letName = keyList[i];\r\n\r\n            // For each let, iterate through all the indexes they show up inside the string\r\n            for (let k = this.externalLets[letName].idx.length - 1; k >= 0; k--) {\r\n                const idx = this.externalLets[letName].idx[k];\r\n\r\n                // Expand all the terms\r\n                letText =\r\n                    letText.substring(0, idx) +\r\n                    this.externalLets[letName].let.expandValue() +\r\n                    letText.substring(idx + letName.length, letText.length);\r\n            }\r\n        }\r\n        if (shouldUpdate) {\r\n            this.lines = [{ value: letText, indentLevel: 0 }];\r\n            this.biggerID = 0;\r\n        }\r\n        return letText;\r\n    };\r\n\r\n    expandPartialy = (externalRef: Let, letIdx: number): string => {\r\n        const key = externalRef.name;\r\n        const indentedText = this.printLines();\r\n\r\n        let lastLine = 0,\r\n            count = 0,\r\n            i;\r\n        // Iterates through the first lines until the point we reach the changed line\r\n        for (i = 0; i < this.lines.length; i++) {\r\n            lastLine = this.lines[i].value.length + 4 * this.lines[i].indentLevel + 1;\r\n            count += lastLine;\r\n            if (letIdx < count) break;\r\n        }\r\n        // New index (points to the start of the line content (ignores initial indent white space))\r\n        const newIdx = letIdx - (count - lastLine + 4 * this.lines[i].indentLevel);\r\n\r\n        // Update the new line to the new content\r\n        this.lines[i].value =\r\n            this.lines[i].value.substring(0, newIdx) +\r\n            externalRef.value +\r\n            this.lines[i].value.substring(newIdx + key.length, this.lines[i].value.length);\r\n\r\n        // Returns the indented text with the content to be replaced\r\n        return (\r\n            indentedText.substring(0, letIdx) +\r\n            externalRef.value +\r\n            indentedText.substring(letIdx + key.length, indentedText.length)\r\n        );\r\n    };\r\n\r\n    shrinkValue = (): string => {\r\n        this.lines = [{ value: this.value, indentLevel: 0 }];\r\n        this.biggerID = 0;\r\n        return this.value;\r\n    };\r\n\r\n    fitsTheWindow = (windowSize: number, font: string): boolean => {\r\n        const line = this.lines[this.biggerID];\r\n        const size = this.getTextWidth(`${'    '.repeat(line.indentLevel)}${line.value}`, font);\r\n        return size < windowSize;\r\n    };\r\n\r\n    indent = (windowSize: number, mode: boolean, font: string): string => {\r\n        let someDoesntFit;\r\n        if (mode) someDoesntFit = true;\r\n        else someDoesntFit = this.getTextWidth(this.lines[this.biggerID].value, font) < windowSize ? false : true;\r\n\r\n        // While there are lines that doesn't fit the window size\r\n        while (someDoesntFit) {\r\n            const { lines, biggerID } = this;\r\n            const newLines: Line[] = [];\r\n            const thisLevel = lines[biggerID].indentLevel;\r\n            const thisLine = lines[biggerID].value;\r\n\r\n            let lastSpace = -1,\r\n                lastUsedSpace = -1,\r\n                lastOpenParenthesis = -1,\r\n                indent = lines[biggerID].indentLevel - 1,\r\n                biggestSize = 0,\r\n                newBiggerID = 0;\r\n\r\n            // Iterate through the line and calculate the indentation levels\r\n            for (let i = 0; i < thisLine.length; i++) {\r\n                const c = thisLine[i];\r\n                // Opening parenthesis\r\n                if (c === '(') {\r\n                    indent++;\r\n                    // If it's one of the arguments of the operation\r\n                    if (indent === thisLevel + 1) lastOpenParenthesis = i;\r\n                }\r\n                // Closing parenthesis\r\n                else if (c === ')') {\r\n                    // If it's the end of this line\r\n                    if (indent === thisLevel) {\r\n                        // If the last argument was not inserted\r\n                        if (thisLine[i - 1] !== ')') {\r\n                            newLines.push({\r\n                                value: thisLine.substring(lastSpace + 1, i),\r\n                                indentLevel: indent + 1,\r\n                            });\r\n                        }\r\n                        newLines.push({ value: ')', indentLevel: indent });\r\n                    }\r\n                    // If it's the end of this argument\r\n                    else if (indent === thisLevel + 1) {\r\n                        newLines.push({\r\n                            value: thisLine.substring(lastOpenParenthesis, i + 1),\r\n                            indentLevel: indent,\r\n                        });\r\n                    }\r\n                    indent--;\r\n                }\r\n                // If a new space is detected in the current identation level\r\n                //   and the last argument is not between parenthesis\r\n                else if (c === ' ') {\r\n                    lastSpace = i;\r\n\r\n                    if (indent === thisLevel) {\r\n                        if (thisLine[i - 1] !== ')') {\r\n                            newLines.push({\r\n                                value: thisLine.substring(lastUsedSpace + 1, i),\r\n                                indentLevel: newLines.length ? indent + 1 : indent,\r\n                            });\r\n                        }\r\n                        lastUsedSpace = i;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Insert new lines if happend some indentation\r\n            if (newLines.length > 0) this.lines.splice(biggerID, 1, ...newLines);\r\n\r\n            // Find the new biggest line\r\n            this.lines.forEach((line, id) => {\r\n                // Get the size of this new line\r\n                const thisSize = this.getTextWidth(`${'    '.repeat(line.indentLevel)}${line.value}`, font);\r\n                if (thisSize > biggestSize) {\r\n                    biggestSize = thisSize;\r\n                    newBiggerID = id;\r\n                }\r\n            });\r\n\r\n            this.biggerID = newBiggerID;\r\n\r\n            // If the biggest size fits the window or no new line was found (minimal indentation)\r\n            if (biggestSize < windowSize || newLines.length < 1) someDoesntFit = false;\r\n        }\r\n        return this.printLines();\r\n    };\r\n\r\n    groupUp = (): string => {\r\n        let original = '';\r\n        // Group up all the lines into one single string\r\n        this.lines.forEach((line, id, self) => {\r\n            original += line.value;\r\n            if (id < self.length - 1 && self[id + 1].value !== ')') {\r\n                original += ' ';\r\n            }\r\n        });\r\n        return original;\r\n    };\r\n\r\n    printLines = (): string => {\r\n        return this.lines.reduce((ac, line) => (ac += `${'    '.repeat(line.indentLevel)}${line.value}\\n`), '');\r\n    };\r\n}\r\n\r\nexport default Let;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { LetRenderProps } from '../../interfaces/interfaces';\r\nimport { renderLetKind } from '../../interfaces/enum';\r\nimport Let from './let';\r\nimport { Pre } from '@blueprintjs/core';\r\n\r\nconst font = '13px monospace';\r\n\r\nconst LetRender: React.FC<LetRenderProps> = ({\r\n    id,\r\n    toRender,\r\n    letMap,\r\n    shouldExpand,\r\n    shouldRevert,\r\n    dispatchExpansion,\r\n}: LetRenderProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const widthRef = useRef(0);\r\n    const [resizeMode, setResizeMode] = useState(0);\r\n    const [letMapS, setLetMapS] = useState(\r\n        (() => {\r\n            const newMap = { ...letMap };\r\n            if (toRender[0] !== '(' && toRender[toRender.length] !== ')') {\r\n                toRender = `(${toRender})`;\r\n            }\r\n            newMap['this'] = toRender;\r\n            return newMap;\r\n        })(),\r\n    );\r\n\r\n    const initializeLet = (key = 'this', lets: { [key: string]: Let } = {}) => {\r\n        const currentLet = letMapS[key];\r\n        const indices: { [key: number]: string } = {};\r\n\r\n        // Finds all occurences of let in the currentLet\r\n        [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n            if (match.index) indices[match.index] = match[0];\r\n        });\r\n\r\n        // Call recursive for all the external lets\r\n        Object.keys(indices).forEach((indice) => {\r\n            initializeLet(indices[Number(indice)], lets);\r\n        });\r\n\r\n        // If this let was not created yet\r\n        if (Object.keys(lets).indexOf(key) === -1) {\r\n            lets[key] = new Let(key, currentLet, lets, indices);\r\n        }\r\n\r\n        return lets;\r\n    };\r\n    const letsRef = useRef<{ [key: string]: Let }>(initializeLet());\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Handler to call on window resize and set the value column width\r\n        function handleResize() {\r\n            const width = widthRef.current;\r\n\r\n            const newWidth = document.getElementsByClassName(`let-render-${id}`)[0].clientWidth - 30;\r\n            width === newWidth ? setResizeMode(1) : width > newWidth ? setResizeMode(0) : setResizeMode(2);\r\n\r\n            widthRef.current = newWidth;\r\n        }\r\n\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Expand\r\n        if (shouldExpand) {\r\n            expandAll('this');\r\n            dispatchExpansion({ type: renderLetKind.EXPAND, payload: false });\r\n        }\r\n        // Revert\r\n        else if (shouldRevert) {\r\n            revertLet('this');\r\n            dispatchExpansion({ type: renderLetKind.REVERT, payload: false });\r\n        }\r\n    }, [shouldExpand, shouldRevert]);\r\n\r\n    const expandLet = (parent: string, key: string, letIdx: number) => {\r\n        const lets = letsRef.current;\r\n\r\n        const externalRef = lets[key];\r\n        lets[parent].isExpanded = true;\r\n        letMapS[parent] = lets[parent].expandPartialy(externalRef, letIdx);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const expandAll = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        lets[key].isExpanded = true;\r\n        letMapS[key] = lets[key].expandValue(true);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const revertLet = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        // Only when is expanded\r\n        if (lets[key].isExpanded) {\r\n            lets[key].isExpanded = false;\r\n            letMapS[key] = lets[key].shrinkValue();\r\n            setLetMapS({ ...letMapS });\r\n        }\r\n    };\r\n\r\n    const renderLet = (): JSX.Element => {\r\n        const lets = letsRef.current;\r\n        const width = widthRef.current;\r\n        const key = 'this';\r\n\r\n        // Waits for the width to be updated and the DOM element to be updated\r\n        if (width) {\r\n            let currentLet = letMapS[key];\r\n            let indices: { [key: number]: string } = {};\r\n\r\n            // Finds all occurences of let in the currentLet\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index !== undefined) indices[match.index] = match[0];\r\n            });\r\n\r\n            // If doesn't fits, then indent\r\n            if (!lets[key].fitsTheWindow(width, font)) {\r\n                currentLet = lets[key].indent(width, true, font);\r\n                letMapS[key] = currentLet;\r\n\r\n                indices = {};\r\n                // Finds all occurences of let in the currentLet after indentation\r\n                [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                    if (match.index) indices[match.index] = match[0];\r\n                });\r\n            }\r\n            // If fits\r\n            else {\r\n                // Only in the momment the page size is growing and the line is broken\r\n                if (resizeMode >= 0 && lets[key].lines.length > 1) {\r\n                    // Reset the line\r\n                    lets[key].lines = [\r\n                        { value: lets[key].isExpanded ? lets[key].groupUp() : lets[key].value, indentLevel: 0 },\r\n                    ];\r\n                    lets[key].biggerID = 0;\r\n\r\n                    // Indent it again\r\n                    currentLet = lets[key].indent(width, false, font);\r\n                    letMapS[key] = currentLet;\r\n\r\n                    indices = {};\r\n                    // Finds all occurences of let in the currentLet after indentation\r\n                    [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                        if (match.index) indices[match.index] = match[0];\r\n                    });\r\n                }\r\n            }\r\n\r\n            const arr: (JSX.Element | string)[] = [];\r\n            let start = 0;\r\n\r\n            // Slice the currentLet into an array with strings and JSX elements\r\n            Object.keys(indices).forEach((index, i, self) => {\r\n                const idx = Number(index);\r\n                const thisLet = indices[idx];\r\n\r\n                // Add the elements to the arr\r\n                arr.push(currentLet.substring(start, idx));\r\n                arr.push(\r\n                    <a\r\n                        className={darkTheme ? 'let-literal-or' : 'let-literal'}\r\n                        onClick={() => {\r\n                            expandLet(key, thisLet, idx);\r\n                        }}\r\n                    >\r\n                        {thisLet}\r\n                    </a>,\r\n                );\r\n                // Defines a new start\r\n                start = idx + thisLet.length;\r\n\r\n                // If it's the last let\r\n                if (i === self.length - 1) {\r\n                    arr.push(currentLet.substring(start, currentLet.length));\r\n                }\r\n            });\r\n\r\n            // If there is a let in this current let\r\n            if (Object.keys(indices).length) {\r\n                return (\r\n                    <span className=\"let-instance\" style={{ overflowWrap: 'break-word' }}>\r\n                        {arr}\r\n                    </span>\r\n                );\r\n            } else {\r\n                return (\r\n                    <span className=\"let-instance\" style={{ overflowWrap: 'break-word' }}>\r\n                        {currentLet}\r\n                    </span>\r\n                );\r\n            }\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    return (\r\n        <Pre\r\n            className={`let-render-${id}`}\r\n            style={{ maxHeight: '300px', overflow: 'auto', margin: '0', whiteSpace: 'pre-wrap' }}\r\n        >\r\n            {renderLet()}\r\n        </Pre>\r\n    );\r\n};\r\n\r\nexport default LetRender;\r\n","import React, { useState, useReducer, useEffect } from 'react';\r\n\r\nimport { Icon, Collapse, Pre } from '@blueprintjs/core';\r\n\r\nimport '../../../scss/VisualizerDirectoryStyle.scss';\r\nimport { useAppSelector } from '../../../store/hooks';\r\nimport { selectTheme } from '../../../store/features/theme/themeSlice';\r\nimport { NodeInfo, DirectoryStyleProps } from '../../../interfaces/interfaces';\r\nimport { drawerHelpersKind, renderLetKind } from '../../../interfaces/enum';\r\nimport VisualizerTree from '../../VisualizerTree/VisualizerTree';\r\nimport { selectLetMap, selectOriginalProof } from '../../../store/features/proof/proofSlice';\r\nimport LetRender from '../../VisualizerLetDrawer/LetRender';\r\n\r\nconst VisualizerDirectoryStyle: React.FC<DirectoryStyleProps> = ({\r\n    proofTree,\r\n    ruleHelper,\r\n    indent,\r\n    translate,\r\n}: DirectoryStyleProps) => {\r\n    const letMap = useAppSelector(selectLetMap);\r\n    const proof = useAppSelector(selectOriginalProof);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const [nodeInfo, setNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n    const [[ruleHelperIsOpen, argsHelperIsOpen, concHelperIsOpen], dispatchHelper] = useReducer(\r\n        (state: boolean[], action: { type: drawerHelpersKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            // Act over all the positions\r\n            if (type === drawerHelpersKind.ALL) {\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = payload;\r\n                }\r\n            }\r\n            // If wanna set a position\r\n            else if (payload) {\r\n                // Reset everything and set the wanted\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = i === type ? payload : false;\r\n                }\r\n            }\r\n            // If wanna only reset a position\r\n            else state[type] = payload;\r\n\r\n            return [...state];\r\n        },\r\n        // Rule, args, conclusion\r\n        [false, false, false],\r\n    );\r\n    const [[expandAll, revertAll], dispatchLetExpansion] = useReducer(\r\n        (state: boolean[], action: { type: renderLetKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            for (let i = 0; i < state.length; i++) {\r\n                state[i] = i === type ? payload : false;\r\n            }\r\n\r\n            return [...state];\r\n        },\r\n        // Expand, revert\r\n        [false, false],\r\n    );\r\n    const [positionMap, setMap] = useState<any>({});\r\n    const [renderID, increaseRenderID] = useReducer((x) => x + 1, 0);\r\n\r\n    useEffect(() => {\r\n        const _map: any = {};\r\n        // Map the { [node id]: list array id }\r\n        proof.forEach((n, id) => (_map[n.id] = id));\r\n        setMap(_map);\r\n    }, [proof]);\r\n\r\n    useEffect(() => {\r\n        increaseRenderID();\r\n    }, [nodeInfo]);\r\n\r\n    const nodeInfoTable = () => {\r\n        return (\r\n            <table\r\n                id=\"table-node-info\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Property</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <strong>RULE </strong>\r\n                            <Icon\r\n                                id=\"icon\"\r\n                                icon=\"help\"\r\n                                onClick={() => {\r\n                                    dispatchHelper({ type: drawerHelpersKind.RULE, payload: !ruleHelperIsOpen });\r\n                                }}\r\n                            ></Icon>\r\n                        </td>\r\n                        <td>\r\n                            {nodeInfo.rule}\r\n                            <Collapse isOpen={ruleHelperIsOpen}>\r\n                                <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                    {ruleHelper(nodeInfo.rule)}\r\n                                </Pre>\r\n                            </Collapse>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.args && (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>ARGS</strong>{' '}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.ARGS,\r\n                                                payload: !argsHelperIsOpen,\r\n                                            });\r\n                                        }}\r\n                                    ></Icon>\r\n                                ) : null}\r\n                            </td>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                {nodeInfo.args}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Collapse isOpen={argsHelperIsOpen}>\r\n                                        <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                            {indent(translate(nodeInfo.args))}\r\n                                        </Pre>\r\n                                    </Collapse>\r\n                                ) : null}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n\r\n                    <tr>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            <strong>CONCLUSION</strong>{' '}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <>\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.CONC,\r\n                                                payload: !concHelperIsOpen,\r\n                                            });\r\n                                            dispatchLetExpansion({\r\n                                                type: renderLetKind.EXPAND,\r\n                                                payload: true,\r\n                                            });\r\n                                        }}\r\n                                    />\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"undo\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.CONC,\r\n                                                payload: false,\r\n                                            });\r\n                                            dispatchLetExpansion({\r\n                                                type: renderLetKind.REVERT,\r\n                                                payload: true,\r\n                                            });\r\n                                        }}\r\n                                    />\r\n                                </>\r\n                            ) : null}\r\n                        </td>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <LetRender\r\n                                    key={renderID}\r\n                                    id={0}\r\n                                    toRender={nodeInfo.conclusion}\r\n                                    letMap={letMap}\r\n                                    shouldExpand={expandAll}\r\n                                    shouldRevert={revertAll}\r\n                                    dispatchExpansion={dispatchLetExpansion}\r\n                                />\r\n                            ) : (\r\n                                nodeInfo.conclusion\r\n                            )}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.nDescendants ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#DESCENDANTS</strong>\r\n                            </td>\r\n                            <td>{nodeInfo.nDescendants}</td>\r\n                        </tr>\r\n                    ) : null}\r\n\r\n                    {nodeInfo.nHided ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#HIDDEN</strong>\r\n                            </td>\r\n                            <td>{`[${nodeInfo.hiddenNodes.map((node) => ' ' + node)} ]`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                    {nodeInfo.dependencies.length ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>DEPENDENCIES</strong>\r\n                            </td>\r\n                            <td>{`${nodeInfo.dependencies.map(\r\n                                (dependency) => ` ${dependency.piId}: [${dependency.depsId.map((dep) => ' ' + dep)} ] `,\r\n                            )}`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"dir-style\"\r\n            style={{\r\n                backgroundColor: darkTheme ? 'rgb(57, 75, 89)' : 'white',\r\n                height:\r\n                    window.innerHeight - (document.getElementsByClassName('bp3-navbar')[0] as HTMLElement).offsetHeight,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    width: '50%',\r\n                    height: '100%',\r\n                    float: 'left',\r\n                    clear: 'none',\r\n                    borderRight: '1px solid black',\r\n                    overflow: 'auto',\r\n                }}\r\n            >\r\n                <VisualizerTree\r\n                    darkTheme={darkTheme}\r\n                    proof={proof}\r\n                    positionMap={positionMap}\r\n                    content={proofTree}\r\n                    setNodeInfo={setNodeInfo}\r\n                ></VisualizerTree>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    width: '50%',\r\n                    height: '100%',\r\n                    float: 'left',\r\n                    clear: 'none',\r\n                }}\r\n            >\r\n                {nodeInfoTable()}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerDirectoryStyle;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Drawer, Position, Classes, Icon, Collapse, Pre, TreeNodeInfo } from '@blueprintjs/core';\r\nimport Canvas from './Canvas/VisualizerCanvas';\r\nimport VisualizerTree from '../VisualizerTree/VisualizerTree';\r\nimport VisualizerDirectoryStyle from './VisualizerDirectoryStyle/VisualizerDirectoryStyle';\r\n\r\nimport '../../scss/VisualizerStage.scss';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectFileCount } from '../../store/features/file/fileSlice';\r\nimport { selectStyle, selectLetMap, selectProof } from '../../store/features/proof/proofSlice';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { NodeInfo, NodeInterface, TreeNode } from '../../interfaces/interfaces';\r\nimport { renderLetKind, drawerHelpersKind } from '../../interfaces/enum';\r\nimport LetRender from '../VisualizerLetDrawer/LetRender';\r\n\r\nfunction ruleHelper(rule: string) {\r\n    switch (rule.split(' ')[0]) {\r\n        case 'π':\r\n            return 'This node hides some parts of the proof, you can unfold it.';\r\n        case 'ASSUME':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Assumption (a leaf)\\nChildren: none\\nArguments: (F)\\n--------------\\nConclusion: F\\n\\nThis rule has special status, in that an application of assume is an open leaf in a proof that is not (yet) justified. An assume leaf is analogous to a free variable in a term, where we say \"F is a free assumption in proof P\" if it contains an application of F that is not  bound by SCOPE.'\r\n            );\r\n        case 'SCOPE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Scope (a binder for assumptions)\\nChildren: (P:F)\\nArguments: (F1, ..., Fn)\\n--------------\\nConclusion: (=> (and F1 ... Fn) F) or (not (and F1 ... Fn)) if F is false\\n\\nThis rule has a dual purpose with ASSUME. It is a way to close assumptions in a proof. We require that F1 ... Fn are free assumptions in P and say that F1, ..., Fn are not free in (SCOPE P). In other words, they are bound by this application. For example, the proof node: (SCOPE (ASSUME F) :args F) has the conclusion (=> F F) and has no free assumptions. More generally, a proof with no free assumptions always concludes a valid formula.'\r\n            );\r\n        case 'SUBS':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Substitution\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids)?)\\n---------------------------------------------------------------\\nConclusion: (= t t*sigma{ids}(Fn)*...*sigma{ids}(F1))\\nwhere sigma{ids}(Fi) are substitutions, which notice are applied in reverse order. Notice that ids is a MethodId identifier, which determines how to convert the formulas F1, ..., Fn into substitutions.'\r\n            );\r\n        case 'REWRITE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Rewrite\\nChildren: none\\nArguments: (t, (idr)?)\\n----------------------------------------\\nConclusion: (= t Rewriter{idr}(t))\\nwhere idr is a MethodId identifier, which determines the kind of rewriter to apply, e.g. Rewriter::rewrite.'\r\n            );\r\n        case 'EVALUATE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Evaluate\\nChildren: none\\n\\nArguments: (t)\\n----------------------------------------\\nConclusion: (= t Evaluator::evaluate(t))\\nNote this is equivalent to: (REWRITE t MethodId::RW_EVALUATE)'\r\n            );\r\n        case 'MACRO_SR_EQ_INTRO':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, we provide a term t and conclude that it is equal to its rewritten form under a (proven) substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: (= t t')\\nwhere t' is Rewriter{idr}(t*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nIn other words, from the point of view of Skolem forms, this rule transforms t to t' by standard substitution + rewriting.\\n\\nThe arguments ids, ida and idr are optional and specify the identifier of the substitution, the substitution application and rewriter respectively to be used.\"\r\n            );\r\n        case 'MACRO_SR_PRED_INTRO':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, we provide a formula F and conclude it, under the condition that it rewrites to true under a proven substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (F, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == true where ids and idr are method identifiers.\\n\\nMore generally, this rule also holds when: Rewriter::rewrite(toOriginal(F')) == true where F' is the result of the left hand side of the equality above. Here, notice that we apply rewriting on the original form of F', meaning that this rule may conclude an F whose Skolem form is justified by the definition of its (fresh) Skolem variables. For example, this rule may justify the conclusion (= k t) where k is the purification Skolem for t, e.g. where the original form of k is t.\\n\\nFurthermore, notice that the rewriting and substitution is applied only within the side condition, meaning the rewritten form of the original form of F does not escape this rule.\"\r\n            );\r\n        case 'MACRO_SR_PRED_ELIM':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may conclude its rewritten form under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: ((ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: F'\\nwhere F' is Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)). where ids and idr are method identifiers.\\n\\nWe rewrite only on the Skolem form of F, similar to MACRO_SR_EQ_INTRO.\"\r\n            );\r\n        case 'MACRO_SR_PRED_TRANSFORM':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may provide a formula G and conclude it if F and G are equivalent after rewriting under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: (G, (ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: G\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == Rewriter{idr}(G*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nMore generally, this rule also holds when:\\n  Rewriter::rewrite(toOriginal(F')) == Rewriter::rewrite(toOriginal(G'))\\nwhere F' and G' are the result of each side of the equation above. Here, original forms are used in a similar manner to MACRO_SR_PRED_INTRO above.\"\r\n            );\r\n        case 'REMOVE_TERM_FORMULA_AXIOM':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Remove Term Formulas Axiom\\nChildren: none\\nArguments: (t)\\n---------------------------------------------------------------\\nConclusion: RemoveTermFormulas::getAxiomFor(t).'\r\n            );\r\n        case 'THEORY_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Theory lemma\\nChildren: none\\nArguments: (F, tid)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a (T-valid) theory lemma generated by theory with TheoryId tid. This is a \"coarse-grained\" rule that is used as a placeholder if a theory did not provide a proof for a lemma or conflict.'\r\n            );\r\n        case 'THEORY_REWRITE':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== Theory Rewrite\\nChildren: none\\nArguments: (F, tid, rid)\\n----------------------------------------\\nConclusion: F\\nwhere F is an equality of the form (= t t') where t' is obtained by applying the kind of rewriting given by the method identifier rid, which is one of: { RW_REWRITE_THEORY_PRE, RW_REWRITE_THEORY_POST, RW_REWRITE_EQ_EXT } Notice that the checker for this rule does not replay the rewrite to ensure correctness, since theory rewriter methods are not static. For example, the quantifiers rewriter involves constructing new bound variables that are not guaranteed to be consistent on each call.\"\r\n            );\r\n        case 'PREPROCESS':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on some preprocessing pass, or otherwise F was added as a new assertion by some preprocessing pass.\"\r\n            );\r\n        case 'PREPROCESS_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by some preprocessing pass.'\r\n            );\r\n        case 'THEORY_PREPROCESS':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = Theory::ppRewrite(t) for some theory. Notice this is a \"trusted\" rule.'\r\n            );\r\n        case 'THEORY_PREPROCESS_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by theory preprocessing.'\r\n            );\r\n        case 'THEORY_EXPAND_DEF':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on theory expand definitions.\"\r\n            );\r\n        case 'WITNESS_AXIOM':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an existential (exists ((x T)) (P x)) used for introducing a witness term (witness ((x T)) (P x)).'\r\n            );\r\n        case 'TRUST_REWRITE':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of rewriting that could not be replayed during proof postprocessing.\"\r\n            );\r\n        case 'TRUST_SUBS':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be replayed during proof postprocessing.\"\r\n            );\r\n        case 'TRUST_SUBS_MAP':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be determined by the TrustSubstitutionMap. This inference may contain possibly multiple children corresponding to the formulas used to derive the substitution.\"\r\n            );\r\n        case 'TRUST_SUBS_EQ':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a solved equality of the form (= x t) derived as the solved form of F', where F' is given as a child.\"\r\n            );\r\n        case 'SAT_REFUTATION':\r\n            return (\r\n                rule +\r\n                '\\n\\n========= SAT Refutation for assumption-based unsat cores\\nChildren: (P1, ..., Pn)\\nArguments: none\\n---------------------\\nConclusion: false\\nNote: P1, ..., Pn correspond to the unsat core determined by the SAT solver.'\r\n            );\r\n        case 'RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== Resolution\\nChildren:\\n(P1:C1, P2:C2)\\nArguments: (pol, L)\\n---------------------\\nConclusion: C\\nwhere\\n- C1 and C2 are nodes viewed as clauses, i.e., either an OR node with each children viewed as a literal or a node viewed as a literal. Note that an OR node could also be a literal.\\n- pol is either true or false, representing the polarity of the pivot on the first clause\\n- L is the pivot of the resolution, which occurs as is (resp. under a NOT) in C1 and negatively (as is) in C2 if pol = true (pol = false).\\nC is a clause resulting from collecting all the literals in C1, minus the first occurrence of the pivot or its negation, and C2, minus the first occurrence of the pivot or its negation, according to the policy above. If the resulting clause has a single literal, that literal itself is the result; if it has no literals, then the result is false; otherwise it's an OR node of the resulting literals.\\n\\nNote that it may be the case that the pivot does not occur in the clauses. In this case the rule is not unsound, but it does not correspond to resolution but rather to a weakening of the clause that did not have a literal eliminated.\"\r\n            );\r\n        case 'CHAIN_RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== N-ary Resolution\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined above\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined above\\n- let C_1' = C_1 (from P1),\\n- for each i > 1, let C_i' = C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C = C_n'\"\r\n            );\r\n        case 'FACTORING':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Factoring\\nChildren: (P:C1)\\nArguments: ()\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 is the same and the number of literals in C2 is smaller than that of C1'\r\n            );\r\n        case 'REORDERING':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Reordering\\nChildren: (P:C1)\\nArguments: (C2)\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 are the same and the number of literals in C2 is the same of that of C1'\r\n            );\r\n        case 'MACRO_RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\r\n            );\r\n        case 'MACRO_RESOLUTION_TRUST':\r\n            return (\r\n                rule +\r\n                \"\\n\\nAs MACRO_RESOLUTION but not checked\\n\\nMACRO_RESOLUTION definition:\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\r\n            );\r\n        default:\r\n            return rule;\r\n    }\r\n}\r\n\r\nexport function castProofNodeToTreeNode(node: NodeInterface): TreeNode {\r\n    const label = node.hiddenNodes?.length\r\n        ? // Pi node\r\n          `${node.id} : π ➜ ${node.conclusion}`\r\n        : node.dependencies.length\r\n        ? // Node with dependencies\r\n          `${node.id} : β ➜ ${node.conclusion}`\r\n        : //Normal node\r\n          `${node.id} : ${node.conclusion}`;\r\n\r\n    // Create the node tree\r\n    return {\r\n        id: node.id,\r\n        icon: 'graph',\r\n        label: label,\r\n        secondaryLabel: `${node.rule}`,\r\n        rule: node.rule,\r\n        args: node.args,\r\n        conclusion: node.conclusion,\r\n        parentId: node.parents[0],\r\n        descendants: node.descendants - 1,\r\n        nHided: node.hiddenNodes ? node.hiddenNodes.length : 0,\r\n        hiddenNodes: node.hiddenNodes ? node.hiddenNodes.map((n) => n.id) : [],\r\n        childNodes: [],\r\n        dependencies: node.dependencies,\r\n        parentsId: node.parents,\r\n        hasCaret: Boolean(node.descendants - 1),\r\n    };\r\n}\r\n\r\nfunction createTree(proof: NodeInterface[], id: number): TreeNode[] {\r\n    const rootNode = proof.find((o) => o.id === id);\r\n    const tree: TreeNode[] = [];\r\n\r\n    // Make sure found the root node\r\n    if (rootNode) {\r\n        tree.push(castProofNodeToTreeNode(rootNode));\r\n    }\r\n    return tree;\r\n}\r\n\r\nconst VisualizerStage: React.FC = () => {\r\n    // Proof data\r\n    const letMap = useAppSelector(selectLetMap);\r\n    const proof = useAppSelector(selectProof);\r\n    const fileID = useAppSelector(selectFileCount);\r\n    const style = useAppSelector(selectStyle);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    // Data structures\r\n    const [proofTree, setProofTree] = useState<TreeNodeInfo[]>([]);\r\n    const [nodeInfo, setNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n    const [map, setMap] = useState<any>({});\r\n    // Drawer\r\n    const [[ruleHelperIsOpen, argsHelperIsOpen, concHelperIsOpen], dispatchHelper] = useReducer(\r\n        (state: boolean[], action: { type: drawerHelpersKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            // Act over all the positions\r\n            if (type === drawerHelpersKind.ALL) {\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = payload;\r\n                }\r\n            }\r\n            // If wanna set a position\r\n            else if (payload) {\r\n                // Reset everything and set the wanted\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = i === type ? payload : false;\r\n                }\r\n            }\r\n            // If wanna only reset a position\r\n            else state[type] = payload;\r\n\r\n            return [...state];\r\n        },\r\n        // Rule, args, conclusion\r\n        [false, false, false],\r\n    );\r\n    const [[expandAll, revertAll], dispatchLetExpansion] = useReducer(\r\n        (state: boolean[], action: { type: renderLetKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            for (let i = 0; i < state.length; i++) {\r\n                state[i] = i === type ? payload : false;\r\n            }\r\n\r\n            return [...state];\r\n        },\r\n        // Expand, revert\r\n        [false, false],\r\n    );\r\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n    const [tree, setTree] = useState<TreeNodeInfo[]>([]);\r\n\r\n    // Make sure that a new tree is created only when a new dot is used\r\n    useEffect(() => setProofTree(createTree(proof, 0)), [fileID]);\r\n    useEffect(() => {\r\n        const _map: any = {};\r\n        // Map the { [node id]: list array id }\r\n        proof.forEach((n, id) => (_map[n.id] = id));\r\n        setMap(_map);\r\n    }, [proof]);\r\n\r\n    const openDrawer = (nodeInfo: NodeInfo, tree?: TreeNodeInfo[]) => {\r\n        setNodeInfo(nodeInfo);\r\n        setTree(tree ? tree : []);\r\n        setDrawerIsOpen(true);\r\n    };\r\n\r\n    const nodeInfoTable = (): JSX.Element => {\r\n        return (\r\n            <table\r\n                id=\"table-node-info\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Property</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <strong>RULE </strong>\r\n                            <Icon\r\n                                id=\"icon\"\r\n                                icon=\"help\"\r\n                                onClick={() => {\r\n                                    dispatchHelper({ type: drawerHelpersKind.RULE, payload: !ruleHelperIsOpen });\r\n                                }}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            {nodeInfo.rule}\r\n                            <Collapse isOpen={ruleHelperIsOpen}>\r\n                                <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                    {ruleHelper(nodeInfo.rule)}\r\n                                </Pre>\r\n                            </Collapse>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.args && (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>ARGS</strong>{' '}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.ARGS,\r\n                                                payload: !argsHelperIsOpen,\r\n                                            });\r\n                                        }}\r\n                                    />\r\n                                ) : null}\r\n                            </td>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                {nodeInfo.args}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Collapse isOpen={argsHelperIsOpen}>\r\n                                        <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                            {nodeInfo.args}\r\n                                        </Pre>\r\n                                    </Collapse>\r\n                                ) : null}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n\r\n                    <tr>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            <strong>CONCLUSION</strong>{' '}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <>\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.CONC,\r\n                                                payload: !concHelperIsOpen,\r\n                                            });\r\n                                            dispatchLetExpansion({\r\n                                                type: renderLetKind.EXPAND,\r\n                                                payload: true,\r\n                                            });\r\n                                        }}\r\n                                    />\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"undo\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.CONC,\r\n                                                payload: false,\r\n                                            });\r\n                                            dispatchLetExpansion({\r\n                                                type: renderLetKind.REVERT,\r\n                                                payload: true,\r\n                                            });\r\n                                        }}\r\n                                    />\r\n                                </>\r\n                            ) : null}\r\n                        </td>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <LetRender\r\n                                    id={0}\r\n                                    toRender={nodeInfo.conclusion}\r\n                                    letMap={letMap}\r\n                                    shouldExpand={expandAll}\r\n                                    shouldRevert={revertAll}\r\n                                    dispatchExpansion={dispatchLetExpansion}\r\n                                />\r\n                            ) : (\r\n                                nodeInfo.conclusion\r\n                            )}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.nDescendants ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#DESCENDANTS</strong>\r\n                            </td>\r\n                            <td>{nodeInfo.nDescendants}</td>\r\n                        </tr>\r\n                    ) : null}\r\n\r\n                    {nodeInfo.nHided ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#HIDDEN</strong>\r\n                            </td>\r\n                            <td>{`[${nodeInfo.hiddenNodes.map((node) => ' ' + node)} ]`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                    {nodeInfo.dependencies.length ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>DEPENDENCIES</strong>\r\n                            </td>\r\n                            <td>{`${nodeInfo.dependencies.map(\r\n                                (dependency) => ` ${dependency.piId}: [${dependency.depsId.map((dep) => ' ' + dep)} ] `,\r\n                            )}`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div onContextMenu={(e) => e.preventDefault()}>\r\n            {proof.length > 1 && (\r\n                <>\r\n                    {style === 'graph' ? (\r\n                        <Canvas key={fileID} proof={proof} openDrawer={openDrawer} createTree={createTree} />\r\n                    ) : (\r\n                        <VisualizerDirectoryStyle\r\n                            proofTree={proofTree}\r\n                            ruleHelper={ruleHelper}\r\n                            indent={() => ''}\r\n                            translate={() => ''}\r\n                        />\r\n                    )}\r\n                    <Drawer\r\n                        className={darkTheme ? 'bp3-dark' : ''}\r\n                        autoFocus={true}\r\n                        canEscapeKeyClose={true}\r\n                        canOutsideClickClose={true}\r\n                        enforceFocus={true}\r\n                        hasBackdrop={false}\r\n                        isOpen={drawerIsOpen}\r\n                        position={Position.BOTTOM}\r\n                        usePortal={true}\r\n                        onClose={(e) => {\r\n                            e.preventDefault();\r\n                            setDrawerIsOpen(false);\r\n                            dispatchHelper({ type: drawerHelpersKind.ALL, payload: false });\r\n                        }}\r\n                        icon=\"info-sign\"\r\n                        title=\"Node info\"\r\n                    >\r\n                        <div className={Classes.DRAWER_BODY}>\r\n                            <div style={{ maxHeight: '500px', overflow: 'auto' }}>\r\n                                <VisualizerTree\r\n                                    darkTheme={darkTheme}\r\n                                    proof={proof}\r\n                                    positionMap={map}\r\n                                    content={tree}\r\n                                    setNodeInfo={setNodeInfo}\r\n                                />\r\n                            </div>\r\n                            <div className={Classes.DIALOG_BODY}>{nodeInfoTable()}</div>\r\n                        </div>\r\n                    </Drawer>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerStage;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Classes } from '@blueprintjs/core';\r\n\r\nimport Let from './let';\r\nimport '../../scss/Let.scss';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { selectLetMap } from '../../store/features/proof/proofSlice';\r\nimport { DrawerVisualizerTabProps } from '../../interfaces/interfaces';\r\n\r\nconst font =\r\n    '14px / 18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", Icons16, sans-serif';\r\n\r\nconst VisualizerLetDrawer: React.FC<DrawerVisualizerTabProps> = ({ shouldResize }: DrawerVisualizerTabProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const widthRef = useRef(0);\r\n    const [resizeMode, setResizeMode] = useState(0);\r\n\r\n    const [letMap, setLetMap] = useState({ ...useAppSelector(selectLetMap) });\r\n    const letsRef = useRef<{ [key: string]: Let }>({});\r\n\r\n    // Handler to call on window resize and set the value column width\r\n    function handleResize() {\r\n        const width = widthRef.current;\r\n\r\n        // -22 from the fixed padding size\r\n        const newWidth = document.getElementsByClassName('letMap-value-column')[0].clientWidth - 24;\r\n        width === newWidth ? setResizeMode(1) : width > newWidth ? setResizeMode(0) : setResizeMode(2);\r\n\r\n        widthRef.current = newWidth;\r\n    }\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Init the let ref\r\n        Object.keys(letMap).forEach((key) => {\r\n            const currentLet = letMap[key];\r\n            const indices: { [key: number]: string } = {};\r\n            // Finds all occurences of let in the currentLet\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            letsRef.current[key] = new Let(key, currentLet, letsRef.current, indices);\r\n        });\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        handleResize();\r\n    }, [shouldResize]);\r\n\r\n    const expandLet = (parent: string, key: string, letIdx: number) => {\r\n        const lets = letsRef.current;\r\n\r\n        const externalRef = lets[key];\r\n        lets[parent].isExpanded = true;\r\n        letMap[parent] = lets[parent].expandPartialy(externalRef, letIdx);\r\n        setLetMap({ ...letMap });\r\n    };\r\n\r\n    const expandAll = (key: string) => {\r\n        const thisLet = letsRef.current[key];\r\n        thisLet.isExpanded = true;\r\n        letMap[key] = thisLet.expandValue(true);\r\n        setLetMap({ ...letMap });\r\n    };\r\n\r\n    const revertLet = (key: string) => {\r\n        const thisLet = letsRef.current[key];\r\n        // Only when is expanded\r\n        if (thisLet.isExpanded) {\r\n            thisLet.isExpanded = false;\r\n            letMap[key] = thisLet.shrinkValue();\r\n            setLetMap({ ...letMap });\r\n        }\r\n    };\r\n\r\n    const renderLet = (key: string): JSX.Element => {\r\n        const lets = letsRef.current;\r\n        const width = widthRef.current;\r\n\r\n        // Waits for the width to be updated and the DOM element to be updated\r\n        if (width) {\r\n            let currentLet = letMap[key];\r\n            const thisLet = lets[key];\r\n\r\n            // If doesn't fits, then indent\r\n            if (!thisLet.fitsTheWindow(width, font)) {\r\n                currentLet = thisLet.indent(width, true, font);\r\n                letMap[key] = currentLet;\r\n            }\r\n            // If fits, then only in the momment the page size is growing and the line is broken\r\n            else if (resizeMode >= 0 && thisLet.lines.length > 1) {\r\n                // Reset the line\r\n                thisLet.lines = [{ value: thisLet.isExpanded ? thisLet.groupUp() : thisLet.value, indentLevel: 0 }];\r\n                thisLet.biggerID = 0;\r\n\r\n                // Indent it again\r\n                currentLet = thisLet.indent(width, false, font);\r\n                letMap[key] = currentLet;\r\n            }\r\n\r\n            // Finds all occurences of let in the currentLet\r\n            const indices: { [key: number]: string } = {};\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            const arr: (JSX.Element | string)[] = [];\r\n            let start = 0;\r\n            // Slice the currentLet into an array with strings and JSX elements\r\n            Object.keys(indices).forEach((index, i, self) => {\r\n                const idx = Number(index);\r\n                const thisLet = indices[idx];\r\n\r\n                // Add the elements to the arr\r\n                arr.push(currentLet.substring(start, idx));\r\n                arr.push(\r\n                    <a\r\n                        className={darkTheme ? 'let-literal-or' : 'let-literal'}\r\n                        onClick={() => {\r\n                            expandLet(key, thisLet, idx);\r\n                        }}\r\n                    >\r\n                        {thisLet}\r\n                    </a>,\r\n                );\r\n                // Defines a new start\r\n                start = idx + thisLet.length;\r\n\r\n                // If it's the last let\r\n                if (i === self.length - 1) {\r\n                    arr.push(currentLet.substring(start, currentLet.length));\r\n                }\r\n            });\r\n\r\n            // If there is a let in this current let\r\n            if (Object.keys(indices).length) {\r\n                return <span className=\"let-instance\">{arr}</span>;\r\n            } else {\r\n                return <span className=\"let-instance\">{currentLet}</span>;\r\n            }\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    return (\r\n        <div className={Classes.DIALOG_BODY}>\r\n            <table\r\n                id=\"table-node-info-2\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{ width: '50px' }}>Property</th>\r\n                        <th className=\"letMap-value-column\">Value</th>\r\n                        <th style={{ width: '100px' }}>Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {Object.keys(letMap).map((key, id) => {\r\n                        return (\r\n                            <tr key={id}>\r\n                                <td>\r\n                                    <strong>{key}</strong>\r\n                                </td>\r\n                                <td style={{ width: '100%', whiteSpace: 'pre-wrap' }}>{renderLet(key)}</td>\r\n                                <td style={{ width: '100px', height: '100%' }}>\r\n                                    <Button\r\n                                        onClick={() => expandAll(key)}\r\n                                        className=\"bp3-minimal\"\r\n                                        icon=\"translate\"\r\n                                        text=\"Expand\"\r\n                                    />\r\n                                    <Button\r\n                                        onClick={() => revertLet(key)}\r\n                                        className=\"bp3-minimal\"\r\n                                        icon=\"undo\"\r\n                                        text=\"Revert\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerLetDrawer;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Classes } from '@blueprintjs/core';\r\nimport { selectLetMap, selectTheoryLemmas } from '../../store/features/proof/proofSlice';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport Let from '../VisualizerLetDrawer/let';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { DrawerVisualizerTabProps } from '../../interfaces/interfaces';\r\n\r\nconst font =\r\n    '14px / 18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", Icons16, sans-serif';\r\n\r\nconst VisualizerTheoryLemma: React.FC<DrawerVisualizerTabProps> = ({ shouldResize }: DrawerVisualizerTabProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const letMap = useAppSelector(selectLetMap);\r\n    const widthRef = useRef(0);\r\n\r\n    const [theoryLemmas, setTheoryLemmas] = useState([...useAppSelector(selectTheoryLemmas)]);\r\n    const [resizeMode, setResizeMode] = useState(0);\r\n    const letsRef = useRef<{ [key: string]: Let }>({});\r\n\r\n    // Handler to call on window resize and set the value column width\r\n    function handleResize() {\r\n        const width = widthRef.current;\r\n\r\n        // -22 from the fixed padding size\r\n        const newWidth = document.getElementsByClassName('theoryLemma-value-column')[0].clientWidth - 24;\r\n        width === newWidth ? setResizeMode(1) : width > newWidth ? setResizeMode(0) : setResizeMode(2);\r\n\r\n        widthRef.current = newWidth;\r\n    }\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Init the lets\r\n        Object.keys(letMap).forEach((key) => {\r\n            const currentLet = letMap[key];\r\n\r\n            const indices: { [key: number]: string } = {};\r\n            // Finds all occurences of let in the currentLet\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n            letsRef.current[key] = new Let(key, currentLet, letsRef.current, indices);\r\n        });\r\n\r\n        // Init the theory lemmas\r\n        theoryLemmas.forEach((tl, id) => {\r\n            const indices: { [key: number]: string } = {};\r\n            // Finds all occurences of let in the currentTL\r\n            [...tl.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            letsRef.current[id] = new Let(String(id), tl, letsRef.current, indices);\r\n        });\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        handleResize();\r\n    }, [shouldResize]);\r\n\r\n    const expandLet = (parent: number, key: string, letIdx: number) => {\r\n        const lets = letsRef.current;\r\n        const externalRef = lets[key];\r\n        lets[parent].isExpanded = true;\r\n        theoryLemmas[parent] = lets[parent].expandPartialy(externalRef, letIdx);\r\n        setTheoryLemmas([...theoryLemmas]);\r\n    };\r\n\r\n    const expandAll = (key: number) => {\r\n        const thisLet = letsRef.current[key];\r\n        thisLet.isExpanded = true;\r\n        theoryLemmas[key] = thisLet.expandValue(true);\r\n        setTheoryLemmas([...theoryLemmas]);\r\n    };\r\n\r\n    const revertLet = (key: number) => {\r\n        const thisLet = letsRef.current[key];\r\n        // Only when is expanded\r\n        if (thisLet.isExpanded) {\r\n            thisLet.isExpanded = false;\r\n            theoryLemmas[key] = thisLet.shrinkValue();\r\n            setTheoryLemmas([...theoryLemmas]);\r\n        }\r\n    };\r\n\r\n    const renderLet = (key: number): JSX.Element => {\r\n        const lets = letsRef.current;\r\n        const width = widthRef.current;\r\n\r\n        // Waits for the width to be updated and the DOM element to be updated\r\n        if (width) {\r\n            let currentTL = theoryLemmas[key];\r\n            const thisLet = lets[key];\r\n\r\n            // If doesn't fits, then indent\r\n            if (!thisLet.fitsTheWindow(width, font)) {\r\n                currentTL = thisLet.indent(width, true, font);\r\n                theoryLemmas[key] = currentTL;\r\n            }\r\n            // If fits, then only in the momment the page size is growing and the line is broken\r\n            else if (resizeMode >= 0 && thisLet.lines.length > 1) {\r\n                // Reset the line\r\n                thisLet.lines = [{ value: thisLet.isExpanded ? thisLet.groupUp() : thisLet.value, indentLevel: 0 }];\r\n                thisLet.biggerID = 0;\r\n\r\n                // Indent it again\r\n                currentTL = thisLet.indent(width, false, font);\r\n                theoryLemmas[key] = currentTL;\r\n            }\r\n\r\n            // Finds all occurences of let in the currentTL\r\n            const indices: { [key: number]: string } = {};\r\n            [...currentTL.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            const arr: (JSX.Element | string)[] = [];\r\n            let start = 0;\r\n            // Slice the currentTL into an array with strings and JSX elements\r\n            Object.keys(indices).forEach((index, i, self) => {\r\n                const idx = Number(index);\r\n                const thisLet = indices[idx];\r\n\r\n                // Add the elements to the arr\r\n                arr.push(currentTL.substring(start, idx));\r\n                arr.push(\r\n                    <a\r\n                        className={darkTheme ? 'let-literal-or' : 'let-literal'}\r\n                        onClick={() => {\r\n                            expandLet(key, thisLet, idx);\r\n                        }}\r\n                    >\r\n                        {thisLet}\r\n                    </a>,\r\n                );\r\n                // Defines a new start\r\n                start = idx + thisLet.length;\r\n\r\n                // If it's the last let\r\n                if (i === self.length - 1) {\r\n                    arr.push(currentTL.substring(start, currentTL.length));\r\n                }\r\n            });\r\n\r\n            // If there is a let in this current let\r\n            if (Object.keys(indices).length) {\r\n                return <span className=\"let-instance\">{arr}</span>;\r\n            } else {\r\n                return <span className=\"let-instance\">{currentTL}</span>;\r\n            }\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    return (\r\n        <div className={Classes.DIALOG_BODY}>\r\n            <table\r\n                id=\"table-node-info-2\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%', minWidth: '230px' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"theoryLemma-value-column\">Value</th>\r\n                        <th style={{ width: '100px' }}>Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {theoryLemmas.map((tl, id) => {\r\n                        return (\r\n                            <tr key={id}>\r\n                                <td style={{ width: '100%', whiteSpace: 'pre-wrap' }}>{renderLet(id)}</td>\r\n                                <td style={{ width: '100px', height: '100%' }}>\r\n                                    <Button\r\n                                        onClick={() => expandAll(id)}\r\n                                        className=\"bp3-minimal\"\r\n                                        icon=\"translate\"\r\n                                        text=\"Expand\"\r\n                                    />\r\n                                    <Button\r\n                                        onClick={() => revertLet(id)}\r\n                                        className=\"bp3-minimal\"\r\n                                        icon=\"undo\"\r\n                                        text=\"Revert\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerTheoryLemma;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport '../../scss/VisualizersDrawer.scss';\r\nimport { Drawer, Position, Classes, Tabs, Tab, Button } from '@blueprintjs/core';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { DrawerProps } from '../../interfaces/interfaces';\r\n\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\nimport { applyView, selectNodeClusters, selectNodes } from '../../store/features/proof/proofSlice';\r\nimport { reRender } from '../../store/features/externalCmd/externalCmd';\r\nimport VisualizerLetDrawer from '../VisualizerLetDrawer/VisualizerLetDrawer';\r\nimport VisualizerTheoryLemma from '../VisualizerTheoryLemma/VisualizerTheoryLemma';\r\nimport { ClusterKind } from '../../interfaces/enum';\r\n\r\nconst VisualizersDrawer: React.FC<DrawerProps> = ({ drawerIsOpen, setDrawerIsOpen }: DrawerProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const nodeClusters = useAppSelector(selectNodeClusters);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [tabID, setTabID] = useState('lm');\r\n    const [resizeFlag, setResizeFlag] = useState([false, false]);\r\n\r\n    useEffect(() => {\r\n        // When drawer is initialized it focus the escape button\r\n        const bt = document\r\n            .getElementsByClassName('visualizers-drawer')[0]\r\n            .getElementsByClassName('bp3-button')[0] as HTMLElement;\r\n        bt.tabIndex = 1;\r\n        bt.focus();\r\n    }, []);\r\n\r\n    const handleTabChange = (newTabId: string, _: any, e: any): void => {\r\n        setTabID(newTabId);\r\n        const newResizeFlag = [...resizeFlag];\r\n        if (newTabId === 'lm') newResizeFlag[0] = !newResizeFlag[0];\r\n        else if (newTabId === 'tl') newResizeFlag[1] = !newResizeFlag[1];\r\n        setResizeFlag(newResizeFlag);\r\n    };\r\n\r\n    const handleClusterClick = (type: ClusterKind): void => {\r\n        if (type === ClusterKind.NONE) {\r\n            dispatch(selectNodes(nodeClusters.reduce((acc: number[], c) => acc.concat(c.hiddenNodes), [])));\r\n        } else {\r\n            dispatch(\r\n                selectNodes(\r\n                    nodeClusters.reduce((acc: number[], c) => (c.type === type ? acc.concat(c.hiddenNodes) : acc), []),\r\n                ),\r\n            );\r\n        }\r\n    };\r\n\r\n    const menus = {\r\n        view: (\r\n            <div className={'view-infos ' + Classes.DIALOG_BODY}>\r\n                <div className=\"bts\">\r\n                    <Button\r\n                        text=\"Full\"\r\n                        onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                            e.preventDefault();\r\n                            dispatch(applyView('full'));\r\n                            dispatch(reRender());\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        text=\"Clustered\"\r\n                        onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                            e.preventDefault();\r\n                            dispatch(applyView('clustered'));\r\n                            dispatch(reRender());\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        text=\"Full and Colored\"\r\n                        onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                            e.preventDefault();\r\n                            dispatch(applyView('colored-full'));\r\n                            dispatch(reRender());\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"views-color-map\">\r\n                    <span onClick={() => handleClusterClick(ClusterKind.NONE)}>⬜ First Scope</span>\r\n                    <span onClick={() => handleClusterClick(ClusterKind.SAT)}>🟪 SAT</span>\r\n                    <span onClick={() => handleClusterClick(ClusterKind.CNF)}>🟨 CNF</span>\r\n                    <span onClick={() => handleClusterClick(ClusterKind.TL)}>🟩 Theory Lemma</span>\r\n                    <span onClick={() => handleClusterClick(ClusterKind.PP)}>🟫 Pre Processing</span>\r\n                    <span onClick={() => handleClusterClick(ClusterKind.IN)}>🟦 Input</span>\r\n                </div>\r\n            </div>\r\n        ),\r\n        letMap: <VisualizerLetDrawer shouldResize={resizeFlag[0]} />,\r\n        theoryLemma: <VisualizerTheoryLemma shouldResize={resizeFlag[1]} />,\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            className={`visualizers-drawer ${darkTheme ? 'bp3-dark' : ''}`}\r\n            style={{ maxHeight: '65%', width: '35%' }}\r\n            autoFocus={true}\r\n            canEscapeKeyClose={true}\r\n            canOutsideClickClose={false}\r\n            enforceFocus={false}\r\n            hasBackdrop={false}\r\n            isOpen={drawerIsOpen}\r\n            position={Position.RIGHT}\r\n            usePortal={false}\r\n            onClose={(e) => {\r\n                e.preventDefault();\r\n                setDrawerIsOpen(false);\r\n            }}\r\n            icon=\"applications\"\r\n            title=\"Visualizers\"\r\n        >\r\n            <div className={Classes.DRAWER_BODY}>\r\n                <Tabs id=\"services-tabs\" onChange={handleTabChange} selectedTabId={tabID}>\r\n                    <Tab id=\"vw\" title=\"View\" panel={menus['view']} className=\"services-tab\" />\r\n                    <Tab id=\"lm\" title=\"Let Map\" panel={menus['letMap']} className=\"services-tab\" />\r\n                    <Tab id=\"tl\" title=\"Theory Lemma\" panel={menus['theoryLemma']} className=\"services-tab\" />\r\n                </Tabs>\r\n            </div>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default VisualizersDrawer;\r\n","import { Button, Divider } from '@blueprintjs/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { TutorialPopoverProps } from '../../interfaces/interfaces';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { useAppSelector } from '../../store/hooks';\r\n\r\nconst TutorialPopover: React.FC<TutorialPopoverProps> = ({\r\n    setIsOpen,\r\n    nextTutorial,\r\n    stage,\r\n    content,\r\n    W,\r\n    position,\r\n}: TutorialPopoverProps) => {\r\n    const [page, setPage] = useState(0);\r\n\r\n    const darkTheme = useAppSelector(selectTheme);\r\n\r\n    const renderPageBall = (): JSX.Element[] => {\r\n        return content.map((_, id) => (\r\n            <div key={id} className={`page-ball ${id === page && (darkTheme ? 'page-on' : 'page-on-light')}`} />\r\n        ));\r\n    };\r\n\r\n    const changePage = (type: string): void => {\r\n        if (type === '>') setPage(page + 1);\r\n        else setPage(page - 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const parent = document.getElementsByClassName('tutorial-popover')[0];\r\n        // Set the focus\r\n        let bt = parent.getElementsByClassName('next-page progress');\r\n        if (!bt.length) {\r\n            bt = parent.getElementsByClassName('bp3-button');\r\n            // Make sure the next stage button will not be instantly clicked\r\n            setTimeout(() => (bt[bt.length - 1] as HTMLElement).focus(), 150);\r\n        } else {\r\n            (bt[0] as HTMLElement).focus();\r\n        }\r\n    }, [stage, page]);\r\n\r\n    useEffect(() => {\r\n        function handleEsc(e: KeyboardEvent): void {\r\n            e.stopPropagation();\r\n            if (e.key === 'Escape') {\r\n                setIsOpen(false);\r\n            }\r\n        }\r\n        window.addEventListener('keydown', handleEsc, false);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleEsc, false);\r\n        };\r\n    }, []);\r\n\r\n    const insertAnchors = (text: string): (JSX.Element | string)[] => {\r\n        const list: (JSX.Element | string)[] = [];\r\n\r\n        let i = -1,\r\n            last = 0;\r\n        const positions = [0, 0, 0];\r\n        for (let j = 0; j < text.length; j++) {\r\n            if (text[j] === '\\0') {\r\n                i++;\r\n                positions[i] = j;\r\n            }\r\n            if (i === 2) {\r\n                list.push(text.substring(last, positions[0]));\r\n                const name = text.substring(positions[0] + 1, positions[1]);\r\n                const link = text.substring(positions[1] + 1, positions[2]);\r\n                list.push(\r\n                    <a href={link} target=\"_blank\" rel=\"noreferrer\">\r\n                        {name}\r\n                    </a>,\r\n                );\r\n\r\n                last = positions[2] + 1;\r\n                i = -1;\r\n            }\r\n        }\r\n        list.push(text.substring(last, text.length));\r\n\r\n        return list;\r\n    };\r\n\r\n    return (\r\n        <div className={darkTheme ? 'bp3-dark' : ''}>\r\n            <div\r\n                className=\"arrow-up\"\r\n                style={{\r\n                    left: position.tW,\r\n                    top: position.y - 7,\r\n                    borderBottomColor: darkTheme ? 'rgb(48, 65, 71)' : 'rgb(255,255,255)',\r\n                }}\r\n            />\r\n            <div\r\n                className=\"arrow-up arrow-2\"\r\n                style={{\r\n                    left: position.tW - 2,\r\n                    top: position.y - 9,\r\n                    borderBottomColor: darkTheme ? '#bdbdbd' : 'rgba(71, 64, 64, 0.281)',\r\n                }}\r\n            />\r\n            <div className=\"tutorial-popover bp3-dialog\" style={{ width: W, left: position.x, top: position.y }}>\r\n                <div className=\"bp3-dialog-header\">\r\n                    <div className=\"cur-page\">{renderPageBall()}</div>\r\n                    <Button icon=\"small-cross\" onClick={() => setIsOpen(false)} tabIndex={-1} />\r\n                </div>\r\n                <body>\r\n                    {page > 0 && (\r\n                        <button\r\n                            className=\"next-page regress\"\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                changePage('<');\r\n                            }}\r\n                        >\r\n                            {'<'}\r\n                        </button>\r\n                    )}\r\n                    <p className=\"content\">{stage ? content[page] : insertAnchors(content[page])}</p>\r\n                    {page < content.length - 1 && (\r\n                        <button\r\n                            className=\"next-page progress\"\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                changePage('>');\r\n                            }}\r\n                        >\r\n                            {'>'}\r\n                        </button>\r\n                    )}\r\n                </body>\r\n                {page === content.length - 1 && (\r\n                    <>\r\n                        <Divider style={{ backgroundColor: darkTheme ? 'white' : '' }} />\r\n                        <div className=\"bp3-dialog-footer\">\r\n                            <Button\r\n                                text=\"Next\"\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    nextTutorial();\r\n                                    setPage(0);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TutorialPopover;\r\n","import { Portal } from '@blueprintjs/core';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { TutorialProps } from '../../interfaces/interfaces';\r\nimport '../../scss/Tutorial.scss';\r\nimport TutorialPopover from './TutorialPopover';\r\n\r\nconst W = 340;\r\nconst divsIds = [\r\n    'proof-visualizer-name',\r\n    'upload-proof-bt',\r\n    'examples-bt',\r\n    'input-smt-bt',\r\n    'file-name-title',\r\n    'command',\r\n    'style-bt',\r\n    'visualizers-bt',\r\n    'download-bt',\r\n    'switch-button-dark-theme',\r\n];\r\nconst tutorials: string[][] = [\r\n    [\r\n        'This website is a SMT solver proof visualizer. It was developed by \\0Vinícius Braga Freire\\0https://github.com/vinciusb\\0, \\0Diego Della Rocca\\0https://github.com/diegodrc\\0 and \\0Haniel Barbosa\\0https://homepages.dcc.ufmg.br/~hbarbosa/\\0. It was funded by AWS and the main SMT solver supported is CVC5.',\r\n    ],\r\n    [\r\n        'Here you can upload your proofs to be visualized.',\r\n        'The proofs can have the .dot or .json file extension.',\r\n        'The .json file is obtained in the download section.',\r\n    ],\r\n    ['Here you can visualize some examples of different proofs.'],\r\n    ['Here you can see the examples SMT code or insert your own SMT and run the CVC5 solver to generate a new proof.'],\r\n    ['This is the name of the current proof uploaded'],\r\n    [\r\n        'This is the command section. Here you can use some commands that will transform the proof, changing the way you comprehend it.',\r\n        \"Click in the '?' button to see a description of all commands available.\",\r\n    ],\r\n    [\r\n        'Here you can change the way the visualizer presents the proof.',\r\n        \"The graph style is the default and it's where the commands transformations happen.\",\r\n        \"In the directory style each proof node is a 'folder' and your children nodes are inside it.\",\r\n    ],\r\n    [\r\n        'Here you have access to 3 visualizers:',\r\n        'View: It allow you to change the way the proof nodes are visualized.',\r\n        'Let Map: Here you can see a map of all the LETS used inside the proofs. A let is a therm that shorten some expression (e.g.: let1 = (and A B))',\r\n        'Theory Lemma: It allow you to see all the theory lemmas in the proof.',\r\n    ],\r\n    [\r\n        'This section allow you to download the proof in different ways.',\r\n        '.DOT is the default format. It only holds informations about the proof structure and your clusters.',\r\n        '.JSON allow the user to save all the visual informations about the proof (i.e. the nodes positions, colors and foldings after any transformation applied) and your structural infos just like the .DOT.',\r\n        '.PNG prints the proof in the current state (i.e. includes all the transformations) into a image.',\r\n    ],\r\n    ['Allow to change between dark/light mode.'],\r\n];\r\n\r\n// panel stack\r\nconst VisualizerTutorial: React.FC<TutorialProps> = ({ inTutorial, setInTutorial }: TutorialProps) => {\r\n    const [stage, setStage] = useState(-1);\r\n    const [position, setPosition] = useState({ x: 0, y: 0, tW: 0 });\r\n    const sizeRef = useRef({ w: 0, h: 0 });\r\n\r\n    const increaseStage = () => {\r\n        if (stage < tutorials.length - 1) setStage(stage + 1);\r\n        else setInTutorial(false);\r\n    };\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Handler to call on window resize and set the value column width\r\n        function handleResize() {\r\n            sizeRef.current.w = window.innerWidth;\r\n            sizeRef.current.h = window.innerHeight;\r\n        }\r\n\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (inTutorial) setStage(0);\r\n        else setStage(-1);\r\n    }, [inTutorial]);\r\n\r\n    useEffect(() => {\r\n        const toBeWrapped: HTMLElement | null = document.getElementById(divsIds[stage]);\r\n        if (toBeWrapped) {\r\n            const { x, y, width, height } = toBeWrapped.getClientRects()[0];\r\n            const newY = y + height;\r\n            let newX = x + width / 2;\r\n            const newTW = newX;\r\n            // Positioning in the beggining\r\n            if (newX < W) newX = 3;\r\n            // Positioning in the end\r\n            else if (newX + W / 2 > sizeRef.current.w) newX = sizeRef.current.w - W - 3;\r\n            // Positioning in the normal position\r\n            else newX -= W / 2;\r\n\r\n            setPosition({ x: newX, y: newY, tW: newTW });\r\n        }\r\n    }, [stage]);\r\n\r\n    return (\r\n        <Portal className={`tutorial-portal`}>\r\n            <div\r\n                className=\"bp3-overlay-enter-done\"\r\n                style={{\r\n                    width: sizeRef.current.w,\r\n                    height: sizeRef.current.h,\r\n                    pointerEvents: stage >= 0 ? 'auto' : 'none',\r\n                    backgroundColor: stage >= 0 ? 'rgba(87, 82, 82, 0.233)' : 'transparent',\r\n                }}\r\n            >\r\n                {stage >= 0 && (\r\n                    <TutorialPopover\r\n                        setIsOpen={setInTutorial}\r\n                        nextTutorial={increaseStage}\r\n                        stage={stage}\r\n                        content={tutorials[stage]}\r\n                        W={W}\r\n                        position={position}\r\n                    />\r\n                )}\r\n            </div>\r\n        </Portal>\r\n    );\r\n};\r\n\r\nexport default VisualizerTutorial;\r\n","import React, { useEffect, useReducer, useRef, useState } from 'react';\r\n\r\nimport MonacoEditor from '@monaco-editor/react';\r\nimport { Drawer, Position, Classes, Button, FormGroup, Switch, InputGroup } from '@blueprintjs/core';\r\nimport { Popover2 } from '@blueprintjs/popover2';\r\n\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { SmtDrawerProps } from '../../interfaces/interfaces';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\n\r\nimport { selectSmt, setSmt } from '../../store/features/proof/proofSlice';\r\n\r\nconst VisualizerSmtDrawer: React.FC<SmtDrawerProps> = ({ isOpen, setDrawerIsOpen }: SmtDrawerProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const proofSmt = useAppSelector(selectSmt);\r\n\r\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\r\n    const [optionsIsOpen, setOptionsIsOpen] = useReducer((open) => !open, false);\r\n    const textRef = useRef(proofSmt + '\\n');\r\n    const [argsType, setArgsType] = useState(true);\r\n    const [[shouldClusterize, printAsDag], setDefaultOptions] = useState([true, true]);\r\n    const [customArgs, setCustomArgs] = useState('');\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        // When smt drawer is initialized it focus the escape button\r\n        const bt = document\r\n            .getElementsByClassName('smt-drawer')[0]\r\n            .getElementsByClassName('bp3-button')[0] as HTMLElement;\r\n        bt.tabIndex = 1;\r\n        bt.focus();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        textRef.current = proofSmt;\r\n        forceUpdate();\r\n    }, [proofSmt]);\r\n\r\n    const options = {\r\n        theme: darkTheme ? 'vs-dark' : 'vs',\r\n        tabIndex: 5,\r\n    };\r\n\r\n    const divColor = darkTheme ? 'rgb(255, 255, 255, 0.15)' : 'rgb(0, 0, 0, 0.15)';\r\n\r\n    const helpDiv = (\r\n        <div\r\n            className={`bp3-menu ${darkTheme ? 'bp3-dark' : ''}`}\r\n            style={{\r\n                maxWidth: '200px',\r\n                padding: '5px 8px !important',\r\n                boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.651)',\r\n                textAlign: 'justify',\r\n            }}\r\n        >\r\n            Look at{' '}\r\n            <a href=\"https://cvc5.github.io/docs/cvc5-1.0.0/\" target=\"_blank\" rel=\"noreferrer\">\r\n                CVC5 documentation\r\n            </a>{' '}\r\n            to understand more about the argument parser.\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <Drawer\r\n            className={`smt-drawer ${darkTheme ? 'bp3-dark' : ''}`}\r\n            style={{ maxHeight: '65%', width: '35%' }}\r\n            autoFocus={true}\r\n            canEscapeKeyClose={true}\r\n            canOutsideClickClose={true}\r\n            enforceFocus={false}\r\n            hasBackdrop={false}\r\n            isOpen={isOpen}\r\n            position={Position.LEFT}\r\n            usePortal={false}\r\n            onClose={(e) => {\r\n                e.preventDefault();\r\n                setDrawerIsOpen();\r\n            }}\r\n            icon=\"applications\"\r\n            title=\"Visualizers\"\r\n        >\r\n            <div className={Classes.DRAWER_BODY} style={{ overflow: 'hidden' }}>\r\n                <MonacoEditor\r\n                    height={'300px'}\r\n                    language=\"graphql\"\r\n                    value={textRef.current}\r\n                    onChange={(value) => value !== undefined && (textRef.current = value)}\r\n                    onMount={() => forceUpdate()}\r\n                    options={options}\r\n                />\r\n                <div\r\n                    style={{\r\n                        height: optionsIsOpen ? '220px' : '0',\r\n                        position: 'relative',\r\n                        overflow: 'auto',\r\n                        transition: 'height 0.24s ease-out',\r\n                        visibility: optionsIsOpen ? 'visible' : 'hidden',\r\n                    }}\r\n                >\r\n                    <Switch\r\n                        className=\"switch\"\r\n                        label=\"Default args or custom args\"\r\n                        style={{ margin: '10px 20px' }}\r\n                        checked={argsType}\r\n                        onChange={() => setArgsType(!argsType)}\r\n                        tabIndex={4}\r\n                    />\r\n                    <FormGroup\r\n                        label=\"Default args\"\r\n                        style={{\r\n                            padding: '10px 20px',\r\n                            borderBottom: `1px solid ${divColor}`,\r\n                            borderTop: `1px solid ${divColor}`,\r\n                            marginBottom: '0',\r\n                        }}\r\n                        disabled={!argsType}\r\n                    >\r\n                        <Switch\r\n                            label=\"Should clusterize proof\"\r\n                            disabled={!argsType}\r\n                            checked={shouldClusterize}\r\n                            onChange={() => setDefaultOptions([!shouldClusterize, printAsDag])}\r\n                            tabIndex={4}\r\n                        />\r\n                        <Switch\r\n                            label=\"Should print as tree or as DAG\"\r\n                            disabled={!argsType}\r\n                            checked={printAsDag}\r\n                            onChange={() => setDefaultOptions([shouldClusterize, !printAsDag])}\r\n                            tabIndex={4}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup\r\n                        label=\"Custom args\"\r\n                        style={{ padding: '10px 20px', marginBottom: '0' }}\r\n                        disabled={argsType}\r\n                    >\r\n                        <InputGroup\r\n                            id=\"text-input\"\r\n                            placeholder=\"Placeholder text\"\r\n                            disabled={argsType}\r\n                            rightElement={\r\n                                <Popover2\r\n                                    disabled={argsType}\r\n                                    content={helpDiv}\r\n                                    placement=\"auto\"\r\n                                    modifiers={{\r\n                                        arrow: { enabled: true },\r\n                                    }}\r\n                                    hoverCloseDelay={200}\r\n                                    hoverOpenDelay={200}\r\n                                >\r\n                                    <Button disabled={argsType} icon=\"help\" className=\"bp3-minimal\" tabIndex={4} />\r\n                                </Popover2>\r\n                            }\r\n                            value={customArgs}\r\n                            onChange={(e) => setCustomArgs(e.target.value)}\r\n                            tabIndex={4}\r\n                        />\r\n                    </FormGroup>\r\n                </div>\r\n                <footer\r\n                    style={{\r\n                        position: 'relative',\r\n                        borderTop: optionsIsOpen ? `solid 1px ${divColor}` : '',\r\n                    }}\r\n                >\r\n                    <Button\r\n                        style={{ float: 'left', margin: '5px' }}\r\n                        className=\"bp3-minimal\"\r\n                        icon=\"more\"\r\n                        text=\"Options\"\r\n                        onClick={() => setOptionsIsOpen()}\r\n                        tabIndex={1}\r\n                    />\r\n                    <div style={{ float: 'right', display: 'flex' }}>\r\n                        <Button\r\n                            style={{ margin: '5px' }}\r\n                            className=\"bp3-minimal\"\r\n                            icon=\"floppy-disk\"\r\n                            text=\"Save\"\r\n                            onClick={() => dispatch(setSmt(textRef.current))}\r\n                            tabIndex={2}\r\n                        />\r\n                        <Button\r\n                            style={{ margin: '5px' }}\r\n                            className=\"bp3-minimal\"\r\n                            icon=\"code\"\r\n                            text=\"Generate proof\"\r\n                            onClick={() => {\r\n                                dispatch(setSmt(textRef.current));\r\n                                // Run cvc5\r\n                            }}\r\n                            tabIndex={3}\r\n                        />\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default VisualizerSmtDrawer;\r\n","import React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Intent, Position, Toaster } from '@blueprintjs/core';\r\n\r\nimport VisualizerNavbar from '../VisualizerNavbar/VisualizerNavbar';\r\nimport VisualizerDialog from '../VisualizerDialog/VisualizerDialog';\r\nimport VisualizerStage from '../VisualizerStage/VisualizerStage';\r\nimport VisualizersDrawer from '../VisualizersDrawer/VisualizersDrawer';\r\n\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport VisualizerTutorial from '../VisualizerTutorial/VisualizerTutorial';\r\nimport VisualizerSmtDrawer from '../VisualizerSmtDrawer/VisualizerSmtDrawer';\r\n\r\nconst App: React.FC = () => {\r\n    const [dialogIsOpen, setDialogIsOpen] = useState(true);\r\n    const [inTutorial, setInTutorial] = useState(false);\r\n    const [drawerIsOpen, setDrawerOpenState] = useReducer((isOpen) => !isOpen, false);\r\n    const [smtDrawerIsOpen, setSmtDrawerIsOpen] = useReducer((isOpen) => !isOpen, false);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n\r\n    // Toaster\r\n    let toaster: Toaster;\r\n    const refHandlers = {\r\n        toaster: (ref: Toaster) => (toaster = ref),\r\n    };\r\n\r\n    const addErrorToast = (err: string) => {\r\n        toaster.show({ icon: 'warning-sign', intent: Intent.DANGER, message: err });\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.getElementsByClassName('bp3-overlay')[0]\r\n            ? (document.getElementsByClassName('bp3-overlay')[0].className = '')\r\n            : null;\r\n    }, [drawerIsOpen]);\r\n\r\n    return (\r\n        <div className={darkTheme ? ' bp3-dark' : ''} style={{ height: '100%' }}>\r\n            <VisualizerTutorial inTutorial={inTutorial} setInTutorial={setInTutorial} />\r\n            <Toaster position={Position.TOP} ref={refHandlers.toaster} />\r\n            {/* <VisualizerNavbar\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                setDrawerIsOpen={setDrawerOpenState}\r\n                addErrorToast={addErrorToast}\r\n                inTutorial={inTutorial}\r\n                setInTutorial={setInTutorial}\r\n                setSmtDrawerIsOpen={setSmtDrawerIsOpen}\r\n            ></VisualizerNavbar> */}\r\n            <VisualizerDialog\r\n                dialogIsOpen={dialogIsOpen}\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                addErrorToast={addErrorToast}\r\n            ></VisualizerDialog>\r\n            <VisualizerStage></VisualizerStage>\r\n            {drawerIsOpen ? (\r\n                <VisualizersDrawer drawerIsOpen={drawerIsOpen} setDrawerIsOpen={setDrawerOpenState}></VisualizersDrawer>\r\n            ) : null}\r\n            {smtDrawerIsOpen ? (\r\n                <VisualizerSmtDrawer isOpen={smtDrawerIsOpen} setDrawerIsOpen={setSmtDrawerIsOpen} />\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport externalCmdReducer from './features/externalCmd/externalCmd';\r\nimport fileReducer from './features/file/fileSlice';\r\nimport proofReducer from './features/proof/proofSlice';\r\nimport themeReducer from './features/theme/themeSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        file: fileReducer,\r\n        proof: proofReducer,\r\n        theme: themeReducer,\r\n        externalCmd: externalCmdReducer,\r\n    },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport { store } from './store/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './scss/index.scss';\r\n\r\nimport reportWebVitals from './ReactUtils/reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}