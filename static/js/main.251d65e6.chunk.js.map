{"version":3,"sources":["store/hooks.ts","store/features/file/fileSlice.ts","store/features/proof/auxi.ts","store/features/proof/proofSlice.ts","store/features/theme/themeSlice.ts","store/features/externalCmd/externalCmd.ts","components/VisualizerNavbar/VisualizerNavbar.tsx","components/VisualizerDialog/VisualizerDialog.tsx","components/VisualizerStage/Canvas/VisualizerNode.tsx","components/VisualizerStage/Canvas/VisualizerLine.tsx","components/VisualizerStage/Canvas/VisualizerMenu.tsx","components/VisualizerStage/Canvas/VisualizerCanvas.tsx","components/VisualizerStage/VisualizerStage.tsx","components/VisualizerTree/VisualizerTree.tsx","components/VisualizerStage/VisualizerDirectoryStyle/VisualizerDirectoryStyle.tsx","components/VisualizerLetDrawer/let.ts","components/VisualizerLetDrawer/LetRender.tsx","components/VisualizerLetDrawer/VisualizerLetDrawer.tsx","components/App/App.tsx","store/store.ts","ReactUtils/reportWebVitals.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","fileSlice","createSlice","name","initialState","value","filesCount","reducers","set","state","action","payload","actions","selectFileName","file","selectDot","split","pop","JSON","parse","dot","selectFileCount","removeEscapedCharacters","s","newS","i","length","descendants","proof","nodeId","children","concat","reduce","acc","childId","proofSlice","view","style","hiddenNodes","letMap","visualInfo","process","proofJSON","isJSON","indexOf","nodes","id","conclusion","rule","args","views","parents","NaN","dependencies","comment","slice","lastIndexOf","replace","forEach","line","search","parseInt","trim","attributes","label","commentJSON","subProofQty","map","x","child","parent","push","isNaN","processDot","node","color","y","selected","hideNodes","toHideNodes","filter","every","hiddenNodesArray","clusters","clusteredNodes","hiddenNode","clusterID","p","hiddenID","some","_p","pastCluster","stringify","cluster","clusterParents","parentCluster","splice","findNodesClusters","piNodeId","Object","keys","foldAllDescendants","index","self","unhideNodes","pi","hiddens","size","setVisualInfo","selectNodes","len","unselectNodes","changeStyle","applyView","visualInfoSize","proofSize","proofNode","applyColor","Number","selectProof","piNodeChildren","haveHiddenParent","n","piNodeParents","piNode","parentId","c","piId","depsId","highHierarchyNodes","ac","childID","selectOriginalProof","selectView","selectStyle","selectLetMap","selectVisualInfo","selectHiddenNodes","themeSlice","toggle","selectTheme","theme","externalCmd","findData","nodeToFind","findOption","renderData","count","fileChanged","findNode","option","reRender","addRenderCount","blockRender","allowRenderNewFile","blockRenderNewFile","selectFindData","selectRenderData","mapDispatchToProps","connect","ownProps","setDialogIsOpen","setDialogContent","setDrawerIsOpen","addErrorToast","fileName","darkTheme","windowSize","useState","width","height","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","command","setCommand","lastCommands","setLastCommands","commandId","setCommandId","dispatch","runCommands","hiddenIds","commands","cmdArg","string","matches","matchAll","idList","insideBracket","insideMatches","rangeLim","numS","Array","from","_","listStr","match","word","argMatch","argIsConclusion","regexString","substring","regex","RegExp","test","err","allNodesIds","obj","find","menus","icon","text","onClick","e","preventDefault","download","downloadJSON","fName","link","document","createElement","href","encodeURIComponent","click","replaceAll","getElementsByClassName","toDataURL","help","className","Group","align","Alignment","LEFT","Heading","Divider","content","RIGHT","placeholder","onChange","target","onKeyDown","key","unshift","newId","rightElement","placement","autoComplete","marginLeft","undefined","disabled","checked","readUploadedFileAsText","inputFile","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","VisualizerDialog","dialogIsOpen","dialogContent","dialogProps","title","dialogBody","succesButton","changeFileName","changeFile","useReducer","newFlag","focusFlag","flagCount","setFocusFlag","Classes","DIALOG_BODY","childNodes","focus","DIALOG_FOOTER_ACTIONS","closeDialog","hasSelection","onInputChange","a","files","File","fileContents","message","fill","ext","intent","Intent","SUCCESS","isOpen","onClose","usePortal","DIALOG_FOOTER","textColorFromBg","bgColor","sixDigitColor","charAt","join","Node","props","nHided","nDescendants","setNodeOnFocus","toggleNodeSelection","updateNodePosition","openDrawer","onDragEnd","createTree","tag","stroke","strokeWidth","this","fontSize","padding","depSize","infos","String","draggable","toString","onDragMove","attrs","evt","button","shiftKey","menuNode","getElementById","top","clientY","left","clientX","display","points","depLineSize","radius","dep","depText","Line","Menu","unfold","foldSelectedNodes","changeNodeColor","currentColor","options","setColor","foldSelected","stopPropagation","vertical","handleWheel","stage","getStage","oldScale","scaleX","pointerPosition","getPointerPosition","mousePointTo","newScale","deltaY","stageScale","stageX","stageY","Canvas","nodeOnFocus","setState","nodesSelected","showingNodes","LineProps","to","saveNodePosition","copyNodePosition","showingEdges","edgeKey","edge","componentDidUpdate","bind","canvasSize","newShowingNodes","newNodeProps","updateEdgesAndFuncs","prevProps","found","o","Boolean","includes","onWheel","scaleY","onContextMenu","current_state","proofChanged","visualInfoChanged","nodeFindData","nodeWidth","nodeHeight","g","dagre","graphlib","Graph","setGraph","rankdir","ranker","setDefaultEdgeLabel","setNode","setEdge","layout","xOffset","yOffset","v","console","log","Component","newVisualInfo","visualInfos","drawerHelpersKind","VisualizerTree","originalNodeInfo","setNodeInfo","forceUpdate","setNodes","setSelected","forEachNode","callback","backgroundColor","contents","onNodeClick","nodeData","_nodePath","originallySelected","isSelected","onNodeCollapse","isExpanded","onNodeExpand","ELEVATION_0","VisualizerDirectoryStyle","proofTree","ruleHelper","indent","translate","nodeInfo","type","ALL","ruleHelperIsOpen","argsHelperIsOpen","concHelperIsOpen","dispatchHelper","offsetHeight","float","clear","borderRight","overflow","RULE","maxHeight","ARGS","CONC","dependency","Let","letText","letsList","indices","lines","biggerID","externalLets","getTextWidth","font","context","getContext","measureText","expandValue","shouldUpdate","keyList","let","letName","k","idx","indentLevel","expandPartialy","externalRef","letIdx","indentedText","printLines","lastLine","newIdx","shrinkValue","fitsTheWindow","repeat","mode","someDoesntFit","newLines","thisLevel","thisLine","lastSpace","lastUsedSpace","lastOpenParenthesis","biggestSize","newBiggerID","thisSize","groupUp","original","numKey","LetRender","toRender","widthRef","useRef","letRender","full","resizeMode","setResizeMode","newMap","letMapS","setLetMapS","letsRef","initializeLet","lets","currentLet","indice","current","fullWidth","clientWidth","newWidth","btColumnSize","gridTemplateColumns","arr","start","thisLet","expandLet","overflowWrap","renderLet","flexFlow","justifySelf","expandAll","revertLet","castProofNodeToTreeNode","secondaryLabel","parentsId","hasCaret","rootNode","tree","roots","currentNode","stack","childrenStack","insertedStack","lastNode","lastChild","nextNode","VisualizerStage","fileID","setProofTree","setOriginalNodeInfo","drawerIsOpen","setTree","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","position","Position","BOTTOM","DRAWER_BODY","VisualizerLetDrawer","whiteSpace","App","toaster","setDrawerOpenState","refHandlers","ref","show","DANGER","TOP","store","configureStore","reducer","fileReducer","proofReducer","themeReducer","externalCmdReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.251d65e6.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { FileState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: FileState = {\r\n    name: 'ex.smt2',\r\n    value: 'digraph proof {\\n\\trankdir=\"BT\";\\n\\tnode [shape=record];\\n\\t0 [label=\"{SCOPE((not a), a)|(not (and (not a) a))}\", class = \" basic \", comment = \"{\\'subProofQty\\':1}\" ];\\n\\t1 [label=\"{CHAIN_RESOLUTION(true, a)|false}\", class = \" propositional \", comment = \"{\\'subProofQty\\':2}\" ];\\n\\t2 [label=\"{ASSUME(a)|a}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t3 [label=\"{ASSUME((not a))|(not a)}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t1->0;\\n\\t2->1;\\n\\t3->1;\\n}',\r\n    filesCount: 0,\r\n};\r\n\r\nexport const fileSlice = createSlice({\r\n    name: 'file',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        set: (state, action: PayloadAction<{ name: string; value: string }>) => {\r\n            state.name = action.payload.name;\r\n            state.value = action.payload.value;\r\n            state.filesCount++;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { set } = fileSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectFileName = (state: RootState): string => state.file.name;\r\n\r\nexport const selectFileExtension = (state: RootState): string => {\r\n    const ext = state.file.name.split('.').pop();\r\n    return ext ? ext : '';\r\n};\r\n\r\nexport const selectDot = (state: RootState): string =>\r\n    state.file.name.split('.').pop() === 'json' ? JSON.parse(state.file.value).dot : state.file.value;\r\n\r\nexport const selectFile = (state: RootState): string => state.file.value;\r\n\r\nexport const selectFileCount = (state: RootState): number => state.file.filesCount;\r\n\r\nexport default fileSlice.reducer;\r\n","import { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\n\r\nfunction removeEscapedCharacters(s: string): string {\r\n    let newS = '';\r\n    for (let i = 0; i < s.length; i += 1) {\r\n        if (\r\n            !(\r\n                s[i] === '\\\\' &&\r\n                (s[i + 1] === '\"' ||\r\n                    s[i + 1] === '>' ||\r\n                    s[i + 1] === '<' ||\r\n                    s[i + 1] === '{' ||\r\n                    s[i + 1] === '}' ||\r\n                    s[i + 1] === '|')\r\n            )\r\n        ) {\r\n            newS += s[i];\r\n        }\r\n    }\r\n\r\n    return newS;\r\n}\r\n\r\nexport function processDot(dot: string): [NodeInterface[], ProofState['letMap']] {\r\n    const nodes: NodeInterface[] = [\r\n        {\r\n            id: 0,\r\n            conclusion: '',\r\n            rule: '',\r\n            args: '',\r\n            views: [],\r\n            children: [],\r\n            parents: [NaN],\r\n            descendants: 0,\r\n            dependencies: [],\r\n        },\r\n    ];\r\n    let comment: string | null = dot.slice(dot.indexOf('comment='));\r\n    comment = comment\r\n        ? removeEscapedCharacters(\r\n              removeEscapedCharacters(comment.slice(comment.indexOf('=') + 2, comment.indexOf(';') - 1)),\r\n          )\r\n        : null;\r\n\r\n    const lines = dot\r\n        .slice(dot.indexOf('{') + 1, dot.lastIndexOf('}') - 2)\r\n        .replace(/(\\n|\\t)/gm, '')\r\n        .split(';');\r\n    lines.forEach((line) => {\r\n        if (line.search('label') !== -1) {\r\n            const id = parseInt(line.slice(0, line.indexOf('[')).trim());\r\n            let attributes = line.slice(line.indexOf('[') + 1, line.lastIndexOf(']')).trim();\r\n\r\n            let label = attributes.slice(attributes.search(/(?<!\\\\)\"/) + 2);\r\n            label = label.slice(0, label.search(/(?<!\\\\)\"/) - 1);\r\n            let [conclusion, rule, args] = ['', '', ''];\r\n            [conclusion, rule] = label.split(/(?<!\\\\)\\|/);\r\n            [rule, args] = rule.indexOf(':args') != -1 ? rule.split(':args') : [rule, ''];\r\n\r\n            attributes = attributes.slice(attributes.indexOf(', class = ') + ', class = '.length);\r\n            attributes = attributes.slice(attributes.indexOf('\"') + 1, attributes.slice(1).indexOf('\"') + 1);\r\n            const views = attributes.trim().split(' ');\r\n            const comment: string = removeEscapedCharacters(line.slice(line.indexOf('comment'), line.lastIndexOf('\"')));\r\n            const commentJSON = JSON.parse(comment.slice(comment.indexOf('\"') + 1).replace(/'/g, '\"'));\r\n\r\n            if (!nodes[id]) {\r\n                nodes[id] = {\r\n                    id: id,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    views: [],\r\n                    children: [],\r\n                    parents: [NaN],\r\n                    descendants: 0,\r\n                    dependencies: [],\r\n                };\r\n            }\r\n            nodes[id].conclusion = removeEscapedCharacters(conclusion);\r\n            nodes[id].rule = removeEscapedCharacters(rule);\r\n            nodes[id].args = removeEscapedCharacters(args);\r\n            nodes[id].views = views;\r\n            nodes[id].descendants = commentJSON.subProofQty;\r\n        }\r\n        // TODO: Se o filho ja existe, isso aqui vai resetar os dados setados do filho\r\n        else if (line.search('->') !== -1) {\r\n            const [child, parent] = line.split('->').map((x) => parseInt(x.trim()));\r\n            nodes[parent].children.push(child);\r\n            // If there isn't a child node\r\n            if (!nodes[child]) {\r\n                nodes[child] = {\r\n                    id: child,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    views: [],\r\n                    children: [],\r\n                    parents: [],\r\n                    descendants: 0,\r\n                    dependencies: [],\r\n                };\r\n            }\r\n            // If there is and is an invalid parent\r\n            else if (isNaN(nodes[child].parents[0])) {\r\n                nodes[child].parents = [];\r\n            }\r\n            nodes[child].parents.push(parent);\r\n        }\r\n    });\r\n    return comment ? [nodes, JSON.parse(comment)['letMap']] : [nodes, {}];\r\n}\r\n\r\nexport const piNodeParents = (\r\n    proof: NodeInterface[],\r\n    hiddenNodesArray: number[],\r\n    dependencies: { [parentId: number]: number[] } = {},\r\n): number[] => {\r\n    const parents = hiddenNodesArray\r\n        // Concat all the parents\r\n        .reduce((acc: number[], hiddenNode) => {\r\n            let haveHiddenParent = false;\r\n\r\n            proof[hiddenNode].parents.forEach((parent) => {\r\n                // If this parent is a hidden node\r\n                if (hiddenNodesArray.indexOf(parent) !== -1) {\r\n                    haveHiddenParent = true;\r\n                } else {\r\n                    dependencies[parent]\r\n                        ? dependencies[parent].push(hiddenNode)\r\n                        : (dependencies[parent] = [hiddenNode]);\r\n                }\r\n            });\r\n\r\n            if (haveHiddenParent) return acc;\r\n            return acc.concat(proof[hiddenNode].parents);\r\n        }, [])\r\n        // Filter the duplicated elements\r\n        .filter((parent, i, self) => self.indexOf(parent) === i)\r\n        // Only the parents that aren't in he hidden nodes array remains\r\n        .filter((parent) => hiddenNodesArray.indexOf(parent) === -1);\r\n\r\n    // Removes the pi node parents from the dependencies\r\n    Object.keys(dependencies).forEach((parent) => {\r\n        const n = Number(parent);\r\n        if (parents.indexOf(n) !== -1) delete dependencies[n];\r\n    });\r\n\r\n    return parents;\r\n};\r\n\r\nexport const descendants = (proof: NodeInterface[], nodeId: number): number[] => {\r\n    return proof[nodeId].children.concat(\r\n        proof[nodeId].children.reduce((acc: number[], childId) => acc.concat(descendants(proof, childId)), []),\r\n    );\r\n};\r\n\r\nexport const piNodeChildren = (proof: NodeInterface[], hiddenNodesArray: number[]): number[] => {\r\n    const children = hiddenNodesArray\r\n        // Get all the childrens\r\n        .reduce((acc: number[], hiddenNode) => acc.concat(proof[hiddenNode].children), [])\r\n        // Exclude the childrens that are part of the hidden nodes\r\n        .filter((child) => hiddenNodesArray.indexOf(child) === -1);\r\n    return children;\r\n};\r\n\r\nexport const findNodesClusters = (proof: NodeInterface[], hiddenNodesArray: number[]): number[][] => {\r\n    const hiddenNodes = [...hiddenNodesArray];\r\n    const clusters: number[][] = [];\r\n    let clusteredNodes = 0;\r\n    const parents = hiddenNodes.map((hiddenNode) => proof[hiddenNode].parents);\r\n\r\n    // Cluster the nodes based on similiar parents\r\n    parents.forEach((parent, clusterID) => {\r\n        // If not all of the nodes where clustered and is a non empty cluster\r\n        if (clusteredNodes !== parents.length && parents[clusterID].length) {\r\n            clusters.push([]);\r\n            parents.forEach((p, hiddenID) => {\r\n                // If those nodes have some parent in commom and they weren't verified yet\r\n                if (parents[hiddenID].length && parent.some((_p) => p.indexOf(_p) !== -1)) {\r\n                    clusters[clusters.length - 1].push(hiddenNodes[hiddenID]);\r\n                    // Removes these parents from the array, making shure they will not get verified again (already clustered)\r\n                    parents[hiddenID] = [];\r\n                    // Increases the number o clustered nodes\r\n                    clusteredNodes++;\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    let pastCluster: number[][] = [];\r\n    // Cluster the nodes until there aren't changes being made\r\n    while (JSON.stringify(pastCluster) != JSON.stringify(clusters)) {\r\n        pastCluster = [...clusters];\r\n        clusters.forEach((cluster, clusterID) => {\r\n            const clusterParents = proof[cluster[0]].parents;\r\n\r\n            // For each cluster\r\n            clusters.forEach((parentCluster, id) => {\r\n                // If this parentCluster (cluster) is parent of the current cluster\r\n                if (parentCluster.some((hiddenID) => clusterParents.indexOf(hiddenID) !== -1)) {\r\n                    // Group the nodes couple in one single cluster (the parent cluster)\r\n                    clusters[id] = clusters[id].concat(clusters[clusterID]);\r\n                    clusters.splice(clusterID, 1);\r\n                    clusterID--;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Filter the nodes with length 1\r\n    return clusters.filter((cluster) => cluster.length > 1);\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { processDot, piNodeChildren, piNodeParents, descendants, findNodesClusters } from './auxi';\r\nimport { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ProofState = {\r\n    proof: [],\r\n    view: 'full',\r\n    style: 'graph',\r\n    hiddenNodes: [],\r\n    letMap: {},\r\n    visualInfo: [],\r\n};\r\n\r\nexport const proofSlice = createSlice({\r\n    name: 'proof',\r\n    initialState,\r\n\r\n    reducers: {\r\n        process: (state, action: PayloadAction<string>) => {\r\n            let proofJSON;\r\n            let dot = action.payload;\r\n            let isJSON = false;\r\n\r\n            // If the payload is a .json file\r\n            if (dot.indexOf('{\"dot\":\"') !== -1) {\r\n                proofJSON = JSON.parse(dot);\r\n                dot = proofJSON.dot;\r\n                isJSON = true;\r\n            }\r\n\r\n            const [proof, letMap] = processDot(dot);\r\n            state.proof = proof;\r\n            state.view = isJSON ? proofJSON.view : 'full';\r\n            state.hiddenNodes = isJSON ? proofJSON.hiddenNodes : [];\r\n            state.letMap = letMap;\r\n            if (isJSON) state.visualInfo = proofJSON.visualInfo;\r\n            else {\r\n                const visualInfo: ProofState['visualInfo'] = {};\r\n                state.proof.forEach((node) => {\r\n                    visualInfo[node.id] = {\r\n                        color: '#fff',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    };\r\n                });\r\n                state.visualInfo = visualInfo;\r\n            }\r\n        },\r\n        hideNodes: (state, action: PayloadAction<number[]>) => {\r\n            const toHideNodes = action.payload.filter(\r\n                (id) =>\r\n                    id > 0 &&\r\n                    id < state.proof.length &&\r\n                    state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1),\r\n            );\r\n\r\n            const clusters = findNodesClusters(state.proof, toHideNodes);\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat(clusters)\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi nodes\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            for (let i = 0; i < clusters.length; i++) {\r\n                state.visualInfo = {\r\n                    ...state.visualInfo,\r\n                    [piNodeId + i]: {\r\n                        color: '#555',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    },\r\n                };\r\n            }\r\n\r\n            // Unselect the selected nodes\r\n            toHideNodes.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        foldAllDescendants: (state, action: PayloadAction<number>) => {\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat([\r\n                    [action.payload, ...descendants(state.proof, action.payload)].filter(\r\n                        (id, index, self) =>\r\n                            id > 0 &&\r\n                            id < state.proof.length &&\r\n                            state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1) &&\r\n                            self.indexOf(id) === index,\r\n                    ),\r\n                ])\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi node and the root node\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            state.visualInfo = {\r\n                ...state.visualInfo,\r\n                [action.payload]: {\r\n                    ...state.visualInfo[action.payload],\r\n                    selected: false,\r\n                },\r\n                [piNodeId]: {\r\n                    color: '#555',\r\n                    x: 0,\r\n                    y: 0,\r\n                    selected: false,\r\n                },\r\n            };\r\n        },\r\n        unhideNodes: (state, action: PayloadAction<{ pi: number; hiddens: number[] }>) => {\r\n            const { pi, hiddens } = action.payload;\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .map((hiddenNodesArray) => hiddenNodesArray.filter((id) => hiddens.indexOf(id) === -1))\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Make sure the ids are realocated\r\n            const size = Object.keys(state.visualInfo).length;\r\n            for (let i = pi; i < size; i++) {\r\n                state.visualInfo[pi] = state.visualInfo[pi + 1];\r\n            }\r\n            // Delete the last position\r\n            delete state.visualInfo[size - 1];\r\n\r\n            // Unselect the hidden nodes\r\n            hiddens.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        setVisualInfo: (state, action: PayloadAction<ProofState['visualInfo']>) => {\r\n            state.visualInfo = action.payload;\r\n        },\r\n        selectNodes: (state, action: PayloadAction<number[]>) => {\r\n            const len = Object.keys(state.visualInfo).length;\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < len) {\r\n                    state.visualInfo[id].selected = true;\r\n                }\r\n            });\r\n        },\r\n        unselectNodes: (state, action: PayloadAction<number[]>) => {\r\n            const len = Object.keys(state.visualInfo).length;\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < len) {\r\n                    state.visualInfo[id].selected = false;\r\n                }\r\n            });\r\n        },\r\n        changeStyle: (state, action: PayloadAction<'graph' | 'directory'>) => {\r\n            switch (action.payload) {\r\n                case 'graph':\r\n                    state.style = 'graph';\r\n                    break;\r\n                case 'directory':\r\n                    state.style = 'directory';\r\n                    break;\r\n            }\r\n        },\r\n        applyView: (state, action: PayloadAction<'basic' | 'propositional' | 'full'>) => {\r\n            const visualInfoSize = Object.keys(state.visualInfo).length;\r\n            const proofSize = state.proof.length;\r\n            // Delete all the pi nodes\r\n            for (let i = 0; i < visualInfoSize - proofSize; i++) {\r\n                delete state.visualInfo[proofSize + i];\r\n            }\r\n\r\n            switch (action.payload) {\r\n                //\r\n                case 'basic':\r\n                    state.view = 'basic';\r\n                    state.hiddenNodes = [\r\n                        state.proof\r\n                            .filter((proofNode) => proofNode.views.indexOf('basic') === -1)\r\n                            .map((proofNode) => proofNode.id),\r\n                    ];\r\n\r\n                    // Set the visual info for the new pi nodes\r\n                    state.visualInfo = {\r\n                        ...state.visualInfo,\r\n                        [Object.keys(state.visualInfo).length]: {\r\n                            color: '#555',\r\n                            x: 0,\r\n                            y: 0,\r\n                            selected: false,\r\n                        },\r\n                    };\r\n\r\n                    break;\r\n                // Hide all nodes that haven't view equal to basic and propositional\r\n                case 'propositional':\r\n                    state.view = 'propositional';\r\n                    state.hiddenNodes = [\r\n                        // Hide nodes that aren't basics a\r\n                        // nos q n são basicos (folhas e o no raiz) e nem proposicionais (outra classe q n tem no .dot1)\r\n                        state.proof\r\n                            .filter(\r\n                                (node) =>\r\n                                    node.views.indexOf('basic') === -1 && node.views.indexOf('propositional') === -1,\r\n                            )\r\n                            .map((node) => node.id),\r\n                    ];\r\n\r\n                    // Set the visual info for the new pi nodes\r\n                    state.visualInfo = {\r\n                        ...state.visualInfo,\r\n                        [Object.keys(state.visualInfo).length]: {\r\n                            color: '#555',\r\n                            x: 0,\r\n                            y: 0,\r\n                            selected: false,\r\n                        },\r\n                    };\r\n\r\n                    break;\r\n                // View without hidden Nodes\r\n                case 'full':\r\n                    state.view = 'full';\r\n                    state.hiddenNodes = [];\r\n                    break;\r\n            }\r\n        },\r\n        applyColor: (state, action: PayloadAction<string>) => {\r\n            Object.keys(state.visualInfo).forEach((id) => {\r\n                if (state.visualInfo[Number(id)].selected) {\r\n                    state.visualInfo[Number(id)].color = action.payload;\r\n                    state.visualInfo[Number(id)].selected = false;\r\n                }\r\n            });\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    process,\r\n    hideNodes,\r\n    foldAllDescendants,\r\n    unhideNodes,\r\n    setVisualInfo,\r\n    selectNodes,\r\n    unselectNodes,\r\n    changeStyle,\r\n    applyView,\r\n    applyColor,\r\n} = proofSlice.actions;\r\n\r\nexport const selectProof = (state: RootState): NodeInterface[] => {\r\n    let proof = state.proof.proof;\r\n    const hiddenNodes = state.proof.hiddenNodes;\r\n\r\n    hiddenNodes.forEach((hiddenNodesArray) => {\r\n        const dependencies: { [parentId: number]: number[] } = {};\r\n        const children = piNodeChildren(proof, hiddenNodesArray);\r\n        const parents = piNodeParents(proof, hiddenNodesArray, dependencies);\r\n\r\n        const piNodeId = proof.length;\r\n        proof = proof.concat({\r\n            id: piNodeId,\r\n            conclusion: '∴',\r\n            rule: 'π',\r\n            args: '',\r\n            views: [],\r\n            children: children,\r\n            parents: parents,\r\n            hiddenNodes: hiddenNodesArray.map((hiddenNode) => proof[hiddenNode]),\r\n            descendants: 1,\r\n            dependencies: [],\r\n        });\r\n\r\n        const piNode = proof[piNodeId];\r\n\r\n        children.forEach(\r\n            (childId) =>\r\n                (proof[childId] = {\r\n                    ...proof[childId],\r\n                    parents: proof[childId].parents\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n        parents.forEach(\r\n            (parentId) =>\r\n                (proof[parentId] = {\r\n                    ...proof[parentId],\r\n                    children: proof[parentId].children\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n\r\n        // Set the dependencies array of each parent that has deps and remove\r\n        //  the children that are dependencies\r\n        Object.keys(dependencies).forEach((parent) => {\r\n            const parentId = Number(parent);\r\n            proof[parentId] = {\r\n                ...proof[parentId],\r\n                children: proof[parentId].children.filter((c) => dependencies[parentId].indexOf(c) === -1),\r\n                dependencies: [...proof[parentId].dependencies, { piId: piNodeId, depsId: dependencies[parentId] }],\r\n            };\r\n        });\r\n\r\n        // Get the high hierarchy nodes in this pi node\r\n        const highHierarchyNodes = hiddenNodesArray?.filter((node) =>\r\n            proof[node].parents.every((parentId) => piNode.parents.indexOf(parentId) !== -1),\r\n        );\r\n\r\n        // Get the conclusion array\r\n        const conclusion = highHierarchyNodes.map((node) => ' ' + proof[node].conclusion);\r\n        piNode.conclusion = conclusion.length > 1 ? `[${conclusion} ]` : `${conclusion}`;\r\n\r\n        // Get the rule array\r\n        const rule = highHierarchyNodes.map((node) => ' ' + proof[node].rule);\r\n        piNode.rule = rule.length > 1 ? `[${rule} ]` : `${rule} `;\r\n\r\n        // Set the descendants number\r\n        piNode.descendants = piNode.children.reduce(\r\n            (ac: number, childID) => ((ac += proof[childID].descendants), ac),\r\n            1,\r\n        );\r\n    });\r\n\r\n    proof = proof.filter((proofNode) =>\r\n        hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(proofNode.id) === -1),\r\n    );\r\n\r\n    return proof;\r\n};\r\n\r\nexport const selectOriginalProof = (state: RootState): NodeInterface[] => {\r\n    return state.proof.proof;\r\n};\r\n\r\nexport const selectView = (state: RootState): 'basic' | 'propositional' | 'full' => {\r\n    return state.proof.view;\r\n};\r\n\r\nexport const selectStyle = (state: RootState): 'graph' | 'directory' => {\r\n    return state.proof.style;\r\n};\r\n\r\nexport const selectLetMap = (state: RootState): { [Key: string]: string } => {\r\n    return state.proof.letMap;\r\n};\r\n\r\nexport const selectVisualInfo = (state: RootState): ProofState['visualInfo'] => {\r\n    if (state.proof.proof.length) return state.proof.visualInfo;\r\n    // If there is no proof node\r\n    return { 0: { color: '#555', x: 0, y: 0, selected: false } };\r\n};\r\n\r\nexport const selectHiddenNodes = (state: RootState): number[][] => {\r\n    return state.proof.hiddenNodes;\r\n};\r\n\r\nexport default proofSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ThemeState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ThemeState = {\r\n    value: true,\r\n};\r\n\r\nexport const themeSlice = createSlice({\r\n    name: 'theme',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        toggle: (state) => {\r\n            state.value = !state.value;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { toggle } = themeSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice theme. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectTheme = (state: RootState): boolean => state.theme.value;\r\n\r\nexport default themeSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ExternalCmdState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ExternalCmdState = {\r\n    findData: {\r\n        nodeToFind: -1,\r\n        findOption: false,\r\n    },\r\n    renderData: {\r\n        count: 0,\r\n        fileChanged: false,\r\n    },\r\n};\r\n\r\nexport const externalCmd = createSlice({\r\n    name: 'externalCmd',\r\n    initialState,\r\n    reducers: {\r\n        findNode: (state, action: PayloadAction<{ nodeId: number; option: boolean }>) => {\r\n            state.findData = { nodeToFind: action.payload.nodeId, findOption: action.payload.option };\r\n        },\r\n        reRender: (state) => {\r\n            state.renderData.count = 0;\r\n        },\r\n        addRenderCount: (state) => {\r\n            state.renderData.count++;\r\n        },\r\n        blockRender: (state) => {\r\n            state.renderData.count = 2;\r\n        },\r\n        allowRenderNewFile: (state) => {\r\n            state.renderData.fileChanged = true;\r\n        },\r\n        blockRenderNewFile: (state) => {\r\n            state.renderData.fileChanged = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { findNode, reRender, addRenderCount, blockRender, allowRenderNewFile, blockRenderNewFile } =\r\n    externalCmd.actions;\r\n\r\nexport const selectFindData = (state: RootState): { nodeToFind: number; findOption: boolean } =>\r\n    state.externalCmd.findData;\r\n\r\nexport const selectRenderData = (state: RootState): { count: number; fileChanged: boolean } =>\r\n    state.externalCmd.renderData;\r\n\r\nexport default externalCmd.reducer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\nimport { selectDot, selectFileName } from '../../store/features/file/fileSlice';\r\nimport {\r\n    applyView,\r\n    changeStyle,\r\n    selectNodes,\r\n    applyColor,\r\n    hideNodes,\r\n    foldAllDescendants,\r\n    unhideNodes,\r\n    selectVisualInfo,\r\n    selectProof,\r\n    selectHiddenNodes,\r\n    selectView,\r\n    unselectNodes,\r\n} from '../../store/features/proof/proofSlice';\r\nimport { ReduxState, NavbarPropsAndRedux, NavbarProps } from '../../interfaces/interfaces';\r\n\r\nimport { Alignment, Button, Icon, InputGroup, Navbar, Switch, Menu, MenuItem } from '@blueprintjs/core';\r\nimport { Popover2 } from '@blueprintjs/popover2';\r\nimport { selectTheme, toggle } from '../../store/features/theme/themeSlice';\r\nimport '../../scss/VisualizerNavbar.scss';\r\nimport { findNode, reRender } from '../../store/features/externalCmd/externalCmd';\r\n\r\nfunction useWindowSize() {\r\n    // Initialize state with undefined width/height so server and client renders match\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n    const [windowSize, setWindowSize] = useState({\r\n        width: 0,\r\n        height: 0,\r\n    });\r\n    useEffect(() => {\r\n        // Handler to call on window resize\r\n        function handleResize() {\r\n            // Set window width/height to state\r\n            setWindowSize({\r\n                width: window.innerWidth,\r\n                height: window.innerHeight,\r\n            });\r\n        }\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return windowSize;\r\n}\r\n\r\nconst VisualizerNavbar: React.FC<NavbarPropsAndRedux> = ({\r\n    setDialogIsOpen,\r\n    setDialogContent,\r\n    setDrawerIsOpen,\r\n    addErrorToast,\r\n    visualInfo,\r\n    proof,\r\n    dot,\r\n    view,\r\n    hiddenNodes,\r\n    hideNodes,\r\n}: NavbarPropsAndRedux) => {\r\n    const fileName = useAppSelector(selectFileName);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const windowSize = useWindowSize();\r\n    const [command, setCommand] = useState('');\r\n    const [lastCommands, setLastCommands] = useState(['']);\r\n    const [commandId, setCommandId] = useState(0);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const openDialog = (content: string): void => {\r\n        setDialogIsOpen(true);\r\n        setDialogContent(content);\r\n    };\r\n\r\n    const handleInputKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        // Creates an commands historic, registering the past 4 commands\r\n        switch (e.key) {\r\n            case 'Enter':\r\n                // If the command is not a white space\r\n                if (command.trim() !== '') {\r\n                    runCommands(command);\r\n                    if (lastCommands.length === 5) {\r\n                        lastCommands.pop();\r\n                    }\r\n                    lastCommands.unshift('');\r\n                    setLastCommands(lastCommands);\r\n                    setCommand('');\r\n                }\r\n                break;\r\n            case 'ArrowUp':\r\n                if (commandId < lastCommands.length - 1) {\r\n                    const newId = commandId + 1;\r\n                    setCommandId(newId);\r\n                    setCommand(lastCommands[newId]);\r\n                }\r\n                break;\r\n            case 'ArrowDown':\r\n                if (commandId > 0) {\r\n                    const newId = commandId - 1;\r\n                    setCommandId(newId);\r\n                    setCommand(lastCommands[newId]);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    const runCommands = (command: string): void => {\r\n        const commands = command.trim().split(/ +/);\r\n        let hiddenIds: number[];\r\n\r\n        switch (commands[0]) {\r\n            case '/view':\r\n                switch (commands[1]) {\r\n                    case 'basic':\r\n                        dispatch(applyView('basic'));\r\n                        dispatch(reRender());\r\n                        break;\r\n                    case 'propositional':\r\n                        dispatch(applyView('propositional'));\r\n                        dispatch(reRender());\r\n                        break;\r\n                    case 'full':\r\n                        dispatch(applyView('full'));\r\n                        dispatch(reRender());\r\n                        break;\r\n                }\r\n                break;\r\n            case '/select':\r\n                if (commands[1]) {\r\n                    let cmdArg = '';\r\n                    commands.forEach((string, id) => id !== 0 && (cmdArg += string + ' '));\r\n                    // Matches all the brackets\r\n                    const matches = [...cmdArg.matchAll(/\\[([^\\[\\]]+)\\]/g)];\r\n                    let idList: number[] = [];\r\n\r\n                    // There is a case with brackets\r\n                    if (matches[0]) {\r\n                        const insideBracket = matches[0][1].trim();\r\n                        let insideMatches = [...insideBracket.matchAll(/\\s*\\d+\\s*-\\s*\\d+\\s*/g)];\r\n\r\n                        // Number range notation\r\n                        if (insideMatches[0]) {\r\n                            // Get the range limits\r\n                            const rangeLim = insideMatches[0][0].split(/\\s*-\\s*/).map((numS) => Number(numS));\r\n                            idList = Array.from({ length: rangeLim[1] - rangeLim[0] + 1 }, (_, i) => rangeLim[0] + i);\r\n                        }\r\n                        // List notation\r\n                        else {\r\n                            insideMatches = [...insideBracket.matchAll(/(\\s*\\d+\\s*,*)+/g)];\r\n                            // Number list notation\r\n                            if (insideMatches[0]) {\r\n                                // Group all the matches\r\n                                let listStr = '';\r\n                                insideMatches.forEach((match) => (listStr += match[0]));\r\n                                // Convert to number\r\n                                idList = listStr\r\n                                    .split(/,\\s*/)\r\n                                    .filter((word) => word.length > 0 && !isNaN(Number(word)))\r\n                                    .map((id) => Number(id));\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // Is a regex select?\r\n                        const matches = [...cmdArg.matchAll(/\\/[^\\/]*\\//g)];\r\n                        const argMatch = [...cmdArg.matchAll(/--(c|r)/g)];\r\n                        // If there is a regex\r\n                        if (matches[0]) {\r\n                            let argIsConclusion = true;\r\n                            // Try to find the option\r\n                            if (argMatch[0]) {\r\n                                switch (argMatch[0][1]) {\r\n                                    case 'r':\r\n                                        argIsConclusion = false;\r\n                                        break;\r\n                                    case 'c':\r\n                                        argIsConclusion = true;\r\n                                        break;\r\n                                }\r\n                            }\r\n\r\n                            const regexString = matches[0][0].substring(1, matches[0][0].length - 1);\r\n                            try {\r\n                                // Search all the nodes with the specific regex matching in the conclusion\r\n                                const regex = new RegExp(regexString);\r\n                                idList = proof\r\n                                    .filter((node) => regex.test(argIsConclusion ? node.conclusion : node.rule))\r\n                                    .map((node) => node.id);\r\n                            } catch (err) {\r\n                                // If the inserted regex expression is invalid (probably missing \\)\r\n                                addErrorToast('Regex error: probably and wrong regex expression');\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch(selectNodes(idList));\r\n                }\r\n                break;\r\n            case '/unselect':\r\n                const allNodesIds = proof.map((node) => node.id);\r\n                dispatch(unselectNodes(allNodesIds));\r\n                break;\r\n            case '/color':\r\n                if (commands[1]) {\r\n                    // Hex color\r\n                    if (RegExp(/^#([0-9a-f]{3}){1,2}$/i).test(commands[1])) {\r\n                        dispatch(applyColor(commands[1]));\r\n                        break;\r\n                    }\r\n                    // Default colors\r\n                    switch (commands[1]) {\r\n                        case 'red':\r\n                            dispatch(applyColor('#f72b34'));\r\n                            break;\r\n                        case 'orange':\r\n                            dispatch(applyColor('#ff8334'));\r\n                            break;\r\n                        case 'yellow':\r\n                            dispatch(applyColor('#ffc149'));\r\n                            break;\r\n                        case 'green':\r\n                            dispatch(applyColor('#60aa51'));\r\n                            break;\r\n                        case 'blue':\r\n                            dispatch(applyColor('#0097e4'));\r\n                            break;\r\n                        case 'purple':\r\n                            dispatch(applyColor('#a73da5'));\r\n                            break;\r\n                        case 'brown':\r\n                            dispatch(applyColor('#a95a49'));\r\n                            break;\r\n                        case 'gray':\r\n                            dispatch(applyColor('#464646'));\r\n                            break;\r\n                        case 'white':\r\n                            dispatch(applyColor('#f0f0f0'));\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n            case '/hide':\r\n                // Hide all the selected nodes\r\n                hiddenIds = Object.keys(visualInfo)\r\n                    .map((id) => Number(id))\r\n                    .filter((id) => visualInfo[id].selected);\r\n                // Make sure there are nodes selected\r\n                if (hiddenIds.length > 1) {\r\n                    // Re-render the canvas and update the store\r\n                    dispatch(reRender());\r\n                    dispatch(hideNodes(hiddenIds));\r\n                }\r\n                break;\r\n            case '/fold':\r\n                // If the option is a number\r\n                if (commands[1] && !isNaN(Number(commands[1]))) {\r\n                    const nodeId = Number(commands[1]);\r\n                    // Is a valid node\r\n                    if (nodeId >= 0 && nodeId < proof.length) {\r\n                        // Re-render the canvas and update the store\r\n                        dispatch(reRender());\r\n                        dispatch(foldAllDescendants(nodeId));\r\n                    }\r\n                }\r\n                break;\r\n            case '/unfold':\r\n                // If there is a number argument\r\n                if (commands[1] && !isNaN(Number(commands[1]))) {\r\n                    const id = Number(commands[1]);\r\n                    // Get the pi node (to be unfold)\r\n                    const obj = proof.find((node) => node.id === id);\r\n                    // If it's a pi node\r\n                    if (obj && obj.hiddenNodes?.length) {\r\n                        // Get the hidden nodes and their ids\r\n                        const hiddenNodes = obj.hiddenNodes ? obj.hiddenNodes : [];\r\n                        hiddenIds = hiddenNodes ? hiddenNodes.map((node) => node.id) : [];\r\n                        // Re-render the canvas and update the store\r\n                        dispatch(reRender());\r\n                        dispatch(unhideNodes({ pi: id, hiddens: hiddenIds }));\r\n                    }\r\n                }\r\n                break;\r\n            case '/find':\r\n                // If there is an argument and is a number\r\n                if (commands[1] && !isNaN(Number(commands[1]))) {\r\n                    // Find the node\r\n                    dispatch(\r\n                        findNode({\r\n                            nodeId: Number(commands[1]),\r\n                            option: commands[2] === '--s' ? true : false,\r\n                        }),\r\n                    );\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    const exportJSON = () => {\r\n        const downloadJSON = {\r\n            dot: dot,\r\n            visualInfo: visualInfo,\r\n            hiddenNodes: hiddenNodes,\r\n            view: view,\r\n        };\r\n        const fName = fileName.split('.');\r\n        fName.splice(fName.length - 1, 1);\r\n\r\n        const link = document.createElement('a');\r\n        link.download = fName + '.json';\r\n        link.href = `data:attachment/text,${encodeURIComponent(JSON.stringify(downloadJSON))}`;\r\n        link.click();\r\n    };\r\n\r\n    const menus = {\r\n        style: (\r\n            <Menu>\r\n                <MenuItem\r\n                    icon=\"diagram-tree\"\r\n                    text=\"Graph\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(changeStyle('graph'));\r\n                    }}\r\n                />\r\n                <MenuItem\r\n                    icon=\"folder-open\"\r\n                    text=\"Directory\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(changeStyle('directory'));\r\n                    }}\r\n                />\r\n            </Menu>\r\n        ),\r\n        views: (\r\n            <Menu>\r\n                <MenuItem\r\n                    text=\"Basic\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(applyView('basic'));\r\n                        dispatch(reRender());\r\n                    }}\r\n                />\r\n                <MenuItem\r\n                    text=\"Propositional\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(applyView('propositional'));\r\n                        dispatch(reRender());\r\n                    }}\r\n                />\r\n                <MenuItem\r\n                    text=\"Full\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(applyView('full'));\r\n                        dispatch(reRender());\r\n                    }}\r\n                />\r\n            </Menu>\r\n        ),\r\n        download: (\r\n            <Menu>\r\n                <MenuItem icon=\"layout\" text=\"JSON\" onClick={exportJSON} />\r\n                <MenuItem\r\n                    icon=\"graph\"\r\n                    text=\"DOT\"\r\n                    href={`data:attachment/text,${encodeURIComponent(dot ? dot : '')}`}\r\n                    download={fileName ? `${fileName.replaceAll(' ', '_')}.dot` : ''}\r\n                />\r\n                <MenuItem\r\n                    icon=\"square\"\r\n                    text=\"PNG\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        const link = document.createElement('a');\r\n                        link.download = fileName ? `${fileName.replaceAll(' ', '_')}.png` : '';\r\n                        link.href = (\r\n                            document.getElementsByClassName('konvajs-content')[0].children[0] as HTMLCanvasElement\r\n                        ).toDataURL('image/png');\r\n                        link.click();\r\n                    }}\r\n                />\r\n            </Menu>\r\n        ),\r\n        help: (\r\n            <Menu>\r\n                <MenuItem text=\"/view\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that changes the view mode.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /view {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> basic, propositional, full.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/select\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that select a group of nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /select {'<option>'} {'<argument>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Options:</u>\r\n                            <div className=\"option\">\r\n                                1 - A list of node {`id's`} wrapped by brackets and separated by commas (and spaces if\r\n                                wanted) (eg.: [1, 15, 6,3]).\r\n                            </div>\r\n                            <div className=\"option\">\r\n                                2 - A range of node {`id's`} wrapped by brackets and separated by hyphen (and spaces if\r\n                                wanted) (eg.: [ 4 -15]). This range will include the last element.\r\n                            </div>\r\n                            <div className=\"option\">\r\n                                3 - A regex expression used to select all the nodes which the conclusion owns a match\r\n                                (eg.: /\\.*false\\.*/ {'->'} selects all the nodes with false anywhere in the conclusion).\r\n                                <br />\r\n                                <br />\r\n                                If wanted to search a match in the rule just insert the --r argument. The --c argument\r\n                                exists but the /select will by default search in the conclusion.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/unselect\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that unselect all the nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /unselect.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/color\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that changes the color of the current selected\r\n                            nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /color {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Options:</u>\r\n                            <div className=\"option\">1 - A valid hex color notation (eg.: #A7B).</div>\r\n                            <div className=\"option\">\r\n                                2 - A color name between: red, orange, yellow, green, blue, purple, brown, gray, white.\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Prerequisites:</u> a group of nodes being selected.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/hide\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that try to fold (hide) a group of selected nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /hide.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Prerequisites:</u> a group of nodes being selected.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/fold\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that fold all descendants of a specific node.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /fold {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> a valid node id.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/unfold\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that unfold a specific pi node.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /unfold {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> a valid pi node id.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/find\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that find a node and centralize the canvas at it.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /fild {'<node number>'} {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> --s: find and select the node.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n            </Menu>\r\n        ),\r\n    };\r\n\r\n    return (\r\n        <Navbar>\r\n            <Navbar.Group align={Alignment.LEFT}>\r\n                <Navbar.Heading>\r\n                    <b>{windowSize.width >= 900 ? 'Proof Visualizer' : 'PV'}</b>\r\n                </Navbar.Heading>\r\n                <Navbar.Divider />\r\n                <Button\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        openDialog('upload-proof');\r\n                    }}\r\n                    className=\"bp3-minimal\"\r\n                    icon=\"upload\"\r\n                    text={windowSize.width >= 900 ? 'Upload Proof' : ''}\r\n                />\r\n            </Navbar.Group>\r\n\r\n            <Navbar.Group align={Alignment.RIGHT}>\r\n                {fileName ? (\r\n                    <>\r\n                        <Navbar.Heading>{fileName}</Navbar.Heading>\r\n                        <Navbar.Divider />\r\n                        <InputGroup\r\n                            id=\"command\"\r\n                            placeholder=\"/command\"\r\n                            value={command}\r\n                            onChange={(e) => {\r\n                                setCommandId(0);\r\n                                lastCommands[0] = e.target.value;\r\n                                setLastCommands(lastCommands);\r\n                                setCommand(e.target.value);\r\n                            }}\r\n                            onKeyDown={handleInputKeyDown}\r\n                            rightElement={\r\n                                <Popover2 content={menus.help} placement=\"bottom-end\">\r\n                                    <Button icon=\"help\" className=\"bp3-minimal\" />\r\n                                </Popover2>\r\n                            }\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        <Button\r\n                            style={{ marginLeft: '5px' }}\r\n                            icon=\"play\"\r\n                            onClick={() => {\r\n                                runCommands(command);\r\n                                lastCommands.pop();\r\n                                lastCommands.unshift(command);\r\n                                lastCommands[0] = '';\r\n                                setLastCommands(lastCommands);\r\n                                setCommand('');\r\n                            }}\r\n                        />\r\n                        <Navbar.Divider />\r\n                        <Popover2\r\n                            content={fileName ? menus.style : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                        >\r\n                            <Button\r\n                                icon=\"presentation\"\r\n                                className=\"bp3-minimal\"\r\n                                text={windowSize.width >= 900 ? 'Style' : ''}\r\n                                disabled={fileName ? false : true}\r\n                            />\r\n                        </Popover2>\r\n                        <Popover2\r\n                            content={fileName ? menus.views : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                        >\r\n                            <Button\r\n                                className=\"bp3-minimal\"\r\n                                icon=\"diagram-tree\"\r\n                                text={windowSize.width >= 900 ? 'View' : ''}\r\n                                disabled={fileName ? false : true}\r\n                            />\r\n                        </Popover2>\r\n                        <Button\r\n                            className=\"bp3-minimal\"\r\n                            icon=\"translate\"\r\n                            text={windowSize.width >= 900 ? 'Let Map' : ''}\r\n                            disabled={fileName ? false : true}\r\n                            onClick={() => setDrawerIsOpen(true)}\r\n                        />\r\n                        <Popover2\r\n                            content={fileName ? menus.download : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                        >\r\n                            <Button\r\n                                className=\"bp3-minimal\"\r\n                                icon=\"download\"\r\n                                text={windowSize.width >= 900 ? 'Download' : ''}\r\n                                disabled={fileName ? false : true}\r\n                            />\r\n                        </Popover2>\r\n                        <Navbar.Divider />\r\n                    </>\r\n                ) : null}\r\n\r\n                <span id=\"switch-button-dark-theme\">\r\n                    <Switch checked={useAppSelector(selectTheme)} onChange={() => dispatch(toggle())} />\r\n                    <Icon icon={darkTheme ? 'moon' : 'flash'}></Icon>\r\n                </span>\r\n            </Navbar.Group>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: ReduxState, ownProps: NavbarProps) {\r\n    return {\r\n        ...ownProps,\r\n        proof: selectProof(state),\r\n        dot: selectDot(state),\r\n        view: selectView(state),\r\n        visualInfo: selectVisualInfo(state),\r\n        hiddenNodes: selectHiddenNodes(state),\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = { hideNodes };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VisualizerNavbar);\r\n","import React, { useState, useReducer, useEffect } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { Dispatch, SetStateAction } from 'react';\r\nimport { MaybeElement } from '@blueprintjs/core/lib/esm/common/props';\r\nimport { IconName } from '@blueprintjs/core/lib/esm/components/icon/icon';\r\n\r\nimport { Button, Classes, Dialog, FileInput, Intent } from '@blueprintjs/core';\r\n\r\nimport '../../scss/VisualizerDialog.scss';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { set } from '../../store/features/file/fileSlice';\r\nimport { process } from '../../store/features/proof/proofSlice';\r\nimport { allowRenderNewFile, blockRender, reRender } from '../../store/features/externalCmd/externalCmd';\r\n\r\ninterface DialogProps {\r\n    icon: IconName | MaybeElement;\r\n    title: React.ReactNode;\r\n}\r\n\r\ninterface VisualizerDialogProps {\r\n    dialogIsOpen: boolean;\r\n    setDialogIsOpen: Dispatch<SetStateAction<boolean>>;\r\n    dialogContent: string;\r\n    setDialogContent: Dispatch<SetStateAction<string>>;\r\n    addErrorToast: (err: string) => void;\r\n}\r\n\r\nconst readUploadedFileAsText = (inputFile: File) => {\r\n    const temporaryFileReader = new FileReader();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        temporaryFileReader.onerror = () => {\r\n            temporaryFileReader.abort();\r\n            reject(new DOMException('Problem parsing input file.'));\r\n        };\r\n\r\n        temporaryFileReader.onload = () => {\r\n            resolve(temporaryFileReader.result);\r\n        };\r\n        temporaryFileReader.readAsText(inputFile);\r\n    });\r\n};\r\n\r\nconst VisualizerDialog: React.FC<VisualizerDialogProps> = ({\r\n    dialogIsOpen,\r\n    dialogContent,\r\n    setDialogContent,\r\n    setDialogIsOpen,\r\n    addErrorToast,\r\n}: VisualizerDialogProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const dispatch = useAppDispatch();\r\n\r\n    let dialogProps: DialogProps = { icon: 'error', title: 'Error' };\r\n    let dialogBody = <p>This wasn&apos;t supposed to happen. Please contact the developers.</p>;\r\n    let succesButton = <></>;\r\n\r\n    const [fileName, changeFileName] = useState('Choose file...');\r\n    const [file, changeFile] = useState('');\r\n    const [[focusFlag, flagCount], setFocusFlag] = useReducer(\r\n        (state: number[], newFlag: number): number[] => [newFlag, state[1] + 1],\r\n        [0, 0],\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (dialogIsOpen && dialogContent === 'upload-proof') setFocusFlag(1);\r\n    }, [dialogIsOpen, dialogContent]);\r\n\r\n    useEffect(() => {\r\n        let el;\r\n        switch (focusFlag) {\r\n            // Focus the file input\r\n            case 1:\r\n                el = document.getElementsByClassName(Classes.DIALOG_BODY + ' dialog-body');\r\n                (el[0].childNodes[0] as HTMLElement).focus();\r\n                break;\r\n            // Focus the upload button\r\n            case 2:\r\n                el = document.getElementsByClassName(Classes.DIALOG_FOOTER_ACTIONS);\r\n                (el[0].childNodes[0] as HTMLElement).focus();\r\n                break;\r\n        }\r\n    }, [flagCount]);\r\n\r\n    const closeDialog = () => {\r\n        setDialogIsOpen(false);\r\n        changeFileName('Choose file...');\r\n        changeFile('');\r\n    };\r\n\r\n    switch (dialogContent) {\r\n        case 'upload-proof':\r\n            dialogProps = { icon: 'upload', title: 'Upload Proof' };\r\n            dialogBody = (\r\n                <FileInput\r\n                    text={fileName}\r\n                    hasSelection={fileName !== 'Choose file...'}\r\n                    onInputChange={async (e) => {\r\n                        const target = e.target as HTMLInputElement;\r\n                        const file = target.files ? target.files[0] : new File([''], 'filename');\r\n                        if (\r\n                            target.files &&\r\n                            target.files[0] &&\r\n                            target.files[0].name.split('.').slice(-1)[0] !== 'dot' &&\r\n                            target.files[0].name.split('.').slice(-1)[0] !== 'json'\r\n                        ) {\r\n                            addErrorToast('Sorry! Our app only support DOT and JSON files.');\r\n                            return;\r\n                        }\r\n\r\n                        try {\r\n                            // Make sure the file was selected and none error\r\n                            //  of \"no file select\" will be prompted\r\n                            if (file) {\r\n                                const fileContents = await readUploadedFileAsText(file);\r\n                                changeFile(fileContents as string);\r\n                                changeFileName(file.name);\r\n\r\n                                // If succeded, set the focus of the page to the upload button\r\n                                setFocusFlag(2);\r\n                            }\r\n                        } catch (er: any) {\r\n                            addErrorToast(er.message);\r\n                        }\r\n                    }}\r\n                    fill={true}\r\n                />\r\n            );\r\n            succesButton = (\r\n                <Button\r\n                    onClick={() => {\r\n                        dispatch(set({ name: fileName, value: file }));\r\n\r\n                        dispatch(allowRenderNewFile());\r\n                        const ext = fileName.split('.').pop();\r\n                        if (ext === 'json') dispatch(blockRender());\r\n                        else if (ext === 'dot') dispatch(reRender());\r\n\r\n                        dispatch(process(file));\r\n                        closeDialog();\r\n                    }}\r\n                    intent={Intent.SUCCESS}\r\n                    disabled={fileName === 'Choose file...'}\r\n                >\r\n                    Upload Proof\r\n                </Button>\r\n            );\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className={darkTheme ? ' bp3-dark' : ''}\r\n                isOpen={dialogIsOpen}\r\n                onClose={(): void => closeDialog()}\r\n                usePortal={true}\r\n                {...dialogProps}\r\n            >\r\n                <div className={Classes.DIALOG_BODY + ' dialog-body'}>{dialogBody}</div>\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>{succesButton}</div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default VisualizerDialog;\r\n","import { KonvaEventObject } from 'konva/types/Node';\r\nimport React from 'react';\r\nimport { Label, Text, Tag, Group, Circle, Arrow } from 'react-konva';\r\nimport { NodeProps } from '../../../interfaces/interfaces';\r\n\r\nfunction textColorFromBg(bgColor: string) {\r\n    const r = parseInt(bgColor.substring(0, 2), 16);\r\n    const g = parseInt(bgColor.substring(2, 4), 16);\r\n    const b = parseInt(bgColor.substring(4, 6), 16);\r\n    return r * 0.299 + g * 0.587 + b * 0.114 > 150 ? '#000000' : '#ffffff';\r\n}\r\n\r\nfunction sixDigitColor(bgColor: string): string {\r\n    if (bgColor.charAt(0) === '#') {\r\n        if (bgColor.length == 4) {\r\n            return bgColor\r\n                .substring(1, 7)\r\n                .split('')\r\n                .map((c) => c + c)\r\n                .join('');\r\n        } else if (bgColor.length == 7) {\r\n            return bgColor.substring(1, 7);\r\n        }\r\n    } else {\r\n        if (bgColor.length == 3) {\r\n            return bgColor\r\n                .split('')\r\n                .map((c) => c + c)\r\n                .join('');\r\n        } else if (bgColor.length == 6) {\r\n            return bgColor;\r\n        }\r\n    }\r\n    return '000000';\r\n}\r\n\r\nconst Node: React.FC<NodeProps> = (props: NodeProps): JSX.Element => {\r\n    const {\r\n        id,\r\n        conclusion,\r\n        rule,\r\n        args,\r\n        x,\r\n        y,\r\n        nHided,\r\n        nDescendants,\r\n        hiddenNodes,\r\n        dependencies,\r\n        selected,\r\n        color,\r\n        setNodeOnFocus,\r\n        toggleNodeSelection,\r\n        updateNodePosition,\r\n        openDrawer,\r\n        onDragEnd,\r\n        createTree,\r\n    } = props;\r\n\r\n    const handleClick = (e: KonvaEventObject<MouseEvent>): void => {\r\n        if (e.evt.button === 0) {\r\n            if (e.evt.shiftKey) {\r\n                toggleNodeSelection(id);\r\n            } else {\r\n                openDrawer(\r\n                    {\r\n                        rule: rule,\r\n                        args: args,\r\n                        conclusion: conclusion,\r\n                        nHided: nHided,\r\n                        nDescendants: nDescendants - (rule === 'π' ? 0 : 0),\r\n                        hiddenNodes: hiddenNodes,\r\n                        dependencies: dependencies,\r\n                    },\r\n                    createTree(id),\r\n                );\r\n            }\r\n        } else if (e.evt.button === 2) {\r\n            setNodeOnFocus(id);\r\n            const menuNode = document.getElementById('menu');\r\n            if (menuNode) {\r\n                menuNode.style.top = `${e.evt.clientY}px`;\r\n                menuNode.style.left = `${e.evt.clientX}px`;\r\n                menuNode.style.display = 'initial';\r\n                window.addEventListener('click', () => {\r\n                    menuNode.style.display = 'none';\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const depSize = 25,\r\n        depLineSize = 25;\r\n    const bgColor = color;\r\n\r\n    const style = {\r\n        tag: {\r\n            fill: bgColor,\r\n            stroke: selected ? 'red' : 'black',\r\n            strokeWidth: selected ? 3 : 1,\r\n        },\r\n        get dep() {\r\n            return { ...this.tag };\r\n        },\r\n        text: {\r\n            align: 'center',\r\n            fill: textColorFromBg(sixDigitColor(bgColor)),\r\n            fontSize: 15,\r\n            height: 35,\r\n            padding: 10,\r\n            width: 300,\r\n        },\r\n        get depText() {\r\n            return {\r\n                ...this.text,\r\n                padding: 0,\r\n                width: depSize * 2,\r\n            };\r\n        },\r\n    };\r\n    const infos = {\r\n        nHided: nHided ? `#hidden: ${nHided}` : '',\r\n        nDescendants: ` #descendants: ${nDescendants}`,\r\n        rule: nHided ? 'π' : rule,\r\n        dependencies: dependencies.length === 1 ? String(dependencies[0].piId) : 'π',\r\n    };\r\n\r\n    return (\r\n        <Group\r\n            draggable\r\n            id={id.toString()}\r\n            key={id}\r\n            onDragMove={(e) => {\r\n                updateNodePosition(id, e.target.attrs.x, e.target.attrs.y);\r\n            }}\r\n            onDragEnd={onDragEnd}\r\n            x={x}\r\n            y={y}\r\n            onClick={handleClick}\r\n        >\r\n            <Label x={0} y={0}>\r\n                <Tag {...style.tag} />\r\n                <Text {...style.text} text={conclusion} />\r\n            </Label>\r\n            <Label x={0} y={35}>\r\n                <Tag {...style.tag} />\r\n                <Text {...style.text} text={infos.rule} />\r\n            </Label>\r\n            <Label x={0} y={70} {...{ align: 'right' }}>\r\n                <Tag {...style.tag} />\r\n                <Text {...{ ...style.text, width: 50 }} text={id.toString()} />\r\n            </Label>\r\n            <Label x={50} y={70}>\r\n                <Tag {...style.tag} />\r\n                <Text {...{ ...style.text, width: 250 }} text={infos.nHided + infos.nDescendants} />\r\n            </Label>\r\n            {dependencies.length ? (\r\n                <Label x={300} y={0}>\r\n                    <Arrow strokeWidth={1} stroke=\"black\" fill=\"black\" points={[depLineSize, 53, 0, 53]} />\r\n                    <Circle x={depLineSize + depSize} y={53} radius={depSize} {...style.dep}></Circle>\r\n                    <Label x={depLineSize} y={45}>\r\n                        <Text {...style.depText} text={infos.dependencies} />\r\n                    </Label>\r\n                </Label>\r\n            ) : null}\r\n        </Group>\r\n    );\r\n};\r\n\r\nexport default Node;\r\n","import React from 'react';\r\nimport { Arrow } from 'react-konva';\r\n\r\nimport { LineProps } from '../../../interfaces/interfaces';\r\n\r\nconst Line = ({ key, points }: LineProps): JSX.Element => {\r\n    return <Arrow key={key} strokeWidth={1} stroke=\"black\" fill=\"black\" points={[...points]} />;\r\n};\r\n\r\nexport default Line;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ControlGroup, Button, InputGroup } from '@blueprintjs/core';\r\n\r\nconst Menu = ({\r\n    unfold,\r\n    foldSelectedNodes,\r\n    foldAllDescendants,\r\n    changeNodeColor,\r\n    currentColor,\r\n    options,\r\n}: {\r\n    unfold: () => void;\r\n    foldSelectedNodes: () => void;\r\n    foldAllDescendants: () => void;\r\n    changeNodeColor: (color: string) => void;\r\n    currentColor: string;\r\n    options: { unfold: boolean; foldSelected: boolean; foldAllDescendants: boolean };\r\n}): JSX.Element => {\r\n    const [color, setColor] = useState(currentColor);\r\n\r\n    useEffect(() => {\r\n        setColor(currentColor);\r\n    }, [currentColor]);\r\n\r\n    return (\r\n        <div className=\"bp3-popover2-content\">\r\n            <ul id=\"menu\" className=\"bp3-menu\">\r\n                {options.unfold ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => unfold()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-open\">\r\n                                <span> Unfold</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                {options.foldSelected ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => foldSelectedNodes()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\r\n                                <span> Fold selected nodes</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                {options.foldAllDescendants ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => foldAllDescendants()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\r\n                                <span> Fold all descendants</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                <li className=\"\">\r\n                    <a className=\"bp3-menu-item\">\r\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\r\n                            <span>\r\n                                <span onClick={() => changeNodeColor('#f72b34')}> 🟥</span>\r\n                                <span onClick={() => changeNodeColor('#ff8334')}> 🟧</span>\r\n                                <span onClick={() => changeNodeColor('#ffc149')}> 🟨</span>\r\n                                <span onClick={() => changeNodeColor('#60aa51')}> 🟩</span>\r\n                                <span onClick={() => changeNodeColor('#0097e4')}> 🟦</span>\r\n                                <span onClick={() => changeNodeColor('#a73da5')}> 🟪</span>\r\n                                <span onClick={() => changeNodeColor('#a95a49')}> 🟫</span>\r\n                                <span onClick={() => changeNodeColor('#464646')}> ⬛</span>\r\n                                <span onClick={() => changeNodeColor('#f0f0f0')}> ⬜</span>\r\n                            </span>\r\n                        </div>\r\n                    </a>\r\n                </li>\r\n                <li className=\"\">\r\n                    <a className=\"bp3-menu-item\">\r\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\r\n                            <ControlGroup\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                }}\r\n                                fill={true}\r\n                                vertical={false}\r\n                            >\r\n                                <InputGroup\r\n                                    placeholder={currentColor}\r\n                                    value={color}\r\n                                    onChange={(e) => setColor(e.target.value)}\r\n                                />\r\n                                <Button\r\n                                    icon=\"style\"\r\n                                    onClick={() => {\r\n                                        changeNodeColor(color);\r\n                                        setColor('');\r\n                                    }}\r\n                                    disabled={color.match(/^#([0-9a-f]{3}){1,2}$/i) === null}\r\n                                ></Button>\r\n                            </ControlGroup>\r\n                        </div>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport Konva from 'konva';\r\nimport dagre from 'dagre';\r\nimport Node from './VisualizerNode';\r\nimport Line from './VisualizerLine';\r\nimport Menu from './VisualizerMenu';\r\n\r\nimport {\r\n    NodeProps,\r\n    LineProps,\r\n    TreeNode,\r\n    CanvasPropsAndRedux,\r\n    NodeInterface,\r\n    ProofState,\r\n    ReduxState,\r\n} from '../../../interfaces/interfaces';\r\n\r\nimport '../../../scss/VisualizerCanvas.scss';\r\n\r\nimport { CanvasProps, CanvasState } from '../../../interfaces/interfaces';\r\nimport { connect } from 'react-redux';\r\nimport { selectProof, selectVisualInfo } from '../../../store/features/proof/proofSlice';\r\nimport {\r\n    hideNodes,\r\n    unhideNodes,\r\n    foldAllDescendants,\r\n    applyView,\r\n    setVisualInfo,\r\n} from '../../../store/features/proof/proofSlice';\r\nimport {\r\n    selectFindData,\r\n    findNode,\r\n    selectRenderData,\r\n    reRender,\r\n    addRenderCount,\r\n    blockRenderNewFile,\r\n} from '../../../store/features/externalCmd/externalCmd';\r\n\r\nconst nodeWidth = 300,\r\n    nodeHeight = 130;\r\n\r\nfunction handleWheel(e: Konva.KonvaEventObject<WheelEvent>): { stageScale: number; stageX: number; stageY: number } {\r\n    e.evt.preventDefault();\r\n\r\n    const scaleBy = 1.08;\r\n    const stage = e.target.getStage();\r\n    if (stage) {\r\n        const oldScale = stage.scaleX();\r\n        const pointerPosition = stage.getPointerPosition();\r\n        let x, y;\r\n\r\n        if (pointerPosition) {\r\n            [x, y] = [pointerPosition.x, pointerPosition.y];\r\n        } else {\r\n            [x, y] = [0, 0];\r\n        }\r\n\r\n        const mousePointTo = {\r\n            x: x / oldScale - stage.x() / oldScale,\r\n            y: y / oldScale - stage.y() / oldScale,\r\n        };\r\n\r\n        const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\r\n\r\n        return {\r\n            stageScale: newScale,\r\n            stageX: -(mousePointTo.x - x / newScale) * newScale,\r\n            stageY: -(mousePointTo.y - y / newScale) * newScale,\r\n        };\r\n    }\r\n    return {\r\n        stageScale: 1,\r\n        stageX: 0,\r\n        stageY: 0,\r\n    };\r\n}\r\n\r\nclass Canvas extends Component<CanvasPropsAndRedux, CanvasState> {\r\n    constructor(props: CanvasPropsAndRedux) {\r\n        super(props);\r\n        this.componentDidUpdate = this.componentDidUpdate.bind(this);\r\n        this.setNodeOnFocus = this.setNodeOnFocus.bind(this);\r\n\r\n        this.state = {\r\n            canvasSize: {\r\n                width: 520,\r\n                height: 300,\r\n            },\r\n            stage: {\r\n                stageScale: 1,\r\n                stageX: 0,\r\n                stageY: 0,\r\n            },\r\n            showingNodes: {},\r\n            showingEdges: {},\r\n            nodeOnFocus: NaN,\r\n            nodesSelected: [],\r\n            proof: [],\r\n            visualInfo: {},\r\n        };\r\n    }\r\n\r\n    static copyNodePosition = (\r\n        visualInfo: ProofState['visualInfo'],\r\n        showingNodes: CanvasState['showingNodes'],\r\n    ): ProofState['visualInfo'] => {\r\n        // Get the current position of the nodes and create a proofState with them included\r\n        const newVisualInfo: ProofState['visualInfo'] = {};\r\n        Object.keys(visualInfo).forEach((id) => {\r\n            const key = Number(id);\r\n\r\n            if (showingNodes[key]) {\r\n                newVisualInfo[key] = {\r\n                    ...visualInfo[key],\r\n                    x: showingNodes[key].props.x,\r\n                    y: showingNodes[key].props.y,\r\n                };\r\n            } else {\r\n                newVisualInfo[key] = {\r\n                    ...visualInfo[key],\r\n                };\r\n            }\r\n        });\r\n        return newVisualInfo;\r\n    };\r\n\r\n    static newNodeProps = (node: NodeInterface, visualInfos: ProofState['visualInfo']): NodeProps => {\r\n        const visualInfo = visualInfos[node.id];\r\n        return {\r\n            id: node.id,\r\n            conclusion: node.conclusion,\r\n            rule: node.rule,\r\n            args: node.args,\r\n            x: visualInfo.x,\r\n            y: visualInfo.y,\r\n            nHided: node.hiddenNodes ? node.hiddenNodes.length : 0,\r\n            nDescendants: node.descendants - 1,\r\n            hiddenNodes: node.hiddenNodes ? node.hiddenNodes.map((node) => node.id) : [],\r\n            dependencies: node.dependencies ? node.dependencies : [],\r\n            selected: visualInfo.selected,\r\n            color: visualInfo.color,\r\n            setNodeOnFocus: () => undefined,\r\n            toggleNodeSelection: () => undefined,\r\n            updateNodePosition: () => undefined,\r\n            openDrawer: () => undefined,\r\n            onDragEnd: () => undefined,\r\n            createTree: () => {\r\n                return [];\r\n            },\r\n        };\r\n    };\r\n\r\n    static getDerivedStateFromProps(props: CanvasPropsAndRedux, current_state: CanvasState) {\r\n        const proofChanged = JSON.stringify(current_state.proof) !== JSON.stringify(props.proof);\r\n        const visualInfoChanged = JSON.stringify(current_state.visualInfo) !== JSON.stringify(props.visualInfo);\r\n        const { nodeToFind, findOption } = props.nodeFindData;\r\n        const { count, fileChanged } = props.renderData;\r\n        const stage = current_state.stage;\r\n\r\n        // If there is a node to be found\r\n        if (nodeToFind > -1) {\r\n            // Is valid node\r\n            if (nodeToFind <= props.proof[props.proof.length - 1].id) {\r\n                // Change the stage position\r\n                const { x, y } = props.visualInfo[nodeToFind];\r\n                stage.stageX = current_state.canvasSize.width / 2 - (x + nodeWidth / 2) * stage.stageScale;\r\n                stage.stageY = current_state.canvasSize.height / 2 - (y + nodeHeight / 2) * stage.stageScale;\r\n\r\n                // Select the finded node\r\n                if (findOption) {\r\n                    props.setVisualInfo({\r\n                        ...props.visualInfo,\r\n                        [nodeToFind]: { ...props.visualInfo[nodeToFind], selected: true },\r\n                    });\r\n                }\r\n            }\r\n            // Reset the node finder\r\n            props.findNode({ nodeId: -1, option: false });\r\n        }\r\n\r\n        // If the proof or visual info changed or we have a new file being uploaded\r\n        if (proofChanged || visualInfoChanged || fileChanged) {\r\n            // Create the showing nodes array\r\n            const showingNodes: CanvasState['showingNodes'] = {};\r\n            props.proof.forEach((node, id) => {\r\n                showingNodes[node.id] = <Node key={id} {...Canvas.newNodeProps(node, props.visualInfo)} />;\r\n            });\r\n\r\n            // If has nodes and can render\r\n            if (showingNodes[0] && count < 2) {\r\n                props.addRenderCount();\r\n\r\n                const g = new dagre.graphlib.Graph();\r\n                g.setGraph({ rankdir: 'BT', ranker: 'tight-tree' });\r\n                g.setDefaultEdgeLabel(function () {\r\n                    return {};\r\n                });\r\n                props.proof.forEach((node) => {\r\n                    g.setNode(node.id.toString(), {\r\n                        width: nodeWidth + (node.dependencies.length ? 95 : 0),\r\n                        height: nodeHeight,\r\n                    });\r\n                    node.children.forEach((child) => {\r\n                        g.setEdge(child.toString(), node.id.toString());\r\n                    });\r\n                });\r\n                dagre.layout(g);\r\n\r\n                const xOffset = g.node('0').x - (showingNodes[0].props.x ? showingNodes[0].props.x : 0);\r\n                const yOffset = g.node('0').y - (showingNodes[0].props.y ? showingNodes[0].props.y : 0);\r\n                g.nodes().forEach((v) => {\r\n                    try {\r\n                        const { x, y } = g.node(v);\r\n                        const key = parseInt(v);\r\n                        showingNodes[key] = (\r\n                            <Node\r\n                                {...{\r\n                                    ...showingNodes[key].props,\r\n                                    x: x - xOffset,\r\n                                    y: y - yOffset,\r\n                                }}\r\n                            />\r\n                        );\r\n                    } catch (e) {\r\n                        console.log(e);\r\n                    }\r\n                });\r\n\r\n                props.setVisualInfo(Canvas.copyNodePosition(props.visualInfo, showingNodes));\r\n            }\r\n            // Reset the new file indicator if it's true\r\n            if (fileChanged) props.blockRenderNewFile();\r\n\r\n            return {\r\n                showingNodes: showingNodes,\r\n                showingEdges: {},\r\n                proof: props.proof,\r\n                visualInfo: props.visualInfo,\r\n                stage: stage,\r\n            };\r\n        }\r\n        return { stage: stage };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        const { showingNodes } = this.state;\r\n        const { proof, visualInfo } = this.props;\r\n\r\n        const newShowingNodes: CanvasState['showingNodes'] = {};\r\n        proof.forEach((node, id) => {\r\n            newShowingNodes[node.id] = <Node key={id} {...Canvas.newNodeProps(node, visualInfo)} />;\r\n        });\r\n\r\n        this.setState({ proof: proof, showingNodes: newShowingNodes });\r\n\r\n        if (showingNodes[0]) {\r\n            const [width, height] = [window.innerWidth, window.innerHeight - 50];\r\n\r\n            // Make sure every time the Canvas is mounted the props are passed to the showing nodes\r\n            this.updateEdgesAndFuncs();\r\n\r\n            this.setState({\r\n                canvasSize: {\r\n                    width,\r\n                    height,\r\n                },\r\n                stage: {\r\n                    stageScale: 1,\r\n                    stageX: width / 2 - (showingNodes[0].props.x + 300 / 2),\r\n                    stageY: height / 10 - (showingNodes[0].props.y + 30 / 2),\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: CanvasPropsAndRedux) {\r\n        // If the proof changed\r\n        if (prevProps.proof !== this.props.proof) {\r\n            this.updateEdgesAndFuncs();\r\n        }\r\n    }\r\n\r\n    updateEdgesAndFuncs() {\r\n        const { showingNodes, showingEdges } = this.state;\r\n        const { proof } = this.props;\r\n\r\n        // Update edges\r\n        proof.forEach((node) => {\r\n            if (showingNodes[node.parents[0]]) {\r\n                node.parents.forEach((parent) => {\r\n                    showingEdges[`${node.id}->${parent}`] = Line(\r\n                        this.LineProps(\r\n                            `${node.id}->${parent}`,\r\n                            showingNodes[node.id].props,\r\n                            showingNodes[parent].props,\r\n                        ),\r\n                    );\r\n                });\r\n            }\r\n        });\r\n        Object.keys(showingNodes).forEach((nodeId: string) => {\r\n            // Make sure a function is updated once\r\n            if (!showingNodes[parseInt(nodeId)].props.setNodeOnFocus.length) {\r\n                const { openDrawer } = this.props;\r\n\r\n                // Set the node functions\r\n                showingNodes[parseInt(nodeId)] = (\r\n                    <Node\r\n                        {...{\r\n                            ...showingNodes[parseInt(nodeId)].props,\r\n                            setNodeOnFocus: this.setNodeOnFocus,\r\n                            toggleNodeSelection: this.toggleNodeSelection,\r\n                            updateNodePosition: this.updateNodePosition,\r\n                            openDrawer: openDrawer,\r\n                            onDragEnd: this.saveNodePosition,\r\n                            createTree: this.createTree,\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n        });\r\n        this.setState({ showingEdges, showingNodes });\r\n    }\r\n\r\n    /* NODE MENU ACTIONS */\r\n    foldAllDescendants = (): void => {\r\n        const { nodeOnFocus } = this.state;\r\n        const { foldAllDescendants, reRender } = this.props;\r\n\r\n        reRender();\r\n        foldAllDescendants(nodeOnFocus);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    foldSelectedNodes = (): void => {\r\n        const { nodesSelected } = this.state;\r\n        const { hideNodes, reRender } = this.props;\r\n\r\n        reRender();\r\n        hideNodes(nodesSelected);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    unfold = (): void => {\r\n        const { nodeOnFocus, proof } = this.state;\r\n        const { unhideNodes, reRender } = this.props;\r\n\r\n        // Get the pi node (to be unfold)\r\n        const obj = proof.find((node) => node.id === nodeOnFocus);\r\n        // Get the hidden nodes and their ids\r\n        const hiddenNodes = obj ? (obj.hiddenNodes ? obj.hiddenNodes : []) : [];\r\n        const hiddenIds = hiddenNodes ? hiddenNodes.map((node) => node.id) : [];\r\n\r\n        reRender();\r\n        unhideNodes({ pi: nodeOnFocus, hiddens: hiddenIds });\r\n\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    changeNodeColor = (color: string): void => {\r\n        const { showingNodes, nodesSelected, nodeOnFocus } = this.state;\r\n        const { setVisualInfo } = this.props;\r\n        let { visualInfo } = this.props;\r\n\r\n        // Save the current position\r\n        nodesSelected.forEach((nodeId) => {\r\n            visualInfo = {\r\n                ...visualInfo,\r\n                [nodeId]: {\r\n                    ...visualInfo[nodeId],\r\n                    color: color,\r\n                    selected: false,\r\n                },\r\n            };\r\n        });\r\n        if (!nodesSelected.length && showingNodes[nodeOnFocus]) {\r\n            visualInfo = {\r\n                ...visualInfo,\r\n                [nodeOnFocus]: { ...visualInfo[nodeOnFocus], color: color, selected: false },\r\n            };\r\n        }\r\n\r\n        setVisualInfo(visualInfo);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    toggleNodeSelection = (id: number): void => {\r\n        let { nodesSelected } = this.state;\r\n        const { visualInfo, setVisualInfo } = this.props;\r\n\r\n        if (visualInfo[id].selected) {\r\n            nodesSelected = nodesSelected.filter((nodeId) => nodeId !== id);\r\n        } else {\r\n            nodesSelected.push(id);\r\n        }\r\n\r\n        // Save the current position\r\n        setVisualInfo({\r\n            ...visualInfo,\r\n            [id]: {\r\n                ...visualInfo[id],\r\n                selected: !visualInfo[id].selected,\r\n            },\r\n        });\r\n\r\n        this.setState({ nodesSelected });\r\n    };\r\n\r\n    /*TREE*/\r\n    createTree = (id: number): TreeNode[] => {\r\n        return this.props.createTree(this.state.proof, id);\r\n    };\r\n\r\n    /* UTILS */\r\n    setNodeOnFocus = (id: number): void => {\r\n        this.setState({ nodeOnFocus: id });\r\n    };\r\n\r\n    LineProps = (key: string, from: NodeProps, to: NodeProps): LineProps => ({\r\n        key,\r\n        points: [from.x + 150, from.y, to.x + 150, to.y + 105],\r\n    });\r\n\r\n    saveNodePosition = (): void => {\r\n        const { visualInfo, setVisualInfo } = this.props;\r\n        const { showingNodes } = this.state;\r\n\r\n        // Get the current position of the nodes and create a proofState with them included\r\n        setVisualInfo(Canvas.copyNodePosition(visualInfo, showingNodes));\r\n    };\r\n\r\n    updateNodePosition = (key: number, x: number, y: number): void => {\r\n        const { showingNodes, showingEdges } = this.state;\r\n\r\n        showingNodes[key] = <Node {...{ ...showingNodes[key].props, x, y }} />;\r\n\r\n        Object.keys(showingEdges)\r\n            .filter((edgeKey) => edgeKey.indexOf(key.toString()) !== -1)\r\n            .forEach((edge) => {\r\n                const [from, to] = edge.split('->').map((x) => parseInt(x));\r\n                showingEdges[edge] = Line(this.LineProps(edge, showingNodes[from].props, showingNodes[to].props));\r\n            });\r\n        this.setState({ showingNodes, showingEdges });\r\n    };\r\n\r\n    render(): JSX.Element {\r\n        const { canvasSize, stage, showingNodes, showingEdges, nodesSelected, nodeOnFocus, proof } = this.state;\r\n        const color = showingNodes[nodeOnFocus] ? showingNodes[nodeOnFocus].props.color : '';\r\n        const found = proof.find((o) => o.id === nodeOnFocus);\r\n\r\n        return (\r\n            <div>\r\n                <Menu\r\n                    unfold={this.unfold}\r\n                    foldSelectedNodes={this.foldSelectedNodes}\r\n                    foldAllDescendants={this.foldAllDescendants}\r\n                    changeNodeColor={this.changeNodeColor}\r\n                    options={{\r\n                        unfold: showingNodes[nodeOnFocus] ? Boolean(showingNodes[nodeOnFocus].props.nHided) : false,\r\n                        foldSelected: nodesSelected.length && nodesSelected.includes(nodeOnFocus) ? true : false,\r\n                        foldAllDescendants:\r\n                            Boolean(found?.children.length) && !Boolean(found?.hiddenNodes?.length) && found?.id != 0,\r\n                    }}\r\n                    currentColor={color}\r\n                ></Menu>\r\n                <Stage\r\n                    draggable\r\n                    onDragMove={() => null}\r\n                    onDragEnd={() => null}\r\n                    width={canvasSize.width}\r\n                    height={canvasSize.height}\r\n                    onWheel={(e) => this.setState({ stage: handleWheel(e) })}\r\n                    scaleX={stage.stageScale}\r\n                    scaleY={stage.stageScale}\r\n                    x={stage.stageX}\r\n                    y={stage.stageY}\r\n                    onContextMenu={(e) => e.evt.preventDefault()}\r\n                >\r\n                    <Layer>\r\n                        {Object.keys(showingEdges).length > 0 &&\r\n                            Object.keys(showingEdges).map(function (key) {\r\n                                return showingEdges[key];\r\n                            })}\r\n                        {Object.keys(showingNodes).length > 0 &&\r\n                            Object.keys(showingNodes).map(\r\n                                (value: string): JSX.Element => showingNodes[parseInt(value)],\r\n                            )}\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState, ownProps: CanvasProps) {\r\n    return {\r\n        proof: selectProof(state),\r\n        visualInfo: selectVisualInfo(state),\r\n        nodeFindData: selectFindData(state),\r\n        renderData: selectRenderData(state),\r\n        ...ownProps,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    hideNodes,\r\n    unhideNodes,\r\n    foldAllDescendants,\r\n    applyView,\r\n    setVisualInfo,\r\n    findNode,\r\n    reRender,\r\n    addRenderCount,\r\n    blockRenderNewFile,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Canvas);\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Drawer, Position, Classes, Icon, Collapse, Pre, TreeNodeInfo } from '@blueprintjs/core';\r\nimport Canvas from './Canvas/VisualizerCanvas';\r\nimport VisualizerTree from '../VisualizerTree/VisualizerTree';\r\nimport VisualizerDirectoryStyle from './VisualizerDirectoryStyle/VisualizerDirectoryStyle';\r\n\r\nimport '../../scss/VisualizerStage.scss';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectDot, selectFileCount } from '../../store/features/file/fileSlice';\r\nimport { selectStyle, selectLetMap, selectOriginalProof } from '../../store/features/proof/proofSlice';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { NodeInfo, NodeInterface, TreeNode } from '../../interfaces/interfaces';\r\nimport LetRender from '../VisualizerLetDrawer/LetRender';\r\n\r\nexport enum drawerHelpersKind {\r\n    RULE,\r\n    ARGS,\r\n    CONC,\r\n    ALL,\r\n}\r\n\r\nfunction ruleHelper(rule: string) {\r\n    switch (rule.split(' ')[0]) {\r\n        case 'π':\r\n            return 'This node hides some parts of the proof, you can unfold it.';\r\n        case 'ASSUME':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Assumption (a leaf)\\nChildren: none\\nArguments: (F)\\n--------------\\nConclusion: F\\n\\nThis rule has special status, in that an application of assume is an open leaf in a proof that is not (yet) justified. An assume leaf is analogous to a free variable in a term, where we say \"F is a free assumption in proof P\" if it contains an application of F that is not  bound by SCOPE.'\r\n            );\r\n        case 'SCOPE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Scope (a binder for assumptions)\\nChildren: (P:F)\\nArguments: (F1, ..., Fn)\\n--------------\\nConclusion: (=> (and F1 ... Fn) F) or (not (and F1 ... Fn)) if F is false\\n\\nThis rule has a dual purpose with ASSUME. It is a way to close assumptions in a proof. We require that F1 ... Fn are free assumptions in P and say that F1, ..., Fn are not free in (SCOPE P). In other words, they are bound by this application. For example, the proof node: (SCOPE (ASSUME F) :args F) has the conclusion (=> F F) and has no free assumptions. More generally, a proof with no free assumptions always concludes a valid formula.'\r\n            );\r\n        case 'SUBS':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Substitution\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids)?)\\n---------------------------------------------------------------\\nConclusion: (= t t*sigma{ids}(Fn)*...*sigma{ids}(F1))\\nwhere sigma{ids}(Fi) are substitutions, which notice are applied in reverse order. Notice that ids is a MethodId identifier, which determines how to convert the formulas F1, ..., Fn into substitutions.'\r\n            );\r\n        case 'REWRITE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Rewrite\\nChildren: none\\nArguments: (t, (idr)?)\\n----------------------------------------\\nConclusion: (= t Rewriter{idr}(t))\\nwhere idr is a MethodId identifier, which determines the kind of rewriter to apply, e.g. Rewriter::rewrite.'\r\n            );\r\n        case 'EVALUATE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Evaluate\\nChildren: none\\n\\nArguments: (t)\\n----------------------------------------\\nConclusion: (= t Evaluator::evaluate(t))\\nNote this is equivalent to: (REWRITE t MethodId::RW_EVALUATE)'\r\n            );\r\n        case 'MACRO_SR_EQ_INTRO':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, we provide a term t and conclude that it is equal to its rewritten form under a (proven) substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: (= t t')\\nwhere t' is Rewriter{idr}(t*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nIn other words, from the point of view of Skolem forms, this rule transforms t to t' by standard substitution + rewriting.\\n\\nThe arguments ids, ida and idr are optional and specify the identifier of the substitution, the substitution application and rewriter respectively to be used.\"\r\n            );\r\n        case 'MACRO_SR_PRED_INTRO':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, we provide a formula F and conclude it, under the condition that it rewrites to true under a proven substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (F, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == true where ids and idr are method identifiers.\\n\\nMore generally, this rule also holds when: Rewriter::rewrite(toOriginal(F')) == true where F' is the result of the left hand side of the equality above. Here, notice that we apply rewriting on the original form of F', meaning that this rule may conclude an F whose Skolem form is justified by the definition of its (fresh) Skolem variables. For example, this rule may justify the conclusion (= k t) where k is the purification Skolem for t, e.g. where the original form of k is t.\\n\\nFurthermore, notice that the rewriting and substitution is applied only within the side condition, meaning the rewritten form of the original form of F does not escape this rule.\"\r\n            );\r\n        case 'MACRO_SR_PRED_ELIM':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may conclude its rewritten form under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: ((ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: F'\\nwhere F' is Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)). where ids and idr are method identifiers.\\n\\nWe rewrite only on the Skolem form of F, similar to MACRO_SR_EQ_INTRO.\"\r\n            );\r\n        case 'MACRO_SR_PRED_TRANSFORM':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may provide a formula G and conclude it if F and G are equivalent after rewriting under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: (G, (ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: G\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == Rewriter{idr}(G*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nMore generally, this rule also holds when:\\n  Rewriter::rewrite(toOriginal(F')) == Rewriter::rewrite(toOriginal(G'))\\nwhere F' and G' are the result of each side of the equation above. Here, original forms are used in a similar manner to MACRO_SR_PRED_INTRO above.\"\r\n            );\r\n        case 'REMOVE_TERM_FORMULA_AXIOM':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Remove Term Formulas Axiom\\nChildren: none\\nArguments: (t)\\n---------------------------------------------------------------\\nConclusion: RemoveTermFormulas::getAxiomFor(t).'\r\n            );\r\n        case 'THEORY_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Theory lemma\\nChildren: none\\nArguments: (F, tid)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a (T-valid) theory lemma generated by theory with TheoryId tid. This is a \"coarse-grained\" rule that is used as a placeholder if a theory did not provide a proof for a lemma or conflict.'\r\n            );\r\n        case 'THEORY_REWRITE':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== Theory Rewrite\\nChildren: none\\nArguments: (F, tid, rid)\\n----------------------------------------\\nConclusion: F\\nwhere F is an equality of the form (= t t') where t' is obtained by applying the kind of rewriting given by the method identifier rid, which is one of: { RW_REWRITE_THEORY_PRE, RW_REWRITE_THEORY_POST, RW_REWRITE_EQ_EXT } Notice that the checker for this rule does not replay the rewrite to ensure correctness, since theory rewriter methods are not static. For example, the quantifiers rewriter involves constructing new bound variables that are not guaranteed to be consistent on each call.\"\r\n            );\r\n        case 'PREPROCESS':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on some preprocessing pass, or otherwise F was added as a new assertion by some preprocessing pass.\"\r\n            );\r\n        case 'PREPROCESS_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by some preprocessing pass.'\r\n            );\r\n        case 'THEORY_PREPROCESS':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = Theory::ppRewrite(t) for some theory. Notice this is a \"trusted\" rule.'\r\n            );\r\n        case 'THEORY_PREPROCESS_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by theory preprocessing.'\r\n            );\r\n        case 'THEORY_EXPAND_DEF':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on theory expand definitions.\"\r\n            );\r\n        case 'WITNESS_AXIOM':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an existential (exists ((x T)) (P x)) used for introducing a witness term (witness ((x T)) (P x)).'\r\n            );\r\n        case 'TRUST_REWRITE':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of rewriting that could not be replayed during proof postprocessing.\"\r\n            );\r\n        case 'TRUST_SUBS':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be replayed during proof postprocessing.\"\r\n            );\r\n        case 'TRUST_SUBS_MAP':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be determined by the TrustSubstitutionMap. This inference may contain possibly multiple children corresponding to the formulas used to derive the substitution.\"\r\n            );\r\n        case 'TRUST_SUBS_EQ':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a solved equality of the form (= x t) derived as the solved form of F', where F' is given as a child.\"\r\n            );\r\n        case 'SAT_REFUTATION':\r\n            return (\r\n                rule +\r\n                '\\n\\n========= SAT Refutation for assumption-based unsat cores\\nChildren: (P1, ..., Pn)\\nArguments: none\\n---------------------\\nConclusion: false\\nNote: P1, ..., Pn correspond to the unsat core determined by the SAT solver.'\r\n            );\r\n        case 'RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== Resolution\\nChildren:\\n(P1:C1, P2:C2)\\nArguments: (pol, L)\\n---------------------\\nConclusion: C\\nwhere\\n- C1 and C2 are nodes viewed as clauses, i.e., either an OR node with each children viewed as a literal or a node viewed as a literal. Note that an OR node could also be a literal.\\n- pol is either true or false, representing the polarity of the pivot on the first clause\\n- L is the pivot of the resolution, which occurs as is (resp. under a NOT) in C1 and negatively (as is) in C2 if pol = true (pol = false).\\nC is a clause resulting from collecting all the literals in C1, minus the first occurrence of the pivot or its negation, and C2, minus the first occurrence of the pivot or its negation, according to the policy above. If the resulting clause has a single literal, that literal itself is the result; if it has no literals, then the result is false; otherwise it's an OR node of the resulting literals.\\n\\nNote that it may be the case that the pivot does not occur in the clauses. In this case the rule is not unsound, but it does not correspond to resolution but rather to a weakening of the clause that did not have a literal eliminated.\"\r\n            );\r\n        case 'CHAIN_RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== N-ary Resolution\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined above\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined above\\n- let C_1' = C_1 (from P1),\\n- for each i > 1, let C_i' = C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C = C_n'\"\r\n            );\r\n        case 'FACTORING':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Factoring\\nChildren: (P:C1)\\nArguments: ()\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 is the same and the number of literals in C2 is smaller than that of C1'\r\n            );\r\n        case 'REORDERING':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Reordering\\nChildren: (P:C1)\\nArguments: (C2)\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 are the same and the number of literals in C2 is the same of that of C1'\r\n            );\r\n        case 'MACRO_RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\r\n            );\r\n        case 'MACRO_RESOLUTION_TRUST':\r\n            return (\r\n                rule +\r\n                \"\\n\\nAs MACRO_RESOLUTION but not checked\\n\\nMACRO_RESOLUTION definition:\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\r\n            );\r\n        default:\r\n            return rule;\r\n    }\r\n}\r\n\r\nfunction castProofNodeToTreeNode(node: NodeInterface): TreeNode {\r\n    const label = node.hiddenNodes?.length\r\n        ? // Pi node\r\n          `${node.id} : π ➜ ${node.conclusion}`\r\n        : node.dependencies.length\r\n        ? // Node with dependencies\r\n          `${node.id} : β ➜ ${node.conclusion}`\r\n        : //Normal node\r\n          `${node.id} : ${node.conclusion}`;\r\n\r\n    // Create the node tree\r\n    return {\r\n        id: node.id,\r\n        icon: 'graph',\r\n        label: label,\r\n        secondaryLabel: `${node.rule}`,\r\n        rule: node.rule,\r\n        args: node.args,\r\n        conclusion: node.conclusion,\r\n        parentId: node.parents[0],\r\n        descendants: node.descendants - 1,\r\n        nHided: node.hiddenNodes ? node.hiddenNodes.length : 0,\r\n        hiddenNodes: node.hiddenNodes ? node.hiddenNodes.map((n) => n.id) : [],\r\n        childNodes: [],\r\n        dependencies: node.dependencies,\r\n        parentsId: node.parents,\r\n        hasCaret: Boolean(node.descendants - 1),\r\n    };\r\n}\r\n\r\nfunction createTree(proof: NodeInterface[], id: number): TreeNode[] {\r\n    const rootNode = proof.find((o) => o.id === id);\r\n    const tree: TreeNode[] = [],\r\n        roots: TreeNode[] = [];\r\n\r\n    // Make sure found the root node\r\n    if (rootNode) {\r\n        const stack: number[] = [rootNode.id];\r\n        const childrenStack = [-1];\r\n        const insertedStack: number[] = [];\r\n\r\n        let currentNode: any;\r\n        tree.push(castProofNodeToTreeNode(rootNode));\r\n        insertedStack.push(rootNode.id);\r\n\r\n        //While stack isn't empty\r\n        while (stack.length) {\r\n            const lastNode = stack[stack.length - 1];\r\n            let lastChild = childrenStack[childrenStack.length - 1];\r\n            currentNode = proof.find((o) => o.id === lastNode);\r\n\r\n            // If still has children\r\n            if (lastChild < currentNode.children.length - 1) {\r\n                lastChild++;\r\n                stack.push(currentNode.children[lastChild]);\r\n                childrenStack.push(-1);\r\n                // Add the node to the tree\r\n                const nextNode: any = proof.find((o) => o.id === currentNode.children[lastChild]);\r\n\r\n                // Avoid duplicate nodes\r\n                if (insertedStack.indexOf(nextNode.id) === -1) {\r\n                    tree.push(castProofNodeToTreeNode(nextNode));\r\n                    insertedStack.push(nextNode.id);\r\n                }\r\n            }\r\n            // Hasn't children\r\n            else {\r\n                stack.pop();\r\n                childrenStack.pop();\r\n                childrenStack[childrenStack.length - 1]++;\r\n            }\r\n        }\r\n\r\n        // Make the id's list\r\n        const map: any = {};\r\n        let node: TreeNode, i: number;\r\n\r\n        // Map the { [node id]: list array id }\r\n        for (i = 0; i < tree.length; i++) {\r\n            map[tree[i].id] = i;\r\n        }\r\n\r\n        for (i = 0; i < tree.length; i += 1) {\r\n            node = tree[i];\r\n            // For all the parents\r\n            node.parentsId.forEach((parentId) => {\r\n                // If this parent was mapped or it's the root node\r\n                if (!isNaN(map[parentId]) || !i) {\r\n                    // If the parent is valid and exist in the list\r\n                    if (!isNaN(parentId) && tree[map[parentId]]) {\r\n                        tree[map[parentId]].childNodes.push(node);\r\n                    }\r\n                    // If root node was already inserted\r\n                    else if (!roots.length) {\r\n                        roots.push(node);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    return roots;\r\n}\r\n\r\nconst VisualizerStage: React.FC = () => {\r\n    // Proof data\r\n    const letMap = useAppSelector(selectLetMap);\r\n    const proof = useAppSelector(selectOriginalProof);\r\n    const dot = useAppSelector(selectDot);\r\n    const fileID = useAppSelector(selectFileCount);\r\n    const style = useAppSelector(selectStyle);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    // Data structures\r\n    const [proofTree, setProofTree] = useState<TreeNodeInfo[]>([]);\r\n    const [nodeInfo, setNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n    const [originalNodeInfo, setOriginalNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n    // Drawer\r\n    const [[ruleHelperIsOpen, argsHelperIsOpen, concHelperIsOpen], dispatchHelper] = useReducer(\r\n        (state: boolean[], action: { type: drawerHelpersKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            // Act over all the positions\r\n            if (type === drawerHelpersKind.ALL) {\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = payload;\r\n                }\r\n            }\r\n            // If wanna set a position\r\n            else if (payload) {\r\n                // Reset everything and set the wanted\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = i === type ? payload : false;\r\n                }\r\n            }\r\n            // If wanna only reset a position\r\n            else state[type] = payload;\r\n\r\n            return [...state];\r\n        },\r\n        // Rule, args, conclusion\r\n        [false, false, false],\r\n    );\r\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n    const [tree, setTree] = useState<TreeNodeInfo[]>([]);\r\n\r\n    // Make sure that a new tree is created only when a new dot is used\r\n    useEffect(() => setProofTree(createTree(proof, 0)), [dot]);\r\n\r\n    const openDrawer = (nodeInfo: NodeInfo, tree?: TreeNodeInfo[]) => {\r\n        setNodeInfo(nodeInfo);\r\n        setTree(tree ? tree : []);\r\n        setOriginalNodeInfo(nodeInfo);\r\n        setDrawerIsOpen(true);\r\n    };\r\n\r\n    const nodeInfoTable = (): JSX.Element => {\r\n        return (\r\n            <table\r\n                id=\"table-node-info\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Property</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <strong>RULE </strong>\r\n                            <Icon\r\n                                id=\"icon\"\r\n                                icon=\"help\"\r\n                                onClick={() => {\r\n                                    dispatchHelper({ type: drawerHelpersKind.RULE, payload: !ruleHelperIsOpen });\r\n                                }}\r\n                            ></Icon>\r\n                        </td>\r\n                        <td>\r\n                            {nodeInfo.rule}\r\n                            <Collapse isOpen={ruleHelperIsOpen}>\r\n                                <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                    {ruleHelper(nodeInfo.rule)}\r\n                                </Pre>\r\n                            </Collapse>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.args && (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>ARGS</strong>{' '}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.ARGS,\r\n                                                payload: !argsHelperIsOpen,\r\n                                            });\r\n                                        }}\r\n                                    ></Icon>\r\n                                ) : null}\r\n                            </td>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                {nodeInfo.args}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Collapse isOpen={argsHelperIsOpen}>\r\n                                        <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                            {nodeInfo.args}\r\n                                        </Pre>\r\n                                    </Collapse>\r\n                                ) : null}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n\r\n                    <tr>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            <strong>CONCLUSION</strong>{' '}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <Icon\r\n                                    id=\"icon\"\r\n                                    icon=\"translate\"\r\n                                    onClick={() => {\r\n                                        dispatchHelper({ type: drawerHelpersKind.CONC, payload: !concHelperIsOpen });\r\n                                    }}\r\n                                ></Icon>\r\n                            ) : null}\r\n                        </td>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            {nodeInfo.conclusion}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <Collapse isOpen={concHelperIsOpen}>\r\n                                    <Pre\r\n                                        style={{\r\n                                            maxHeight: '300px',\r\n                                            overflow: 'auto',\r\n                                        }}\r\n                                        id=\"pre-conclusion\"\r\n                                    >\r\n                                        <LetRender id={0} toRender={nodeInfo.conclusion} letMap={letMap} />\r\n                                    </Pre>\r\n                                </Collapse>\r\n                            ) : null}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.nDescendants ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#DESCENDANTS</strong>\r\n                            </td>\r\n                            <td>{nodeInfo.nDescendants}</td>\r\n                        </tr>\r\n                    ) : null}\r\n\r\n                    {nodeInfo.nHided ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#HIDDEN</strong>\r\n                            </td>\r\n                            <td>{`[${nodeInfo.hiddenNodes.map((node) => ' ' + node)} ]`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                    {nodeInfo.dependencies.length ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>DEPENDENCIES</strong>\r\n                            </td>\r\n                            <td>{`${nodeInfo.dependencies.map(\r\n                                (dependency) => ` ${dependency.piId}: [${dependency.depsId.map((dep) => ' ' + dep)} ] `,\r\n                            )}`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div onContextMenu={(e) => e.preventDefault()}>\r\n            {proof.length > 1 ? (\r\n                style === 'graph' ? (\r\n                    <Canvas key={fileID} openDrawer={openDrawer} createTree={createTree}></Canvas>\r\n                ) : (\r\n                    <VisualizerDirectoryStyle\r\n                        proofTree={proofTree}\r\n                        ruleHelper={ruleHelper}\r\n                        indent={() => ''}\r\n                        translate={() => ''}\r\n                    />\r\n                )\r\n            ) : null}\r\n            <Drawer\r\n                className={darkTheme ? 'bp3-dark' : ''}\r\n                autoFocus={true}\r\n                canEscapeKeyClose={true}\r\n                canOutsideClickClose={true}\r\n                enforceFocus={true}\r\n                hasBackdrop={false}\r\n                isOpen={drawerIsOpen}\r\n                position={Position.BOTTOM}\r\n                usePortal={true}\r\n                onClose={(e) => {\r\n                    e.preventDefault();\r\n                    setDrawerIsOpen(false);\r\n                    dispatchHelper({ type: drawerHelpersKind.ALL, payload: false });\r\n                }}\r\n                icon=\"info-sign\"\r\n                title=\"Node info\"\r\n            >\r\n                <div className={Classes.DRAWER_BODY}>\r\n                    <VisualizerTree\r\n                        darkTheme={darkTheme}\r\n                        content={tree}\r\n                        setNodeInfo={setNodeInfo}\r\n                        originalNodeInfo={originalNodeInfo}\r\n                    ></VisualizerTree>\r\n                    <div className={Classes.DIALOG_BODY}>{nodeInfoTable()}</div>\r\n                </div>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerStage;\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Classes, Tree, TreeNodeInfo } from '@blueprintjs/core';\r\nimport { TreeProps } from '../../interfaces/interfaces';\r\n\r\nconst VisualizerTree: React.FC<TreeProps> = ({ darkTheme, content, originalNodeInfo, setNodeInfo }: TreeProps) => {\r\n    // STATES:\r\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\r\n    const [nodes, setNodes] = useState(content);\r\n    const [selected, setSelected] = useState(NaN);\r\n\r\n    // USE EFFECT:\r\n    useEffect(() => setNodes(content), [content]);\r\n\r\n    // UTILS:\r\n    const forEachNode = (nodes: TreeNodeInfo[], callback: (node: TreeNodeInfo) => void) => {\r\n        if (nodes == null) {\r\n            return;\r\n        }\r\n\r\n        for (const node of nodes) {\r\n            callback(node);\r\n            forEachNode(node.childNodes ? node.childNodes : [], callback);\r\n        }\r\n    };\r\n\r\n    const handleNodeClick = (nodeData: any, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\r\n        setNodeInfo(\r\n            selected !== nodeData.id\r\n                ? {\r\n                      rule: nodeData.rule ? nodeData.rule : '',\r\n                      args: nodeData.args ? nodeData.args : '',\r\n                      conclusion: nodeData.conclusion ? nodeData.conclusion : '',\r\n                      nHided: nodeData.nHided ? nodeData.nHided : 0,\r\n                      nDescendants: nodeData.descendants,\r\n                      hiddenNodes: nodeData.hiddenNodes,\r\n                      dependencies: nodeData.dependencies,\r\n                  }\r\n                : originalNodeInfo,\r\n        );\r\n        const originallySelected = nodeData.isSelected;\r\n\r\n        // Set all the nodes to be not selected\r\n        if (!e.shiftKey) forEachNode(nodes, (n) => (n.isSelected = false));\r\n\r\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\r\n        setSelected(selected === nodeData.id ? NaN : nodeData.id);\r\n    };\r\n\r\n    const handleNodeCollapse = (nodeData: TreeNodeInfo) => {\r\n        nodeData.isExpanded = false;\r\n        forceUpdate();\r\n    };\r\n\r\n    const handleNodeExpand = (nodeData: TreeNodeInfo) => {\r\n        nodeData.isExpanded = true;\r\n        forceUpdate();\r\n    };\r\n\r\n    return (\r\n        <div style={{ backgroundColor: darkTheme ? '#394b59' : 'white' }}>\r\n            <Tree\r\n                contents={nodes}\r\n                onNodeClick={handleNodeClick}\r\n                onNodeCollapse={handleNodeCollapse}\r\n                onNodeExpand={handleNodeExpand}\r\n                className={Classes.ELEVATION_0}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerTree;\r\n","import React, { useState, useReducer } from 'react';\r\n\r\nimport { Icon, Collapse, Pre } from '@blueprintjs/core';\r\n\r\nimport '../../../scss/VisualizerDirectoryStyle.scss';\r\nimport { useAppSelector } from '../../../store/hooks';\r\nimport { selectTheme } from '../../../store/features/theme/themeSlice';\r\nimport { NodeInfo, DirectoryStyleProps } from '../../../interfaces/interfaces';\r\nimport { drawerHelpersKind } from '../VisualizerStage';\r\nimport VisualizerTree from '../../VisualizerTree/VisualizerTree';\r\n\r\nconst VisualizerDirectoryStyle: React.FC<DirectoryStyleProps> = ({\r\n    proofTree,\r\n    ruleHelper,\r\n    indent,\r\n    translate,\r\n}: DirectoryStyleProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const [nodeInfo, setNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n    const [[ruleHelperIsOpen, argsHelperIsOpen, concHelperIsOpen], dispatchHelper] = useReducer(\r\n        (state: boolean[], action: { type: drawerHelpersKind; payload: boolean }): boolean[] => {\r\n            const { type, payload } = action;\r\n\r\n            // Act over all the positions\r\n            if (type === drawerHelpersKind.ALL) {\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = payload;\r\n                }\r\n            }\r\n            // If wanna set a position\r\n            else if (payload) {\r\n                // Reset everything and set the wanted\r\n                for (let i = 0; i < state.length; i++) {\r\n                    state[i] = i === type ? payload : false;\r\n                }\r\n            }\r\n            // If wanna only reset a position\r\n            else state[type] = payload;\r\n\r\n            return [...state];\r\n        },\r\n        // Rule, args, conclusion\r\n        [false, false, false],\r\n    );\r\n\r\n    const nodeInfoTable = () => {\r\n        return (\r\n            <table\r\n                id=\"table-node-info\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Property</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <strong>RULE </strong>\r\n                            <Icon\r\n                                id=\"icon\"\r\n                                icon=\"help\"\r\n                                onClick={() => {\r\n                                    dispatchHelper({ type: drawerHelpersKind.RULE, payload: !ruleHelperIsOpen });\r\n                                }}\r\n                            ></Icon>\r\n                        </td>\r\n                        <td>\r\n                            {nodeInfo.rule}\r\n                            <Collapse isOpen={ruleHelperIsOpen}>\r\n                                <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                    {ruleHelper(nodeInfo.rule)}\r\n                                </Pre>\r\n                            </Collapse>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.args && (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>ARGS</strong>{' '}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Icon\r\n                                        id=\"icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            dispatchHelper({\r\n                                                type: drawerHelpersKind.ARGS,\r\n                                                payload: !argsHelperIsOpen,\r\n                                            });\r\n                                        }}\r\n                                    ></Icon>\r\n                                ) : null}\r\n                            </td>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                {nodeInfo.args}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Collapse isOpen={argsHelperIsOpen}>\r\n                                        <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                            {indent(translate(nodeInfo.args))}\r\n                                        </Pre>\r\n                                    </Collapse>\r\n                                ) : null}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n\r\n                    <tr>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            <strong>CONCLUSION</strong>{' '}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <Icon\r\n                                    id=\"icon\"\r\n                                    icon=\"translate\"\r\n                                    onClick={() => {\r\n                                        dispatchHelper({ type: drawerHelpersKind.CONC, payload: !concHelperIsOpen });\r\n                                    }}\r\n                                ></Icon>\r\n                            ) : null}\r\n                        </td>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            {nodeInfo.conclusion}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <Collapse isOpen={concHelperIsOpen}>\r\n                                    <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                        {indent(translate(nodeInfo.conclusion))}\r\n                                    </Pre>\r\n                                </Collapse>\r\n                            ) : null}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.nDescendants ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#DESCENDANTS</strong>\r\n                            </td>\r\n                            <td>{nodeInfo.nDescendants}</td>\r\n                        </tr>\r\n                    ) : null}\r\n\r\n                    {nodeInfo.nHided ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#HIDDEN</strong>\r\n                            </td>\r\n                            <td>{`[${nodeInfo.hiddenNodes.map((node) => ' ' + node)} ]`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                    {nodeInfo.dependencies.length ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>DEPENDENCIES</strong>\r\n                            </td>\r\n                            <td>{`${nodeInfo.dependencies.map(\r\n                                (dependency) => ` ${dependency.piId}: [${dependency.depsId.map((dep) => ' ' + dep)} ] `,\r\n                            )}`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"dir-style\"\r\n            style={{\r\n                backgroundColor: darkTheme ? 'rgb(57, 75, 89)' : 'white',\r\n                height:\r\n                    window.innerHeight - (document.getElementsByClassName('bp3-navbar')[0] as HTMLElement).offsetHeight,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    width: '50%',\r\n                    height: '100%',\r\n                    float: 'left',\r\n                    clear: 'none',\r\n                    borderRight: '1px solid black',\r\n                    overflow: 'auto',\r\n                }}\r\n            >\r\n                <VisualizerTree\r\n                    darkTheme={darkTheme}\r\n                    content={proofTree}\r\n                    setNodeInfo={setNodeInfo}\r\n                    originalNodeInfo={{\r\n                        rule: '',\r\n                        args: '',\r\n                        conclusion: '',\r\n                        nHided: 0,\r\n                        nDescendants: 0,\r\n                        hiddenNodes: [],\r\n                        dependencies: [],\r\n                    }}\r\n                ></VisualizerTree>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    width: '50%',\r\n                    height: '100%',\r\n                    float: 'left',\r\n                    clear: 'none',\r\n                }}\r\n            >\r\n                {nodeInfoTable()}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerDirectoryStyle;\r\n","interface Line {\r\n    value: string;\r\n    indentLevel: number;\r\n}\r\n\r\nclass Let {\r\n    name: string;\r\n    value: string;\r\n    lines: Line[];\r\n    biggerID: number;\r\n    isExpanded: boolean;\r\n    externalLets: { [key: string]: { let: Let; idx: number[] } };\r\n\r\n    constructor(name: string, letText: string, letsList: { [key: string]: Let }, indices: { [key: number]: string }) {\r\n        this.name = name;\r\n        this.value = letText;\r\n        this.lines = [{ value: letText, indentLevel: 0 }];\r\n        this.biggerID = 0;\r\n        this.isExpanded = false;\r\n\r\n        this.externalLets = {};\r\n        Object.keys(indices).forEach((key) => {\r\n            const numKey = Number(key);\r\n            const letName = indices[numKey];\r\n            this.externalLets[letName] = {\r\n                let: letsList[letName],\r\n                idx: this.externalLets[letName] ? [...this.externalLets[letName].idx, numKey] : [numKey],\r\n            };\r\n        });\r\n    }\r\n\r\n    getTextWidth = (text: string, font: string): number => {\r\n        const canvas = document.createElement('canvas');\r\n        const context = canvas.getContext('2d');\r\n        let size = 0;\r\n        if (context) {\r\n            context.font = font;\r\n            size = context.measureText(text).width;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    expandValue = (shouldUpdate = false): string => {\r\n        const keyList = Object.keys(this.externalLets).map((key) => this.externalLets[key].let.name);\r\n        let letText = this.value;\r\n\r\n        // Iterate from the last to the first external let\r\n        for (let i = keyList.length - 1; i >= 0; i--) {\r\n            const letName = keyList[i];\r\n\r\n            // For each let, iterate through all the indexes they show up inside the string\r\n            for (let k = this.externalLets[letName].idx.length - 1; k >= 0; k--) {\r\n                const idx = this.externalLets[letName].idx[k];\r\n\r\n                // Expand all the terms\r\n                letText =\r\n                    letText.substring(0, idx) +\r\n                    this.externalLets[letName].let.expandValue() +\r\n                    letText.substring(idx + letName.length, letText.length);\r\n            }\r\n        }\r\n        if (shouldUpdate) {\r\n            this.lines = [{ value: letText, indentLevel: 0 }];\r\n            this.biggerID = 0;\r\n        }\r\n        return letText;\r\n    };\r\n\r\n    expandPartialy = (externalRef: Let, letIdx: number): string => {\r\n        const key = externalRef.name;\r\n        const indentedText = this.printLines();\r\n\r\n        let lastLine = 0,\r\n            count = 0,\r\n            i;\r\n        // Iterates through the first lines until the point we reach the changed line\r\n        for (i = 0; i < this.lines.length; i++) {\r\n            lastLine = this.lines[i].value.length + 4 * this.lines[i].indentLevel + 1;\r\n            count += lastLine;\r\n            if (letIdx < count) break;\r\n        }\r\n        // New index (points to the start of the line content (ignores initial indent white space))\r\n        const newIdx = letIdx - (count - lastLine + 4 * this.lines[i].indentLevel);\r\n\r\n        // Update the new line to the new content\r\n        this.lines[i].value =\r\n            this.lines[i].value.substring(0, newIdx) +\r\n            externalRef.value +\r\n            this.lines[i].value.substring(newIdx + key.length, this.lines[i].value.length);\r\n\r\n        // Returns the indented text with the content to be replaced\r\n        return (\r\n            indentedText.substring(0, letIdx) +\r\n            externalRef.value +\r\n            indentedText.substring(letIdx + key.length, indentedText.length)\r\n        );\r\n    };\r\n\r\n    shrinkValue = (): string => {\r\n        this.lines = [{ value: this.value, indentLevel: 0 }];\r\n        this.biggerID = 0;\r\n        return this.value;\r\n    };\r\n\r\n    fitsTheWindow = (windowSize: number, font: string): boolean => {\r\n        const line = this.lines[this.biggerID];\r\n        const size = this.getTextWidth(`${'    '.repeat(line.indentLevel)}${line.value}`, font);\r\n        return size < windowSize;\r\n    };\r\n\r\n    indent = (windowSize: number, mode: boolean, font: string): string => {\r\n        let someDoesntFit;\r\n        if (mode) someDoesntFit = true;\r\n        else someDoesntFit = this.getTextWidth(this.lines[this.biggerID].value, font) < windowSize ? false : true;\r\n\r\n        // While there are lines that doesn't fit the window size\r\n        while (someDoesntFit) {\r\n            const { lines, biggerID } = this;\r\n            const newLines: Line[] = [];\r\n            const thisLevel = lines[biggerID].indentLevel;\r\n            const thisLine = lines[biggerID].value;\r\n\r\n            let lastSpace = -1,\r\n                lastUsedSpace = -1,\r\n                lastOpenParenthesis = -1,\r\n                indent = lines[biggerID].indentLevel - 1,\r\n                biggestSize = 0,\r\n                newBiggerID = 0;\r\n\r\n            // Iterate through the line and calculate the indentation levels\r\n            for (let i = 0; i < thisLine.length; i++) {\r\n                const c = thisLine[i];\r\n                // Opening parenthesis\r\n                if (c === '(') {\r\n                    indent++;\r\n                    // If it's one of the arguments of the operation\r\n                    if (indent === thisLevel + 1) lastOpenParenthesis = i;\r\n                }\r\n                // Closing parenthesis\r\n                else if (c === ')') {\r\n                    // If it's the end of this line\r\n                    if (indent === thisLevel) {\r\n                        // If the last argument was not inserted\r\n                        if (thisLine[i - 1] !== ')') {\r\n                            newLines.push({\r\n                                value: thisLine.substring(lastSpace + 1, i),\r\n                                indentLevel: indent + 1,\r\n                            });\r\n                        }\r\n                        newLines.push({ value: ')', indentLevel: indent });\r\n                    }\r\n                    // If it's the end of this argument\r\n                    else if (indent === thisLevel + 1) {\r\n                        newLines.push({\r\n                            value: thisLine.substring(lastOpenParenthesis, i + 1),\r\n                            indentLevel: indent,\r\n                        });\r\n                    }\r\n                    indent--;\r\n                }\r\n                // If a new space is detected in the current identation level\r\n                //   and the last argument is not between parenthesis\r\n                else if (c === ' ') {\r\n                    lastSpace = i;\r\n\r\n                    if (indent === thisLevel) {\r\n                        if (thisLine[i - 1] !== ')') {\r\n                            newLines.push({\r\n                                value: thisLine.substring(lastUsedSpace + 1, i),\r\n                                indentLevel: newLines.length ? indent + 1 : indent,\r\n                            });\r\n                        }\r\n                        lastUsedSpace = i;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Insert new lines if happend some indentation\r\n            if (newLines.length > 0) this.lines.splice(biggerID, 1, ...newLines);\r\n\r\n            // Find the new biggest line\r\n            this.lines.forEach((line, id) => {\r\n                // Get the size of this new line\r\n                const thisSize = this.getTextWidth(`${'    '.repeat(line.indentLevel)}${line.value}`, font);\r\n                if (thisSize > biggestSize) {\r\n                    biggestSize = thisSize;\r\n                    newBiggerID = id;\r\n                }\r\n            });\r\n\r\n            this.biggerID = newBiggerID;\r\n\r\n            // If the biggest size fits the window or no new line was found (minimal indentation)\r\n            if (biggestSize < windowSize || newLines.length < 1) someDoesntFit = false;\r\n        }\r\n        return this.printLines();\r\n    };\r\n\r\n    groupUp = (): string => {\r\n        let original = '';\r\n        // Group up all the lines into one single string\r\n        this.lines.forEach((line, id, self) => {\r\n            original += line.value;\r\n            if (id < self.length - 1 && self[id + 1].value !== ')') {\r\n                original += ' ';\r\n            }\r\n        });\r\n        return original;\r\n    };\r\n\r\n    printLines = (): string => {\r\n        return this.lines.reduce((ac, line) => (ac += `${'    '.repeat(line.indentLevel)}${line.value}\\n`), '');\r\n    };\r\n}\r\n\r\nexport default Let;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { LetRenderProps } from '../../interfaces/interfaces';\r\nimport Let from './let';\r\nimport { Button } from '@blueprintjs/core';\r\n\r\nconst font = '13px monospace';\r\nconst triggerSize = 300;\r\n\r\nconst LetRender: React.FC<LetRenderProps> = ({ id, toRender, letMap }: LetRenderProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const widthRef = useRef({ letRender: 0, full: 0 });\r\n    const [resizeMode, setResizeMode] = useState(0);\r\n    const [letMapS, setLetMapS] = useState(\r\n        (() => {\r\n            const newMap = { ...letMap };\r\n            newMap['this'] = toRender;\r\n            return newMap;\r\n        })(),\r\n    );\r\n\r\n    const initializeLet = (key = 'this', lets: { [key: string]: Let } = {}) => {\r\n        const currentLet = letMapS[key];\r\n        const indices: { [key: number]: string } = {};\r\n\r\n        // Finds all occurences of let in the currentLet\r\n        [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n            if (match.index) indices[match.index] = match[0];\r\n        });\r\n\r\n        // Call recursive for all the external lets\r\n        Object.keys(indices).forEach((indice) => {\r\n            initializeLet(indices[Number(indice)], lets);\r\n        });\r\n\r\n        // If this let was not created yet\r\n        if (Object.keys(lets).indexOf(key) === -1) {\r\n            lets[key] = new Let(key, currentLet, lets, indices);\r\n        }\r\n\r\n        return lets;\r\n    };\r\n    const letsRef = useRef<{ [key: string]: Let }>(initializeLet());\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Handler to call on window resize and set the value column width\r\n        function handleResize() {\r\n            const width = widthRef.current.letRender;\r\n\r\n            const fullWidth = document.getElementsByClassName(`let-corpus-${id}`)[0].clientWidth;\r\n            const newWidth = document.getElementsByClassName(`let-render-${id}`)[0].clientWidth - 10;\r\n            width === newWidth ? setResizeMode(1) : width > newWidth ? setResizeMode(0) : setResizeMode(2);\r\n\r\n            widthRef.current = { letRender: newWidth, full: fullWidth };\r\n        }\r\n\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    const expandLet = (parent: string, key: string, letIdx: number) => {\r\n        const lets = letsRef.current;\r\n\r\n        const externalRef = lets[key];\r\n        lets[parent].isExpanded = true;\r\n        letMapS[parent] = lets[parent].expandPartialy(externalRef, letIdx);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const expandAll = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        lets[key].isExpanded = true;\r\n        letMapS[key] = lets[key].expandValue(true);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const revertLet = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        // Only when is expanded\r\n        if (lets[key].isExpanded) {\r\n            lets[key].isExpanded = false;\r\n            letMapS[key] = lets[key].shrinkValue();\r\n            setLetMapS({ ...letMapS });\r\n        }\r\n    };\r\n\r\n    const renderLet = (): JSX.Element => {\r\n        const lets = letsRef.current;\r\n        const width = widthRef.current.letRender;\r\n        const key = 'this';\r\n\r\n        // Waits for the width to be updated and the DOM element to be updated\r\n        if (width) {\r\n            let currentLet = letMapS[key];\r\n            let indices: { [key: number]: string } = {};\r\n\r\n            // Finds all occurences of let in the currentLet\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            // If doesn't fits, then indent\r\n            if (!lets[key].fitsTheWindow(width, font)) {\r\n                currentLet = lets[key].indent(width, true, font);\r\n                letMapS[key] = currentLet;\r\n\r\n                indices = {};\r\n                // Finds all occurences of let in the currentLet after indentation\r\n                [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                    if (match.index) indices[match.index] = match[0];\r\n                });\r\n            }\r\n            // If fits\r\n            else {\r\n                // Only in the momment the page size is growing and the line is broken\r\n                if (resizeMode >= 0 && lets[key].lines.length > 1) {\r\n                    // Reset the line\r\n                    lets[key].lines = [\r\n                        { value: lets[key].isExpanded ? lets[key].groupUp() : lets[key].value, indentLevel: 0 },\r\n                    ];\r\n                    lets[key].biggerID = 0;\r\n\r\n                    // Indent it again\r\n                    currentLet = lets[key].indent(width, false, font);\r\n                    letMapS[key] = currentLet;\r\n\r\n                    indices = {};\r\n                    // Finds all occurences of let in the currentLet after indentation\r\n                    [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                        if (match.index) indices[match.index] = match[0];\r\n                    });\r\n                }\r\n            }\r\n\r\n            const arr: (JSX.Element | string)[] = [];\r\n            let start = 0;\r\n\r\n            // Slice the currentLet into an array with strings and JSX elements\r\n            Object.keys(indices).forEach((index, i, self) => {\r\n                const idx = Number(index);\r\n                const thisLet = indices[idx];\r\n\r\n                // Add the elements to the arr\r\n                arr.push(currentLet.substring(start, idx));\r\n                arr.push(\r\n                    <a\r\n                        className={darkTheme ? 'let-literal-or' : 'let-literal'}\r\n                        onClick={() => {\r\n                            expandLet(key, thisLet, idx);\r\n                        }}\r\n                    >\r\n                        {thisLet}\r\n                    </a>,\r\n                );\r\n                // Defines a new start\r\n                start = idx + thisLet.length;\r\n\r\n                // If it's the last let\r\n                if (i === self.length - 1) {\r\n                    arr.push(currentLet.substring(start, currentLet.length));\r\n                }\r\n            });\r\n\r\n            // If there is a let in this current let\r\n            if (Object.keys(indices).length) {\r\n                return (\r\n                    <span className=\"let-instance\" style={{ overflowWrap: 'break-word' }}>\r\n                        {arr}\r\n                    </span>\r\n                );\r\n            } else {\r\n                return (\r\n                    <span className=\"let-instance\" style={{ overflowWrap: 'break-word' }}>\r\n                        {currentLet}\r\n                    </span>\r\n                );\r\n            }\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    const btColumnSize = widthRef.current.full > triggerSize ? 100 : 40;\r\n\r\n    return (\r\n        <div\r\n            className={`let-corpus-${id}`}\r\n            style={{\r\n                display: 'grid',\r\n                gridTemplateColumns: `auto ${btColumnSize + 7}px`,\r\n            }}\r\n        >\r\n            <div className={`let-render-${id}`} style={{ height: '100%', borderRight: 'solid 1px' }}>\r\n                {renderLet()}\r\n            </div>\r\n            <div\r\n                style={{\r\n                    width: `${btColumnSize}px`,\r\n                    display: 'flex',\r\n                    flexFlow: 'column',\r\n                    justifySelf: 'right',\r\n                }}\r\n            >\r\n                <Button\r\n                    onClick={() => expandAll('this')}\r\n                    className=\"bp3-minimal\"\r\n                    icon=\"translate\"\r\n                    text={widthRef.current.full > triggerSize ? 'Expand' : null}\r\n                />\r\n                <Button\r\n                    onClick={() => revertLet('this')}\r\n                    className=\"bp3-minimal\"\r\n                    icon=\"undo\"\r\n                    text={widthRef.current.full > triggerSize ? 'Revert' : null}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LetRender;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Drawer, Classes, Position } from '@blueprintjs/core';\r\n\r\nimport Let from './let';\r\nimport '../../scss/Let.scss';\r\nimport { letDrawerProps } from '../../interfaces/interfaces';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { selectLetMap } from '../../store/features/proof/proofSlice';\r\n\r\nconst font =\r\n    '14px / 18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", Icons16, sans-serif';\r\n\r\nconst VisualizerLetDrawer: React.FC<letDrawerProps> = ({ drawerIsOpen, setDrawerIsOpen }: letDrawerProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const letMap = useAppSelector(selectLetMap);\r\n    const widthRef = useRef(0);\r\n\r\n    const [letMapS, setLetMapS] = useState({ ...letMap });\r\n    const [resizeMode, setResizeMode] = useState(0);\r\n    const letsRef = useRef<{ [key: string]: Let }>({});\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Handler to call on window resize and set the value column width\r\n        function handleResize() {\r\n            const width = widthRef.current;\r\n\r\n            // -22 from the fixed padding size\r\n            const newWidth = document.getElementsByClassName('letMap-value-column')[0].clientWidth - 24;\r\n            width === newWidth ? setResizeMode(1) : width > newWidth ? setResizeMode(0) : setResizeMode(2);\r\n\r\n            widthRef.current = newWidth;\r\n        }\r\n\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    const expandLet = (parent: string, key: string, letIdx: number) => {\r\n        const lets = letsRef.current;\r\n\r\n        const externalRef = lets[key];\r\n        lets[parent].isExpanded = true;\r\n        letMapS[parent] = lets[parent].expandPartialy(externalRef, letIdx);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const expandAll = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        lets[key].isExpanded = true;\r\n        letMapS[key] = lets[key].expandValue(true);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const revertLet = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        // Only when is expanded\r\n        if (lets[key].isExpanded) {\r\n            lets[key].isExpanded = false;\r\n            letMapS[key] = lets[key].shrinkValue();\r\n            setLetMapS({ ...letMapS });\r\n        }\r\n    };\r\n\r\n    const renderLet = (key: string): JSX.Element => {\r\n        const lets = letsRef.current;\r\n        const width = widthRef.current;\r\n\r\n        // Waits for the width to be updated and the DOM element to be updated\r\n        if (width) {\r\n            let currentLet = letMapS[key];\r\n\r\n            let indices: { [key: number]: string } = {};\r\n            // Finds all occurences of let in the currentLet\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            // If it's the first render (make sure that the lets obj is not calculated every time)\r\n            if (Object.keys(lets).length !== Object.keys(letMapS).length) {\r\n                lets[key] = new Let(key, currentLet, lets, indices);\r\n            }\r\n\r\n            // If doesn't fits, then indent\r\n            if (!lets[key].fitsTheWindow(width, font)) {\r\n                currentLet = lets[key].indent(width, true, font);\r\n                letMapS[key] = currentLet;\r\n\r\n                indices = {};\r\n                // Finds all occurences of let in the currentLet after indentation\r\n                [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                    if (match.index) indices[match.index] = match[0];\r\n                });\r\n            }\r\n            // If fits\r\n            else {\r\n                // Only in the momment the page size is growing and the line is broken\r\n                if (resizeMode >= 0 && lets[key].lines.length > 1) {\r\n                    // Reset the line\r\n                    lets[key].lines = [\r\n                        { value: lets[key].isExpanded ? lets[key].groupUp() : lets[key].value, indentLevel: 0 },\r\n                    ];\r\n                    lets[key].biggerID = 0;\r\n\r\n                    // Indent it again\r\n                    currentLet = lets[key].indent(width, false, font);\r\n                    letMapS[key] = currentLet;\r\n\r\n                    indices = {};\r\n                    // Finds all occurences of let in the currentLet after indentation\r\n                    [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                        if (match.index) indices[match.index] = match[0];\r\n                    });\r\n                }\r\n            }\r\n\r\n            const arr: (JSX.Element | string)[] = [];\r\n            let start = 0;\r\n            // Slice the currentLet into an array with strings and JSX elements\r\n            Object.keys(indices).forEach((index, i, self) => {\r\n                const idx = Number(index);\r\n                const thisLet = indices[idx];\r\n\r\n                // Add the elements to the arr\r\n                arr.push(currentLet.substring(start, idx));\r\n                arr.push(\r\n                    <a\r\n                        className={darkTheme ? 'let-literal-or' : 'let-literal'}\r\n                        onClick={() => {\r\n                            expandLet(key, thisLet, idx);\r\n                        }}\r\n                    >\r\n                        {thisLet}\r\n                    </a>,\r\n                );\r\n                // Defines a new start\r\n                start = idx + thisLet.length;\r\n\r\n                // If it's the last let\r\n                if (i === self.length - 1) {\r\n                    arr.push(currentLet.substring(start, currentLet.length));\r\n                }\r\n            });\r\n\r\n            // If there is a let in this current let\r\n            if (Object.keys(indices).length) {\r\n                return <span className=\"let-instance\">{arr}</span>;\r\n            } else {\r\n                return <span className=\"let-instance\">{currentLet}</span>;\r\n            }\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            className={darkTheme ? 'bp3-dark' : ''}\r\n            style={{ maxHeight: '65%', width: '35%' }}\r\n            autoFocus={true}\r\n            canEscapeKeyClose={true}\r\n            canOutsideClickClose={false}\r\n            enforceFocus={true}\r\n            hasBackdrop={false}\r\n            isOpen={drawerIsOpen}\r\n            position={Position.RIGHT}\r\n            usePortal={false}\r\n            onClose={(e) => {\r\n                e.preventDefault();\r\n                setDrawerIsOpen(false);\r\n            }}\r\n            icon=\"translate\"\r\n            title=\"Let Map\"\r\n        >\r\n            <div className={Classes.DRAWER_BODY}>\r\n                <div className={Classes.DIALOG_BODY}>\r\n                    <table\r\n                        id=\"table-node-info\"\r\n                        className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                        style={{ width: '100%' }}\r\n                    >\r\n                        <thead>\r\n                            <tr>\r\n                                <th style={{ width: '100px' }}>Property</th>\r\n                                <th className=\"letMap-value-column\">Value</th>\r\n                                <th style={{ width: '250px' }}>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {Object.keys(letMapS).map((key) => {\r\n                                return (\r\n                                    <tr key={key}>\r\n                                        <td>\r\n                                            <strong>{key}</strong>\r\n                                        </td>\r\n                                        <td style={{ width: '100%', whiteSpace: 'pre-wrap' }}>{renderLet(key)}</td>\r\n                                        <td style={{ width: '150px', height: '100%' }}>\r\n                                            <Button\r\n                                                onClick={() => expandAll(key)}\r\n                                                className=\"bp3-minimal\"\r\n                                                icon=\"translate\"\r\n                                                text=\"Expand\"\r\n                                            />\r\n                                            <Button\r\n                                                onClick={() => revertLet(key)}\r\n                                                className=\"bp3-minimal\"\r\n                                                icon=\"undo\"\r\n                                                text=\"Revert\"\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default VisualizerLetDrawer;\r\n","import React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Intent, Position, Toaster } from '@blueprintjs/core';\r\n\r\nimport VisualizerNavbar from '../VisualizerNavbar/VisualizerNavbar';\r\nimport VisualizerDialog from '../VisualizerDialog/VisualizerDialog';\r\nimport VisualizerStage from '../VisualizerStage/VisualizerStage';\r\nimport VisualizerLetDrawer from '../VisualizerLetDrawer/VisualizerLetDrawer';\r\n\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\n\r\nconst App: React.FC = () => {\r\n    const [dialogIsOpen, setDialogIsOpen] = useState(true);\r\n    const [dialogContent, setDialogContent] = useState('upload-proof');\r\n    const [drawerIsOpen, setDrawerOpenState] = useReducer((isOpen) => !isOpen, false);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n\r\n    // Toaster\r\n    let toaster: Toaster;\r\n    const refHandlers = {\r\n        toaster: (ref: Toaster) => (toaster = ref),\r\n    };\r\n\r\n    const addErrorToast = (err: string) => {\r\n        toaster.show({ icon: 'warning-sign', intent: Intent.DANGER, message: err });\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.getElementsByClassName('bp3-overlay')[0]\r\n            ? (document.getElementsByClassName('bp3-overlay')[0].className = '')\r\n            : null;\r\n    }, [drawerIsOpen]);\r\n\r\n    return (\r\n        <div className={darkTheme ? ' bp3-dark' : ''}>\r\n            <Toaster position={Position.TOP} ref={refHandlers.toaster} />\r\n            <VisualizerNavbar\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                setDialogContent={setDialogContent}\r\n                setDrawerIsOpen={setDrawerOpenState}\r\n                addErrorToast={addErrorToast}\r\n            ></VisualizerNavbar>\r\n            <VisualizerDialog\r\n                dialogIsOpen={dialogIsOpen}\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                dialogContent={dialogContent}\r\n                setDialogContent={setDialogContent}\r\n                addErrorToast={addErrorToast}\r\n            ></VisualizerDialog>\r\n            <VisualizerStage></VisualizerStage>\r\n            {drawerIsOpen ? (\r\n                <VisualizerLetDrawer drawerIsOpen={drawerIsOpen} setDrawerIsOpen={setDrawerOpenState} />\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport externalCmdReducer from './features/externalCmd/externalCmd';\r\nimport fileReducer from './features/file/fileSlice';\r\nimport proofReducer from './features/proof/proofSlice';\r\nimport themeReducer from './features/theme/themeSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        file: fileReducer,\r\n        proof: proofReducer,\r\n        theme: themeReducer,\r\n        externalCmd: externalCmdReducer,\r\n    },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport { store } from './store/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './scss/index.scss';\r\n\r\nimport reportWebVitals from './ReactUtils/reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}