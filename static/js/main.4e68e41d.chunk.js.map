{"version":3,"sources":["components/VisualizerNavbar.tsx","components/VisualizerDialog.tsx","components/canvas/VisualizerNode.tsx","components/canvas/VisualizerLine.tsx","components/canvas/VisualizerMenu.tsx","components/canvas/VisualizerCanvas.tsx","components/VisualizerTree.tsx","components/VisualizerDirectoryStyle.tsx","components/VisualizerStage.tsx","components/VisualizerLetDrawer.tsx","App.tsx","redux/reducer.ts","redux/store.ts","reportWebVitals.ts","index.tsx"],"names":["VisualizerNavbar","setDialogIsOpen","setDialogContent","setDrawerIsOpen","downloadProof","proof","useSelector","state","proofReducer","darkTheme","darkThemeReducer","windowSize","useState","width","height","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","dispatch","useDispatch","setStyle","style","type","payload","changeView","view","dot","setTimeout","styleMenu","icon","text","onClick","e","preventDefault","viewsMenu","exampleMenu","label","href","encodeURIComponent","download","replaceAll","link","document","createElement","getElementsByClassName","children","toDataURL","click","problem","Group","align","Alignment","LEFT","Heading","Divider","content","className","RIGHT","undefined","placement","disabled","id","checked","onChange","readUploadedFileAsText","inputFile","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","VisualizerDialog","dialogIsOpen","dialogContent","addErrorToast","dialogProps","title","dialogBody","succesButton","_id","options","setProof","processingProof","setProcessingProof","proofProcessed","setProofProcessed","fileName","changeFileName","file","changeFile","ext","changeExt","large","textAlign","paddingTop","intent","Intent","SUCCESS","iconSize","size","hasSelection","onInputChange","a","target","files","File","name","split","slice","fileContents","message","fill","json","JSON","parse","nodes","hidden","isOpen","onClose","usePortal","Classes","DIALOG_BODY","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","textColorFromBg","bgColor","color","charAt","substring","parseInt","Node","this","props","rule","conclusion","args","x","y","selected","nHided","nDescendants","topHidedNodes","setNodeOnFocus","updateNodeState","toggleNodeSelection","openDrawer","tree","tagProps","stroke","strokeWidth","textProps","fontSize","padding","nHidedStr","map","node","join","nDescendantsStr","draggable","toString","onDragMove","attrs","evt","button","shiftKey","menuNode","getElementById","top","clientY","left","clientX","display","trim","React","Component","Line","key","points","Menu","unfold","foldSelectedNodes","foldAllDescendants","changeNodeColor","setColor","foldSelected","stopPropagation","vertical","placeholder","value","match","handleWheel","stage","getStage","oldScale","scaleX","pointerPosition","getPointerPosition","mousePointTo","newScale","deltaY","stageScale","stageX","stageY","Canvas","applyView","proofNodes","filter","views","indexOf","forEach","hideNode","nodesSelected","showingNodes","removeNodes","sort","b","nodeId","updatePosition","addNodes","setState","nodeOnFocus","hidedNodes","unhideNode","unfoldOnClick","nodeProps","length","descendants","push","LineProps","from","to","child","addNode","parent","showingEdges","recursivelyGetChildren","removeNode","Object","keys","edgeKey","edges","edge","ancestors","ancestorsId","currentId","piId","parentId","hided","hidedIn","hideMyChildNode","nH","nD","reduce","accumulator","NaN","replace","positionCache","rank","hiddenNodesTree","childNodes","list","i","roots","some","g","dagre","graphlib","Graph","setGraph","rankdir","ranker","setDefaultEdgeLabel","setNode","setEdge","childNode","layout","xOffset","yOffset","v","console","log","concat","proofName","stringify","canvasSize","importedData","includes","onWheel","scaleY","onContextMenu","render","VisualizerTree","handleNodeClick","nodeData","_nodePath","setNodeInfo","originalNodeInfo","originallySelected","isSelected","forEachNode","n","handleNodeCollapse","isExpanded","handleNodeExpand","prevProps","backgroundColor","contents","onNodeClick","onNodeCollapse","onNodeExpand","ELEVATION_0","callback","VisualizerDirectoryStyle","proofTree","ruleHelper","ident","translate","ruleHelperOpen","setRuleHelperOpen","argsTranslatorOpen","setArgsTranslatorOpen","conclusionTranslatorOpen","setConclusionTranslatorOpen","nodeInfo","offsetHeight","float","clear","borderRight","overflow","removeEscapedCharacters","s","newS","indent","pCounter","repeat","VisualizerStage","canvasRef","styleReducer","importedDataReducer","comment","lastIndexOf","line","search","attributes","commentJSON","subProofQty","processDot","letMap","createTree","Array","drawerIsOpen","nodeInfoCopy","setNodeInfoCopy","setTree","l","ref","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","position","Position","BOTTOM","DRAWER_BODY","maxHeight","VisualizerLetDrawer","letMapReducer","letMapS","setLetMapS","whiteSpace","newLetMap","flexDirection","App","toaster","useRef","refHandlers","TOP","current","err","show","DANGER","initialStateProofReducer","initialStateDarkThemeReducer","initialStateStyleReducer","initialStateLetMapReducer","initialStateImportedDataReducer","combineReducers","action","store","createStore","reducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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ErE,EAAI,MAGdsE,GAAQD,EAAErE,IAIlB,OAAOsE,EAiHX,SAASjB,EAAWrL,GAChB,OAAQA,EAAK1B,MAAM,KAAK,IACpB,IAAK,SACD,MAAO,8DACX,IAAK,SACD,OACI0B,EACA,uYAER,IAAK,QACD,OACIA,EACA,gnBAER,IAAK,OACD,OACIA,EACA,sZAER,IAAK,UACD,OACIA,EACA,0PAER,IAAK,WACD,OACIA,EACA,6MAER,IAAK,oBACD,OACIA,EACA,moBAER,IAAK,sBACD,OACIA,EACA,6iCAER,IAAK,qBACD,OACIA,EACA,gcAER,IAAK,0BACD,OACIA,EACA,qsBAER,IAAK,4BACD,OACIA,EACA,4LAER,IAAK,eACD,OACIA,EACA,wVAER,IAAK,iBACD,OACIA,EACA,6mBAER,IAAK,aACD,OACIA,EACA,qRAER,IAAK,mBACD,OACIA,EACA,uKAER,IAAK,oBACD,OACIA,EACA,oNAER,IAAK,0BACD,OACIA,EACA,oKAER,IAAK,oBACD,OACIA,EACA,+MAER,IAAK,gBACD,OACIA,EACA,oNAER,IAAK,gBACD,OACIA,EACA,gOAER,IAAK,aACD,OACIA,EACA,mOAER,IAAK,iBACD,OACIA,EACA,0VAER,IAAK,gBACD,OACIA,EACA,uNAER,IAAK,iBACD,OACIA,EACA,kOAER,IAAK,aACD,OACIA,EACA,kpCAER,IAAK,mBACD,OACIA,EACA,ueAER,IAAK,YACD,OACIA,EACA,iNAER,IAAK,aACD,OACIA,EACA,oNAER,IAAK,mBACD,OACIA,EACA,4oBAER,IAAK,yBACD,OACIA,EACA,itBAER,QACI,OAAOA,GAInB,IAqBMuM,EAAS,SAACF,GAIZ,IAHA,IAAIC,EAAOD,EAAExS,WAAW,IAAK,MACzBmO,EAAI,EACJwE,EAAW,EACRxE,EAAIsE,EAAK1G,QACI,MAAZ0G,EAAKtE,IAA0B,MAAZsE,EAAKtE,GAAYwE,IACnB,MAAZF,EAAKtE,IAA0B,MAAZsE,EAAKtE,GAAYwE,IACxB,OAAZF,EAAKtE,KACU,MAAhBsE,EAAKtE,EAAI,IAA8B,MAAhBsE,E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","file":"static/js/main.4e68e41d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Alignment, Button, Icon, Navbar, Switch, Menu, MenuItem, MenuDivider } from '@blueprintjs/core';\nimport { Popover2 } from '@blueprintjs/popover2';\n\nimport '../scss/VisualizerNavbar.scss';\nimport { VisualizerNavbarProps, stateInterface, proof } from './interfaces';\n\nfunction useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: 0,\n        height: 0,\n    });\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            // Set window width/height to state\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n        // Add event listener\n        window.addEventListener('resize', handleResize);\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n        // Remove event listener on cleanup\n        return () => window.removeEventListener('resize', handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n}\n\nconst VisualizerNavbar: React.FC<VisualizerNavbarProps> = ({\n    setDialogIsOpen,\n    setDialogContent,\n    setDrawerIsOpen,\n    downloadProof,\n}: VisualizerNavbarProps) => {\n    const openDialog = (content: string): void => {\n        setDialogIsOpen(true);\n        setDialogContent(content);\n    };\n    const proof = useSelector<stateInterface, proof>((state: stateInterface) => state.proofReducer.proof);\n    const darkTheme = useSelector<stateInterface, boolean>((state: stateInterface) => state.darkThemeReducer.darkTheme);\n    const windowSize = useWindowSize();\n\n    const dispatch = useDispatch();\n\n    const setDarkTheme = () => {\n        dispatch({ type: 'TOGGLE_DARK_THEME', payload: {} });\n    };\n\n    const setStyle = (style: string) => {\n        dispatch({ type: 'SET_STYLE', payload: style });\n    };\n\n    const changeView = (view: string) => {\n        switch (view) {\n            case 'basic':\n                dispatch({ type: 'BASIC_VIEW', payload: proof.dot });\n                break;\n            case 'propositional':\n                dispatch({ type: 'PROPOSITIONAL_VIEW', payload: proof.dot });\n                break;\n            case 'full':\n                dispatch({ type: 'FULL_VIEW', payload: proof.dot });\n                break;\n            default:\n        }\n        dispatch({ type: 'SET_DOT', payload: '' });\n        setTimeout(function () {\n            dispatch({ type: 'SET_DOT', payload: proof.dot });\n        }, 10);\n    };\n\n    const styleMenu = (\n        <Menu>\n            <MenuItem\n                icon=\"diagram-tree\"\n                text=\"Tree\"\n                onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                    e.preventDefault();\n                    setStyle('tree');\n                }}\n            />\n            <MenuItem\n                icon=\"folder-open\"\n                text=\"Directory\"\n                onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                    e.preventDefault();\n                    setStyle('directory');\n                }}\n            />\n        </Menu>\n    );\n\n    const viewsMenu = (\n        <Menu>\n            <MenuItem\n                text=\"Basic\"\n                onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                    e.preventDefault();\n                    changeView('basic');\n                }}\n            />\n            <MenuItem\n                text=\"Propositional\"\n                onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                    e.preventDefault();\n                    changeView('propositional');\n                }}\n            />\n            <MenuItem\n                text=\"Full\"\n                onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                    e.preventDefault();\n                    changeView('full');\n                }}\n            />\n        </Menu>\n    );\n    const exampleMenu = (\n        <Menu>\n            <MenuItem\n                icon=\"layout\"\n                text=\"JSON\"\n                onClick={() => downloadProof(proof.dot ? proof.dot : '', proof.label ? proof.label : '')}\n            />\n            <MenuItem\n                icon=\"graph\"\n                text=\"DOT\"\n                href={`data:attachment/text,${encodeURIComponent(proof.dot ? proof.dot : '')}`}\n                download={proof.label ? `${proof.label.replaceAll(' ', '_')}.dot` : ''}\n            />\n            <MenuItem\n                icon=\"square\"\n                text=\"PNG\"\n                onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                    e.preventDefault();\n                    const link = document.createElement('a');\n                    link.download = proof.label ? `${proof.label.replaceAll(' ', '_')}.png` : '';\n                    link.href = (\n                        document.getElementsByClassName('konvajs-content')[0].children[0] as HTMLCanvasElement\n                    ).toDataURL('image/png');\n                    link.click();\n                }}\n            />\n            <MenuDivider></MenuDivider>\n            <MenuItem\n                icon=\"manually-entered-data\"\n                text=\"Problem\"\n                href={`data:attachment/text,${encodeURIComponent(proof.problem)}`}\n                download={proof.label ? `${proof.label.replaceAll(' ', '_')}.smt2` : null}\n            />\n        </Menu>\n    );\n    return (\n        <Navbar>\n            <Navbar.Group align={Alignment.LEFT}>\n                <Navbar.Heading>\n                    <b>{windowSize.width >= 900 ? 'Proof Visualizer' : 'PV'}</b>\n                </Navbar.Heading>\n                <Navbar.Divider />\n                <Button\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                        e.preventDefault();\n                        openDialog('upload-proof');\n                    }}\n                    className=\"bp3-minimal\"\n                    icon=\"upload\"\n                    text={windowSize.width >= 900 ? 'Upload Proof' : ''}\n                />\n            </Navbar.Group>\n\n            <Navbar.Group align={Alignment.RIGHT}>\n                {proof.label ? (\n                    <>\n                        <Navbar.Heading>{proof.label}</Navbar.Heading>\n                        <Navbar.Divider />\n                        <Popover2\n                            content={proof.label ? styleMenu : undefined}\n                            placement=\"bottom-end\"\n                            disabled={proof.label ? false : true}\n                        >\n                            <Button\n                                icon=\"presentation\"\n                                className=\"bp3-minimal\"\n                                text={windowSize.width >= 900 ? 'Style' : ''}\n                                disabled={proof.label ? false : true}\n                            />\n                        </Popover2>\n                        <Popover2\n                            content={proof.label ? viewsMenu : undefined}\n                            placement=\"bottom-end\"\n                            disabled={proof.label ? false : true}\n                        >\n                            <Button\n                                className=\"bp3-minimal\"\n                                icon=\"diagram-tree\"\n                                text={windowSize.width >= 900 ? 'View' : ''}\n                                disabled={proof.label ? false : true}\n                            />\n                        </Popover2>\n                        <Button\n                            className=\"bp3-minimal\"\n                            icon=\"translate\"\n                            text={windowSize.width >= 900 ? 'Let Map' : ''}\n                            disabled={proof.label ? false : true}\n                            onClick={() => setDrawerIsOpen(true)}\n                        />\n                        <Popover2\n                            content={proof.label ? exampleMenu : undefined}\n                            placement=\"bottom-end\"\n                            disabled={proof.label ? false : true}\n                        >\n                            <Button\n                                className=\"bp3-minimal\"\n                                icon=\"download\"\n                                text={windowSize.width >= 900 ? 'Download' : ''}\n                                disabled={proof.label ? false : true}\n                            />\n                        </Popover2>\n                        <Navbar.Divider />\n                    </>\n                ) : null}\n\n                <span id=\"switch-button-dark-theme\">\n                    <Switch checked={darkTheme} onChange={() => setDarkTheme()} />\n                    <Icon icon={darkTheme ? 'moon' : 'flash'}></Icon>\n                </span>\n            </Navbar.Group>\n        </Navbar>\n    );\n};\n\nexport default VisualizerNavbar;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Button, Classes, Dialog, FileInput, Intent, Spinner } from '@blueprintjs/core';\nimport { Icon } from '@blueprintjs/core/lib/esm/components/icon/icon';\n\nimport '../scss/VisualizerDialog.scss';\nimport { proof, VisualizerDialogProps, DialogProps, stateInterface } from './interfaces';\n\nconst readUploadedFileAsText = (inputFile: File) => {\n    const temporaryFileReader = new FileReader();\n\n    return new Promise((resolve, reject) => {\n        temporaryFileReader.onerror = () => {\n            temporaryFileReader.abort();\n            reject(new DOMException('Problem parsing input file.'));\n        };\n\n        temporaryFileReader.onload = () => {\n            resolve(temporaryFileReader.result);\n        };\n        temporaryFileReader.readAsText(inputFile);\n    });\n};\n\nconst VisualizerDialog: React.FC<VisualizerDialogProps> = ({\n    dialogIsOpen,\n    dialogContent,\n    setDialogContent,\n    setDialogIsOpen,\n    addErrorToast,\n}: VisualizerDialogProps) => {\n    const darkTheme = useSelector<stateInterface, boolean>((state: stateInterface) => state.darkThemeReducer.darkTheme);\n\n    let dialogProps: DialogProps = { icon: 'error', title: 'Error' };\n    let dialogBody = <p>This wasn&apos;t supposed to happen. Please contact the developers.</p>;\n    let succesButton = <></>;\n\n    const [proof, setProof] = useState<proof>({ _id: undefined, label: '', options: '', problem: '' });\n    const [processingProof, setProcessingProof] = useState(false);\n    const [proofProcessed, setProofProcessed] = useState(false);\n    const [fileName, changeFileName] = useState('Choose file...');\n    const [file, changeFile] = useState('');\n    const [ext, changeExt] = useState('');\n    const dispatch = useDispatch();\n\n    switch (dialogContent) {\n        case 'welcome':\n            dialogProps = { icon: 'graph', title: 'Welcome' };\n            dialogBody = (\n                <div className=\"welcome-menu\">\n                    <h2>Welcome to Proof Visualizer</h2>\n                    <p>You can upload the DOT file of your proof.</p>\n                    <Button\n                        style={{ width: '155px' }}\n                        icon=\"upload\"\n                        large\n                        text=\"Upload proof\"\n                        onClick={() => setDialogContent('upload-proof')}\n                    />\n                </div>\n            );\n            break;\n        case 'upload-proof':\n            dialogProps = { icon: 'upload', title: 'Upload Proof' };\n            dialogBody = proofProcessed ? (\n                <div style={{ textAlign: 'center', height: '200px', paddingTop: 50 }}>\n                    <Icon icon=\"tick\" intent={Intent.SUCCESS} iconSize={40}></Icon>\n                    <br></br>\n                    <br></br>\n                    <p>Your proof is ready to be visualized!</p>\n                </div>\n            ) : processingProof ? (\n                <div style={{ textAlign: 'center', height: '200px', paddingTop: 50 }}>\n                    <p>Processing your proof...</p>\n                    <Spinner size={30} />\n                </div>\n            ) : (\n                <FileInput\n                    text={fileName}\n                    hasSelection={fileName !== 'Choose file...'}\n                    onInputChange={async (e) => {\n                        const target = e.target as HTMLInputElement;\n                        const file = target.files ? target.files[0] : new File([''], 'filename');\n                        changeExt(target.files && target.files[0] ? target.files[0].name.split('.').slice(-1)[0] : '');\n                        if (\n                            target.files &&\n                            target.files[0] &&\n                            target.files[0].name.split('.').slice(-1)[0] !== 'dot' &&\n                            target.files[0].name.split('.').slice(-1)[0] !== 'json'\n                        ) {\n                            addErrorToast('Sorry! Our app only support DOT and JSON files.');\n                            return;\n                        }\n                        try {\n                            const fileContents = await readUploadedFileAsText(file);\n                            changeFile(fileContents as string);\n                            setProof({\n                                _id: undefined,\n                                label: file.name.split('.')[0],\n                                options: '',\n                                problem: '',\n                            });\n                            changeFileName(file.name);\n                        } catch (er) {\n                            addErrorToast(er.message);\n                        }\n                    }}\n                    fill={true}\n                />\n            );\n            succesButton = !proofProcessed ? (\n                <Button\n                    onClick={() => {\n                        if (ext === 'dot') {\n                            dispatch({ type: 'SET_PROOF', payload: proof });\n                            setProcessingProof(true);\n                            dispatch({ type: 'SET_DOT', payload: file });\n                            setProofProcessed(true);\n                        } else if (ext === 'json') {\n                            const json = JSON.parse(file);\n                            dispatch({ type: 'SET_PROOF', payload: proof });\n                            setProcessingProof(true);\n                            dispatch({ type: 'SET_DOT', payload: json.dot });\n                            dispatch({ type: 'FULL_VIEW', payload: json.dot });\n                            dispatch({\n                                type: 'SET_IMPORTED_DATA',\n                                payload: { nodes: json.nodes, hidden: json.hidden },\n                            });\n                            setProofProcessed(true);\n                        }\n                    }}\n                    intent={Intent.SUCCESS}\n                    disabled={fileName === 'Choose file...'}\n                >\n                    Upload Proof\n                </Button>\n            ) : (\n                <></>\n            );\n            break;\n    }\n\n    return (\n        <>\n            <Dialog\n                className={darkTheme ? ' bp3-dark' : ''}\n                isOpen={dialogIsOpen}\n                onClose={(): void => {\n                    setProof({ label: '', options: '', problem: '' });\n                    setProcessingProof(false);\n                    setProofProcessed(false);\n                    setDialogIsOpen(false);\n                    changeFileName('Choose file...');\n                    changeFile('');\n                }}\n                usePortal={true}\n                {...dialogProps}\n            >\n                <div className={Classes.DIALOG_BODY + ' dialog-body'}>{dialogBody}</div>\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <Button\n                            onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                                e.preventDefault();\n                                setDialogIsOpen(false);\n                                setProof({ label: '', options: '', problem: '' });\n                                setProcessingProof(false);\n                                setProofProcessed(false);\n                                setDialogIsOpen(false);\n                                changeFileName('Choose file...');\n                                changeFile('');\n                            }}\n                        >\n                            Close\n                        </Button>\n                        {succesButton}\n                    </div>\n                </div>\n            </Dialog>\n        </>\n    );\n};\n\nexport default VisualizerDialog;\n","import React from 'react';\nimport { Label, Text, Tag, Group } from 'react-konva';\n\nimport { NodeProps } from '../interfaces';\n\nfunction textColorFromBg(bgColor: string) {\n    const color = bgColor.charAt(0) === '#' ? bgColor.substring(1, 7) : bgColor;\n    const r = parseInt(color.substring(0, 2), 16);\n    const g = parseInt(color.substring(2, 4), 16);\n    const b = parseInt(color.substring(4, 6), 16);\n    return r * 0.299 + g * 0.587 + b * 0.114 > 150 ? '#000000' : '#ffffff';\n}\n\nexport default class Node extends React.Component<NodeProps> {\n    render(): JSX.Element {\n        const {\n            rule,\n            conclusion,\n            args,\n            id,\n            x,\n            y,\n            selected,\n            nHided,\n            nDescendants,\n            topHidedNodes,\n            color,\n            setNodeOnFocus,\n            updateNodeState,\n            toggleNodeSelection,\n            openDrawer,\n            tree,\n        } = this.props;\n\n        const bgColor = color;\n\n        const tagProps = {\n            fill: bgColor,\n            stroke: selected ? 'red' : 'black',\n            strokeWidth: selected ? 3 : 1,\n        };\n        const textProps = {\n            align: 'center',\n            fill: textColorFromBg(bgColor),\n            fontSize: 15,\n            height: 35,\n            padding: 10,\n            width: 300,\n        };\n        const nHidedStr = nHided\n            ? '#hidden: ' + '[' + (topHidedNodes ? topHidedNodes.map((node) => node[4]).join(', ') : '') + ']'\n            : '';\n        const nDescendantsStr =\n            ' #descendants: ' +\n            (rule !== 'π'\n                ? nDescendants\n                : '[' + (topHidedNodes ? topHidedNodes.map((node) => node[3]).join(', ') : '') + ']');\n        return (\n            <Group\n                draggable\n                id={id.toString()}\n                key={id}\n                onDragMove={(e) => {\n                    updateNodeState(id, e.target.attrs.x, e.target.attrs.y);\n                }}\n                x={x}\n                y={y}\n                onClick={(e) => {\n                    if (e.evt.button === 0) {\n                        if (e.evt.shiftKey) {\n                            toggleNodeSelection(id);\n                        } else {\n                            openDrawer(\n                                {\n                                    rule: rule,\n                                    args: args,\n                                    conclusion: conclusion,\n                                    nHided: nHided,\n                                    nDescendants: nDescendants - (rule === 'π' ? nHided : 0),\n                                    topHidedNodes: topHidedNodes,\n                                },\n                                tree,\n                            );\n                        }\n                    } else if (e.evt.button === 2) {\n                        setNodeOnFocus(id);\n                        const menuNode = document.getElementById('menu');\n                        if (menuNode) {\n                            menuNode.style.top = `${e.evt.clientY}px`;\n                            menuNode.style.left = `${e.evt.clientX}px`;\n                            menuNode.style.display = 'initial';\n                            window.addEventListener('click', () => {\n                                menuNode.style.display = 'none';\n                            });\n                        }\n                    }\n                }}\n            >\n                <Label x={0} y={0}>\n                    <Tag {...tagProps} />\n                    <Text\n                        {...textProps}\n                        text={\n                            conclusion +\n                            (conclusion === '∴' && topHidedNodes\n                                ? '[' + topHidedNodes.map((e) => e[2].trim()).join(',') + ']'\n                                : '')\n                        }\n                    />\n                </Label>\n                <Label x={0} y={35}>\n                    <Tag {...tagProps} />\n                    <Text\n                        {...textProps}\n                        text={\n                            rule +\n                            (rule === 'π' && topHidedNodes\n                                ? '[' + topHidedNodes.map((e) => e[1].trim()).join(',') + ']'\n                                : '')\n                        }\n                    />\n                </Label>\n                <Label x={0} y={70}>\n                    <Tag {...tagProps} />\n                    <Text {...textProps} text={nHidedStr + nDescendantsStr} />\n                </Label>\n            </Group>\n        );\n    }\n}\n","import React from 'react';\nimport { Arrow } from 'react-konva';\n\nimport { LineProps } from '../interfaces';\n\nconst Line = ({ key, points }: LineProps): JSX.Element => {\n    return <Arrow key={key} strokeWidth={1} stroke=\"black\" fill=\"black\" points={[...points]} />;\n};\n\nexport default Line;\n","import React, { useState } from 'react';\nimport { ControlGroup, Button, InputGroup } from '@blueprintjs/core';\n\nconst Menu = ({\n    unfold,\n    foldSelectedNodes,\n    foldAllDescendants,\n    changeNodeColor,\n    options,\n}: {\n    unfold: () => void;\n    foldSelectedNodes: () => void;\n    foldAllDescendants: () => void;\n    changeNodeColor: (color: string) => void;\n    options: { unfold: boolean; foldSelected: boolean; foldAllDescendants: boolean };\n}): JSX.Element => {\n    const [color, setColor] = useState('');\n    return (\n        <div className=\"bp3-popover2-content\">\n            <ul id=\"menu\" className=\"bp3-menu\">\n                {options.unfold ? (\n                    <li className=\"\">\n                        <a className=\"bp3-menu-item\" onClick={() => unfold()}>\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-open\">\n                                <span> Unfold</span>\n                            </div>\n                        </a>\n                    </li>\n                ) : null}\n                {options.foldSelected ? (\n                    <li className=\"\">\n                        <a className=\"bp3-menu-item\" onClick={() => foldSelectedNodes()}>\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\n                                <span> Fold selected nodes</span>\n                            </div>\n                        </a>\n                    </li>\n                ) : null}\n                {options.foldAllDescendants ? (\n                    <li className=\"\">\n                        <a className=\"bp3-menu-item\" onClick={() => foldAllDescendants()}>\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\n                                <span> Fold all descendants</span>\n                            </div>\n                        </a>\n                    </li>\n                ) : null}\n                <li className=\"\">\n                    <a className=\"bp3-menu-item\">\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\n                            <span>\n                                <span onClick={() => changeNodeColor('#f72b34')}> 🟥</span>\n                                <span onClick={() => changeNodeColor('#ff8334')}> 🟧</span>\n                                <span onClick={() => changeNodeColor('#ffc149')}> 🟨</span>\n                                <span onClick={() => changeNodeColor('#60aa51')}> 🟩</span>\n                                <span onClick={() => changeNodeColor('#0097e4')}> 🟦</span>\n                                <span onClick={() => changeNodeColor('#a73da5')}> 🟪</span>\n                                <span onClick={() => changeNodeColor('#a95a49')}> 🟫</span>\n                                <span onClick={() => changeNodeColor('#464646')}> ⬛</span>\n                                <span onClick={() => changeNodeColor('#f0f0f0')}> ⬜</span>\n                            </span>\n                        </div>\n                    </a>\n                </li>\n                <li className=\"\">\n                    <a className=\"bp3-menu-item\">\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\n                            <ControlGroup\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                }}\n                                fill={true}\n                                vertical={false}\n                            >\n                                <InputGroup\n                                    placeholder=\"#fff\"\n                                    value={color}\n                                    onChange={(e) => setColor(e.target.value)}\n                                />\n                                <Button\n                                    icon=\"style\"\n                                    onClick={() => {\n                                        changeNodeColor(color);\n                                        setColor('');\n                                    }}\n                                    disabled={color.match(/^(#[a-f0-9]{6})|(#[a-f0-9]{3})$/i) === null}\n                                ></Button>\n                            </ControlGroup>\n                        </div>\n                    </a>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default Menu;\n","import React, { Component } from 'react';\nimport { Stage, Layer } from 'react-konva';\nimport Konva from 'konva';\nimport dagre from 'dagre';\nimport Node from './VisualizerNode';\nimport Line from './VisualizerLine';\nimport Menu from './VisualizerMenu';\n\nimport { NodeInterface, NodeProps, LineProps, TreeNode } from '../interfaces';\n\nimport '../../scss/VisualizerCanvas.scss';\n\nimport { CanvasProps, CanvasState } from '../interfaces';\n\nfunction handleWheel(e: Konva.KonvaEventObject<WheelEvent>): { stageScale: number; stageX: number; stageY: number } {\n    e.evt.preventDefault();\n\n    const scaleBy = 1.08;\n    const stage = e.target.getStage();\n    if (stage) {\n        const oldScale = stage.scaleX();\n        const pointerPosition = stage.getPointerPosition();\n        let x, y;\n\n        if (pointerPosition) {\n            [x, y] = [pointerPosition.x, pointerPosition.y];\n        } else {\n            [x, y] = [0, 0];\n        }\n\n        const mousePointTo = {\n            x: x / oldScale - stage.x() / oldScale,\n            y: y / oldScale - stage.y() / oldScale,\n        };\n\n        const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\n\n        return {\n            stageScale: newScale,\n            stageX: -(mousePointTo.x - x / newScale) * newScale,\n            stageY: -(mousePointTo.y - y / newScale) * newScale,\n        };\n    }\n    return {\n        stageScale: 1,\n        stageX: 0,\n        stageY: 0,\n    };\n}\n\nexport default class Canvas extends Component<CanvasProps, CanvasState> {\n    constructor(props: CanvasProps) {\n        super(props);\n\n        const { proofNodes } = this.props;\n        this.state = {\n            canvasSize: {\n                width: 520,\n                height: 300,\n            },\n            stage: {\n                stageScale: 1,\n                stageX: 0,\n                stageY: 0,\n            },\n            proofNodes,\n            showingNodes: {},\n            showingEdges: {},\n            nodeOnFocus: NaN,\n            nodesSelected: [],\n        };\n    }\n\n    componentDidMount(): void {\n        const { showingNodes, proofNodes } = this.state;\n        const { view, importedData } = this.props;\n\n        this.applyView(view);\n\n        this.updatePosition(0);\n        showingNodes[0] = new Node(this.nodeProps(proofNodes[0]));\n        this.addNodes(0);\n\n        const [width, height] = [window.innerWidth, window.innerHeight - 50];\n\n        importedData.nodes.forEach((node) => {\n            if (showingNodes[node.id]) {\n                showingNodes[node.id] = new Node({\n                    ...showingNodes[node.id].props,\n                    color: node.color,\n                });\n                this.updateNodeState(node.id, node.x, node.y);\n            }\n        });\n\n        this.setState({\n            showingNodes,\n            canvasSize: {\n                width,\n                height,\n            },\n            stage: {\n                stageScale: 1,\n                stageX: width / 2 - (showingNodes[0].props.x + 300 / 2),\n                stageY: height / 10 - (showingNodes[0].props.y + 30 / 2),\n            },\n        });\n    }\n\n    applyView = (view: string | undefined): void => {\n        const { proofNodes } = this.state;\n        const nodesToHide = proofNodes.filter((node) => {\n            switch (view) {\n                case 'basic':\n                    return node.views.indexOf('basic') === -1;\n                case 'propositional':\n                    return node.views.indexOf('basic') === -1 && node.views.indexOf('propositional') === -1;\n                default:\n                    return false;\n            }\n        });\n        nodesToHide.forEach((node) => {\n            if (!(proofNodes[node.id].rule === 'π' || node.id === 0)) {\n                this.hideNode(node.id);\n            }\n        });\n    };\n\n    foldSelectedNodes = (): void => {\n        const { proofNodes, nodesSelected, showingNodes } = this.state;\n        this.removeNodes(0);\n        nodesSelected\n            .sort((a, b) => b - a)\n            .forEach((nodeId) => {\n                if (!(proofNodes[nodeId].rule === 'π' || nodeId === 0)) {\n                    this.hideNode(nodeId);\n                }\n            });\n        this.updatePosition(0);\n        showingNodes[0] = new Node({ ...showingNodes[0].props, selected: false });\n        this.addNodes(0);\n        this.setState({ nodesSelected: [] });\n    };\n\n    unfold = (): void => {\n        const { proofNodes, nodeOnFocus } = this.state;\n        this.removeNodes(0);\n        const nodesToUnhide = [...proofNodes[nodeOnFocus].hidedNodes];\n        nodesToUnhide.forEach((nodeId) => this.unhideNode(nodeId));\n        this.updatePosition(0);\n        this.addNodes(0);\n        this.setNodeOnFocus(0);\n        this.setState({ nodesSelected: [] });\n    };\n\n    unfoldOnClick = (id: number): void => {\n        this.setNodeOnFocus(id);\n        setTimeout(() => this.unfold(), 10);\n    };\n\n    nodeProps = (node: NodeInterface): NodeProps => {\n        const { openDrawer } = this.props;\n        return {\n            id: node.id,\n            rule: node.rule,\n            conclusion: node.conclusion,\n            args: node.args,\n            updateNodeState: this.updateNodeState,\n            setNodeOnFocus: this.setNodeOnFocus,\n            toggleNodeSelection: this.toggleNodeSelection,\n            unfoldOnClick: this.unfoldOnClick,\n            openDrawer: openDrawer,\n            color: '#8d99ae',\n            x: node.x,\n            y: node.y,\n            selected: false,\n            nHided: node.hidedNodes.length,\n            nDescendants: node.descendants,\n            topHidedNodes: node.topHidedNodes ? node.topHidedNodes : undefined,\n            tree: node.tree ? node.tree : undefined,\n        };\n    };\n\n    toggleNodeSelection = (id: number): void => {\n        const { showingNodes } = this.state;\n        let { nodesSelected } = this.state;\n        if (showingNodes[id].props.selected) {\n            showingNodes[id] = new Node({ ...showingNodes[id].props, selected: false });\n            nodesSelected = nodesSelected.filter((nodeId) => nodeId !== id);\n        } else {\n            showingNodes[id] = new Node({ ...showingNodes[id].props, selected: true });\n            nodesSelected.push(id);\n        }\n        this.setState({ showingNodes, nodesSelected });\n    };\n\n    setNodeOnFocus = (id: number): void => {\n        this.setState({ nodeOnFocus: id });\n    };\n\n    LineProps = (key: string, from: NodeProps, to: NodeProps): LineProps => ({\n        key,\n        points: [from.x + 150, from.y, to.x + 150, to.y + 105],\n    });\n\n    addNodes = (id: number): void => {\n        const { proofNodes, showingNodes } = this.state;\n        proofNodes[id].children.forEach((child) => {\n            this.addNode(proofNodes[child], proofNodes[id]);\n            this.addNodes(child);\n        });\n        this.setState({ proofNodes, showingNodes });\n    };\n\n    addNode = (node: NodeInterface, parent: NodeInterface): void => {\n        const { showingNodes, showingEdges } = this.state;\n\n        showingNodes[node.id] = new Node(this.nodeProps(node));\n        showingEdges[`${node.id}->${parent.id}`] = Line(\n            this.LineProps(`${node.id}->${parent.id}`, showingNodes[node.id].props, showingNodes[parent.id].props),\n        );\n    };\n\n    removeNodes = (id: number): void => {\n        const { proofNodes, showingNodes } = this.state;\n        this.recursivelyGetChildren(id).forEach((node) => {\n            this.removeNode(node);\n        });\n        this.setState({ showingNodes, proofNodes });\n    };\n\n    removeNode = (id: number): void => {\n        const { showingNodes, showingEdges } = this.state;\n        Object.keys(showingEdges)\n            .filter((edgeKey) => {\n                const edges = edgeKey.split('->');\n                return id === parseInt(edges[0]) || id === parseInt(edges[1]);\n            })\n            .forEach((edge) => {\n                delete showingEdges[edge];\n            });\n\n        delete showingNodes[id];\n        this.setState({ showingNodes, showingEdges });\n    };\n\n    ancestors = (id: number): Array<number> => {\n        const { proofNodes } = this.state;\n        const ancestorsId: Array<number> = [];\n        let currentId = id;\n        while (currentId) {\n            currentId = proofNodes[currentId].parent;\n            ancestorsId.push(currentId);\n        }\n        return ancestorsId;\n    };\n\n    hideNode = (id: number): void => {\n        const { proofNodes } = this.state;\n        const parentId = proofNodes[id].parent;\n        let piId: number;\n        if (parentId && proofNodes[parentId].hided) {\n            // if the parent node is hided in some node\n            piId = proofNodes[parentId].hidedIn;\n            proofNodes[piId].children.push(...proofNodes[id].children);\n            proofNodes[piId].children = proofNodes[piId].children.filter((nodeId) => nodeId !== id);\n            if (proofNodes[piId].topHidedNodes) {\n                proofNodes[piId].topHidedNodes = proofNodes[piId].topHidedNodes?.map((node) => {\n                    if (this.ancestors(id).indexOf(node[0]) !== -1)\n                        return [node[0], node[1], node[2], node[3], node[4] + 1];\n                    return node;\n                });\n            }\n        } else if (parentId && proofNodes[parentId].hideMyChildNode) {\n            // if the parent node has some node as child that hides node\n            piId = proofNodes[parentId].hideMyChildNode;\n            let nH: number | undefined = 1,\n                nD: number | undefined = 0;\n            if (proofNodes[id].children.length === 1 && proofNodes[proofNodes[id].children[0]].rule === 'π') {\n                proofNodes[proofNodes[id].children[0]].hidedNodes.forEach(\n                    (child) => (proofNodes[child].hidedIn = piId),\n                );\n                proofNodes[piId].hidedNodes.push(...proofNodes[proofNodes[id].children[0]].hidedNodes);\n                nD = proofNodes[proofNodes[id].children[0]].topHidedNodes?.reduce(\n                    (accumulator, node) => accumulator + node[3],\n                    0,\n                );\n                nH = proofNodes[proofNodes[id].children[0]].topHidedNodes?.reduce(\n                    (accumulator, node) => accumulator + node[4],\n                    0,\n                );\n                delete proofNodes[proofNodes[id].children[0]];\n                proofNodes[id].children = [];\n                proofNodes[id].hideMyChildNode = NaN;\n            }\n            proofNodes[piId].children.push(...proofNodes[id].children);\n            proofNodes[piId].topHidedNodes?.push([\n                id,\n                proofNodes[id].rule,\n                proofNodes[id].conclusion,\n                nD ? nD : 0,\n                nH ? nH : 0,\n            ]);\n            proofNodes[piId].descendants = nD ? nD : 0;\n            proofNodes[piId].hidedIn = nH ? nH : 0;\n        } else if (proofNodes[id].children.length === 1 && proofNodes[proofNodes[id].children[0]].rule === 'π') {\n            piId = proofNodes[id].children[0];\n            proofNodes[id].children = [];\n            proofNodes[parentId].children.push(piId);\n            proofNodes[parentId].hideMyChildNode = piId;\n            proofNodes[piId].parent = parentId;\n            proofNodes[piId].replace = id;\n            proofNodes[piId].descendants = proofNodes[id].descendants;\n            const nD = proofNodes[piId].topHidedNodes?.reduce((accumulator, node) => accumulator + node[3], 0);\n            const nH = proofNodes[piId].topHidedNodes?.reduce((accumulator, node) => accumulator + node[4], 0);\n            proofNodes[piId].topHidedNodes = [\n                [id, proofNodes[id].rule, proofNodes[id].conclusion, nD ? nD : 0, nH ? nH + 1 : 0],\n            ];\n        } else {\n            piId = proofNodes.length;\n            proofNodes[piId] = {\n                id: piId,\n                conclusion: '∴',\n                rule: 'π',\n                args: '',\n                children: [...proofNodes[id].children],\n                x: NaN,\n                y: NaN,\n                parent: parentId,\n                hided: false,\n                hidedNodes: [],\n                views: [],\n                hideMyChildNode: NaN,\n                hidedIn: NaN,\n                positionCache: false,\n                replace: id,\n                descendants: 0,\n                topHidedNodes: [[id, proofNodes[id].rule, proofNodes[id].conclusion, proofNodes[id].descendants, 1]],\n                rank: proofNodes[parentId].rank + 1,\n            };\n            proofNodes[parentId].hideMyChildNode = piId;\n            proofNodes[parentId].children.push(piId);\n            proofNodes[piId].descendants = proofNodes[id].descendants;\n        }\n        proofNodes[piId].hidedNodes.push(id);\n        proofNodes[id].hided = true;\n        proofNodes[id].hidedIn = piId;\n        proofNodes[parentId].children = proofNodes[parentId].children.filter((nodeId) => nodeId !== id);\n        proofNodes[id].hideMyChildNode = NaN;\n        const tree = this.hiddenNodesTree(\n            proofNodes[piId].hidedNodes\n                .sort((a, b) => a - b)\n                .map((nodeId) => {\n                    return {\n                        id: nodeId,\n                        icon: 'graph',\n                        parentId: proofNodes[nodeId].parent,\n                        label: proofNodes[nodeId].rule + ' => ' + proofNodes[nodeId].conclusion,\n                        descendants: proofNodes[nodeId].descendants,\n                        childNodes: [],\n                        rule: proofNodes[nodeId].rule,\n                        conclusion: proofNodes[nodeId].conclusion,\n                        args: proofNodes[nodeId].args,\n                    };\n                }),\n        );\n        proofNodes[piId].tree = tree;\n        this.setState({ proofNodes });\n    };\n\n    hiddenNodesTree = (list: Array<TreeNode>): Array<TreeNode> => {\n        const map: { [n: number]: number } = {},\n            roots: Array<TreeNode> = [];\n        let node, i;\n\n        for (i = 0; i < list.length; i += 1) {\n            map[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== NaN && list[map[node.parentId]]) {\n                list[map[node.parentId]].childNodes.push(node);\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    };\n\n    unhideNode = (id: number): void => {\n        const { proofNodes } = this.state;\n        const parentId = proofNodes[id].parent;\n        const piId = proofNodes[id].hidedIn;\n        proofNodes[id].hided = false;\n        proofNodes[parentId].children.push(id);\n        proofNodes[piId].hidedNodes = proofNodes[piId].hidedNodes.filter((nodeId) => nodeId !== id);\n        proofNodes[piId].children = proofNodes[piId].children.filter(\n            (nodeId) => !proofNodes[id].children.some((child) => child === nodeId),\n        );\n        if (proofNodes[piId].hidedNodes.length === 0) {\n            proofNodes[proofNodes[piId].parent].children = proofNodes[proofNodes[piId].parent].children.filter(\n                (nodeId) => nodeId !== piId,\n            );\n            proofNodes[proofNodes[piId].parent].hideMyChildNode = NaN;\n            delete proofNodes[piId];\n        }\n    };\n\n    updatePosition = (id: number): void => {\n        const { proofNodes } = this.state;\n        const g = new dagre.graphlib.Graph();\n        g.setGraph({ rankdir: 'BT', ranker: 'tight-tree' });\n        g.setDefaultEdgeLabel(function () {\n            return {};\n        });\n        proofNodes.forEach((node) => {\n            if (!node.hided) {\n                if (node.rule !== 'π') {\n                    g.setNode(node.id.toString(), { width: 300, height: 130 });\n                    proofNodes[node.id].children.sort().forEach((child) => {\n                        if (proofNodes[child].rule !== 'π') g.setEdge(child.toString(), node.id.toString());\n                        else {\n                            const childNode = proofNodes[child];\n                            g.setEdge(\n                                (childNode.replace ? childNode.replace : childNode.id).toString(),\n                                node.id.toString(),\n                            );\n                        }\n                    });\n                } else {\n                    g.setNode((node.replace ? node.replace : node.id).toString(), { width: 300, height: 130 });\n                    proofNodes[node.id].children.forEach((child) => {\n                        g.setEdge(child.toString(), (node.replace ? node.replace : node.id).toString());\n                    });\n                }\n            }\n        });\n        dagre.layout(g);\n        const xOffset = g.node(id.toString()).x - (proofNodes[id].x ? proofNodes[id].x : 0);\n        const yOffset = g.node(id.toString()).y - (proofNodes[id].y ? proofNodes[id].y : 0);\n        g.nodes().forEach(function (v) {\n            try {\n                const { x, y } = g.node(v);\n                if (!proofNodes[parseInt(v)].hided) {\n                    proofNodes[parseInt(v)].x = x - xOffset;\n                    proofNodes[parseInt(v)].y = y - yOffset;\n                } else {\n                    proofNodes[proofNodes[parseInt(v)].hidedIn].x = x - xOffset;\n                    proofNodes[proofNodes[parseInt(v)].hidedIn].y = y - yOffset;\n                }\n            } catch (e) {\n                console.log(e);\n            }\n        });\n        this.setState({ proofNodes });\n    };\n\n    updateNodeState = (key: number, x: number, y: number): void => {\n        const { showingNodes, showingEdges, proofNodes } = this.state;\n        showingNodes[key] = new Node({ ...showingNodes[key].props, x, y });\n\n        proofNodes[key].positionCache = true;\n        proofNodes[key] = { ...proofNodes[key], x, y };\n\n        Object.keys(showingEdges)\n            .filter((edgeKey) => edgeKey.indexOf(key.toString()) !== -1)\n            .forEach((edge) => {\n                const [from, to] = edge.split('->').map((x) => parseInt(x));\n                showingEdges[edge] = Line(this.LineProps(edge, showingNodes[from].props, showingNodes[to].props));\n            });\n        this.setState({ showingNodes, showingEdges });\n    };\n\n    recursivelyGetChildren = (nodeId: number): Array<number> => {\n        const { proofNodes } = this.state;\n        let nodes: Array<number> = [];\n        proofNodes[nodeId].children.forEach((node) => {\n            nodes = nodes.concat([node]);\n            nodes = nodes.concat(this.recursivelyGetChildren(node));\n        });\n        return nodes;\n    };\n\n    foldAllDescendants = (): void => {\n        const { nodeOnFocus } = this.state;\n        this.setState({ nodesSelected: [nodeOnFocus, ...this.recursivelyGetChildren(nodeOnFocus)] }, () =>\n            this.foldSelectedNodes(),\n        );\n    };\n\n    changeNodeColor = (color: string): void => {\n        const { showingNodes, nodesSelected, nodeOnFocus } = this.state;\n        nodesSelected.forEach((nodeId) => {\n            showingNodes[nodeId] = new Node({ ...showingNodes[nodeId].props, selected: false, color: color });\n        });\n        showingNodes[nodeOnFocus] = new Node({ ...showingNodes[nodeOnFocus].props, color: color });\n        this.setState({ showingNodes, nodesSelected: [] });\n    };\n\n    downloadProof = (dot: string, proofName: string): void => {\n        const { showingNodes, proofNodes } = this.state;\n        const link = document.createElement('a');\n        link.download = proofName + '.json';\n        link.href = `data:attachment/text,${encodeURIComponent(\n            JSON.stringify({\n                dot: dot,\n                nodes: Object.keys(showingNodes)\n                    .filter((node) => showingNodes[parseInt(node)].props.rule !== 'π')\n                    .map((node) => {\n                        return {\n                            id: parseInt(node),\n                            color: showingNodes[parseInt(node)].props.color,\n                            x: showingNodes[parseInt(node)].props.x,\n                            y: showingNodes[parseInt(node)].props.y,\n                        };\n                    }),\n                hidden: Object.keys(showingNodes)\n                    .filter((node) => showingNodes[parseInt(node)].props.rule === 'π')\n                    .map((node) => {\n                        return proofNodes[parseInt(node)].hidedNodes.filter((nodeId) => proofNodes[nodeId].hided);\n                    }),\n            }),\n        )}`;\n        link.click();\n    };\n\n    render(): JSX.Element {\n        const { canvasSize, stage, showingNodes, showingEdges, nodesSelected, nodeOnFocus, proofNodes } = this.state;\n        return (\n            <>\n                <Menu\n                    unfold={this.unfold}\n                    foldSelectedNodes={this.foldSelectedNodes}\n                    foldAllDescendants={this.foldAllDescendants}\n                    changeNodeColor={this.changeNodeColor}\n                    options={{\n                        unfold: proofNodes[nodeOnFocus] ? proofNodes[nodeOnFocus].rule === 'π' : false,\n                        foldSelected: nodesSelected.length && nodesSelected.includes(nodeOnFocus) ? true : false,\n                        foldAllDescendants: proofNodes[nodeOnFocus] && proofNodes[nodeOnFocus].children.length > 0,\n                    }}\n                ></Menu>\n                <Stage\n                    draggable\n                    width={canvasSize.width}\n                    height={canvasSize.height}\n                    onWheel={(e) => this.setState({ stage: handleWheel(e) })}\n                    scaleX={stage.stageScale}\n                    scaleY={stage.stageScale}\n                    x={stage.stageX}\n                    y={stage.stageY}\n                    onContextMenu={(e) => e.evt.preventDefault()}\n                >\n                    <Layer>\n                        {Object.keys(showingEdges).length > 0 &&\n                            Object.keys(showingEdges).map(function (key) {\n                                return showingEdges[key];\n                            })}\n                        {Object.keys(showingNodes).length > 0 &&\n                            Object.keys(showingNodes).map(\n                                (value: string): JSX.Element => showingNodes[parseInt(value)].render(),\n                            )}\n                    </Layer>\n                </Stage>\n            </>\n        );\n    }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport * as React from 'react';\n\nimport { Classes, TreeNodeInfo, Tree } from '@blueprintjs/core';\n\nexport class VisualizerTree extends React.Component<\n    any,\n    { nodes: TreeNodeInfo[]; selected: number; originalNodeInfo: any }\n> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            nodes: props.content,\n            selected: NaN,\n            originalNodeInfo: props.originalNodeInfo,\n        };\n    }\n\n    componentDidUpdate(prevProps: any) {\n        if (this.props.content !== prevProps.content) {\n            this.setState({ nodes: this.props.content });\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div style={{ backgroundColor: this.props.darkTheme ? '#394b59' : 'white' }}>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    className={Classes.ELEVATION_0}\n                />\n            </div>\n        );\n    }\n\n    private handleNodeClick = (nodeData: any, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\n        const { setNodeInfo } = this.props;\n        setNodeInfo(\n            this.state.selected !== nodeData.id\n                ? {\n                      rule: nodeData.rule ? nodeData.rule : '',\n                      args: nodeData.args ? nodeData.args : '',\n                      conclusion: nodeData.conclusion ? nodeData.conclusion : '',\n                      nHided: 0,\n                      nDescendants: nodeData.descendants,\n                      topHidedNodes: undefined,\n                  }\n                : this.state.originalNodeInfo,\n        );\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, (n) => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState({ ...this.state, selected: this.state.selected === nodeData.id ? NaN : nodeData.id });\n    };\n\n    private handleNodeCollapse = (nodeData: TreeNodeInfo) => {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    };\n\n    private handleNodeExpand = (nodeData: TreeNodeInfo) => {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n    };\n\n    private forEachNode(nodes: TreeNodeInfo[], callback: (node: TreeNodeInfo) => void) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes ? node.childNodes : [], callback);\n        }\n    }\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Icon, Collapse, Pre, TreeNodeInfo } from '@blueprintjs/core';\nimport { VisualizerTree } from './VisualizerTree';\n\nimport { stateInterface } from './interfaces';\n\nimport '../scss/VisualizerDirectoryStyle.scss';\n\ninterface directoryStyleProps {\n    proofTree: TreeNodeInfo[];\n    ruleHelper: (s: string) => string;\n    ident: (s: string) => string;\n    translate: (s: string) => string;\n}\n\nconst VisualizerDirectoryStyle: React.FC<directoryStyleProps> = ({\n    proofTree,\n    ruleHelper,\n    ident,\n    translate,\n}: directoryStyleProps) => {\n    const darkTheme = useSelector<stateInterface, boolean>((state: stateInterface) => state.darkThemeReducer.darkTheme);\n    const [ruleHelperOpen, setRuleHelperOpen] = useState(false);\n    const [argsTranslatorOpen, setArgsTranslatorOpen] = useState(false);\n    const [conclusionTranslatorOpen, setConclusionTranslatorOpen] = useState(false);\n    const [nodeInfo, setNodeInfo] = useState<{\n        rule: string;\n        args: string;\n        conclusion: string;\n        nHided: number;\n        nDescendants: number;\n        topHidedNodes?: Array<[number, string, string, number, number]>;\n    }>({\n        rule: '',\n        args: '',\n        conclusion: '',\n        nHided: 0,\n        nDescendants: 0,\n        topHidedNodes: undefined,\n    });\n\n    return (\n        <div\n            style={{\n                backgroundColor: darkTheme ? 'rgb(57, 75, 89)' : 'white',\n                height:\n                    window.innerHeight - (document.getElementsByClassName('bp3-navbar')[0] as HTMLElement).offsetHeight,\n            }}\n        >\n            <div\n                style={{\n                    width: '50%',\n                    height: '100%',\n                    float: 'left',\n                    clear: 'none',\n                    borderRight: '1px solid black',\n                    overflow: 'auto',\n                }}\n            >\n                <VisualizerTree\n                    darkTheme={darkTheme}\n                    content={proofTree}\n                    setNodeInfo={setNodeInfo}\n                    originalNodeInfo={{\n                        rule: '',\n                        args: '',\n                        conclusion: '',\n                        nHided: 0,\n                        nDescendants: 0,\n                        topHidedNodes: undefined,\n                    }}\n                ></VisualizerTree>\n            </div>\n            <div\n                style={{\n                    width: '50%',\n                    height: '100%',\n                    float: 'left',\n                    clear: 'none',\n                }}\n            >\n                <table\n                    id=\"table-node-info\"\n                    className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\n                    style={{ width: '100%' }}\n                >\n                    <thead>\n                        <tr>\n                            <th>Property</th>\n                            <th>Value</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <strong>RULE </strong>{' '}\n                                <Icon\n                                    id=\"rule-icon\"\n                                    icon=\"help\"\n                                    onClick={() => {\n                                        setArgsTranslatorOpen(false);\n                                        setConclusionTranslatorOpen(false);\n                                        setRuleHelperOpen(!ruleHelperOpen);\n                                    }}\n                                ></Icon>\n                            </td>\n                            <td className=\"value\">\n                                {nodeInfo.rule}\n                                <Collapse isOpen={ruleHelperOpen}>\n                                    <Pre id=\"pre-rule\">{ruleHelper(nodeInfo.rule)}</Pre>\n                                </Collapse>\n                            </td>\n                        </tr>\n                        {nodeInfo.args ? (\n                            <tr>\n                                <td>\n                                    <strong>ARGS</strong>{' '}\n                                    {nodeInfo.args.indexOf('let') !== -1 ? (\n                                        <Icon\n                                            id=\"rule-icon\"\n                                            icon=\"translate\"\n                                            onClick={() => {\n                                                setRuleHelperOpen(false);\n                                                setConclusionTranslatorOpen(false);\n                                                setArgsTranslatorOpen(!argsTranslatorOpen);\n                                            }}\n                                        ></Icon>\n                                    ) : null}\n                                </td>\n                                <td className=\"value\">\n                                    {nodeInfo.args}\n                                    {nodeInfo.args.indexOf('let') !== -1 ? (\n                                        <Collapse isOpen={argsTranslatorOpen}>\n                                            <Pre id=\"pre-rule\">{ident(translate(nodeInfo.args))}</Pre>\n                                        </Collapse>\n                                    ) : null}\n                                </td>\n                            </tr>\n                        ) : null}\n                        <tr>\n                            <td>\n                                <strong>CONCLUSION</strong>{' '}\n                                {nodeInfo.conclusion.indexOf('let') !== -1 ? (\n                                    <Icon\n                                        id=\"rule-icon\"\n                                        icon=\"translate\"\n                                        onClick={() => {\n                                            setRuleHelperOpen(false);\n                                            setArgsTranslatorOpen(false);\n                                            setConclusionTranslatorOpen(!conclusionTranslatorOpen);\n                                        }}\n                                    ></Icon>\n                                ) : null}\n                            </td>\n                            <td className=\"value\">\n                                {nodeInfo.conclusion}\n                                {nodeInfo.conclusion.indexOf('let') !== -1 ? (\n                                    <Collapse isOpen={conclusionTranslatorOpen}>\n                                        <Pre id=\"pre-rule\">{ident(translate(nodeInfo.conclusion))}</Pre>\n                                    </Collapse>\n                                ) : null}\n                            </td>\n                        </tr>\n                        {!nodeInfo.topHidedNodes ? (\n                            <tr>\n                                <td>\n                                    <strong>#DESCENDANTS</strong>\n                                </td>\n                                <td>{nodeInfo.nDescendants}</td>\n                            </tr>\n                        ) : (\n                            <tr>\n                                <td>\n                                    <strong>#DESCENDANTS</strong>\n                                </td>\n                                <td>[{nodeInfo.topHidedNodes.map((node) => node[3]).join(', ')}]</td>\n                            </tr>\n                        )}\n                        {nodeInfo.nHided ? (\n                            <tr>\n                                <td>\n                                    <strong>#HIDDEN</strong>\n                                </td>\n                                <td>\n                                    [\n                                    {nodeInfo.topHidedNodes\n                                        ? nodeInfo.topHidedNodes.map((node) => node[4]).join(', ')\n                                        : ''}\n                                    ]\n                                </td>\n                            </tr>\n                        ) : null}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\nexport default VisualizerDirectoryStyle;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Drawer, Position, Classes, Icon, Collapse, Pre, TreeNodeInfo } from '@blueprintjs/core';\nimport Canvas from './canvas/VisualizerCanvas';\nimport { VisualizerTree } from './VisualizerTree';\nimport VisualizerDirectoryStyle from './VisualizerDirectoryStyle';\nimport { NodeInterface, stateInterface } from './interfaces';\n\nimport '../scss/VisualizerStage.scss';\n\nfunction removeEscapedCharacters(s: string): string {\n    let newS = '';\n    for (let i = 0; i < s.length; i += 1) {\n        if (\n            !(\n                s[i] === '\\\\' &&\n                (s[i + 1] === '\"' ||\n                    s[i + 1] === '>' ||\n                    s[i + 1] === '<' ||\n                    s[i + 1] === '{' ||\n                    s[i + 1] === '}' ||\n                    s[i + 1] === '|')\n            )\n        ) {\n            newS += s[i];\n        }\n    }\n\n    return newS;\n}\n\nfunction processDot(dot: string) {\n    const nodes: Array<NodeInterface> = [\n        {\n            id: 0,\n            conclusion: '',\n            rule: '',\n            args: '',\n            views: [],\n            children: [],\n            parent: NaN,\n            x: NaN,\n            y: NaN,\n            hideMyChildNode: NaN,\n            hided: false,\n            hidedNodes: [],\n            hidedIn: NaN,\n            positionCache: false,\n            descendants: 0,\n            rank: 0,\n        },\n    ];\n    dot = dot.split('\"}}\"\\n').join('\"}}\";\\n'); // Fix CVC5\n    let comment: any = dot.slice(dot.indexOf('comment='));\n    comment = comment ? comment.slice(comment.indexOf('=') + 2, comment.indexOf(';') - 1) : null;\n    if (comment) {\n        const dispatch = useDispatch();\n        dispatch({\n            type: 'SET_LET_MAP',\n            payload: JSON.parse(removeEscapedCharacters(removeEscapedCharacters(comment)))['letMap'],\n        });\n    }\n\n    const lines = dot\n        .slice(dot.indexOf('{') + 1, dot.lastIndexOf('}') - 2)\n        .replace(/(\\n|\\t)/gm, '')\n        .split(';');\n    lines.forEach((line) => {\n        if (line.search('label') !== -1) {\n            const id = parseInt(line.slice(0, line.indexOf('[')).trim());\n            let attributes = line.slice(line.indexOf('[') + 1, line.lastIndexOf(']')).trim();\n\n            let label = attributes.slice(attributes.search(/(?<!\\\\)\"/) + 2);\n            label = label.slice(0, label.search(/(?<!\\\\)\"/) - 1);\n            let [conclusion, rule, args] = ['', '', ''];\n            [conclusion, rule] = label.split(/(?<!\\\\)\\|/);\n            [rule, args] = rule.indexOf(':args') != -1 ? rule.split(':args') : [rule, ''];\n\n            attributes = attributes.slice(attributes.indexOf(', class = ') + ', class = '.length);\n            attributes = attributes.slice(attributes.indexOf('\"') + 1, attributes.slice(1).indexOf('\"') + 1);\n            const views = attributes.trim().split(' ');\n            const comment: string = line.slice(line.indexOf('comment'), line.lastIndexOf('\"'));\n            const commentJSON = JSON.parse(comment.slice(comment.indexOf('\"') + 1).replace(/'/g, '\"'));\n\n            if (!nodes[id]) {\n                nodes[id] = {\n                    id: id,\n                    conclusion: '',\n                    rule: '',\n                    args: '',\n                    views: [],\n                    children: [],\n                    parent: NaN,\n                    x: NaN,\n                    y: NaN,\n                    hideMyChildNode: NaN,\n                    hided: false,\n                    hidedNodes: [],\n                    hidedIn: NaN,\n                    positionCache: false,\n                    descendants: 0,\n                    rank: 0,\n                };\n            }\n            nodes[id].conclusion = removeEscapedCharacters(conclusion);\n            nodes[id].rule = removeEscapedCharacters(rule);\n            nodes[id].args = removeEscapedCharacters(args);\n            nodes[id].views = views;\n            nodes[id].descendants = commentJSON.subProofQty - 1;\n        } else if (line.search('->') !== -1) {\n            const [child, parent] = line.split('->').map((x) => parseInt(x.trim()));\n            nodes[parent].children.push(child);\n            if (!nodes[child]) {\n                nodes[child] = {\n                    id: child,\n                    conclusion: '',\n                    rule: '',\n                    args: '',\n                    views: [],\n                    children: [],\n                    parent: parent,\n                    x: NaN,\n                    y: NaN,\n                    hideMyChildNode: NaN,\n                    hided: false,\n                    hidedNodes: [],\n                    hidedIn: NaN,\n                    positionCache: false,\n                    descendants: 0,\n                    rank: nodes[parent].rank + 1,\n                };\n            }\n            nodes[child].parent = parent;\n            nodes[child].rank = nodes[parent].rank + 1;\n        }\n    });\n    return comment\n        ? [nodes, JSON.parse(removeEscapedCharacters(removeEscapedCharacters(comment)))['letMap']]\n        : [nodes, {}];\n}\n\nfunction ruleHelper(rule: string) {\n    switch (rule.split(' ')[0]) {\n        case 'π':\n            return 'This node hides some parts of the proof, you can unfold it.';\n        case 'ASSUME':\n            return (\n                rule +\n                '\\n\\n======== Assumption (a leaf)\\nChildren: none\\nArguments: (F)\\n--------------\\nConclusion: F\\n\\nThis rule has special status, in that an application of assume is an open leaf in a proof that is not (yet) justified. An assume leaf is analogous to a free variable in a term, where we say \"F is a free assumption in proof P\" if it contains an application of F that is not  bound by SCOPE.'\n            );\n        case 'SCOPE':\n            return (\n                rule +\n                '\\n\\n======== Scope (a binder for assumptions)\\nChildren: (P:F)\\nArguments: (F1, ..., Fn)\\n--------------\\nConclusion: (=> (and F1 ... Fn) F) or (not (and F1 ... Fn)) if F is false\\n\\nThis rule has a dual purpose with ASSUME. It is a way to close assumptions in a proof. We require that F1 ... Fn are free assumptions in P and say that F1, ..., Fn are not free in (SCOPE P). In other words, they are bound by this application. For example, the proof node: (SCOPE (ASSUME F) :args F) has the conclusion (=> F F) and has no free assumptions. More generally, a proof with no free assumptions always concludes a valid formula.'\n            );\n        case 'SUBS':\n            return (\n                rule +\n                '\\n\\n======== Substitution\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids)?)\\n---------------------------------------------------------------\\nConclusion: (= t t*sigma{ids}(Fn)*...*sigma{ids}(F1))\\nwhere sigma{ids}(Fi) are substitutions, which notice are applied in reverse order. Notice that ids is a MethodId identifier, which determines how to convert the formulas F1, ..., Fn into substitutions.'\n            );\n        case 'REWRITE':\n            return (\n                rule +\n                '\\n\\n======== Rewrite\\nChildren: none\\nArguments: (t, (idr)?)\\n----------------------------------------\\nConclusion: (= t Rewriter{idr}(t))\\nwhere idr is a MethodId identifier, which determines the kind of rewriter to apply, e.g. Rewriter::rewrite.'\n            );\n        case 'EVALUATE':\n            return (\n                rule +\n                '\\n\\n======== Evaluate\\nChildren: none\\n\\nArguments: (t)\\n----------------------------------------\\nConclusion: (= t Evaluator::evaluate(t))\\nNote this is equivalent to: (REWRITE t MethodId::RW_EVALUATE)'\n            );\n        case 'MACRO_SR_EQ_INTRO':\n            return (\n                rule +\n                \"\\n\\nIn this rule, we provide a term t and conclude that it is equal to its rewritten form under a (proven) substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: (= t t')\\nwhere t' is Rewriter{idr}(t*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nIn other words, from the point of view of Skolem forms, this rule transforms t to t' by standard substitution + rewriting.\\n\\nThe arguments ids, ida and idr are optional and specify the identifier of the substitution, the substitution application and rewriter respectively to be used.\"\n            );\n        case 'MACRO_SR_PRED_INTRO':\n            return (\n                rule +\n                \"\\n\\nIn this rule, we provide a formula F and conclude it, under the condition that it rewrites to true under a proven substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (F, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == true where ids and idr are method identifiers.\\n\\nMore generally, this rule also holds when: Rewriter::rewrite(toOriginal(F')) == true where F' is the result of the left hand side of the equality above. Here, notice that we apply rewriting on the original form of F', meaning that this rule may conclude an F whose Skolem form is justified by the definition of its (fresh) Skolem variables. For example, this rule may justify the conclusion (= k t) where k is the purification Skolem for t, e.g. where the original form of k is t.\\n\\nFurthermore, notice that the rewriting and substitution is applied only within the side condition, meaning the rewritten form of the original form of F does not escape this rule.\"\n            );\n        case 'MACRO_SR_PRED_ELIM':\n            return (\n                rule +\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may conclude its rewritten form under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: ((ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: F'\\nwhere F' is Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)). where ids and idr are method identifiers.\\n\\nWe rewrite only on the Skolem form of F, similar to MACRO_SR_EQ_INTRO.\"\n            );\n        case 'MACRO_SR_PRED_TRANSFORM':\n            return (\n                rule +\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may provide a formula G and conclude it if F and G are equivalent after rewriting under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: (G, (ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: G\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == Rewriter{idr}(G*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nMore generally, this rule also holds when:\\n  Rewriter::rewrite(toOriginal(F')) == Rewriter::rewrite(toOriginal(G'))\\nwhere F' and G' are the result of each side of the equation above. Here, original forms are used in a similar manner to MACRO_SR_PRED_INTRO above.\"\n            );\n        case 'REMOVE_TERM_FORMULA_AXIOM':\n            return (\n                rule +\n                '\\n\\n======== Remove Term Formulas Axiom\\nChildren: none\\nArguments: (t)\\n---------------------------------------------------------------\\nConclusion: RemoveTermFormulas::getAxiomFor(t).'\n            );\n        case 'THEORY_LEMMA':\n            return (\n                rule +\n                '\\n\\n======== Theory lemma\\nChildren: none\\nArguments: (F, tid)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a (T-valid) theory lemma generated by theory with TheoryId tid. This is a \"coarse-grained\" rule that is used as a placeholder if a theory did not provide a proof for a lemma or conflict.'\n            );\n        case 'THEORY_REWRITE':\n            return (\n                rule +\n                \"\\n\\n======== Theory Rewrite\\nChildren: none\\nArguments: (F, tid, rid)\\n----------------------------------------\\nConclusion: F\\nwhere F is an equality of the form (= t t') where t' is obtained by applying the kind of rewriting given by the method identifier rid, which is one of: { RW_REWRITE_THEORY_PRE, RW_REWRITE_THEORY_POST, RW_REWRITE_EQ_EXT } Notice that the checker for this rule does not replay the rewrite to ensure correctness, since theory rewriter methods are not static. For example, the quantifiers rewriter involves constructing new bound variables that are not guaranteed to be consistent on each call.\"\n            );\n        case 'PREPROCESS':\n            return (\n                rule +\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on some preprocessing pass, or otherwise F was added as a new assertion by some preprocessing pass.\"\n            );\n        case 'PREPROCESS_LEMMA':\n            return (\n                rule +\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by some preprocessing pass.'\n            );\n        case 'THEORY_PREPROCESS':\n            return (\n                rule +\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = Theory::ppRewrite(t) for some theory. Notice this is a \"trusted\" rule.'\n            );\n        case 'THEORY_PREPROCESS_LEMMA':\n            return (\n                rule +\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by theory preprocessing.'\n            );\n        case 'THEORY_EXPAND_DEF':\n            return (\n                rule +\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on theory expand definitions.\"\n            );\n        case 'WITNESS_AXIOM':\n            return (\n                rule +\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an existential (exists ((x T)) (P x)) used for introducing a witness term (witness ((x T)) (P x)).'\n            );\n        case 'TRUST_REWRITE':\n            return (\n                rule +\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of rewriting that could not be replayed during proof postprocessing.\"\n            );\n        case 'TRUST_SUBS':\n            return (\n                rule +\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be replayed during proof postprocessing.\"\n            );\n        case 'TRUST_SUBS_MAP':\n            return (\n                rule +\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be determined by the TrustSubstitutionMap. This inference may contain possibly multiple children corresponding to the formulas used to derive the substitution.\"\n            );\n        case 'TRUST_SUBS_EQ':\n            return (\n                rule +\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a solved equality of the form (= x t) derived as the solved form of F', where F' is given as a child.\"\n            );\n        case 'SAT_REFUTATION':\n            return (\n                rule +\n                '\\n\\n========= SAT Refutation for assumption-based unsat cores\\nChildren: (P1, ..., Pn)\\nArguments: none\\n---------------------\\nConclusion: false\\nNote: P1, ..., Pn correspond to the unsat core determined by the SAT solver.'\n            );\n        case 'RESOLUTION':\n            return (\n                rule +\n                \"\\n\\n======== Resolution\\nChildren:\\n(P1:C1, P2:C2)\\nArguments: (pol, L)\\n---------------------\\nConclusion: C\\nwhere\\n- C1 and C2 are nodes viewed as clauses, i.e., either an OR node with each children viewed as a literal or a node viewed as a literal. Note that an OR node could also be a literal.\\n- pol is either true or false, representing the polarity of the pivot on the first clause\\n- L is the pivot of the resolution, which occurs as is (resp. under a NOT) in C1 and negatively (as is) in C2 if pol = true (pol = false).\\nC is a clause resulting from collecting all the literals in C1, minus the first occurrence of the pivot or its negation, and C2, minus the first occurrence of the pivot or its negation, according to the policy above. If the resulting clause has a single literal, that literal itself is the result; if it has no literals, then the result is false; otherwise it's an OR node of the resulting literals.\\n\\nNote that it may be the case that the pivot does not occur in the clauses. In this case the rule is not unsound, but it does not correspond to resolution but rather to a weakening of the clause that did not have a literal eliminated.\"\n            );\n        case 'CHAIN_RESOLUTION':\n            return (\n                rule +\n                \"\\n\\n======== N-ary Resolution\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined above\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined above\\n- let C_1' = C_1 (from P1),\\n- for each i > 1, let C_i' = C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C = C_n'\"\n            );\n        case 'FACTORING':\n            return (\n                rule +\n                '\\n\\n======== Factoring\\nChildren: (P:C1)\\nArguments: ()\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 is the same and the number of literals in C2 is smaller than that of C1'\n            );\n        case 'REORDERING':\n            return (\n                rule +\n                '\\n\\n======== Reordering\\nChildren: (P:C1)\\nArguments: (C2)\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 are the same and the number of literals in C2 is the same of that of C1'\n            );\n        case 'MACRO_RESOLUTION':\n            return (\n                rule +\n                \"\\n\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\n            );\n        case 'MACRO_RESOLUTION_TRUST':\n            return (\n                rule +\n                \"\\n\\nAs MACRO_RESOLUTION but not checked\\n\\nMACRO_RESOLUTION definition:\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\n            );\n        default:\n            return rule;\n    }\n}\n\nconst createTree = (list: any): any => {\n    const map: any = {},\n        roots: any = [];\n    let node, i;\n\n    for (i = 0; i < list.length; i += 1) {\n        map[list[i].id] = i;\n        list[i].childNodes = [];\n    }\n\n    for (i = 0; i < list.length; i += 1) {\n        node = list[i];\n        if (node.parentId !== NaN && list[map[node.parentId]]) {\n            list[map[node.parentId]].childNodes.push(node);\n        } else {\n            roots.push(node);\n        }\n    }\n    return roots;\n};\n\nconst indent = (s: string) => {\n    let newS = s.replaceAll(' ', '\\n');\n    let i = 0;\n    let pCounter = 0;\n    while (i < newS.length) {\n        if (newS[i] === '(' || newS[i] === '[') pCounter++;\n        else if (newS[i] === ')' || newS[i] === ']') pCounter--;\n        else if (newS[i] === '\\n') {\n            if (newS[i + 1] === ')' || newS[i + 1] === ']') {\n                newS = [newS.slice(0, i + 1), '  '.repeat(pCounter - 1), newS.slice(i + 1)].join('');\n                i += pCounter - 1;\n            } else {\n                newS = [newS.slice(0, i + 1), '  '.repeat(pCounter), newS.slice(i + 1)].join('');\n                i += pCounter;\n            }\n        }\n        i++;\n    }\n    return newS;\n};\n\nconst VisualizerStage: React.FC<{ canvasRef: React.RefObject<Canvas> }> = ({\n    canvasRef,\n}: {\n    canvasRef: React.RefObject<Canvas>;\n}) => {\n    const dot = useSelector<stateInterface, string | undefined>((state) => state.proofReducer.proof.dot);\n    const view = useSelector<stateInterface, string | undefined>((state) => state.proofReducer.proof.view);\n    const style = useSelector<stateInterface, string | undefined>((state) => state.styleReducer.style);\n    const darkTheme = useSelector<stateInterface, boolean>((state: stateInterface) => state.darkThemeReducer.darkTheme);\n    const importedData = useSelector<stateInterface, stateInterface['importedDataReducer']['importedData']>(\n        (state: stateInterface) => state.importedDataReducer.importedData,\n    );\n    const [proof, letMap] = processDot(dot ? dot : '');\n    const proofTree = createTree(\n        Array.from(Array(proof.length).keys()).map((nodeId) => {\n            return {\n                id: nodeId,\n                icon: 'graph',\n                parentId: proof[nodeId].parent,\n                label: proof[nodeId].rule + ' => ' + proof[nodeId].conclusion,\n                descendants: proof[nodeId].descendants,\n                childNodes: [],\n                rule: proof[nodeId].rule,\n                conclusion: proof[nodeId].conclusion,\n                args: proof[nodeId].args,\n            };\n        }),\n    );\n\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n    const [ruleHelperOpen, setRuleHelperOpen] = useState(false);\n    const [argsTranslatorOpen, setArgsTranslatorOpen] = useState(false);\n    const [conclusionTranslatorOpen, setConclusionTranslatorOpen] = useState(false);\n    const [nodeInfo, setNodeInfo] = useState<{\n        rule: string;\n        args: string;\n        conclusion: string;\n        nHided: number;\n        nDescendants: number;\n        topHidedNodes?: Array<[number, string, string, number, number]>;\n    }>({\n        rule: '',\n        args: '',\n        conclusion: '',\n        nHided: 0,\n        nDescendants: 0,\n        topHidedNodes: undefined,\n    });\n    const [nodeInfoCopy, setNodeInfoCopy] = useState<{\n        rule: string;\n        args: string;\n        conclusion: string;\n        nHided: number;\n        nDescendants: number;\n        topHidedNodes?: Array<[number, string, string, number, number]>;\n    }>({\n        rule: '',\n        args: '',\n        conclusion: '',\n        nHided: 0,\n        nDescendants: 0,\n        topHidedNodes: undefined,\n    });\n    const [tree, setTree] = useState<TreeNodeInfo[]>([]);\n    const translate = (s: string) => {\n        let newS = s;\n        let i = newS.indexOf('let');\n        while (i !== -1) {\n            const l = newS.slice(i).split(/[ |)|,]/)[0];\n            newS = newS.replace(l, letMap[l]);\n            i = newS.indexOf('let');\n        }\n        return newS;\n    };\n\n    const openDrawer = (\n        nodeInfo: {\n            rule: string;\n            args: string;\n            conclusion: string;\n            nHided: number;\n            nDescendants: number;\n            topHidedNodes?: Array<[number, string, string, number, number]>;\n        },\n        tree?: TreeNodeInfo[],\n    ) => {\n        setRuleHelperOpen(false);\n        setNodeInfo(nodeInfo);\n        setTree(tree ? tree : []);\n        setNodeInfoCopy(nodeInfo);\n        setDrawerIsOpen(true);\n    };\n\n    const nodeInfoTable = () => {\n        return (\n            <table\n                id=\"table-node-info\"\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\n                style={{ width: '100%' }}\n            >\n                <thead>\n                    <tr>\n                        <th>Property</th>\n                        <th>Value</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>\n                            <strong>RULE </strong>{' '}\n                            <Icon\n                                id=\"rule-icon\"\n                                icon=\"help\"\n                                onClick={() => {\n                                    setArgsTranslatorOpen(false);\n                                    setConclusionTranslatorOpen(false);\n                                    setRuleHelperOpen(!ruleHelperOpen);\n                                }}\n                            ></Icon>\n                        </td>\n                        <td>\n                            {nodeInfo.rule}\n                            <Collapse isOpen={ruleHelperOpen}>\n                                <Pre id=\"pre-rule\">{ruleHelper(nodeInfo.rule)}</Pre>\n                            </Collapse>\n                        </td>\n                    </tr>\n                    {nodeInfo.args ? (\n                        <tr>\n                            <td>\n                                <strong>ARGS</strong>{' '}\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\n                                    <Icon\n                                        id=\"rule-icon\"\n                                        icon=\"translate\"\n                                        onClick={() => {\n                                            setConclusionTranslatorOpen(false);\n                                            setRuleHelperOpen(false);\n                                            setArgsTranslatorOpen(!argsTranslatorOpen);\n                                        }}\n                                    ></Icon>\n                                ) : null}\n                            </td>\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\n                                {nodeInfo.args}\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\n                                    <Collapse isOpen={argsTranslatorOpen}>\n                                        <Pre id=\"pre-rule\">{indent(translate(nodeInfo.args))}</Pre>\n                                    </Collapse>\n                                ) : null}\n                            </td>\n                        </tr>\n                    ) : null}\n                    <tr>\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\n                            <strong>CONCLUSION</strong>{' '}\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\n                                <Icon\n                                    id=\"rule-icon\"\n                                    icon=\"translate\"\n                                    onClick={() => {\n                                        setArgsTranslatorOpen(false);\n                                        setRuleHelperOpen(false);\n                                        setConclusionTranslatorOpen(!conclusionTranslatorOpen);\n                                    }}\n                                ></Icon>\n                            ) : null}\n                        </td>\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\n                            {nodeInfo.conclusion}\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\n                                <Collapse isOpen={conclusionTranslatorOpen}>\n                                    <Pre id=\"pre-rule\">{indent(translate(nodeInfo.conclusion))}</Pre>\n                                </Collapse>\n                            ) : null}\n                        </td>\n                    </tr>\n                    {!nodeInfo.topHidedNodes ? (\n                        <tr>\n                            <td>\n                                <strong>#DESCENDANTS</strong>\n                            </td>\n                            <td>{nodeInfo.nDescendants}</td>\n                        </tr>\n                    ) : (\n                        <tr>\n                            <td>\n                                <strong>#DESCENDANTS</strong>\n                            </td>\n                            <td>[{nodeInfo.topHidedNodes.map((node) => node[3]).join(', ')}]</td>\n                        </tr>\n                    )}\n                    {nodeInfo.nHided ? (\n                        <tr>\n                            <td>\n                                <strong>#HIDDEN</strong>\n                            </td>\n                            <td>\n                                [\n                                {nodeInfo.topHidedNodes ? nodeInfo.topHidedNodes.map((node) => node[4]).join(', ') : ''}\n                                ]\n                            </td>\n                        </tr>\n                    ) : null}\n                </tbody>\n            </table>\n        );\n    };\n\n    return (\n        <div>\n            {proof.length > 1 ? (\n                style === 'tree' ? (\n                    <Canvas\n                        ref={canvasRef}\n                        key={dot}\n                        view={view}\n                        proofNodes={proof}\n                        openDrawer={openDrawer}\n                        importedData={importedData}\n                    ></Canvas>\n                ) : (\n                    <VisualizerDirectoryStyle\n                        proofTree={proofTree}\n                        ruleHelper={ruleHelper}\n                        ident={indent}\n                        translate={translate}\n                    />\n                )\n            ) : null}\n            <Drawer\n                className={darkTheme ? 'bp3-dark' : ''}\n                autoFocus={true}\n                canEscapeKeyClose={true}\n                canOutsideClickClose={true}\n                enforceFocus={true}\n                hasBackdrop={false}\n                isOpen={drawerIsOpen}\n                position={Position.BOTTOM}\n                usePortal={true}\n                onClose={(e) => {\n                    e.preventDefault();\n                    setDrawerIsOpen(false);\n                    setArgsTranslatorOpen(false);\n                    setConclusionTranslatorOpen(false);\n                }}\n                icon=\"info-sign\"\n                title=\"Node info\"\n            >\n                <div className={Classes.DRAWER_BODY}>\n                    <VisualizerTree\n                        darkTheme={darkTheme}\n                        content={tree}\n                        setNodeInfo={setNodeInfo}\n                        originalNodeInfo={nodeInfoCopy}\n                    ></VisualizerTree>\n                    <div className={Classes.DIALOG_BODY}>{nodeInfoTable()}</div>\n                </div>\n            </Drawer>\n        </div>\n    );\n};\n\nexport default VisualizerStage;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Dispatch, SetStateAction } from 'react';\nimport { Button, Drawer, Classes, Position } from '@blueprintjs/core';\n\nimport { stateInterface } from './interfaces';\n\ninterface letDrawerProps {\n    drawerIsOpen: boolean;\n    setDrawerIsOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nconst indent = (s: string) => {\n    let newS = s.replaceAll(' ', '\\n');\n    let i = 0;\n    let pCounter = 0;\n    while (i < newS.length) {\n        if (newS[i] === '(') pCounter++;\n        else if (newS[i] === ')') pCounter--;\n        else if (newS[i] === '\\n') {\n            if (newS[i + 1] === ')') {\n                newS = [newS.slice(0, i + 1), '    '.repeat(pCounter - 1), newS.slice(i + 1)].join('');\n                i += pCounter - 1;\n            } else {\n                newS = [newS.slice(0, i + 1), '    '.repeat(pCounter), newS.slice(i + 1)].join('');\n                i += pCounter;\n            }\n        }\n        i++;\n    }\n    return newS;\n};\n\nconst VisualizerLetDrawer: React.FC<letDrawerProps> = ({ drawerIsOpen, setDrawerIsOpen }: letDrawerProps) => {\n    const darkTheme = useSelector<stateInterface, boolean>((state: stateInterface) => state.darkThemeReducer.darkTheme);\n    const letMap = useSelector<\n        stateInterface,\n        {\n            [Key: string]: string;\n        }\n    >((state: stateInterface) => state.letMapReducer.letMap);\n    const [letMapS, setLetMapS] = useState(letMap);\n\n    return (\n        <Drawer\n            className={darkTheme ? 'bp3-dark' : ''}\n            style={{ maxHeight: '65%', width: '35%' }}\n            autoFocus={true}\n            canEscapeKeyClose={true}\n            canOutsideClickClose={false}\n            enforceFocus={true}\n            hasBackdrop={false}\n            isOpen={drawerIsOpen}\n            position={Position.RIGHT}\n            usePortal={false}\n            onClose={(e) => {\n                e.preventDefault();\n                setDrawerIsOpen(false);\n            }}\n            icon=\"translate\"\n            title=\"Let Map\"\n        >\n            <div className={Classes.DRAWER_BODY}>\n                <div className={Classes.DIALOG_BODY}>\n                    <table\n                        id=\"table-node-info\"\n                        className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\n                        style={{ width: '100%' }}\n                    >\n                        <thead>\n                            <tr>\n                                <th style={{ width: '100px' }}>Property</th>\n                                <th>Value</th>\n                                <th style={{ width: '250px' }}>Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {Object.keys(letMapS).map(function (key) {\n                                return (\n                                    <tr key={key}>\n                                        <td>\n                                            <strong>{key}</strong>\n                                        </td>\n                                        <td style={{ width: '100%', whiteSpace: 'pre-wrap' }}>\n                                            {indent(letMapS[key])\n                                                .split('\\n')\n                                                .map((e) => {\n                                                    if (e.indexOf(' let') === -1) {\n                                                        return <span>{e + '\\n'}</span>;\n                                                    } else {\n                                                        return (\n                                                            <span\n                                                                onClick={() => {\n                                                                    const newLetMap = { ...letMapS };\n                                                                    const i = newLetMap[key].indexOf(\n                                                                        e.replace(/^\\s+|\\s+$/g, ''),\n                                                                    );\n                                                                    const l = newLetMap[key].slice(i).split(/[ |)]/)[0];\n                                                                    newLetMap[key] = newLetMap[key].replace(\n                                                                        l,\n                                                                        letMap[l],\n                                                                    );\n                                                                    setLetMapS(newLetMap);\n                                                                }}\n                                                            >\n                                                                {e + '\\n'}\n                                                            </span>\n                                                        );\n                                                    }\n                                                })}\n                                        </td>\n                                        <td style={{ width: '150px', display: 'flex', flexDirection: 'column' }}>\n                                            <Button\n                                                onClick={() => {\n                                                    const newLetMap = { ...letMapS };\n                                                    let i = newLetMap[key].indexOf('let');\n                                                    while (i !== -1) {\n                                                        const l = newLetMap[key].slice(i).split(/[ |)]/)[0];\n                                                        newLetMap[key] = newLetMap[key].replace(l, letMap[l]);\n                                                        i = newLetMap[key].indexOf('let');\n                                                    }\n                                                    setLetMapS(newLetMap);\n                                                }}\n                                                className=\"bp3-minimal\"\n                                                icon=\"translate\"\n                                                text=\"Expand\"\n                                            />\n                                            <Button\n                                                onClick={() => {\n                                                    const newLetMap = { ...letMapS };\n                                                    newLetMap[key] = letMap[key];\n                                                    setLetMapS(newLetMap);\n                                                }}\n                                                className=\"bp3-minimal\"\n                                                icon=\"undo\"\n                                                text=\"Revert\"\n                                            />\n                                        </td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </Drawer>\n    );\n};\n\nexport default VisualizerLetDrawer;\n","import React, { useEffect, useState, useRef } from 'react';\nimport Canvas from './components/canvas/VisualizerCanvas';\nimport { useSelector } from 'react-redux';\n\nimport { Intent, Position, Toaster } from '@blueprintjs/core';\n\nimport VisualizerNavbar from './components/VisualizerNavbar';\nimport VisualizerDialog from './components/VisualizerDialog';\nimport VisualizerStage from './components/VisualizerStage';\nimport VisualizerLetDrawer from './components/VisualizerLetDrawer';\n\nimport { stateInterface } from './components/interfaces';\n\nconst App: React.FC = () => {\n    const [dialogIsOpen, setDialogIsOpen] = useState(true);\n    const [dialogContent, setDialogContent] = useState('welcome');\n\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n\n    const darkTheme = useSelector<stateInterface, boolean>((state: stateInterface) => state.darkThemeReducer.darkTheme);\n\n    const canvasRef = useRef<Canvas>(null);\n    const downloadProof = (dot: string, proofName: string) => {\n        canvasRef.current ? canvasRef.current.downloadProof(dot, proofName) : null;\n    };\n    // Toaster\n    let toaster: Toaster;\n    const refHandlers = {\n        toaster: (ref: Toaster) => (toaster = ref),\n    };\n\n    const addErrorToast = (err: string) => {\n        toaster.show({ icon: 'warning-sign', intent: Intent.DANGER, message: err });\n    };\n\n    useEffect(() => {\n        document.getElementsByClassName('bp3-overlay')[0]\n            ? (document.getElementsByClassName('bp3-overlay')[0].className = '')\n            : null;\n    }, [drawerIsOpen]);\n\n    return (\n        <div className={darkTheme ? ' bp3-dark' : ''}>\n            <Toaster position={Position.TOP} ref={refHandlers.toaster} />\n            <VisualizerNavbar\n                setDialogIsOpen={setDialogIsOpen}\n                setDialogContent={setDialogContent}\n                setDrawerIsOpen={setDrawerIsOpen}\n                downloadProof={downloadProof}\n            ></VisualizerNavbar>\n            <VisualizerDialog\n                dialogIsOpen={dialogIsOpen}\n                setDialogIsOpen={setDialogIsOpen}\n                dialogContent={dialogContent}\n                setDialogContent={setDialogContent}\n                addErrorToast={addErrorToast}\n            ></VisualizerDialog>\n            <VisualizerStage canvasRef={canvasRef}></VisualizerStage>\n            {drawerIsOpen ? (\n                <VisualizerLetDrawer drawerIsOpen={drawerIsOpen} setDrawerIsOpen={setDrawerIsOpen} />\n            ) : null}\n        </div>\n    );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport { proof, stateInterface } from '../components/interfaces';\n\nconst initialStateProofReducer = {\n    proof: {\n        label: '',\n        options: '',\n        problem: '',\n        dot: '',\n        view: 'basic',\n    },\n};\n\nconst initialStateDarkThemeReducer = {\n    darkTheme: true,\n};\n\nconst initialStateStyleReducer = {\n    style: 'tree',\n};\n\nconst initialStateLetMapReducer = {\n    letMap: {},\n};\n\nconst initialStateImportedDataReducer = {\n    importedData: {\n        nodes: [],\n        hidden: [],\n    },\n};\n\ntype Action =\n    | { type: 'SET_PROOF'; payload: proof }\n    | { type: 'TOGGLE_DARK_THEME' }\n    | { type: 'SET_DOT'; payload: proof['dot'] }\n    | { type: 'BASIC_VIEW' }\n    | { type: 'PROPOSITIONAL_VIEW' }\n    | { type: 'FULL_VIEW' }\n    | { type: 'SET_STYLE'; payload: string }\n    | {\n          type: 'SET_LET_MAP';\n          payload: {\n              [Key: string]: string;\n          };\n      }\n    | {\n          type: 'SET_IMPORTED_DATA';\n          payload: {\n              nodes: Array<{ id: number; color: string; x: number; y: number }>;\n              hidden: Array<Array<number>>;\n          };\n      };\n\nconst proofReducer = (\n    state: stateInterface['proofReducer'] = initialStateProofReducer,\n    action: Action,\n): stateInterface['proofReducer'] => {\n    switch (action.type) {\n        case 'SET_PROOF':\n            return {\n                ...state,\n                proof: {\n                    label: action.payload.label,\n                    options: action.payload.options,\n                    problem: action.payload.problem,\n                    dot: action.payload.dot,\n                    view: 'basic',\n                },\n            };\n        case 'SET_DOT':\n            return {\n                ...state,\n                proof: {\n                    ...state.proof,\n                    dot: action.payload,\n                },\n            };\n        case 'BASIC_VIEW':\n            return {\n                ...state,\n                proof: {\n                    ...state.proof,\n                    view: 'basic',\n                },\n            };\n        case 'PROPOSITIONAL_VIEW':\n            return {\n                ...state,\n                proof: {\n                    ...state.proof,\n                    view: 'propositional',\n                },\n            };\n        case 'FULL_VIEW':\n            return {\n                ...state,\n                proof: {\n                    ...state.proof,\n                    view: 'full',\n                },\n            };\n        default:\n            return state;\n    }\n};\n\nconst darkThemeReducer = (\n    state: stateInterface['darkThemeReducer'] = initialStateDarkThemeReducer,\n    action: Action,\n): stateInterface['darkThemeReducer'] => {\n    switch (action.type) {\n        case 'TOGGLE_DARK_THEME':\n            return {\n                ...state,\n                darkTheme: !state.darkTheme,\n            };\n        default:\n            return state;\n    }\n};\n\nconst styleReducer = (\n    state: stateInterface['styleReducer'] = initialStateStyleReducer,\n    action: Action,\n): stateInterface['styleReducer'] => {\n    switch (action.type) {\n        case 'SET_STYLE':\n            return {\n                ...state,\n                style: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nconst letMapReducer = (\n    state: stateInterface['letMapReducer'] = initialStateLetMapReducer,\n    action: Action,\n): stateInterface['letMapReducer'] => {\n    switch (action.type) {\n        case 'SET_LET_MAP':\n            return {\n                ...state,\n                letMap: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nconst importedDataReducer = (\n    state: {\n        importedData: {\n            nodes: Array<{ id: number; color: string; x: number; y: number }>;\n            hidden: Array<Array<number>>;\n        };\n    } = initialStateImportedDataReducer,\n    action: Action,\n): stateInterface['importedDataReducer'] => {\n    switch (action.type) {\n        case 'SET_IMPORTED_DATA':\n            return {\n                ...state,\n                importedData: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({ proofReducer, darkThemeReducer, styleReducer, letMapReducer, importedDataReducer });\n","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport const store = createStore(reducer);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { store } from './redux/store';\n\nimport './scss/index.scss';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}