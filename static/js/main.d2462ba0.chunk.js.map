{"version":3,"sources":["store/hooks.ts","store/features/file/fileSlice.ts","store/features/proof/auxi.ts","store/features/proof/proofSlice.ts","store/features/theme/themeSlice.ts","components/VisualizerStage/Canvas/VisualizerNode.tsx","components/VisualizerStage/Canvas/VisualizerLine.tsx","components/VisualizerStage/Canvas/VisualizerMenu.tsx","store/features/externalCmd/externalCmd.ts","components/VisualizerStage/Canvas/VisualizerCanvas.tsx","components/VisualizerNavbar/VisualizerNavbar.tsx","components/VisualizerDialog/VisualizerDialog.tsx","components/VisualizerTree/VisualizerTree.tsx","components/VisualizerStage/VisualizerDirectoryStyle/VisualizerDirectoryStyle.tsx","components/VisualizerStage/VisualizerStage.tsx","components/VisualizerLetDrawer/let.ts","components/VisualizerLetDrawer/VisualizerLetDrawer.tsx","components/App/App.tsx","store/store.ts","ReactUtils/reportWebVitals.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","fileSlice","createSlice","name","initialState","value","filesCount","reducers","set","state","action","payload","actions","selectFileName","file","selectDot","split","pop","JSON","parse","dot","selectFileCount","removeEscapedCharacters","s","newS","i","length","processDot","nodes","id","conclusion","rule","args","views","children","parents","NaN","descendants","dependencies","comment","slice","indexOf","lastIndexOf","replace","forEach","line","search","parseInt","trim","attributes","label","commentJSON","subProofQty","map","x","child","parent","push","isNaN","proof","nodeId","concat","reduce","acc","childId","proofSlice","view","style","hiddenNodes","letMap","visualInfo","process","proofJSON","isJSON","node","color","y","selected","hideNodes","toHideNodes","filter","every","hiddenNodesArray","clusters","clusteredNodes","hiddenNode","clusterID","p","hiddenID","some","_p","pastCluster","stringify","cluster","clusterParents","parentCluster","splice","findNodesClusters","piNodeId","Object","keys","foldAllDescendants","index","self","unhideNodes","pi","hiddens","size","setVisualInfo","selectNodes","len","unselectNodes","changeStyle","applyView","visualInfoSize","proofSize","proofNode","applyColor","Number","selectProof","piNodeChildren","haveHiddenParent","n","piNodeParents","piNode","parentId","piId","depsId","highHierarchyNodes","ac","childID","selectView","selectStyle","selectLetMap","selectVisualInfo","selectHiddenNodes","themeSlice","toggle","selectTheme","theme","textColorFromBg","bgColor","substring","sixDigitColor","charAt","c","join","Node","props","nHided","nDescendants","setNodeOnFocus","toggleNodeSelection","updateNodePosition","openDrawer","onDragEnd","createTree","tagProps","fill","stroke","strokeWidth","textProps","align","fontSize","height","padding","width","metaInfoProps","nHidedStr","nDescendantsStr","ruleTxt","depProps","depTextProp","draggable","toString","onDragMove","e","target","attrs","onClick","evt","button","shiftKey","menuNode","document","getElementById","top","clientY","left","clientX","display","window","addEventListener","text","points","depLineSize","radius","String","Line","key","Menu","unfold","foldSelectedNodes","changeNodeColor","currentColor","options","useState","setColor","useEffect","className","foldSelected","stopPropagation","vertical","placeholder","onChange","icon","disabled","match","externalCmd","findData","nodeToFind","findOption","renderData","count","fileChanged","findNode","option","selectFindData","handleWheel","preventDefault","stage","getStage","oldScale","scaleX","pointerPosition","getPointerPosition","mousePointTo","newScale","deltaY","stageScale","stageX","stageY","Canvas","nodeOnFocus","reRender","setState","nodesSelected","obj","find","hiddenIds","showingNodes","rootNode","o","tree","secondaryLabel","childNodes","parentsId","hasCaret","Boolean","LineProps","from","to","saveNodePosition","copyNodePosition","showingEdges","edgeKey","edge","componentDidUpdate","bind","canvasSize","this","newShowingNodes","newNodeProps","innerWidth","innerHeight","updateEdgesAndFuncs","prevProps","found","includes","onWheel","scaleY","onContextMenu","current_state","proofChanged","visualInfoChanged","isNewFile","nodeFindData","nodeWidth","nodeHeight","g","dagre","graphlib","Graph","setGraph","rankdir","ranker","setDefaultEdgeLabel","setNode","setEdge","layout","xOffset","yOffset","v","console","log","Component","blockRender","allowRenderNewFile","newVisualInfo","visualInfos","mapDispatchToProps","connect","ownProps","setDialogIsOpen","setDialogContent","setDrawerIsOpen","fileName","darkTheme","windowSize","setWindowSize","handleResize","removeEventListener","useWindowSize","command","setCommand","lastCommands","setLastCommands","commandId","setCommandId","dispatch","runCommands","commands","cmdArg","string","matches","matchAll","idList","insideBracket","insideMatches","rangeLim","numS","Array","_","listStr","word","regexString","regex","RegExp","test","err","allNodesIds","menus","download","downloadJSON","fName","link","createElement","href","encodeURIComponent","click","replaceAll","getElementsByClassName","toDataURL","help","Group","Alignment","LEFT","Heading","Divider","content","RIGHT","onKeyDown","unshift","newId","rightElement","placement","marginLeft","undefined","checked","readUploadedFileAsText","inputFile","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","VisualizerDialog","dialogIsOpen","dialogContent","addErrorToast","dialogProps","title","dialogBody","succesButton","processingProof","setProcessingProof","proofProcessed","setProofProcessed","changeFileName","changeFile","large","textAlign","paddingTop","intent","Intent","SUCCESS","iconSize","hasSelection","onInputChange","a","files","File","fileContents","message","ext","isOpen","onClose","usePortal","Classes","DIALOG_BODY","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","VisualizerTree","originalNodeInfo","setNodeInfo","useReducer","forceUpdate","setNodes","setSelected","forEachNode","callback","backgroundColor","contents","onNodeClick","nodeData","_nodePath","originallySelected","isSelected","onNodeCollapse","isExpanded","onNodeExpand","ELEVATION_0","VisualizerDirectoryStyle","proofTree","ruleHelper","indent","translate","ruleHelperOpen","setRuleHelperOpen","argsTranslatorOpen","setArgsTranslatorOpen","conclusionTranslatorOpen","setConclusionTranslatorOpen","nodeInfo","offsetHeight","float","clear","borderRight","overflow","maxHeight","pCounter","repeat","VisualizerStage","fileID","setProofAndLet","setProofTree","newProof","newLetMap","list","roots","drawerIsOpen","nodeInfoCopy","setNodeInfoCopy","setTree","l","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","position","Position","BOTTOM","DRAWER_BODY","dependency","dep","Let","letText","letsList","indices","lines","biggerID","externalLets","getTextWidth","context","getContext","font","measureText","expandValue","shouldUpdate","keyList","let","letName","k","idx","indentLevel","expandPartialy","externalRef","letIdx","indentedText","printLines","lastLine","newIdx","shrinkValue","fitsTheWindow","mode","someDoesntFit","newLines","thisLevel","thisLine","lastSpace","lastUsedSpace","lastOpenParenthesis","biggestSize","newBiggerID","thisSize","groupUp","original","numKey","VisualizerLetDrawer","letMapS","setLetMapS","resizeMode","setResizeMode","letsRef","useRef","widthRef","current","newWidth","clientWidth","renderLet","lets","currentLet","arr","start","thisLet","expandLet","whiteSpace","expandAll","revertLet","App","toaster","refHandlers","ref","TOP","show","DANGER","store","configureStore","reducer","fileReducer","proofReducer","themeReducer","externalCmdReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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AAStT,OACN,gCACI,8BACI,gDAEJ,yCAASsT,EAASvY,YAAYf,KAAI,SAACqB,GAAD,MAAU,IAAMA,KAAlD,WAEJ,kB,OCzK5B,SAASwX,GAAWna,GAChB,OAAQA,EAAKf,MAAM,KAAK,IACpB,IAAK,SACD,MAAO,8DACX,IAAK,SACD,OACIe,EACA,uYAER,IAAK,QACD,OACIA,EACA,gnBAER,IAAK,OACD,OACIA,EACA,sZAER,IAAK,UACD,OACIA,EACA,0PAER,IAAK,WACD,OACIA,EACA,6MAER,IAAK,oBACD,OACIA,EACA,moBAER,IAAK,sBACD,OACIA,EACA,6iCAER,IAAK,qBACD,OACIA,EACA,gcAER,IAAK,0BACD,OACIA,EACA,qsBAER,IAAK,4BACD,OACIA,EACA,4LAER,IAAK,eACD,OACIA,EACA,wVAER,IAAK,iBACD,OACIA,EACA,6mBAER,IAAK,aACD,OACIA,EACA,qRAER,IAAK,mBACD,OACIA,EACA,uKAER,IAAK,oBACD,OACIA,EACA,oNAER,IAAK,0BACD,OACIA,EACA,oKAER,IAAK,oBACD,OACIA,EACA,+MAER,IAAK,gBACD,OACIA,EACA,oNAER,IAAK,gBACD,OACIA,EACA,gOAER,IAAK,aACD,OACIA,EACA,mOAER,IAAK,iBACD,OACIA,EACA,0VAER,IAAK,gBACD,OACIA,EACA,uNAER,IAAK,iBACD,OACIA,EACA,kOAER,IAAK,aACD,OACIA,EACA,kpCAER,IAAK,mBACD,OACIA,EACA,ueAER,IAAK,YACD,OACIA,EACA,iNAER,IAAK,aACD,OACIA,EACA,oNAER,IAAK,mBACD,OACIA,EACA,4oBAER,IAAK,yBACD,OACIA,EACA,itBAER,QACI,OAAOA,GAInB,IA+CMoa,GAAS,SAAC5a,GAIZ,IAHA,IAAIC,EAAOD,EAAEiV,WAAW,IAAK,MACzB/U,EAAI,EACJyb,EAAW,EACRzb,EAAID,EAAKE,QACI,MAAZF,EAAKC,IAA0B,MAAZD,EAAKC,GAAYyb,IACnB,MAAZ1b,EAAKC,IAA0B,MAAZD,EAAKC,GAAYyb,IACxB,OAAZ1b,EAAK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","file":"static/js/main.d2462ba0.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { FileState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: FileState = {\r\n    name: 'ex.smt2',\r\n    value: 'digraph proof {\\n\\trankdir=\"BT\";\\n\\tnode [shape=record];\\n\\t0 [label=\"{SCOPE((not a), a)|(not (and (not a) a))}\", class = \" basic \", comment = \"{\\'subProofQty\\':1}\" ];\\n\\t1 [label=\"{CHAIN_RESOLUTION(true, a)|false}\", class = \" propositional \", comment = \"{\\'subProofQty\\':2}\" ];\\n\\t2 [label=\"{ASSUME(a)|a}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t3 [label=\"{ASSUME((not a))|(not a)}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t1->0;\\n\\t2->1;\\n\\t3->1;\\n}',\r\n    filesCount: 0,\r\n};\r\n\r\nexport const fileSlice = createSlice({\r\n    name: 'file',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        set: (state, action: PayloadAction<{ name: string; value: string }>) => {\r\n            state.name = action.payload.name;\r\n            state.value = action.payload.value;\r\n            state.filesCount++;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { set } = fileSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectFileName = (state: RootState): string => state.file.name;\r\n\r\nexport const selectFileExtension = (state: RootState): string => {\r\n    const ext = state.file.name.split('.').pop();\r\n    return ext ? ext : '';\r\n};\r\n\r\nexport const selectDot = (state: RootState): string =>\r\n    state.file.name.split('.').pop() === 'json' ? JSON.parse(state.file.value).dot : state.file.value;\r\n\r\nexport const selectFile = (state: RootState): string => state.file.value;\r\n\r\nexport const selectFileCount = (state: RootState): number => state.file.filesCount;\r\n\r\nexport default fileSlice.reducer;\r\n","import { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\n\r\nfunction removeEscapedCharacters(s: string): string {\r\n    let newS = '';\r\n    for (let i = 0; i < s.length; i += 1) {\r\n        if (\r\n            !(\r\n                s[i] === '\\\\' &&\r\n                (s[i + 1] === '\"' ||\r\n                    s[i + 1] === '>' ||\r\n                    s[i + 1] === '<' ||\r\n                    s[i + 1] === '{' ||\r\n                    s[i + 1] === '}' ||\r\n                    s[i + 1] === '|')\r\n            )\r\n        ) {\r\n            newS += s[i];\r\n        }\r\n    }\r\n\r\n    return newS;\r\n}\r\n\r\nexport function processDot(dot: string): [NodeInterface[], ProofState['letMap']] {\r\n    const nodes: NodeInterface[] = [\r\n        {\r\n            id: 0,\r\n            conclusion: '',\r\n            rule: '',\r\n            args: '',\r\n            views: [],\r\n            children: [],\r\n            parents: [NaN],\r\n            descendants: 0,\r\n            dependencies: [],\r\n        },\r\n    ];\r\n    let comment: string | null = dot.slice(dot.indexOf('comment='));\r\n    comment = comment\r\n        ? removeEscapedCharacters(\r\n              removeEscapedCharacters(comment.slice(comment.indexOf('=') + 2, comment.indexOf(';') - 1)),\r\n          )\r\n        : null;\r\n\r\n    const lines = dot\r\n        .slice(dot.indexOf('{') + 1, dot.lastIndexOf('}') - 2)\r\n        .replace(/(\\n|\\t)/gm, '')\r\n        .split(';');\r\n    lines.forEach((line) => {\r\n        if (line.search('label') !== -1) {\r\n            const id = parseInt(line.slice(0, line.indexOf('[')).trim());\r\n            let attributes = line.slice(line.indexOf('[') + 1, line.lastIndexOf(']')).trim();\r\n\r\n            let label = attributes.slice(attributes.search(/(?<!\\\\)\"/) + 2);\r\n            label = label.slice(0, label.search(/(?<!\\\\)\"/) - 1);\r\n            let [conclusion, rule, args] = ['', '', ''];\r\n            [conclusion, rule] = label.split(/(?<!\\\\)\\|/);\r\n            [rule, args] = rule.indexOf(':args') != -1 ? rule.split(':args') : [rule, ''];\r\n\r\n            attributes = attributes.slice(attributes.indexOf(', class = ') + ', class = '.length);\r\n            attributes = attributes.slice(attributes.indexOf('\"') + 1, attributes.slice(1).indexOf('\"') + 1);\r\n            const views = attributes.trim().split(' ');\r\n            const comment: string = removeEscapedCharacters(line.slice(line.indexOf('comment'), line.lastIndexOf('\"')));\r\n            const commentJSON = JSON.parse(comment.slice(comment.indexOf('\"') + 1).replace(/'/g, '\"'));\r\n\r\n            if (!nodes[id]) {\r\n                nodes[id] = {\r\n                    id: id,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    views: [],\r\n                    children: [],\r\n                    parents: [NaN],\r\n                    descendants: 0,\r\n                    dependencies: [],\r\n                };\r\n            }\r\n            nodes[id].conclusion = removeEscapedCharacters(conclusion);\r\n            nodes[id].rule = removeEscapedCharacters(rule);\r\n            nodes[id].args = removeEscapedCharacters(args);\r\n            nodes[id].views = views;\r\n            nodes[id].descendants = commentJSON.subProofQty;\r\n        }\r\n        // TODO: Se o filho ja existe, isso aqui vai resetar os dados setados do filho\r\n        else if (line.search('->') !== -1) {\r\n            const [child, parent] = line.split('->').map((x) => parseInt(x.trim()));\r\n            nodes[parent].children.push(child);\r\n            // If there isn't a child node\r\n            if (!nodes[child]) {\r\n                nodes[child] = {\r\n                    id: child,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    views: [],\r\n                    children: [],\r\n                    parents: [],\r\n                    descendants: 0,\r\n                    dependencies: [],\r\n                };\r\n            }\r\n            // If there is and is an invalid parent\r\n            else if (isNaN(nodes[child].parents[0])) {\r\n                nodes[child].parents = [];\r\n            }\r\n            nodes[child].parents.push(parent);\r\n        }\r\n    });\r\n    return comment ? [nodes, JSON.parse(comment)['letMap']] : [nodes, {}];\r\n}\r\n\r\nexport const piNodeParents = (\r\n    proof: NodeInterface[],\r\n    hiddenNodesArray: number[],\r\n    dependencies: { [parentId: number]: number[] } = {},\r\n): number[] => {\r\n    const parents = hiddenNodesArray\r\n        // Concat all the parents\r\n        .reduce((acc: number[], hiddenNode) => {\r\n            let haveHiddenParent = false;\r\n\r\n            proof[hiddenNode].parents.forEach((parent) => {\r\n                // If this parent is a hidden node\r\n                if (hiddenNodesArray.indexOf(parent) !== -1) {\r\n                    haveHiddenParent = true;\r\n                } else {\r\n                    dependencies[parent]\r\n                        ? dependencies[parent].push(hiddenNode)\r\n                        : (dependencies[parent] = [hiddenNode]);\r\n                }\r\n            });\r\n\r\n            if (haveHiddenParent) return acc;\r\n            return acc.concat(proof[hiddenNode].parents);\r\n        }, [])\r\n        // Filter the duplicated elements\r\n        .filter((parent, i, self) => self.indexOf(parent) === i)\r\n        // Only the parents that aren't in he hidden nodes array remains\r\n        .filter((parent) => hiddenNodesArray.indexOf(parent) === -1);\r\n\r\n    // Removes the pi node parents from the dependencies\r\n    Object.keys(dependencies).forEach((parent) => {\r\n        const n = Number(parent);\r\n        if (parents.indexOf(n) !== -1) delete dependencies[n];\r\n    });\r\n\r\n    return parents;\r\n};\r\n\r\nexport const descendants = (proof: NodeInterface[], nodeId: number): number[] => {\r\n    return proof[nodeId].children.concat(\r\n        proof[nodeId].children.reduce((acc: number[], childId) => acc.concat(descendants(proof, childId)), []),\r\n    );\r\n};\r\n\r\nexport const piNodeChildren = (proof: NodeInterface[], hiddenNodesArray: number[]): number[] => {\r\n    const children = hiddenNodesArray\r\n        // Get all the childrens\r\n        .reduce((acc: number[], hiddenNode) => acc.concat(proof[hiddenNode].children), [])\r\n        // Exclude the childrens that are part of the hidden nodes\r\n        .filter((child) => hiddenNodesArray.indexOf(child) === -1);\r\n    return children;\r\n};\r\n\r\nexport const findNodesClusters = (proof: NodeInterface[], hiddenNodesArray: number[]): number[][] => {\r\n    const hiddenNodes = [...hiddenNodesArray];\r\n    const clusters: number[][] = [];\r\n    let clusteredNodes = 0;\r\n    const parents = hiddenNodes.map((hiddenNode) => proof[hiddenNode].parents);\r\n\r\n    // Cluster the nodes based on similiar parents\r\n    parents.forEach((parent, clusterID) => {\r\n        // If not all of the nodes where clustered and is a non empty cluster\r\n        if (clusteredNodes !== parents.length && parents[clusterID].length) {\r\n            clusters.push([]);\r\n            parents.forEach((p, hiddenID) => {\r\n                // If those nodes have some parent in commom and they weren't verified yet\r\n                if (parents[hiddenID].length && parent.some((_p) => p.indexOf(_p) !== -1)) {\r\n                    clusters[clusters.length - 1].push(hiddenNodes[hiddenID]);\r\n                    // Removes these parents from the array, making shure they will not get verified again (already clustered)\r\n                    parents[hiddenID] = [];\r\n                    // Increases the number o clustered nodes\r\n                    clusteredNodes++;\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    let pastCluster: number[][] = [];\r\n    // Cluster the nodes until there aren't changes being made\r\n    while (JSON.stringify(pastCluster) != JSON.stringify(clusters)) {\r\n        pastCluster = [...clusters];\r\n        clusters.forEach((cluster, clusterID) => {\r\n            const clusterParents = proof[cluster[0]].parents;\r\n\r\n            // For each cluster\r\n            clusters.forEach((parentCluster, id) => {\r\n                // If this parentCluster (cluster) is parent of the current cluster\r\n                if (parentCluster.some((hiddenID) => clusterParents.indexOf(hiddenID) !== -1)) {\r\n                    // Group the nodes couple in one single cluster (the parent cluster)\r\n                    clusters[id] = clusters[id].concat(clusters[clusterID]);\r\n                    clusters.splice(clusterID, 1);\r\n                    clusterID--;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Filter the nodes with length 1\r\n    return clusters.filter((cluster) => cluster.length > 1);\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { processDot, piNodeChildren, piNodeParents, descendants, findNodesClusters } from './auxi';\r\nimport { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ProofState = {\r\n    proof: [],\r\n    view: 'full',\r\n    style: 'graph',\r\n    hiddenNodes: [],\r\n    letMap: {},\r\n    visualInfo: [],\r\n};\r\n\r\nexport const proofSlice = createSlice({\r\n    name: 'proof',\r\n    initialState,\r\n\r\n    reducers: {\r\n        process: (state, action: PayloadAction<string>) => {\r\n            let proofJSON;\r\n            let dot = action.payload;\r\n            let isJSON = false;\r\n\r\n            // If the payload is a .json file\r\n            if (dot.indexOf('{\"dot\":\"') !== -1) {\r\n                proofJSON = JSON.parse(dot);\r\n                dot = proofJSON.dot;\r\n                isJSON = true;\r\n            }\r\n\r\n            const [proof, letMap] = processDot(dot);\r\n            state.proof = proof;\r\n            state.view = isJSON ? proofJSON.view : 'full';\r\n            state.hiddenNodes = isJSON ? proofJSON.hiddenNodes : [];\r\n            state.letMap = letMap;\r\n            if (isJSON) state.visualInfo = proofJSON.visualInfo;\r\n            else {\r\n                const visualInfo: ProofState['visualInfo'] = {};\r\n                state.proof.forEach((node) => {\r\n                    visualInfo[node.id] = {\r\n                        color: '#fff',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    };\r\n                });\r\n                state.visualInfo = visualInfo;\r\n            }\r\n        },\r\n        hideNodes: (state, action: PayloadAction<number[]>) => {\r\n            const toHideNodes = action.payload.filter(\r\n                (id) =>\r\n                    id > 0 &&\r\n                    id < state.proof.length &&\r\n                    state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1),\r\n            );\r\n\r\n            const clusters = findNodesClusters(state.proof, toHideNodes);\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat(clusters)\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi nodes\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            for (let i = 0; i < clusters.length; i++) {\r\n                state.visualInfo = {\r\n                    ...state.visualInfo,\r\n                    [piNodeId + i]: {\r\n                        color: '#555',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    },\r\n                };\r\n            }\r\n\r\n            // Unselect the selected nodes\r\n            toHideNodes.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        foldAllDescendants: (state, action: PayloadAction<number>) => {\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat([\r\n                    [action.payload, ...descendants(state.proof, action.payload)].filter(\r\n                        (id, index, self) =>\r\n                            id > 0 &&\r\n                            id < state.proof.length &&\r\n                            state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1) &&\r\n                            self.indexOf(id) === index,\r\n                    ),\r\n                ])\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi node and the root node\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            state.visualInfo = {\r\n                ...state.visualInfo,\r\n                [action.payload]: {\r\n                    ...state.visualInfo[action.payload],\r\n                    selected: false,\r\n                },\r\n                [piNodeId]: {\r\n                    color: '#555',\r\n                    x: 0,\r\n                    y: 0,\r\n                    selected: false,\r\n                },\r\n            };\r\n        },\r\n        unhideNodes: (state, action: PayloadAction<{ pi: number; hiddens: number[] }>) => {\r\n            const { pi, hiddens } = action.payload;\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .map((hiddenNodesArray) => hiddenNodesArray.filter((id) => hiddens.indexOf(id) === -1))\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Make sure the ids are realocated\r\n            const size = Object.keys(state.visualInfo).length;\r\n            for (let i = pi; i < size; i++) {\r\n                state.visualInfo[pi] = state.visualInfo[pi + 1];\r\n            }\r\n            // Delete the last position\r\n            delete state.visualInfo[size - 1];\r\n\r\n            // Unselect the hidden nodes\r\n            hiddens.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        setVisualInfo: (state, action: PayloadAction<ProofState['visualInfo']>) => {\r\n            state.visualInfo = action.payload;\r\n        },\r\n        selectNodes: (state, action: PayloadAction<number[]>) => {\r\n            const len = Object.keys(state.visualInfo).length;\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < len) {\r\n                    state.visualInfo[id].selected = true;\r\n                }\r\n            });\r\n        },\r\n        unselectNodes: (state, action: PayloadAction<number[]>) => {\r\n            const len = Object.keys(state.visualInfo).length;\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < len) {\r\n                    state.visualInfo[id].selected = false;\r\n                }\r\n            });\r\n        },\r\n        changeStyle: (state, action: PayloadAction<'graph' | 'directory'>) => {\r\n            switch (action.payload) {\r\n                case 'graph':\r\n                    state.style = 'graph';\r\n                    break;\r\n                case 'directory':\r\n                    state.style = 'directory';\r\n                    break;\r\n            }\r\n        },\r\n        applyView: (state, action: PayloadAction<'basic' | 'propositional' | 'full'>) => {\r\n            const visualInfoSize = Object.keys(state.visualInfo).length;\r\n            const proofSize = state.proof.length;\r\n            // Delete all the pi nodes\r\n            for (let i = 0; i < visualInfoSize - proofSize; i++) {\r\n                delete state.visualInfo[proofSize + i];\r\n            }\r\n\r\n            switch (action.payload) {\r\n                //\r\n                case 'basic':\r\n                    state.view = 'basic';\r\n                    state.hiddenNodes = [\r\n                        state.proof\r\n                            .filter((proofNode) => proofNode.views.indexOf('basic') === -1)\r\n                            .map((proofNode) => proofNode.id),\r\n                    ];\r\n\r\n                    // Set the visual info for the new pi nodes\r\n                    state.visualInfo = {\r\n                        ...state.visualInfo,\r\n                        [Object.keys(state.visualInfo).length]: {\r\n                            color: '#555',\r\n                            x: 0,\r\n                            y: 0,\r\n                            selected: false,\r\n                        },\r\n                    };\r\n\r\n                    break;\r\n                // Hide all nodes that haven't view equal to basic and propositional\r\n                case 'propositional':\r\n                    state.view = 'propositional';\r\n                    state.hiddenNodes = [\r\n                        // Hide nodes that aren't basics a\r\n                        // nos q n são basicos (folhas e o no raiz) e nem proposicionais (outra classe q n tem no .dot1)\r\n                        state.proof\r\n                            .filter(\r\n                                (node) =>\r\n                                    node.views.indexOf('basic') === -1 && node.views.indexOf('propositional') === -1,\r\n                            )\r\n                            .map((node) => node.id),\r\n                    ];\r\n\r\n                    // Set the visual info for the new pi nodes\r\n                    state.visualInfo = {\r\n                        ...state.visualInfo,\r\n                        [Object.keys(state.visualInfo).length]: {\r\n                            color: '#555',\r\n                            x: 0,\r\n                            y: 0,\r\n                            selected: false,\r\n                        },\r\n                    };\r\n\r\n                    break;\r\n                // View without hidden Nodes\r\n                case 'full':\r\n                    state.view = 'full';\r\n                    state.hiddenNodes = [];\r\n                    break;\r\n            }\r\n        },\r\n        applyColor: (state, action: PayloadAction<string>) => {\r\n            Object.keys(state.visualInfo).forEach((id) => {\r\n                if (state.visualInfo[Number(id)].selected) {\r\n                    state.visualInfo[Number(id)].color = action.payload;\r\n                    state.visualInfo[Number(id)].selected = false;\r\n                }\r\n            });\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    process,\r\n    hideNodes,\r\n    foldAllDescendants,\r\n    unhideNodes,\r\n    setVisualInfo,\r\n    selectNodes,\r\n    unselectNodes,\r\n    changeStyle,\r\n    applyView,\r\n    applyColor,\r\n} = proofSlice.actions;\r\n\r\nexport const selectProof = (state: RootState): NodeInterface[] => {\r\n    let proof = state.proof.proof;\r\n    const hiddenNodes = state.proof.hiddenNodes;\r\n\r\n    hiddenNodes.forEach((hiddenNodesArray) => {\r\n        const dependencies: { [parentId: number]: number[] } = {};\r\n        const children = piNodeChildren(proof, hiddenNodesArray);\r\n        const parents = piNodeParents(proof, hiddenNodesArray, dependencies);\r\n\r\n        const piNodeId = proof.length;\r\n        proof = proof.concat({\r\n            id: piNodeId,\r\n            conclusion: '∴',\r\n            rule: 'π',\r\n            args: '',\r\n            views: [],\r\n            children: children,\r\n            parents: parents,\r\n            hiddenNodes: hiddenNodesArray.map((hiddenNode) => proof[hiddenNode]),\r\n            descendants: 1,\r\n            dependencies: [],\r\n        });\r\n\r\n        const piNode = proof[piNodeId];\r\n\r\n        children.forEach(\r\n            (childId) =>\r\n                (proof[childId] = {\r\n                    ...proof[childId],\r\n                    parents: proof[childId].parents\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n        parents.forEach(\r\n            (parentId) =>\r\n                (proof[parentId] = {\r\n                    ...proof[parentId],\r\n                    children: proof[parentId].children\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n\r\n        // Set the dependencies array of each parent that has deps\r\n        Object.keys(dependencies).forEach((parent) => {\r\n            const parentId = Number(parent);\r\n            proof[parentId] = {\r\n                ...proof[parentId],\r\n                dependencies: [...proof[parentId].dependencies, { piId: piNodeId, depsId: dependencies[parentId] }],\r\n            };\r\n        });\r\n\r\n        // Get the high hierarchy nodes in this pi node\r\n        const highHierarchyNodes = hiddenNodesArray?.filter((node) =>\r\n            proof[node].parents.every((parentId) => piNode.parents.indexOf(parentId) !== -1),\r\n        );\r\n\r\n        // Get the conclusion array\r\n        const conclusion = highHierarchyNodes.map((node) => ' ' + proof[node].conclusion);\r\n        piNode.conclusion = conclusion.length > 1 ? `[${conclusion} ]` : `${conclusion}`;\r\n\r\n        // Get the rule array\r\n        const rule = highHierarchyNodes.map((node) => ' ' + proof[node].rule);\r\n        piNode.rule = rule.length > 1 ? `[${rule} ]` : `${rule} `;\r\n\r\n        // Set the descendants number\r\n        piNode.descendants = piNode.children.reduce(\r\n            (ac: number, childID) => ((ac += proof[childID].descendants), ac),\r\n            1,\r\n        );\r\n    });\r\n\r\n    proof = proof.filter((proofNode) =>\r\n        hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(proofNode.id) === -1),\r\n    );\r\n\r\n    return proof;\r\n};\r\n\r\nexport const selectView = (state: RootState): 'basic' | 'propositional' | 'full' => {\r\n    return state.proof.view;\r\n};\r\n\r\nexport const selectStyle = (state: RootState): 'graph' | 'directory' => {\r\n    return state.proof.style;\r\n};\r\n\r\nexport const selectLetMap = (state: RootState): { [Key: string]: string } => {\r\n    return state.proof.letMap;\r\n};\r\n\r\nexport const selectVisualInfo = (state: RootState): ProofState['visualInfo'] => {\r\n    if (state.proof.proof.length) return state.proof.visualInfo;\r\n    // If there is no proof node\r\n    return { 0: { color: '#555', x: 0, y: 0, selected: false } };\r\n};\r\n\r\nexport const selectHiddenNodes = (state: RootState): number[][] => {\r\n    return state.proof.hiddenNodes;\r\n};\r\n\r\nexport default proofSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ThemeState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ThemeState = {\r\n    value: true,\r\n};\r\n\r\nexport const themeSlice = createSlice({\r\n    name: 'theme',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        toggle: (state) => {\r\n            state.value = !state.value;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { toggle } = themeSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice theme. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectTheme = (state: RootState): boolean => state.theme.value;\r\n\r\nexport default themeSlice.reducer;\r\n","import { KonvaEventObject } from 'konva/types/Node';\r\nimport React from 'react';\r\nimport { Label, Text, Tag, Group, Circle, Arrow } from 'react-konva';\r\nimport { NodeProps } from '../../../interfaces/interfaces';\r\n\r\nfunction textColorFromBg(bgColor: string) {\r\n    const r = parseInt(bgColor.substring(0, 2), 16);\r\n    const g = parseInt(bgColor.substring(2, 4), 16);\r\n    const b = parseInt(bgColor.substring(4, 6), 16);\r\n    return r * 0.299 + g * 0.587 + b * 0.114 > 150 ? '#000000' : '#ffffff';\r\n}\r\n\r\nfunction sixDigitColor(bgColor: string): string {\r\n    if (bgColor.charAt(0) === '#') {\r\n        if (bgColor.length == 4) {\r\n            return bgColor\r\n                .substring(1, 7)\r\n                .split('')\r\n                .map((c) => c + c)\r\n                .join('');\r\n        } else if (bgColor.length == 7) {\r\n            return bgColor.substring(1, 7);\r\n        }\r\n    } else {\r\n        if (bgColor.length == 3) {\r\n            return bgColor\r\n                .split('')\r\n                .map((c) => c + c)\r\n                .join('');\r\n        } else if (bgColor.length == 6) {\r\n            return bgColor;\r\n        }\r\n    }\r\n    return '000000';\r\n}\r\n\r\nconst Node: React.FC<NodeProps> = (props: NodeProps): JSX.Element => {\r\n    const {\r\n        id,\r\n        conclusion,\r\n        rule,\r\n        args,\r\n        x,\r\n        y,\r\n        nHided,\r\n        nDescendants,\r\n        hiddenNodes,\r\n        dependencies,\r\n        selected,\r\n        color,\r\n        setNodeOnFocus,\r\n        toggleNodeSelection,\r\n        updateNodePosition,\r\n        openDrawer,\r\n        onDragEnd,\r\n        createTree,\r\n    } = props;\r\n\r\n    const handleClick = (e: KonvaEventObject<MouseEvent>): void => {\r\n        if (e.evt.button === 0) {\r\n            if (e.evt.shiftKey) {\r\n                toggleNodeSelection(id);\r\n            } else {\r\n                openDrawer(\r\n                    {\r\n                        rule: rule,\r\n                        args: args,\r\n                        conclusion: conclusion,\r\n                        nHided: nHided,\r\n                        nDescendants: nDescendants - (rule === 'π' ? 0 : 0),\r\n                        hiddenNodes: hiddenNodes,\r\n                        dependencies: dependencies,\r\n                    },\r\n                    createTree(id),\r\n                );\r\n            }\r\n        } else if (e.evt.button === 2) {\r\n            setNodeOnFocus(id);\r\n            const menuNode = document.getElementById('menu');\r\n            if (menuNode) {\r\n                menuNode.style.top = `${e.evt.clientY}px`;\r\n                menuNode.style.left = `${e.evt.clientX}px`;\r\n                menuNode.style.display = 'initial';\r\n                window.addEventListener('click', () => {\r\n                    menuNode.style.display = 'none';\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const bgColor = color;\r\n    const tagProps = {\r\n        fill: bgColor,\r\n        stroke: selected ? 'red' : 'black',\r\n        strokeWidth: selected ? 3 : 1,\r\n    };\r\n    const textProps = {\r\n        align: 'center',\r\n        fill: textColorFromBg(sixDigitColor(bgColor)),\r\n        fontSize: 15,\r\n        height: 35,\r\n        padding: 10,\r\n        width: 300,\r\n    };\r\n    const metaInfoProps = { ...textProps, width: 250 };\r\n\r\n    const nHidedStr = nHided ? `#hidden: ${nHided}` : '';\r\n    const nDescendantsStr = ` #descendants: ${nDescendants}`;\r\n    const ruleTxt = nHided ? 'π' : rule;\r\n\r\n    const depSize = 35,\r\n        depLineSize = 25;\r\n    const depProps = {\r\n        fill: bgColor,\r\n        stroke: selected ? 'red' : 'black',\r\n        strokeWidth: selected ? 3 : 1,\r\n    };\r\n    //  x={depSize / 2} y={depSize} text=\"27\" fontSize={30} verticalAlign=\"center\" fill=\"white\"\r\n    const depTextProp = {\r\n        align: 'center',\r\n        fill: textColorFromBg(sixDigitColor(bgColor)),\r\n        fontSize: 20,\r\n        padding: 10,\r\n        height: 10,\r\n        width: 70,\r\n    };\r\n\r\n    return (\r\n        <Group\r\n            draggable\r\n            id={id.toString()}\r\n            key={id}\r\n            onDragMove={(e) => {\r\n                updateNodePosition(id, e.target.attrs.x, e.target.attrs.y);\r\n            }}\r\n            onDragEnd={onDragEnd}\r\n            x={x}\r\n            y={y}\r\n            onClick={handleClick}\r\n        >\r\n            <Label x={0} y={0}>\r\n                <Tag {...tagProps} />\r\n                <Text {...textProps} text={conclusion} />\r\n            </Label>\r\n            <Label x={0} y={35}>\r\n                <Tag {...tagProps} />\r\n                <Text {...textProps} text={ruleTxt} />\r\n            </Label>\r\n            <Label x={0} y={70} {...{ align: 'right' }}>\r\n                <Tag {...tagProps} />\r\n                <Text {...{ ...metaInfoProps, width: 50 }} text={id.toString()} />\r\n            </Label>\r\n            <Label x={50} y={70}>\r\n                <Tag {...tagProps} />\r\n                <Text {...metaInfoProps} text={nHidedStr + nDescendantsStr} />\r\n            </Label>\r\n            {dependencies.length ? (\r\n                <Label x={300} y={0}>\r\n                    <Arrow strokeWidth={1} stroke=\"black\" fill=\"black\" points={[depLineSize, 53, 0, 53]} />\r\n                    <Circle x={depLineSize + depSize} y={53} radius={35} {...depProps}></Circle>\r\n                    <Label x={depLineSize} y={35}>\r\n                        <Text {...depTextProp} text={dependencies.length === 1 ? String(dependencies[0].piId) : 'π'} />\r\n                    </Label>\r\n                </Label>\r\n            ) : null}\r\n        </Group>\r\n    );\r\n};\r\n\r\nexport default Node;\r\n","import React from 'react';\r\nimport { Arrow } from 'react-konva';\r\n\r\nimport { LineProps } from '../../../interfaces/interfaces';\r\n\r\nconst Line = ({ key, points }: LineProps): JSX.Element => {\r\n    return <Arrow key={key} strokeWidth={1} stroke=\"black\" fill=\"black\" points={[...points]} />;\r\n};\r\n\r\nexport default Line;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ControlGroup, Button, InputGroup } from '@blueprintjs/core';\r\n\r\nconst Menu = ({\r\n    unfold,\r\n    foldSelectedNodes,\r\n    foldAllDescendants,\r\n    changeNodeColor,\r\n    currentColor,\r\n    options,\r\n}: {\r\n    unfold: () => void;\r\n    foldSelectedNodes: () => void;\r\n    foldAllDescendants: () => void;\r\n    changeNodeColor: (color: string) => void;\r\n    currentColor: string;\r\n    options: { unfold: boolean; foldSelected: boolean; foldAllDescendants: boolean };\r\n}): JSX.Element => {\r\n    const [color, setColor] = useState(currentColor);\r\n\r\n    useEffect(() => {\r\n        setColor(currentColor);\r\n    }, [currentColor]);\r\n\r\n    return (\r\n        <div className=\"bp3-popover2-content\">\r\n            <ul id=\"menu\" className=\"bp3-menu\">\r\n                {options.unfold ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => unfold()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-open\">\r\n                                <span> Unfold</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                {options.foldSelected ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => foldSelectedNodes()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\r\n                                <span> Fold selected nodes</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                {options.foldAllDescendants ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => foldAllDescendants()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\r\n                                <span> Fold all descendants</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                <li className=\"\">\r\n                    <a className=\"bp3-menu-item\">\r\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\r\n                            <span>\r\n                                <span onClick={() => changeNodeColor('#f72b34')}> 🟥</span>\r\n                                <span onClick={() => changeNodeColor('#ff8334')}> 🟧</span>\r\n                                <span onClick={() => changeNodeColor('#ffc149')}> 🟨</span>\r\n                                <span onClick={() => changeNodeColor('#60aa51')}> 🟩</span>\r\n                                <span onClick={() => changeNodeColor('#0097e4')}> 🟦</span>\r\n                                <span onClick={() => changeNodeColor('#a73da5')}> 🟪</span>\r\n                                <span onClick={() => changeNodeColor('#a95a49')}> 🟫</span>\r\n                                <span onClick={() => changeNodeColor('#464646')}> ⬛</span>\r\n                                <span onClick={() => changeNodeColor('#f0f0f0')}> ⬜</span>\r\n                            </span>\r\n                        </div>\r\n                    </a>\r\n                </li>\r\n                <li className=\"\">\r\n                    <a className=\"bp3-menu-item\">\r\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\r\n                            <ControlGroup\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                }}\r\n                                fill={true}\r\n                                vertical={false}\r\n                            >\r\n                                <InputGroup\r\n                                    placeholder={currentColor}\r\n                                    value={color}\r\n                                    onChange={(e) => setColor(e.target.value)}\r\n                                />\r\n                                <Button\r\n                                    icon=\"style\"\r\n                                    onClick={() => {\r\n                                        changeNodeColor(color);\r\n                                        setColor('');\r\n                                    }}\r\n                                    disabled={color.match(/^#([0-9a-f]{3}){1,2}$/i) === null}\r\n                                ></Button>\r\n                            </ControlGroup>\r\n                        </div>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ExternalCmdState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ExternalCmdState = {\r\n    findData: {\r\n        nodeToFind: -1,\r\n        findOption: false,\r\n    },\r\n    renderData: {\r\n        count: 0,\r\n        fileChanged: false,\r\n    },\r\n};\r\n\r\nexport const externalCmd = createSlice({\r\n    name: 'externalCmd',\r\n    initialState,\r\n    reducers: {\r\n        findNode: (state, action: PayloadAction<{ nodeId: number; option: boolean }>) => {\r\n            state.findData = { nodeToFind: action.payload.nodeId, findOption: action.payload.option };\r\n        },\r\n    },\r\n});\r\n\r\nexport const { findNode } = externalCmd.actions;\r\n\r\nexport const selectFindData = (state: RootState): { nodeToFind: number; findOption: boolean } =>\r\n    state.externalCmd.findData;\r\n\r\nexport default externalCmd.reducer;\r\n","import React, { Component } from 'react';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport Konva from 'konva';\r\nimport dagre from 'dagre';\r\nimport Node from './VisualizerNode';\r\nimport Line from './VisualizerLine';\r\nimport Menu from './VisualizerMenu';\r\n\r\nimport {\r\n    NodeProps,\r\n    LineProps,\r\n    TreeNode,\r\n    CanvasPropsAndRedux,\r\n    NodeInterface,\r\n    ProofState,\r\n    ReduxState,\r\n} from '../../../interfaces/interfaces';\r\n\r\nimport '../../../scss/VisualizerCanvas.scss';\r\n\r\nimport { CanvasProps, CanvasState } from '../../../interfaces/interfaces';\r\nimport { connect } from 'react-redux';\r\nimport { selectProof, selectVisualInfo } from '../../../store/features/proof/proofSlice';\r\nimport {\r\n    hideNodes,\r\n    unhideNodes,\r\n    foldAllDescendants,\r\n    applyView,\r\n    setVisualInfo,\r\n} from '../../../store/features/proof/proofSlice';\r\nimport { selectFindData, findNode } from '../../../store/features/externalCmd/externalCmd';\r\n\r\nconst nodeWidth = 300,\r\n    nodeHeight = 130;\r\n\r\nfunction handleWheel(e: Konva.KonvaEventObject<WheelEvent>): { stageScale: number; stageX: number; stageY: number } {\r\n    e.evt.preventDefault();\r\n\r\n    const scaleBy = 1.08;\r\n    const stage = e.target.getStage();\r\n    if (stage) {\r\n        const oldScale = stage.scaleX();\r\n        const pointerPosition = stage.getPointerPosition();\r\n        let x, y;\r\n\r\n        if (pointerPosition) {\r\n            [x, y] = [pointerPosition.x, pointerPosition.y];\r\n        } else {\r\n            [x, y] = [0, 0];\r\n        }\r\n\r\n        const mousePointTo = {\r\n            x: x / oldScale - stage.x() / oldScale,\r\n            y: y / oldScale - stage.y() / oldScale,\r\n        };\r\n\r\n        const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\r\n\r\n        return {\r\n            stageScale: newScale,\r\n            stageX: -(mousePointTo.x - x / newScale) * newScale,\r\n            stageY: -(mousePointTo.y - y / newScale) * newScale,\r\n        };\r\n    }\r\n    return {\r\n        stageScale: 1,\r\n        stageX: 0,\r\n        stageY: 0,\r\n    };\r\n}\r\n\r\nclass Canvas extends Component<CanvasPropsAndRedux, CanvasState> {\r\n    constructor(props: CanvasPropsAndRedux) {\r\n        super(props);\r\n        this.componentDidUpdate = this.componentDidUpdate.bind(this);\r\n        this.setNodeOnFocus = this.setNodeOnFocus.bind(this);\r\n\r\n        this.state = {\r\n            canvasSize: {\r\n                width: 520,\r\n                height: 300,\r\n            },\r\n            stage: {\r\n                stageScale: 1,\r\n                stageX: 0,\r\n                stageY: 0,\r\n            },\r\n            showingNodes: {},\r\n            showingEdges: {},\r\n            nodeOnFocus: NaN,\r\n            nodesSelected: [],\r\n            proof: [],\r\n            visualInfo: {},\r\n        };\r\n    }\r\n    // TODO: achar uma maneira melhor de fazer esse firstRender\r\n    private static renderData = { count: 0, fileChanged: false };\r\n\r\n    // Allow to reRender the tree\r\n    static reRender = () => (Canvas.renderData.count = 0);\r\n    static blockRender = () => (Canvas.renderData.count = 2);\r\n    static allowRenderNewFile = () => (Canvas.renderData.fileChanged = true);\r\n\r\n    static copyNodePosition = (\r\n        visualInfo: ProofState['visualInfo'],\r\n        showingNodes: CanvasState['showingNodes'],\r\n    ): ProofState['visualInfo'] => {\r\n        // Get the current position of the nodes and create a proofState with them included\r\n        const newVisualInfo: ProofState['visualInfo'] = {};\r\n        Object.keys(visualInfo).forEach((id) => {\r\n            const key = Number(id);\r\n\r\n            if (showingNodes[key]) {\r\n                newVisualInfo[key] = {\r\n                    ...visualInfo[key],\r\n                    x: showingNodes[key].props.x,\r\n                    y: showingNodes[key].props.y,\r\n                };\r\n            } else {\r\n                newVisualInfo[key] = {\r\n                    ...visualInfo[key],\r\n                };\r\n            }\r\n        });\r\n        return newVisualInfo;\r\n    };\r\n\r\n    static newNodeProps = (node: NodeInterface, visualInfos: ProofState['visualInfo']): NodeProps => {\r\n        const visualInfo = visualInfos[node.id];\r\n        return {\r\n            id: node.id,\r\n            conclusion: node.conclusion,\r\n            rule: node.rule,\r\n            args: node.args,\r\n            x: visualInfo.x,\r\n            y: visualInfo.y,\r\n            nHided: node.hiddenNodes ? node.hiddenNodes.length : 0,\r\n            nDescendants: node.descendants - 1,\r\n            hiddenNodes: node.hiddenNodes ? node.hiddenNodes.map((node) => node.id) : [],\r\n            dependencies: node.dependencies ? node.dependencies : [],\r\n            selected: visualInfo.selected,\r\n            color: visualInfo.color,\r\n            setNodeOnFocus: () => undefined,\r\n            toggleNodeSelection: () => undefined,\r\n            updateNodePosition: () => undefined,\r\n            openDrawer: () => undefined,\r\n            onDragEnd: () => undefined,\r\n            createTree: () => {\r\n                return [];\r\n            },\r\n        };\r\n    };\r\n\r\n    static getDerivedStateFromProps(props: CanvasPropsAndRedux, current_state: CanvasState) {\r\n        const proofChanged = JSON.stringify(current_state.proof) !== JSON.stringify(props.proof);\r\n        const visualInfoChanged = JSON.stringify(current_state.visualInfo) !== JSON.stringify(props.visualInfo);\r\n        const isNewFile = Canvas.renderData.fileChanged;\r\n        const stage = current_state.stage;\r\n        const { nodeToFind, findOption } = props.nodeFindData;\r\n\r\n        // If there is a node to be found\r\n        if (nodeToFind > -1) {\r\n            // Valid node\r\n            if (nodeToFind < props.proof.length) {\r\n                // Change the stage position\r\n                const { x, y } = props.visualInfo[nodeToFind];\r\n                stage.stageX = current_state.canvasSize.width / 2 - (x + nodeWidth / 2) * stage.stageScale;\r\n                stage.stageY = current_state.canvasSize.height / 2 - (y + nodeHeight / 2) * stage.stageScale;\r\n\r\n                // Select the finded node\r\n                if (findOption) {\r\n                    props.setVisualInfo({\r\n                        ...props.visualInfo,\r\n                        [nodeToFind]: { ...props.visualInfo[nodeToFind], selected: true },\r\n                    });\r\n                }\r\n            }\r\n            // Reset the node finder\r\n            props.findNode({ nodeId: -1, option: false });\r\n        }\r\n\r\n        // If the proof or visual info changed or we have a new file being uploaded\r\n        if (proofChanged || visualInfoChanged || isNewFile) {\r\n            // Create the showing nodes array\r\n            const showingNodes: CanvasState['showingNodes'] = {};\r\n            props.proof.forEach((node, id) => {\r\n                showingNodes[node.id] = <Node key={id} {...Canvas.newNodeProps(node, props.visualInfo)} />;\r\n            });\r\n\r\n            // If has nodes and can render\r\n            if (showingNodes[0] && Canvas.renderData.count < 2) {\r\n                Canvas.renderData.count++;\r\n\r\n                const g = new dagre.graphlib.Graph();\r\n                g.setGraph({ rankdir: 'BT', ranker: 'tight-tree' });\r\n                g.setDefaultEdgeLabel(function () {\r\n                    return {};\r\n                });\r\n                props.proof.forEach((node) => {\r\n                    g.setNode(node.id.toString(), {\r\n                        width: nodeWidth + (node.dependencies.length ? 95 : 0),\r\n                        height: nodeHeight,\r\n                    });\r\n                    node.children.forEach((child) => {\r\n                        g.setEdge(child.toString(), node.id.toString());\r\n                    });\r\n                });\r\n                dagre.layout(g);\r\n\r\n                const xOffset = g.node('0').x - (showingNodes[0].props.x ? showingNodes[0].props.x : 0);\r\n                const yOffset = g.node('0').y - (showingNodes[0].props.y ? showingNodes[0].props.y : 0);\r\n                g.nodes().forEach((v) => {\r\n                    try {\r\n                        const { x, y } = g.node(v);\r\n                        const key = parseInt(v);\r\n                        showingNodes[key] = (\r\n                            <Node\r\n                                {...{\r\n                                    ...showingNodes[key].props,\r\n                                    x: x - xOffset,\r\n                                    y: y - yOffset,\r\n                                }}\r\n                            />\r\n                        );\r\n                    } catch (e) {\r\n                        console.log(e);\r\n                    }\r\n                });\r\n\r\n                props.setVisualInfo(Canvas.copyNodePosition(props.visualInfo, showingNodes));\r\n            }\r\n            // Reset the new file indicator if it's true\r\n            if (isNewFile) Canvas.renderData.fileChanged = false;\r\n\r\n            return {\r\n                showingNodes: showingNodes,\r\n                showingEdges: {},\r\n                proof: props.proof,\r\n                visualInfo: props.visualInfo,\r\n                stage: stage,\r\n            };\r\n        }\r\n        return { stage: stage };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        const { showingNodes } = this.state;\r\n        const { proof, visualInfo } = this.props;\r\n\r\n        const newShowingNodes: CanvasState['showingNodes'] = {};\r\n        proof.forEach((node, id) => {\r\n            newShowingNodes[node.id] = <Node key={id} {...Canvas.newNodeProps(node, visualInfo)} />;\r\n        });\r\n\r\n        this.setState({ proof: proof, showingNodes: newShowingNodes });\r\n\r\n        if (showingNodes[0]) {\r\n            const [width, height] = [window.innerWidth, window.innerHeight - 50];\r\n\r\n            // Make sure every time the Canvas is mounted the props are passed to the showing nodes\r\n            this.updateEdgesAndFuncs();\r\n\r\n            this.setState({\r\n                canvasSize: {\r\n                    width,\r\n                    height,\r\n                },\r\n                stage: {\r\n                    stageScale: 1,\r\n                    stageX: width / 2 - (showingNodes[0].props.x + 300 / 2),\r\n                    stageY: height / 10 - (showingNodes[0].props.y + 30 / 2),\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: CanvasPropsAndRedux) {\r\n        // If the proof changed\r\n        if (prevProps.proof !== this.props.proof) {\r\n            this.updateEdgesAndFuncs();\r\n        }\r\n    }\r\n\r\n    updateEdgesAndFuncs() {\r\n        const { showingNodes, showingEdges } = this.state;\r\n        const { proof } = this.props;\r\n\r\n        // Update edges\r\n        proof.forEach((node) => {\r\n            if (showingNodes[node.parents[0]]) {\r\n                node.parents.forEach((parent) => {\r\n                    showingEdges[`${node.id}->${parent}`] = Line(\r\n                        this.LineProps(\r\n                            `${node.id}->${parent}`,\r\n                            showingNodes[node.id].props,\r\n                            showingNodes[parent].props,\r\n                        ),\r\n                    );\r\n                });\r\n            }\r\n        });\r\n        Object.keys(showingNodes).forEach((nodeId: string) => {\r\n            // Make sure a function is updated once\r\n            if (!showingNodes[parseInt(nodeId)].props.setNodeOnFocus.length) {\r\n                const { openDrawer } = this.props;\r\n\r\n                // Set the node functions\r\n                showingNodes[parseInt(nodeId)] = (\r\n                    <Node\r\n                        {...{\r\n                            ...showingNodes[parseInt(nodeId)].props,\r\n                            setNodeOnFocus: this.setNodeOnFocus,\r\n                            toggleNodeSelection: this.toggleNodeSelection,\r\n                            updateNodePosition: this.updateNodePosition,\r\n                            openDrawer: openDrawer,\r\n                            onDragEnd: this.saveNodePosition,\r\n                            createTree: this.createTree,\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n        });\r\n        this.setState({ showingEdges, showingNodes });\r\n    }\r\n\r\n    /* NODE MENU ACTIONS */\r\n    foldAllDescendants = (): void => {\r\n        const { nodeOnFocus } = this.state;\r\n        const { foldAllDescendants } = this.props;\r\n\r\n        Canvas.reRender();\r\n        foldAllDescendants(nodeOnFocus);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    foldSelectedNodes = (): void => {\r\n        const { nodesSelected } = this.state;\r\n        const { hideNodes } = this.props;\r\n\r\n        Canvas.reRender();\r\n        hideNodes(nodesSelected);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    unfold = (): void => {\r\n        const { nodeOnFocus, proof } = this.state;\r\n        const { unhideNodes } = this.props;\r\n\r\n        // Get the pi node (to be unfold)\r\n        const obj = proof.find((node) => node.id === nodeOnFocus);\r\n        // Get the hidden nodes and their ids\r\n        const hiddenNodes = obj ? (obj.hiddenNodes ? obj.hiddenNodes : []) : [];\r\n        const hiddenIds = hiddenNodes ? hiddenNodes.map((node) => node.id) : [];\r\n\r\n        Canvas.reRender();\r\n        unhideNodes({ pi: nodeOnFocus, hiddens: hiddenIds });\r\n\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    changeNodeColor = (color: string): void => {\r\n        const { showingNodes, nodesSelected, nodeOnFocus } = this.state;\r\n        const { setVisualInfo } = this.props;\r\n        let { visualInfo } = this.props;\r\n\r\n        // Save the current position\r\n        nodesSelected.forEach((nodeId) => {\r\n            visualInfo = {\r\n                ...visualInfo,\r\n                [nodeId]: {\r\n                    ...visualInfo[nodeId],\r\n                    color: color,\r\n                    selected: false,\r\n                },\r\n            };\r\n        });\r\n        if (!nodesSelected.length && showingNodes[nodeOnFocus]) {\r\n            visualInfo = {\r\n                ...visualInfo,\r\n                [nodeOnFocus]: { ...visualInfo[nodeOnFocus], color: color, selected: false },\r\n            };\r\n        }\r\n\r\n        setVisualInfo(visualInfo);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    toggleNodeSelection = (id: number): void => {\r\n        let { nodesSelected } = this.state;\r\n        const { visualInfo, setVisualInfo } = this.props;\r\n\r\n        if (visualInfo[id].selected) {\r\n            nodesSelected = nodesSelected.filter((nodeId) => nodeId !== id);\r\n        } else {\r\n            nodesSelected.push(id);\r\n        }\r\n\r\n        // Save the current position\r\n        setVisualInfo({\r\n            ...visualInfo,\r\n            [id]: {\r\n                ...visualInfo[id],\r\n                selected: !visualInfo[id].selected,\r\n            },\r\n        });\r\n\r\n        this.setState({ nodesSelected });\r\n    };\r\n\r\n    /*TREE*/\r\n    createTree = (id: number): TreeNode[] => {\r\n        const { proof } = this.state;\r\n        const rootNode = proof.find((o) => o.id === id);\r\n        const tree: TreeNode[] = [];\r\n\r\n        // Make sure found the node\r\n        if (rootNode) {\r\n            let descendants: TreeNode[] = [];\r\n            // For each children\r\n            rootNode.children.forEach((childID) => {\r\n                // Find the child\r\n                const child = proof.find((o) => o.id === childID);\r\n\r\n                // Get the current child tree\r\n                if (child) descendants = descendants.concat(this.createTree(child.id));\r\n            });\r\n\r\n            const label = rootNode.hiddenNodes?.length\r\n                ? `${rootNode.id} : π ➜ ${rootNode.conclusion}`\r\n                : `${rootNode.id} : ${rootNode.conclusion}`;\r\n\r\n            // Create the rootNode tree\r\n            tree.push({\r\n                id: rootNode.id,\r\n                icon: 'graph',\r\n                label: label,\r\n                secondaryLabel: `${rootNode.rule}`,\r\n                rule: rootNode.rule,\r\n                args: rootNode.args,\r\n                conclusion: rootNode.conclusion,\r\n                parentId: rootNode.parents[0],\r\n                descendants: rootNode.descendants - 1,\r\n                nHided: rootNode.hiddenNodes ? rootNode.hiddenNodes.length : 0,\r\n                hiddenNodes: rootNode.hiddenNodes ? rootNode.hiddenNodes.map((node) => node.id) : [],\r\n                childNodes: descendants,\r\n                parentsId: rootNode.parents,\r\n                hasCaret: Boolean(descendants.length),\r\n            });\r\n        }\r\n        return tree;\r\n    };\r\n\r\n    /* UTILS */\r\n    setNodeOnFocus = (id: number): void => {\r\n        this.setState({ nodeOnFocus: id });\r\n    };\r\n\r\n    LineProps = (key: string, from: NodeProps, to: NodeProps): LineProps => ({\r\n        key,\r\n        points: [from.x + 150, from.y, to.x + 150, to.y + 105],\r\n    });\r\n\r\n    saveNodePosition = (): void => {\r\n        const { visualInfo, setVisualInfo } = this.props;\r\n        const { showingNodes } = this.state;\r\n\r\n        // Get the current position of the nodes and create a proofState with them included\r\n        setVisualInfo(Canvas.copyNodePosition(visualInfo, showingNodes));\r\n    };\r\n\r\n    updateNodePosition = (key: number, x: number, y: number): void => {\r\n        const { showingNodes, showingEdges } = this.state;\r\n\r\n        showingNodes[key] = <Node {...{ ...showingNodes[key].props, x, y }} />;\r\n\r\n        Object.keys(showingEdges)\r\n            .filter((edgeKey) => edgeKey.indexOf(key.toString()) !== -1)\r\n            .forEach((edge) => {\r\n                const [from, to] = edge.split('->').map((x) => parseInt(x));\r\n                showingEdges[edge] = Line(this.LineProps(edge, showingNodes[from].props, showingNodes[to].props));\r\n            });\r\n        this.setState({ showingNodes, showingEdges });\r\n    };\r\n\r\n    render(): JSX.Element {\r\n        const { canvasSize, stage, showingNodes, showingEdges, nodesSelected, nodeOnFocus, proof } = this.state;\r\n        const color = showingNodes[nodeOnFocus] ? showingNodes[nodeOnFocus].props.color : '';\r\n        const found = proof.find((o) => o.id === nodeOnFocus);\r\n\r\n        return (\r\n            <div>\r\n                <Menu\r\n                    unfold={this.unfold}\r\n                    foldSelectedNodes={this.foldSelectedNodes}\r\n                    foldAllDescendants={this.foldAllDescendants}\r\n                    changeNodeColor={this.changeNodeColor}\r\n                    options={{\r\n                        unfold: showingNodes[nodeOnFocus] ? Boolean(showingNodes[nodeOnFocus].props.nHided) : false,\r\n                        foldSelected: nodesSelected.length && nodesSelected.includes(nodeOnFocus) ? true : false,\r\n                        foldAllDescendants:\r\n                            Boolean(found?.children.length) && !Boolean(found?.hiddenNodes?.length) && found?.id != 0,\r\n                    }}\r\n                    currentColor={color}\r\n                ></Menu>\r\n                <Stage\r\n                    draggable\r\n                    onDragMove={() => null}\r\n                    onDragEnd={() => null}\r\n                    width={canvasSize.width}\r\n                    height={canvasSize.height}\r\n                    onWheel={(e) => this.setState({ stage: handleWheel(e) })}\r\n                    scaleX={stage.stageScale}\r\n                    scaleY={stage.stageScale}\r\n                    x={stage.stageX}\r\n                    y={stage.stageY}\r\n                    onContextMenu={(e) => e.evt.preventDefault()}\r\n                >\r\n                    <Layer>\r\n                        {Object.keys(showingEdges).length > 0 &&\r\n                            Object.keys(showingEdges).map(function (key) {\r\n                                return showingEdges[key];\r\n                            })}\r\n                        {Object.keys(showingNodes).length > 0 &&\r\n                            Object.keys(showingNodes).map(\r\n                                (value: string): JSX.Element => showingNodes[parseInt(value)],\r\n                            )}\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState, ownProps: CanvasProps) {\r\n    return {\r\n        proof: selectProof(state),\r\n        visualInfo: selectVisualInfo(state),\r\n        nodeFindData: selectFindData(state),\r\n        ...ownProps,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = { hideNodes, unhideNodes, foldAllDescendants, applyView, setVisualInfo, findNode };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Canvas);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\nimport { selectDot, selectFileName } from '../../store/features/file/fileSlice';\r\nimport {\r\n    applyView,\r\n    changeStyle,\r\n    selectNodes,\r\n    applyColor,\r\n    hideNodes,\r\n    foldAllDescendants,\r\n    unhideNodes,\r\n    selectVisualInfo,\r\n    selectProof,\r\n    selectHiddenNodes,\r\n    selectView,\r\n    unselectNodes,\r\n} from '../../store/features/proof/proofSlice';\r\nimport { ReduxState, NavbarPropsAndRedux, NavbarProps } from '../../interfaces/interfaces';\r\n\r\nimport { Alignment, Button, Icon, InputGroup, Navbar, Switch, Menu, MenuItem } from '@blueprintjs/core';\r\nimport { Popover2 } from '@blueprintjs/popover2';\r\nimport { selectTheme, toggle } from '../../store/features/theme/themeSlice';\r\nimport '../../scss/VisualizerNavbar.scss';\r\nimport Canvas from '../VisualizerStage/Canvas/VisualizerCanvas';\r\nimport { findNode } from '../../store/features/externalCmd/externalCmd';\r\n\r\nfunction useWindowSize() {\r\n    // Initialize state with undefined width/height so server and client renders match\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n    const [windowSize, setWindowSize] = useState({\r\n        width: 0,\r\n        height: 0,\r\n    });\r\n    useEffect(() => {\r\n        // Handler to call on window resize\r\n        function handleResize() {\r\n            // Set window width/height to state\r\n            setWindowSize({\r\n                width: window.innerWidth,\r\n                height: window.innerHeight,\r\n            });\r\n        }\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return windowSize;\r\n}\r\n\r\nconst VisualizerNavbar: React.FC<NavbarPropsAndRedux> = ({\r\n    setDialogIsOpen,\r\n    setDialogContent,\r\n    setDrawerIsOpen,\r\n    visualInfo,\r\n    proof,\r\n    dot,\r\n    view,\r\n    hiddenNodes,\r\n    hideNodes,\r\n}: NavbarPropsAndRedux) => {\r\n    const fileName = useAppSelector(selectFileName);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const windowSize = useWindowSize();\r\n    const [command, setCommand] = useState('');\r\n    const [lastCommands, setLastCommands] = useState(['']);\r\n    const [commandId, setCommandId] = useState(0);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const openDialog = (content: string): void => {\r\n        setDialogIsOpen(true);\r\n        setDialogContent(content);\r\n    };\r\n\r\n    const handleInputKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        // Creates an commands historic, registering the past 4 commands\r\n        switch (e.key) {\r\n            case 'Enter':\r\n                // If the command is not a white space\r\n                if (command.trim() !== '') {\r\n                    runCommands(command);\r\n                    if (lastCommands.length === 5) {\r\n                        lastCommands.pop();\r\n                    }\r\n                    lastCommands.unshift('');\r\n                    setLastCommands(lastCommands);\r\n                    setCommand('');\r\n                }\r\n                break;\r\n            case 'ArrowUp':\r\n                if (commandId < lastCommands.length - 1) {\r\n                    const newId = commandId + 1;\r\n                    setCommandId(newId);\r\n                    setCommand(lastCommands[newId]);\r\n                }\r\n                break;\r\n            case 'ArrowDown':\r\n                if (commandId > 0) {\r\n                    const newId = commandId - 1;\r\n                    setCommandId(newId);\r\n                    setCommand(lastCommands[newId]);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    const runCommands = (command: string): void => {\r\n        const commands = command.trim().split(/ +/);\r\n        let hiddenIds: number[];\r\n\r\n        switch (commands[0]) {\r\n            case '/view':\r\n                switch (commands[1]) {\r\n                    case 'basic':\r\n                        dispatch(applyView('basic'));\r\n                        Canvas.reRender();\r\n                        break;\r\n                    case 'propositional':\r\n                        dispatch(applyView('propositional'));\r\n                        Canvas.reRender();\r\n                        break;\r\n                    case 'full':\r\n                        dispatch(applyView('full'));\r\n                        Canvas.reRender();\r\n                        break;\r\n                }\r\n                break;\r\n            case '/select':\r\n                if (commands[1]) {\r\n                    let cmdArg = '';\r\n                    commands.forEach((string, id) => id !== 0 && (cmdArg += string + ' '));\r\n                    // Matches all the brackets\r\n                    const matches = [...cmdArg.matchAll(/\\[([^\\[\\]]+)\\]/g)];\r\n                    let idList: number[] = [];\r\n\r\n                    // There is a case with brackets\r\n                    if (matches[0]) {\r\n                        const insideBracket = matches[0][1].trim();\r\n                        let insideMatches = [...insideBracket.matchAll(/\\s*\\d+\\s*-\\s*\\d+\\s*/g)];\r\n\r\n                        // Number range notation\r\n                        if (insideMatches[0]) {\r\n                            // Get the range limits\r\n                            const rangeLim = insideMatches[0][0].split(/\\s*-\\s*/).map((numS) => Number(numS));\r\n                            idList = Array.from({ length: rangeLim[1] - rangeLim[0] + 1 }, (_, i) => rangeLim[0] + i);\r\n                        }\r\n                        // List notation\r\n                        else {\r\n                            insideMatches = [...insideBracket.matchAll(/(\\s*\\d+\\s*,*)+/g)];\r\n                            // Number list notation\r\n                            if (insideMatches[0]) {\r\n                                // Group all the matches\r\n                                let listStr = '';\r\n                                insideMatches.forEach((match) => (listStr += match[0]));\r\n                                // Convert to number\r\n                                idList = listStr\r\n                                    .split(/,\\s*/)\r\n                                    .filter((word) => word.length > 0 && !isNaN(Number(word)))\r\n                                    .map((id) => Number(id));\r\n                            }\r\n                        }\r\n                    }\r\n                    //\r\n                    else {\r\n                        // /select /let\\d+/\r\n                        // Is a regex select?\r\n                        const matches = [...cmdArg.matchAll(/\\/[^\\/]*\\//g)];\r\n                        // If there is a regex\r\n                        if (matches[0]) {\r\n                            const regexString = matches[0][0].substring(1, matches[0][0].length - 1);\r\n                            try {\r\n                                // Search all the nodes with the specific regex matching in the conclusion\r\n                                const regex = new RegExp(regexString);\r\n                                idList = proof.filter((node) => regex.test(node.conclusion)).map((node) => node.id);\r\n                            } catch (err) {\r\n                                // If the inserted regex expression is invalid (probably missing \\)\r\n                                console.log(err);\r\n                            }\r\n                        }\r\n                        // There is no regex, so the last possibility is to select based on the RULE\r\n                        else {\r\n                            idList = proof\r\n                                .filter((node) => node.rule.trim() === commands[1].trim())\r\n                                .map((node) => node.id);\r\n                        }\r\n                    }\r\n\r\n                    dispatch(selectNodes(idList));\r\n                }\r\n                break;\r\n            case '/unselect':\r\n                const allNodesIds = proof.map((node) => node.id);\r\n                dispatch(unselectNodes(allNodesIds));\r\n                break;\r\n            case '/color':\r\n                if (commands[1]) {\r\n                    // Hex color\r\n                    if (RegExp(/^#([0-9a-f]{3}){1,2}$/i).test(commands[1])) {\r\n                        dispatch(applyColor(commands[1]));\r\n                        break;\r\n                    }\r\n                    // Default colors\r\n                    switch (commands[1]) {\r\n                        case 'red':\r\n                            dispatch(applyColor('#f72b34'));\r\n                            break;\r\n                        case 'orange':\r\n                            dispatch(applyColor('#ff8334'));\r\n                            break;\r\n                        case 'yellow':\r\n                            dispatch(applyColor('#ffc149'));\r\n                            break;\r\n                        case 'green':\r\n                            dispatch(applyColor('#60aa51'));\r\n                            break;\r\n                        case 'blue':\r\n                            dispatch(applyColor('#0097e4'));\r\n                            break;\r\n                        case 'purple':\r\n                            dispatch(applyColor('#a73da5'));\r\n                            break;\r\n                        case 'brown':\r\n                            dispatch(applyColor('#a95a49'));\r\n                            break;\r\n                        case 'gray':\r\n                            dispatch(applyColor('#464646'));\r\n                            break;\r\n                        case 'white':\r\n                            dispatch(applyColor('#f0f0f0'));\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n            case '/hide':\r\n                // Hide all the selected nodes\r\n                hiddenIds = Object.keys(visualInfo)\r\n                    .map((id) => Number(id))\r\n                    .filter((id) => visualInfo[id].selected);\r\n                // Make sure there are nodes selected\r\n                if (hiddenIds.length > 1) {\r\n                    // Re-render the canvas and update the store\r\n                    Canvas.reRender();\r\n                    dispatch(hideNodes(hiddenIds));\r\n                }\r\n                break;\r\n            case '/fold':\r\n                // If the option is a number\r\n                if (commands[1] && !isNaN(Number(commands[1]))) {\r\n                    const nodeId = Number(commands[1]);\r\n                    // Is a valid node\r\n                    if (nodeId >= 0 && nodeId < proof.length) {\r\n                        // Re-render the canvas and update the store\r\n                        Canvas.reRender();\r\n                        dispatch(foldAllDescendants(nodeId));\r\n                    }\r\n                }\r\n                break;\r\n            case '/unfold':\r\n                // If there is a number argument\r\n                if (commands[1] && !isNaN(Number(commands[1]))) {\r\n                    const id = Number(commands[1]);\r\n                    // Get the pi node (to be unfold)\r\n                    const obj = proof.find((node) => node.id === id);\r\n                    // If it's a pi node\r\n                    if (obj && obj.hiddenNodes?.length) {\r\n                        // Get the hidden nodes and their ids\r\n                        const hiddenNodes = obj.hiddenNodes ? obj.hiddenNodes : [];\r\n                        hiddenIds = hiddenNodes ? hiddenNodes.map((node) => node.id) : [];\r\n                        // Re-render the canvas and update the store\r\n                        Canvas.reRender();\r\n                        dispatch(unhideNodes({ pi: id, hiddens: hiddenIds }));\r\n                    }\r\n                }\r\n                break;\r\n            case '/find':\r\n                // If there is an argument and is a number\r\n                if (commands[1] && !isNaN(Number(commands[1]))) {\r\n                    // Find the node\r\n                    dispatch(\r\n                        findNode({\r\n                            nodeId: Number(commands[1]),\r\n                            option: commands[2] === '--s' ? true : false,\r\n                        }),\r\n                    );\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    const exportJSON = () => {\r\n        const downloadJSON = {\r\n            dot: dot,\r\n            visualInfo: visualInfo,\r\n            hiddenNodes: hiddenNodes,\r\n            view: view,\r\n        };\r\n        const fName = fileName.split('.');\r\n        fName.splice(fName.length - 1, 1);\r\n\r\n        const link = document.createElement('a');\r\n        link.download = fName + '.json';\r\n        link.href = `data:attachment/text,${encodeURIComponent(JSON.stringify(downloadJSON))}`;\r\n        link.click();\r\n    };\r\n\r\n    const menus = {\r\n        style: (\r\n            <Menu>\r\n                <MenuItem\r\n                    icon=\"diagram-tree\"\r\n                    text=\"Graph\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(changeStyle('graph'));\r\n                    }}\r\n                />\r\n                <MenuItem\r\n                    icon=\"folder-open\"\r\n                    text=\"Directory\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(changeStyle('directory'));\r\n                    }}\r\n                />\r\n            </Menu>\r\n        ),\r\n        views: (\r\n            <Menu>\r\n                <MenuItem\r\n                    text=\"Basic\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(applyView('basic'));\r\n                        Canvas.reRender();\r\n                    }}\r\n                />\r\n                <MenuItem\r\n                    text=\"Propositional\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(applyView('propositional'));\r\n                        Canvas.reRender();\r\n                    }}\r\n                />\r\n                <MenuItem\r\n                    text=\"Full\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(applyView('full'));\r\n                        Canvas.reRender();\r\n                    }}\r\n                />\r\n            </Menu>\r\n        ),\r\n        download: (\r\n            <Menu>\r\n                <MenuItem icon=\"layout\" text=\"JSON\" onClick={exportJSON} />\r\n                <MenuItem\r\n                    icon=\"graph\"\r\n                    text=\"DOT\"\r\n                    href={`data:attachment/text,${encodeURIComponent(dot ? dot : '')}`}\r\n                    download={fileName ? `${fileName.replaceAll(' ', '_')}.dot` : ''}\r\n                />\r\n                <MenuItem\r\n                    icon=\"square\"\r\n                    text=\"PNG\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        const link = document.createElement('a');\r\n                        link.download = fileName ? `${fileName.replaceAll(' ', '_')}.png` : '';\r\n                        link.href = (\r\n                            document.getElementsByClassName('konvajs-content')[0].children[0] as HTMLCanvasElement\r\n                        ).toDataURL('image/png');\r\n                        link.click();\r\n                    }}\r\n                />\r\n            </Menu>\r\n        ),\r\n        help: (\r\n            <Menu>\r\n                <MenuItem text=\"/view\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that changes the view mode.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /view {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> basic, propositional, full.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/select\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that select a group of nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /select {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Options:</u>\r\n                            <div className=\"option\">\r\n                                1 - A list of node {`id's`} wrapped by brackets and separated by commas (and spaces if\r\n                                wanted) (eg.: [1, 15, 6,3]).\r\n                            </div>\r\n                            <div className=\"option\">\r\n                                2 - A range of node {`id's`} wrapped by brackets and separated by hyphen (and spaces if\r\n                                wanted) (eg.: [ 4 -15]). This range will include the last element.\r\n                            </div>\r\n                            <div className=\"option\">3 - A node rule (eg.: CHAIN_RESOLUTION).</div>\r\n                            <div className=\"option\">\r\n                                4 - A regex expression used to select all the nodes which the conclusion owns a match\r\n                                (eg.: /\\.*false\\.*/ {'->'} selects all the nodes with false anywhere in the conclusion).\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/unselect\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that unselect all the nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /unselect.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/color\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that changes the color of the current selected\r\n                            nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /color {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Options:</u>\r\n                            <div className=\"option\">1 - A valid hex color notation (eg.: #A7B).</div>\r\n                            <div className=\"option\">\r\n                                2 - A color name between: red, orange, yellow, green, blue, purple, brown, gray, white.\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Prerequisites:</u> a group of nodes being selected.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/hide\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that try to fold (hide) a group of selected nodes.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /hide.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Prerequisites:</u> a group of nodes being selected.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/fold\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that fold all descendants of a specific node.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /fold {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> a valid node id.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/unfold\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that unfold a specific pi node.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /unfold {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> a valid pi node id.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n                <MenuItem text=\"/find\">\r\n                    <div className=\"cmd-desc\">\r\n                        <div>\r\n                            <u className=\"title\">Desc.:</u> Command that find a node and centralize the canvas at it.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Pattern:</u> /fild {'<node number>'} {'<option>'}.\r\n                        </div>\r\n                        <div>\r\n                            <u className=\"title\">Option:</u> --s: find and select the node.\r\n                        </div>\r\n                    </div>\r\n                </MenuItem>\r\n            </Menu>\r\n        ),\r\n    };\r\n\r\n    return (\r\n        <Navbar>\r\n            <Navbar.Group align={Alignment.LEFT}>\r\n                <Navbar.Heading>\r\n                    <b>{windowSize.width >= 900 ? 'Proof Visualizer' : 'PV'}</b>\r\n                </Navbar.Heading>\r\n                <Navbar.Divider />\r\n                <Button\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        openDialog('upload-proof');\r\n                    }}\r\n                    className=\"bp3-minimal\"\r\n                    icon=\"upload\"\r\n                    text={windowSize.width >= 900 ? 'Upload Proof' : ''}\r\n                />\r\n            </Navbar.Group>\r\n\r\n            <Navbar.Group align={Alignment.RIGHT}>\r\n                {fileName ? (\r\n                    <>\r\n                        <Navbar.Heading>{fileName}</Navbar.Heading>\r\n                        <Navbar.Divider />\r\n                        <InputGroup\r\n                            id=\"command\"\r\n                            placeholder=\"/command\"\r\n                            value={command}\r\n                            onChange={(e) => {\r\n                                setCommandId(0);\r\n                                lastCommands[0] = e.target.value;\r\n                                setLastCommands(lastCommands);\r\n                                setCommand(e.target.value);\r\n                            }}\r\n                            onKeyDown={handleInputKeyDown}\r\n                            rightElement={\r\n                                <Popover2 content={menus.help} placement=\"bottom-end\">\r\n                                    <Button icon=\"help\" className=\"bp3-minimal\" />\r\n                                </Popover2>\r\n                            }\r\n                        />\r\n                        <Button\r\n                            style={{ marginLeft: '5px' }}\r\n                            icon=\"play\"\r\n                            onClick={() => {\r\n                                runCommands(command);\r\n                                lastCommands.pop();\r\n                                lastCommands.unshift(command);\r\n                                lastCommands[0] = '';\r\n                                setLastCommands(lastCommands);\r\n                                setCommand('');\r\n                            }}\r\n                        />\r\n                        <Navbar.Divider />\r\n                        <Popover2\r\n                            content={fileName ? menus.style : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                        >\r\n                            <Button\r\n                                icon=\"presentation\"\r\n                                className=\"bp3-minimal\"\r\n                                text={windowSize.width >= 900 ? 'Style' : ''}\r\n                                disabled={fileName ? false : true}\r\n                            />\r\n                        </Popover2>\r\n                        <Popover2\r\n                            content={fileName ? menus.views : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                        >\r\n                            <Button\r\n                                className=\"bp3-minimal\"\r\n                                icon=\"diagram-tree\"\r\n                                text={windowSize.width >= 900 ? 'View' : ''}\r\n                                disabled={fileName ? false : true}\r\n                            />\r\n                        </Popover2>\r\n                        <Button\r\n                            className=\"bp3-minimal\"\r\n                            icon=\"translate\"\r\n                            text={windowSize.width >= 900 ? 'Let Map' : ''}\r\n                            disabled={fileName ? false : true}\r\n                            onClick={() => setDrawerIsOpen(true)}\r\n                        />\r\n                        <Popover2\r\n                            content={fileName ? menus.download : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                        >\r\n                            <Button\r\n                                className=\"bp3-minimal\"\r\n                                icon=\"download\"\r\n                                text={windowSize.width >= 900 ? 'Download' : ''}\r\n                                disabled={fileName ? false : true}\r\n                            />\r\n                        </Popover2>\r\n                        <Navbar.Divider />\r\n                    </>\r\n                ) : null}\r\n\r\n                <span id=\"switch-button-dark-theme\">\r\n                    <Switch checked={useAppSelector(selectTheme)} onChange={() => dispatch(toggle())} />\r\n                    <Icon icon={darkTheme ? 'moon' : 'flash'}></Icon>\r\n                </span>\r\n            </Navbar.Group>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: ReduxState, ownProps: NavbarProps) {\r\n    return {\r\n        ...ownProps,\r\n        proof: selectProof(state),\r\n        dot: selectDot(state),\r\n        view: selectView(state),\r\n        visualInfo: selectVisualInfo(state),\r\n        hiddenNodes: selectHiddenNodes(state),\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = { hideNodes };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VisualizerNavbar);\r\n","import React, { useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { Dispatch, SetStateAction } from 'react';\r\nimport { MaybeElement } from '@blueprintjs/core/lib/esm/common/props';\r\nimport { IconName } from '@blueprintjs/core/lib/esm/components/icon/icon';\r\n\r\nimport { Button, Classes, Dialog, FileInput, Icon, Intent, Spinner } from '@blueprintjs/core';\r\n\r\nimport '../../scss/VisualizerDialog.scss';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { set } from '../../store/features/file/fileSlice';\r\nimport { process } from '../../store/features/proof/proofSlice';\r\nimport Canvas from '../VisualizerStage/Canvas/VisualizerCanvas';\r\n\r\ninterface DialogProps {\r\n    icon: IconName | MaybeElement;\r\n    title: React.ReactNode;\r\n}\r\n\r\ninterface VisualizerDialogProps {\r\n    dialogIsOpen: boolean;\r\n    setDialogIsOpen: Dispatch<SetStateAction<boolean>>;\r\n    dialogContent: string;\r\n    setDialogContent: Dispatch<SetStateAction<string>>;\r\n    addErrorToast: (err: string) => void;\r\n}\r\n\r\nconst readUploadedFileAsText = (inputFile: File) => {\r\n    const temporaryFileReader = new FileReader();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        temporaryFileReader.onerror = () => {\r\n            temporaryFileReader.abort();\r\n            reject(new DOMException('Problem parsing input file.'));\r\n        };\r\n\r\n        temporaryFileReader.onload = () => {\r\n            resolve(temporaryFileReader.result);\r\n        };\r\n        temporaryFileReader.readAsText(inputFile);\r\n    });\r\n};\r\n\r\nconst VisualizerDialog: React.FC<VisualizerDialogProps> = ({\r\n    dialogIsOpen,\r\n    dialogContent,\r\n    setDialogContent,\r\n    setDialogIsOpen,\r\n    addErrorToast,\r\n}: VisualizerDialogProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n\r\n    let dialogProps: DialogProps = { icon: 'error', title: 'Error' };\r\n    let dialogBody = <p>This wasn&apos;t supposed to happen. Please contact the developers.</p>;\r\n    let succesButton = <></>;\r\n\r\n    const [processingProof, setProcessingProof] = useState(false);\r\n    const [proofProcessed, setProofProcessed] = useState(false);\r\n    const [fileName, changeFileName] = useState('Choose file...');\r\n    const [file, changeFile] = useState('');\r\n    const dispatch = useAppDispatch();\r\n\r\n    switch (dialogContent) {\r\n        case 'welcome':\r\n            dialogProps = { icon: 'graph', title: 'Welcome' };\r\n            dialogBody = (\r\n                <div className=\"welcome-menu\">\r\n                    <h2>Welcome to Proof Visualizer</h2>\r\n                    <p>You can upload the DOT/JSON file of your proof.</p>\r\n                    <Button\r\n                        style={{ width: '155px' }}\r\n                        icon=\"upload\"\r\n                        large\r\n                        text=\"Upload proof\"\r\n                        onClick={() => setDialogContent('upload-proof')}\r\n                    />\r\n                </div>\r\n            );\r\n            break;\r\n        case 'upload-proof':\r\n            dialogProps = { icon: 'upload', title: 'Upload Proof' };\r\n            dialogBody = proofProcessed ? (\r\n                <div style={{ textAlign: 'center', height: '200px', paddingTop: 50 }}>\r\n                    <Icon icon=\"tick\" intent={Intent.SUCCESS} iconSize={40}></Icon>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <p>Your proof is ready to be visualized!</p>\r\n                </div>\r\n            ) : processingProof ? (\r\n                <div style={{ textAlign: 'center', height: '200px', paddingTop: 50 }}>\r\n                    <p>Processing your proof...</p>\r\n                    <Spinner size={30} />\r\n                </div>\r\n            ) : (\r\n                <FileInput\r\n                    text={fileName}\r\n                    hasSelection={fileName !== 'Choose file...'}\r\n                    onInputChange={async (e) => {\r\n                        const target = e.target as HTMLInputElement;\r\n                        const file = target.files ? target.files[0] : new File([''], 'filename');\r\n                        if (\r\n                            target.files &&\r\n                            target.files[0] &&\r\n                            target.files[0].name.split('.').slice(-1)[0] !== 'dot' &&\r\n                            target.files[0].name.split('.').slice(-1)[0] !== 'json'\r\n                        ) {\r\n                            addErrorToast('Sorry! Our app only support DOT and JSON files.');\r\n                            return;\r\n                        }\r\n                        try {\r\n                            const fileContents = await readUploadedFileAsText(file);\r\n                            changeFile(fileContents as string);\r\n                            changeFileName(file.name);\r\n                        } catch (er: any) {\r\n                            addErrorToast(er.message);\r\n                        }\r\n                    }}\r\n                    fill={true}\r\n                />\r\n            );\r\n            succesButton = !proofProcessed ? (\r\n                <Button\r\n                    onClick={() => {\r\n                        dispatch(set({ name: fileName, value: file }));\r\n\r\n                        Canvas.allowRenderNewFile();\r\n                        const ext = fileName.split('.').pop();\r\n                        if (ext === 'json') Canvas.blockRender();\r\n                        else if (ext === 'dot') Canvas.reRender();\r\n\r\n                        setProofProcessed(true);\r\n                        dispatch(process(file));\r\n                    }}\r\n                    intent={Intent.SUCCESS}\r\n                    disabled={fileName === 'Choose file...'}\r\n                >\r\n                    Upload Proof\r\n                </Button>\r\n            ) : (\r\n                <></>\r\n            );\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className={darkTheme ? ' bp3-dark' : ''}\r\n                isOpen={dialogIsOpen}\r\n                onClose={(): void => {\r\n                    setProcessingProof(false);\r\n                    setProofProcessed(false);\r\n                    setDialogIsOpen(false);\r\n                    changeFileName('Choose file...');\r\n                    changeFile('');\r\n                }}\r\n                usePortal={true}\r\n                {...dialogProps}\r\n            >\r\n                <div className={Classes.DIALOG_BODY + ' dialog-body'}>{dialogBody}</div>\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        <Button\r\n                            onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                                e.preventDefault();\r\n                                setDialogIsOpen(false);\r\n                                setProcessingProof(false);\r\n                                setProofProcessed(false);\r\n                                setDialogIsOpen(false);\r\n                                changeFileName('Choose file...');\r\n                                changeFile('');\r\n                            }}\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                        {succesButton}\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default VisualizerDialog;\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Classes, Tree, TreeNodeInfo } from '@blueprintjs/core';\r\nimport { TreeProps } from '../../interfaces/interfaces';\r\n\r\nconst VisualizerTree: React.FC<TreeProps> = ({ darkTheme, content, originalNodeInfo, setNodeInfo }: TreeProps) => {\r\n    // STATES:\r\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\r\n    const [nodes, setNodes] = useState(content);\r\n    const [selected, setSelected] = useState(NaN);\r\n\r\n    // USE EFFECT:\r\n    useEffect(() => setNodes(content), [content]);\r\n\r\n    // UTILS:\r\n    const forEachNode = (nodes: TreeNodeInfo[], callback: (node: TreeNodeInfo) => void) => {\r\n        if (nodes == null) {\r\n            return;\r\n        }\r\n\r\n        for (const node of nodes) {\r\n            callback(node);\r\n            forEachNode(node.childNodes ? node.childNodes : [], callback);\r\n        }\r\n    };\r\n\r\n    const handleNodeClick = (nodeData: any, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\r\n        setNodeInfo(\r\n            selected !== nodeData.id\r\n                ? {\r\n                      rule: nodeData.rule ? nodeData.rule : '',\r\n                      args: nodeData.args ? nodeData.args : '',\r\n                      conclusion: nodeData.conclusion ? nodeData.conclusion : '',\r\n                      nHided: nodeData.nHided ? nodeData.nHided : 0,\r\n                      nDescendants: nodeData.descendants,\r\n                      hiddenNodes: nodeData.hiddenNodes,\r\n                      dependencies: nodeData.dependencies,\r\n                  }\r\n                : originalNodeInfo,\r\n        );\r\n        const originallySelected = nodeData.isSelected;\r\n\r\n        // Set all the nodes to be not selected\r\n        if (!e.shiftKey) forEachNode(nodes, (n) => (n.isSelected = false));\r\n\r\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\r\n        setSelected(selected === nodeData.id ? NaN : nodeData.id);\r\n    };\r\n\r\n    const handleNodeCollapse = (nodeData: TreeNodeInfo) => {\r\n        nodeData.isExpanded = false;\r\n        forceUpdate();\r\n    };\r\n\r\n    const handleNodeExpand = (nodeData: TreeNodeInfo) => {\r\n        nodeData.isExpanded = true;\r\n        forceUpdate();\r\n    };\r\n\r\n    return (\r\n        <div style={{ backgroundColor: darkTheme ? '#394b59' : 'white' }}>\r\n            <Tree\r\n                contents={nodes}\r\n                onNodeClick={handleNodeClick}\r\n                onNodeCollapse={handleNodeCollapse}\r\n                onNodeExpand={handleNodeExpand}\r\n                className={Classes.ELEVATION_0}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerTree;\r\n","import React, { useState } from 'react';\r\n\r\nimport { Icon, Collapse, Pre, TreeNodeInfo } from '@blueprintjs/core';\r\nimport VisualizerTree from '../../VisualizerTree/VisualizerTree';\r\n\r\nimport '../../../scss/VisualizerDirectoryStyle.scss';\r\nimport { useAppSelector } from '../../../store/hooks';\r\nimport { selectTheme } from '../../../store/features/theme/themeSlice';\r\nimport { NodeInfo } from '../../../interfaces/interfaces';\r\n\r\ninterface directoryStyleProps {\r\n    proofTree: TreeNodeInfo[];\r\n    ruleHelper: (s: string) => string;\r\n    indent: (s: string) => string;\r\n    translate: (s: string) => string;\r\n}\r\n\r\nconst VisualizerDirectoryStyle: React.FC<directoryStyleProps> = ({\r\n    proofTree,\r\n    ruleHelper,\r\n    indent,\r\n    translate,\r\n}: directoryStyleProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const [ruleHelperOpen, setRuleHelperOpen] = useState(false);\r\n    const [argsTranslatorOpen, setArgsTranslatorOpen] = useState(false);\r\n    const [conclusionTranslatorOpen, setConclusionTranslatorOpen] = useState(false);\r\n    const [nodeInfo, setNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                backgroundColor: darkTheme ? 'rgb(57, 75, 89)' : 'white',\r\n                height:\r\n                    window.innerHeight - (document.getElementsByClassName('bp3-navbar')[0] as HTMLElement).offsetHeight,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    width: '50%',\r\n                    height: '100%',\r\n                    float: 'left',\r\n                    clear: 'none',\r\n                    borderRight: '1px solid black',\r\n                    overflow: 'auto',\r\n                }}\r\n            >\r\n                <VisualizerTree\r\n                    darkTheme={darkTheme}\r\n                    content={proofTree}\r\n                    setNodeInfo={setNodeInfo}\r\n                    originalNodeInfo={{\r\n                        rule: '',\r\n                        args: '',\r\n                        conclusion: '',\r\n                        nHided: 0,\r\n                        nDescendants: 0,\r\n                        hiddenNodes: [],\r\n                        dependencies: [],\r\n                    }}\r\n                ></VisualizerTree>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    width: '50%',\r\n                    height: '100%',\r\n                    float: 'left',\r\n                    clear: 'none',\r\n                }}\r\n            >\r\n                <table\r\n                    id=\"table-node-info\"\r\n                    className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Property</th>\r\n                            <th>Value</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                <strong>RULE </strong>\r\n                                <Icon\r\n                                    id=\"rule-icon\"\r\n                                    icon=\"help\"\r\n                                    onClick={() => {\r\n                                        setArgsTranslatorOpen(false);\r\n                                        setConclusionTranslatorOpen(false);\r\n                                        setRuleHelperOpen(!ruleHelperOpen);\r\n                                    }}\r\n                                ></Icon>\r\n                            </td>\r\n                            <td>\r\n                                {nodeInfo.rule}\r\n                                <Collapse isOpen={ruleHelperOpen}>\r\n                                    <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                        {ruleHelper(nodeInfo.rule)}\r\n                                    </Pre>\r\n                                </Collapse>\r\n                            </td>\r\n                        </tr>\r\n\r\n                        {nodeInfo.args && (\r\n                            <tr>\r\n                                <td>\r\n                                    <strong>ARGS</strong>{' '}\r\n                                    {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                        <Icon\r\n                                            id=\"rule-icon\"\r\n                                            icon=\"translate\"\r\n                                            onClick={() => {\r\n                                                setConclusionTranslatorOpen(false);\r\n                                                setRuleHelperOpen(false);\r\n                                                setArgsTranslatorOpen(!argsTranslatorOpen);\r\n                                            }}\r\n                                        ></Icon>\r\n                                    ) : null}\r\n                                </td>\r\n                                <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                    {nodeInfo.args}\r\n                                    {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                        <Collapse isOpen={argsTranslatorOpen}>\r\n                                            <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                                {indent(translate(nodeInfo.args))}\r\n                                            </Pre>\r\n                                        </Collapse>\r\n                                    ) : null}\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n\r\n                        <tr>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                <strong>CONCLUSION</strong>{' '}\r\n                                {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                    <Icon\r\n                                        id=\"rule-icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            setArgsTranslatorOpen(false);\r\n                                            setRuleHelperOpen(false);\r\n                                            setConclusionTranslatorOpen(!conclusionTranslatorOpen);\r\n                                        }}\r\n                                    ></Icon>\r\n                                ) : null}\r\n                            </td>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                {nodeInfo.conclusion}\r\n                                {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                    <Collapse isOpen={conclusionTranslatorOpen}>\r\n                                        <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                            {indent(translate(nodeInfo.conclusion))}\r\n                                        </Pre>\r\n                                    </Collapse>\r\n                                ) : null}\r\n                            </td>\r\n                        </tr>\r\n\r\n                        {nodeInfo.nDescendants ? (\r\n                            <tr>\r\n                                <td>\r\n                                    <strong>#DESCENDANTS</strong>\r\n                                </td>\r\n                                <td>{nodeInfo.nDescendants}</td>\r\n                            </tr>\r\n                        ) : null}\r\n\r\n                        {nodeInfo.nHided ? (\r\n                            <tr>\r\n                                <td>\r\n                                    <strong>#HIDDEN</strong>\r\n                                </td>\r\n                                <td>{`[${nodeInfo.hiddenNodes.map((node) => ' ' + node)} ]`}</td>\r\n                            </tr>\r\n                        ) : null}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerDirectoryStyle;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { Drawer, Position, Classes, Icon, Collapse, Pre, TreeNodeInfo } from '@blueprintjs/core';\r\nimport Canvas from './Canvas/VisualizerCanvas';\r\nimport VisualizerTree from '../VisualizerTree/VisualizerTree';\r\nimport VisualizerDirectoryStyle from './VisualizerDirectoryStyle/VisualizerDirectoryStyle';\r\nimport { processDot } from '../../store/features/proof/auxi';\r\n\r\nimport '../../scss/VisualizerStage.scss';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectDot, selectFileCount } from '../../store/features/file/fileSlice';\r\nimport { selectStyle } from '../../store/features/proof/proofSlice';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { NodeInfo, NodeInterface, TreeNode } from '../../interfaces/interfaces';\r\n\r\nfunction ruleHelper(rule: string) {\r\n    switch (rule.split(' ')[0]) {\r\n        case 'π':\r\n            return 'This node hides some parts of the proof, you can unfold it.';\r\n        case 'ASSUME':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Assumption (a leaf)\\nChildren: none\\nArguments: (F)\\n--------------\\nConclusion: F\\n\\nThis rule has special status, in that an application of assume is an open leaf in a proof that is not (yet) justified. An assume leaf is analogous to a free variable in a term, where we say \"F is a free assumption in proof P\" if it contains an application of F that is not  bound by SCOPE.'\r\n            );\r\n        case 'SCOPE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Scope (a binder for assumptions)\\nChildren: (P:F)\\nArguments: (F1, ..., Fn)\\n--------------\\nConclusion: (=> (and F1 ... Fn) F) or (not (and F1 ... Fn)) if F is false\\n\\nThis rule has a dual purpose with ASSUME. It is a way to close assumptions in a proof. We require that F1 ... Fn are free assumptions in P and say that F1, ..., Fn are not free in (SCOPE P). In other words, they are bound by this application. For example, the proof node: (SCOPE (ASSUME F) :args F) has the conclusion (=> F F) and has no free assumptions. More generally, a proof with no free assumptions always concludes a valid formula.'\r\n            );\r\n        case 'SUBS':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Substitution\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids)?)\\n---------------------------------------------------------------\\nConclusion: (= t t*sigma{ids}(Fn)*...*sigma{ids}(F1))\\nwhere sigma{ids}(Fi) are substitutions, which notice are applied in reverse order. Notice that ids is a MethodId identifier, which determines how to convert the formulas F1, ..., Fn into substitutions.'\r\n            );\r\n        case 'REWRITE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Rewrite\\nChildren: none\\nArguments: (t, (idr)?)\\n----------------------------------------\\nConclusion: (= t Rewriter{idr}(t))\\nwhere idr is a MethodId identifier, which determines the kind of rewriter to apply, e.g. Rewriter::rewrite.'\r\n            );\r\n        case 'EVALUATE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Evaluate\\nChildren: none\\n\\nArguments: (t)\\n----------------------------------------\\nConclusion: (= t Evaluator::evaluate(t))\\nNote this is equivalent to: (REWRITE t MethodId::RW_EVALUATE)'\r\n            );\r\n        case 'MACRO_SR_EQ_INTRO':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, we provide a term t and conclude that it is equal to its rewritten form under a (proven) substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: (= t t')\\nwhere t' is Rewriter{idr}(t*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nIn other words, from the point of view of Skolem forms, this rule transforms t to t' by standard substitution + rewriting.\\n\\nThe arguments ids, ida and idr are optional and specify the identifier of the substitution, the substitution application and rewriter respectively to be used.\"\r\n            );\r\n        case 'MACRO_SR_PRED_INTRO':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, we provide a formula F and conclude it, under the condition that it rewrites to true under a proven substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (F, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == true where ids and idr are method identifiers.\\n\\nMore generally, this rule also holds when: Rewriter::rewrite(toOriginal(F')) == true where F' is the result of the left hand side of the equality above. Here, notice that we apply rewriting on the original form of F', meaning that this rule may conclude an F whose Skolem form is justified by the definition of its (fresh) Skolem variables. For example, this rule may justify the conclusion (= k t) where k is the purification Skolem for t, e.g. where the original form of k is t.\\n\\nFurthermore, notice that the rewriting and substitution is applied only within the side condition, meaning the rewritten form of the original form of F does not escape this rule.\"\r\n            );\r\n        case 'MACRO_SR_PRED_ELIM':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may conclude its rewritten form under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: ((ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: F'\\nwhere F' is Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)). where ids and idr are method identifiers.\\n\\nWe rewrite only on the Skolem form of F, similar to MACRO_SR_EQ_INTRO.\"\r\n            );\r\n        case 'MACRO_SR_PRED_TRANSFORM':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may provide a formula G and conclude it if F and G are equivalent after rewriting under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: (G, (ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: G\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == Rewriter{idr}(G*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nMore generally, this rule also holds when:\\n  Rewriter::rewrite(toOriginal(F')) == Rewriter::rewrite(toOriginal(G'))\\nwhere F' and G' are the result of each side of the equation above. Here, original forms are used in a similar manner to MACRO_SR_PRED_INTRO above.\"\r\n            );\r\n        case 'REMOVE_TERM_FORMULA_AXIOM':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Remove Term Formulas Axiom\\nChildren: none\\nArguments: (t)\\n---------------------------------------------------------------\\nConclusion: RemoveTermFormulas::getAxiomFor(t).'\r\n            );\r\n        case 'THEORY_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Theory lemma\\nChildren: none\\nArguments: (F, tid)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a (T-valid) theory lemma generated by theory with TheoryId tid. This is a \"coarse-grained\" rule that is used as a placeholder if a theory did not provide a proof for a lemma or conflict.'\r\n            );\r\n        case 'THEORY_REWRITE':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== Theory Rewrite\\nChildren: none\\nArguments: (F, tid, rid)\\n----------------------------------------\\nConclusion: F\\nwhere F is an equality of the form (= t t') where t' is obtained by applying the kind of rewriting given by the method identifier rid, which is one of: { RW_REWRITE_THEORY_PRE, RW_REWRITE_THEORY_POST, RW_REWRITE_EQ_EXT } Notice that the checker for this rule does not replay the rewrite to ensure correctness, since theory rewriter methods are not static. For example, the quantifiers rewriter involves constructing new bound variables that are not guaranteed to be consistent on each call.\"\r\n            );\r\n        case 'PREPROCESS':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on some preprocessing pass, or otherwise F was added as a new assertion by some preprocessing pass.\"\r\n            );\r\n        case 'PREPROCESS_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by some preprocessing pass.'\r\n            );\r\n        case 'THEORY_PREPROCESS':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = Theory::ppRewrite(t) for some theory. Notice this is a \"trusted\" rule.'\r\n            );\r\n        case 'THEORY_PREPROCESS_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by theory preprocessing.'\r\n            );\r\n        case 'THEORY_EXPAND_DEF':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on theory expand definitions.\"\r\n            );\r\n        case 'WITNESS_AXIOM':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an existential (exists ((x T)) (P x)) used for introducing a witness term (witness ((x T)) (P x)).'\r\n            );\r\n        case 'TRUST_REWRITE':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of rewriting that could not be replayed during proof postprocessing.\"\r\n            );\r\n        case 'TRUST_SUBS':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be replayed during proof postprocessing.\"\r\n            );\r\n        case 'TRUST_SUBS_MAP':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be determined by the TrustSubstitutionMap. This inference may contain possibly multiple children corresponding to the formulas used to derive the substitution.\"\r\n            );\r\n        case 'TRUST_SUBS_EQ':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a solved equality of the form (= x t) derived as the solved form of F', where F' is given as a child.\"\r\n            );\r\n        case 'SAT_REFUTATION':\r\n            return (\r\n                rule +\r\n                '\\n\\n========= SAT Refutation for assumption-based unsat cores\\nChildren: (P1, ..., Pn)\\nArguments: none\\n---------------------\\nConclusion: false\\nNote: P1, ..., Pn correspond to the unsat core determined by the SAT solver.'\r\n            );\r\n        case 'RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== Resolution\\nChildren:\\n(P1:C1, P2:C2)\\nArguments: (pol, L)\\n---------------------\\nConclusion: C\\nwhere\\n- C1 and C2 are nodes viewed as clauses, i.e., either an OR node with each children viewed as a literal or a node viewed as a literal. Note that an OR node could also be a literal.\\n- pol is either true or false, representing the polarity of the pivot on the first clause\\n- L is the pivot of the resolution, which occurs as is (resp. under a NOT) in C1 and negatively (as is) in C2 if pol = true (pol = false).\\nC is a clause resulting from collecting all the literals in C1, minus the first occurrence of the pivot or its negation, and C2, minus the first occurrence of the pivot or its negation, according to the policy above. If the resulting clause has a single literal, that literal itself is the result; if it has no literals, then the result is false; otherwise it's an OR node of the resulting literals.\\n\\nNote that it may be the case that the pivot does not occur in the clauses. In this case the rule is not unsound, but it does not correspond to resolution but rather to a weakening of the clause that did not have a literal eliminated.\"\r\n            );\r\n        case 'CHAIN_RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== N-ary Resolution\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined above\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined above\\n- let C_1' = C_1 (from P1),\\n- for each i > 1, let C_i' = C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C = C_n'\"\r\n            );\r\n        case 'FACTORING':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Factoring\\nChildren: (P:C1)\\nArguments: ()\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 is the same and the number of literals in C2 is smaller than that of C1'\r\n            );\r\n        case 'REORDERING':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Reordering\\nChildren: (P:C1)\\nArguments: (C2)\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 are the same and the number of literals in C2 is the same of that of C1'\r\n            );\r\n        case 'MACRO_RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\r\n            );\r\n        case 'MACRO_RESOLUTION_TRUST':\r\n            return (\r\n                rule +\r\n                \"\\n\\nAs MACRO_RESOLUTION but not checked\\n\\nMACRO_RESOLUTION definition:\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\r\n            );\r\n        default:\r\n            return rule;\r\n    }\r\n}\r\n\r\nconst createTree = (proof: NodeInterface[]): any => {\r\n    const list: TreeNode[] = proof.map((node) => {\r\n        const label = node.hiddenNodes?.length\r\n            ? `${node.id} : π ➜ ${node.conclusion}`\r\n            : `${node.id} : ${node.conclusion}`;\r\n        return {\r\n            id: node.id,\r\n            icon: 'graph',\r\n            label: label,\r\n            secondaryLabel: `${node.rule}`,\r\n            rule: node.rule,\r\n            args: node.args,\r\n            conclusion: node.conclusion,\r\n            parentId: node.parents[0],\r\n            descendants: node.descendants - 1,\r\n            nHided: node.hiddenNodes ? node.hiddenNodes.length : 0,\r\n            hiddenNodes: node.hiddenNodes ? node.hiddenNodes.map((node) => node.id) : [],\r\n            childNodes: [],\r\n            parentsId: node.parents,\r\n            hasCaret: Boolean(node.descendants - 1),\r\n        };\r\n    });\r\n\r\n    const map: any = {},\r\n        roots: any = [];\r\n    let node: TreeNode, i;\r\n\r\n    // Map the { [node id]: list array id }\r\n    for (i = 0; i < list.length; i += 1) {\r\n        map[list[i].id] = i;\r\n    }\r\n\r\n    for (i = 0; i < list.length; i += 1) {\r\n        node = list[i];\r\n        // For all the parents\r\n        node.parentsId.forEach((parentId) => {\r\n            // If the parent is valid and exist in the list\r\n            if (!isNaN(parentId) && list[map[parentId]]) {\r\n                list[map[parentId]].childNodes.push(node);\r\n            } else {\r\n                roots.push(node);\r\n            }\r\n        });\r\n    }\r\n    return roots;\r\n};\r\n\r\nconst indent = (s: string) => {\r\n    let newS = s.replaceAll(' ', '\\n');\r\n    let i = 0;\r\n    let pCounter = 0;\r\n    while (i < newS.length) {\r\n        if (newS[i] === '(' || newS[i] === '[') pCounter++;\r\n        else if (newS[i] === ')' || newS[i] === ']') pCounter--;\r\n        else if (newS[i] === '\\n') {\r\n            if (newS[i + 1] === ')' || newS[i + 1] === ']') {\r\n                newS = [newS.slice(0, i + 1), '  '.repeat(pCounter - 1), newS.slice(i + 1)].join('');\r\n                i += pCounter - 1;\r\n            } else {\r\n                newS = [newS.slice(0, i + 1), '  '.repeat(pCounter), newS.slice(i + 1)].join('');\r\n                i += pCounter;\r\n            }\r\n        }\r\n        i++;\r\n    }\r\n    return newS;\r\n};\r\n\r\nconst VisualizerStage: React.FC = () => {\r\n    const dot = useAppSelector(selectDot);\r\n    const fileID = useAppSelector(selectFileCount);\r\n    const style = useAppSelector(selectStyle);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const [[proof, letMap], setProofAndLet] = useState<[NodeInterface[], any]>([[], '']);\r\n    const [proofTree, setProofTree] = useState([]);\r\n    // Make sure that a new tree and proof is created only when a new dot is used\r\n    useEffect(() => {\r\n        const [newProof, newLetMap] = processDot(dot ? dot : '');\r\n        setProofAndLet([newProof, newLetMap]);\r\n        setProofTree(createTree(newProof));\r\n    }, [dot]);\r\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n    const [ruleHelperOpen, setRuleHelperOpen] = useState(false);\r\n    const [argsTranslatorOpen, setArgsTranslatorOpen] = useState(false);\r\n    const [conclusionTranslatorOpen, setConclusionTranslatorOpen] = useState(false);\r\n    const [nodeInfo, setNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n    const [nodeInfoCopy, setNodeInfoCopy] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n        dependencies: [],\r\n    });\r\n    // TODO: Fazer a chamada do createTree aq dentro pra usar nso drawers, em vez de fazer dentro do canvas\r\n    const [tree, setTree] = useState<TreeNodeInfo[]>([]);\r\n    const translate = (s: string) => {\r\n        let newS = s;\r\n        let i = newS.indexOf('let');\r\n        while (i !== -1) {\r\n            const l = newS.slice(i).split(/[ |)|,]/)[0];\r\n            newS = newS.replace(l, letMap[l]);\r\n            i = newS.indexOf('let');\r\n        }\r\n        return newS;\r\n    };\r\n\r\n    const openDrawer = (nodeInfo: NodeInfo, tree?: TreeNodeInfo[]) => {\r\n        setRuleHelperOpen(false);\r\n        setNodeInfo(nodeInfo);\r\n        setTree(tree ? tree : []);\r\n        setNodeInfoCopy(nodeInfo);\r\n        setDrawerIsOpen(true);\r\n    };\r\n\r\n    const nodeInfoTable = () => {\r\n        return (\r\n            <table\r\n                id=\"table-node-info\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Property</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <strong>RULE </strong>\r\n                            <Icon\r\n                                id=\"rule-icon\"\r\n                                icon=\"help\"\r\n                                onClick={() => {\r\n                                    setArgsTranslatorOpen(false);\r\n                                    setConclusionTranslatorOpen(false);\r\n                                    setRuleHelperOpen(!ruleHelperOpen);\r\n                                }}\r\n                            ></Icon>\r\n                        </td>\r\n                        <td>\r\n                            {nodeInfo.rule}\r\n                            <Collapse isOpen={ruleHelperOpen}>\r\n                                <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                    {ruleHelper(nodeInfo.rule)}\r\n                                </Pre>\r\n                            </Collapse>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.args && (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>ARGS</strong>{' '}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Icon\r\n                                        id=\"rule-icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            setConclusionTranslatorOpen(false);\r\n                                            setRuleHelperOpen(false);\r\n                                            setArgsTranslatorOpen(!argsTranslatorOpen);\r\n                                        }}\r\n                                    ></Icon>\r\n                                ) : null}\r\n                            </td>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                {nodeInfo.args}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Collapse isOpen={argsTranslatorOpen}>\r\n                                        <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                            {indent(translate(nodeInfo.args))}\r\n                                        </Pre>\r\n                                    </Collapse>\r\n                                ) : null}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n\r\n                    <tr>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            <strong>CONCLUSION</strong>{' '}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <Icon\r\n                                    id=\"rule-icon\"\r\n                                    icon=\"translate\"\r\n                                    onClick={() => {\r\n                                        setArgsTranslatorOpen(false);\r\n                                        setRuleHelperOpen(false);\r\n                                        setConclusionTranslatorOpen(!conclusionTranslatorOpen);\r\n                                    }}\r\n                                ></Icon>\r\n                            ) : null}\r\n                        </td>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            {nodeInfo.conclusion}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <Collapse isOpen={conclusionTranslatorOpen}>\r\n                                    <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                        {indent(translate(nodeInfo.conclusion))}\r\n                                    </Pre>\r\n                                </Collapse>\r\n                            ) : null}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.nDescendants ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#DESCENDANTS</strong>\r\n                            </td>\r\n                            <td>{nodeInfo.nDescendants}</td>\r\n                        </tr>\r\n                    ) : null}\r\n\r\n                    {nodeInfo.nHided ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#HIDDEN</strong>\r\n                            </td>\r\n                            <td>{`[${nodeInfo.hiddenNodes.map((node) => ' ' + node)} ]`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                    {nodeInfo.dependencies.length ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>DEPENDENCIES</strong>\r\n                            </td>\r\n                            <td>{`${nodeInfo.dependencies.map(\r\n                                (dependency) => ` ${dependency.piId}: [${dependency.depsId.map((dep) => ' ' + dep)} ] `,\r\n                            )}`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div onContextMenu={(e) => e.preventDefault()}>\r\n            {proof.length > 1 ? (\r\n                style === 'graph' ? (\r\n                    <Canvas key={fileID} openDrawer={openDrawer}></Canvas>\r\n                ) : (\r\n                    <VisualizerDirectoryStyle\r\n                        proofTree={proofTree}\r\n                        ruleHelper={ruleHelper}\r\n                        indent={indent}\r\n                        translate={translate}\r\n                    />\r\n                )\r\n            ) : null}\r\n            <Drawer\r\n                className={darkTheme ? 'bp3-dark' : ''}\r\n                autoFocus={true}\r\n                canEscapeKeyClose={true}\r\n                canOutsideClickClose={true}\r\n                enforceFocus={true}\r\n                hasBackdrop={false}\r\n                isOpen={drawerIsOpen}\r\n                position={Position.BOTTOM}\r\n                usePortal={true}\r\n                onClose={(e) => {\r\n                    e.preventDefault();\r\n                    setDrawerIsOpen(false);\r\n                    setArgsTranslatorOpen(false);\r\n                    setConclusionTranslatorOpen(false);\r\n                }}\r\n                icon=\"info-sign\"\r\n                title=\"Node info\"\r\n            >\r\n                <div className={Classes.DRAWER_BODY}>\r\n                    <VisualizerTree\r\n                        darkTheme={darkTheme}\r\n                        content={tree}\r\n                        setNodeInfo={setNodeInfo}\r\n                        originalNodeInfo={nodeInfoCopy}\r\n                    ></VisualizerTree>\r\n                    <div className={Classes.DIALOG_BODY}>{nodeInfoTable()}</div>\r\n                </div>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerStage;\r\n","interface Line {\r\n    value: string;\r\n    indentLevel: number;\r\n}\r\n\r\nclass Let {\r\n    name: string;\r\n    value: string;\r\n    lines: Line[];\r\n    biggerID: number;\r\n    isExpanded: boolean;\r\n    externalLets: { [key: string]: { let: Let; idx: number[] } };\r\n\r\n    constructor(name: string, letText: string, letsList: { [key: string]: Let }, indices: { [key: number]: string }) {\r\n        this.name = name;\r\n        this.value = letText;\r\n        this.lines = [{ value: letText, indentLevel: 0 }];\r\n        this.biggerID = 0;\r\n        this.isExpanded = false;\r\n\r\n        this.externalLets = {};\r\n        Object.keys(indices).forEach((key) => {\r\n            const numKey = Number(key);\r\n            const letName = indices[numKey];\r\n            this.externalLets[letName] = {\r\n                let: letsList[letName],\r\n                idx: this.externalLets[letName] ? [...this.externalLets[letName].idx, numKey] : [numKey],\r\n            };\r\n        });\r\n    }\r\n\r\n    getTextWidth = (text: string): number => {\r\n        const canvas = document.createElement('canvas');\r\n        const context = canvas.getContext('2d');\r\n        let size = 0;\r\n        if (context) {\r\n            context.font =\r\n                '14px / 18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", Icons16, sans-serif';\r\n            size = context.measureText(text).width;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    expandValue = (shouldUpdate = false): string => {\r\n        const keyList = Object.keys(this.externalLets).map((key) => this.externalLets[key].let.name);\r\n        let letText = this.value;\r\n\r\n        // Iterate from the last to the first external let\r\n        for (let i = keyList.length - 1; i >= 0; i--) {\r\n            const letName = keyList[i];\r\n\r\n            // For each let, iterate through all the indexes they show up inside the string\r\n            for (let k = this.externalLets[letName].idx.length - 1; k >= 0; k--) {\r\n                const idx = this.externalLets[letName].idx[k];\r\n\r\n                // Expand all the terms\r\n                letText =\r\n                    letText.substring(0, idx) +\r\n                    this.externalLets[letName].let.expandValue() +\r\n                    letText.substring(idx + letName.length, letText.length);\r\n            }\r\n        }\r\n        if (shouldUpdate) {\r\n            this.lines = [{ value: letText, indentLevel: 0 }];\r\n            this.biggerID = 0;\r\n        }\r\n        return letText;\r\n    };\r\n\r\n    expandPartialy = (externalRef: Let, letIdx: number): string => {\r\n        const key = externalRef.name;\r\n        const indentedText = this.printLines();\r\n\r\n        let lastLine = 0,\r\n            count = 0,\r\n            i;\r\n        // Iterates through the first lines until the point we reach the changed line\r\n        for (i = 0; i < this.lines.length; i++) {\r\n            lastLine = this.lines[i].value.length + 4 * this.lines[i].indentLevel + 1;\r\n            count += lastLine;\r\n            if (letIdx < count) break;\r\n        }\r\n        // New index (points to the start of the line content (ignores initial indent white space))\r\n        const newIdx = letIdx - (count - lastLine + 4 * this.lines[i].indentLevel);\r\n\r\n        // Update the new line to the new content\r\n        this.lines[i].value =\r\n            this.lines[i].value.substring(0, newIdx) +\r\n            externalRef.value +\r\n            this.lines[i].value.substring(newIdx + key.length, this.lines[i].value.length);\r\n\r\n        // Returns the indented text with the content to be replaced\r\n        return (\r\n            indentedText.substring(0, letIdx) +\r\n            externalRef.value +\r\n            indentedText.substring(letIdx + key.length, indentedText.length)\r\n        );\r\n    };\r\n\r\n    shrinkValue = (): string => {\r\n        this.lines = [{ value: this.value, indentLevel: 0 }];\r\n        this.biggerID = 0;\r\n        return this.value;\r\n    };\r\n\r\n    fitsTheWindow = (windowSize: number): boolean => {\r\n        const line = this.lines[this.biggerID];\r\n        const size = this.getTextWidth(`${'    '.repeat(line.indentLevel)}${line.value}`);\r\n        return size < windowSize;\r\n    };\r\n\r\n    indent = (windowSize: number, mode: boolean): string => {\r\n        let someDoesntFit;\r\n        if (mode) someDoesntFit = true;\r\n        else someDoesntFit = this.getTextWidth(this.lines[this.biggerID].value) < windowSize ? false : true;\r\n\r\n        // While there are lines that doesn't fit the window size\r\n        while (someDoesntFit) {\r\n            const { lines, biggerID } = this;\r\n            const newLines: Line[] = [];\r\n            const thisLevel = lines[biggerID].indentLevel;\r\n            const thisLine = lines[biggerID].value;\r\n\r\n            let lastSpace = -1,\r\n                lastUsedSpace = -1,\r\n                lastOpenParenthesis = -1,\r\n                indent = lines[biggerID].indentLevel - 1,\r\n                biggestSize = 0,\r\n                newBiggerID = 0;\r\n\r\n            // Iterate through the line and calculate the indentation levels\r\n            for (let i = 0; i < thisLine.length; i++) {\r\n                const c = thisLine[i];\r\n                // Opening parenthesis\r\n                if (c === '(') {\r\n                    indent++;\r\n                    // If it's one of the arguments of the operation\r\n                    if (indent === thisLevel + 1) lastOpenParenthesis = i;\r\n                }\r\n                // Closing parenthesis\r\n                else if (c === ')') {\r\n                    // If it's the end of this line\r\n                    if (indent === thisLevel) {\r\n                        // If the last argument was not inserted\r\n                        if (thisLine[i - 1] !== ')') {\r\n                            newLines.push({\r\n                                value: thisLine.substring(lastSpace + 1, i),\r\n                                indentLevel: indent + 1,\r\n                            });\r\n                        }\r\n                        newLines.push({ value: ')', indentLevel: indent });\r\n                    }\r\n                    // If it's the end of this argument\r\n                    else if (indent === thisLevel + 1) {\r\n                        newLines.push({\r\n                            value: thisLine.substring(lastOpenParenthesis, i + 1),\r\n                            indentLevel: indent,\r\n                        });\r\n                    }\r\n                    indent--;\r\n                }\r\n                // If a new space is detected in the current identation level\r\n                //   and the last argument is not between parenthesis\r\n                else if (c === ' ') {\r\n                    lastSpace = i;\r\n\r\n                    if (indent === thisLevel && thisLine[i - 1] !== ')') {\r\n                        newLines.push({\r\n                            value: thisLine.substring(lastUsedSpace + 1, i),\r\n                            indentLevel: newLines.length ? indent + 1 : indent,\r\n                        });\r\n                        lastUsedSpace = i;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Insert new lines if happend some indentation\r\n            if (newLines.length > 0) this.lines.splice(biggerID, 1, ...newLines);\r\n\r\n            // Find the new biggest line\r\n            this.lines.forEach((line, id) => {\r\n                // Get the size of this new line\r\n                const thisSize = this.getTextWidth(`${'    '.repeat(line.indentLevel)}${line.value}`);\r\n                if (thisSize > biggestSize) {\r\n                    biggestSize = thisSize;\r\n                    newBiggerID = id;\r\n                }\r\n            });\r\n\r\n            this.biggerID = newBiggerID;\r\n\r\n            // If the biggest size fits the window or no new line was found (minimal indentation)\r\n            if (biggestSize < windowSize || newLines.length < 1) someDoesntFit = false;\r\n        }\r\n        return this.printLines();\r\n    };\r\n\r\n    groupUp = (): string => {\r\n        let original = '';\r\n        // Group up all the lines into one single string\r\n        this.lines.forEach((line, id, self) => {\r\n            original += line.value;\r\n            if (id < self.length - 1 && self[id + 1].value !== ')') {\r\n                original += ' ';\r\n            }\r\n        });\r\n        return original;\r\n    };\r\n\r\n    printLines = (): string => {\r\n        return this.lines.reduce((ac, line) => (ac += `${'    '.repeat(line.indentLevel)}${line.value}\\n`), '');\r\n    };\r\n}\r\n\r\nexport default Let;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Drawer, Classes, Position } from '@blueprintjs/core';\r\n\r\nimport Let from './let';\r\nimport '../../scss/Let.scss';\r\nimport { letDrawerProps } from '../../interfaces/interfaces';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { selectLetMap } from '../../store/features/proof/proofSlice';\r\n\r\nconst VisualizerLetDrawer: React.FC<letDrawerProps> = ({ drawerIsOpen, setDrawerIsOpen }: letDrawerProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const letMap = useAppSelector(selectLetMap);\r\n    const [letMapS, setLetMapS] = useState({ ...letMap });\r\n    // const [width, setWidth] = useState(0);\r\n    const [resizeMode, setResizeMode] = useState(0);\r\n    const letsRef = useRef<{ [key: string]: Let }>({});\r\n    const widthRef = useRef(0);\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Handler to call on window resize and set the value column width\r\n        function handleResize() {\r\n            const width = widthRef.current;\r\n\r\n            // -22 from the fixed padding size\r\n            const newWidth = document.getElementsByClassName('letMap-value-column')[0].clientWidth - 24;\r\n            width === newWidth ? setResizeMode(1) : width > newWidth ? setResizeMode(0) : setResizeMode(2);\r\n\r\n            widthRef.current = newWidth;\r\n        }\r\n\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    const expandLet = (parent: string, key: string, letIdx: number) => {\r\n        const lets = letsRef.current;\r\n\r\n        const externalRef = lets[key];\r\n        lets[parent].isExpanded = true;\r\n        letMapS[parent] = lets[parent].expandPartialy(externalRef, letIdx);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const expandAll = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        lets[key].isExpanded = true;\r\n        letMapS[key] = lets[key].expandValue(true);\r\n        setLetMapS({ ...letMapS });\r\n    };\r\n\r\n    const revertLet = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        // Only when is expanded\r\n        if (lets[key].isExpanded) {\r\n            lets[key].isExpanded = false;\r\n            letMapS[key] = lets[key].shrinkValue();\r\n            setLetMapS({ ...letMapS });\r\n        }\r\n    };\r\n\r\n    const renderLet = (key: string): JSX.Element => {\r\n        const lets = letsRef.current;\r\n        const width = widthRef.current;\r\n\r\n        // Waits for the width to be updated and the DOM element to be updated\r\n        if (width) {\r\n            let currentLet = letMapS[key];\r\n\r\n            let indices: { [key: number]: string } = {};\r\n            // Finds all occurences of let in the currentLet\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            // If it's the first render (make sure that the lets obj is not calculated every time)\r\n            if (Object.keys(lets).length !== Object.keys(letMapS).length) {\r\n                lets[key] = new Let(key, currentLet, lets, indices);\r\n            }\r\n\r\n            // If doesn't fits, then indent\r\n            if (!lets[key].fitsTheWindow(width)) {\r\n                currentLet = lets[key].indent(width, true);\r\n                letMapS[key] = currentLet;\r\n\r\n                indices = {};\r\n                // Finds all occurences of let in the currentLet after indentation\r\n                [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                    if (match.index) indices[match.index] = match[0];\r\n                });\r\n            }\r\n            // If fits\r\n            else {\r\n                // Only in the momment the page size is growing and the line is broken\r\n                if (resizeMode >= 0 && lets[key].lines.length > 1) {\r\n                    // Reset the line\r\n                    lets[key].lines = [\r\n                        { value: lets[key].isExpanded ? lets[key].groupUp() : lets[key].value, indentLevel: 0 },\r\n                    ];\r\n                    lets[key].biggerID = 0;\r\n\r\n                    // Indent it again\r\n                    currentLet = lets[key].indent(width, false);\r\n                    letMapS[key] = currentLet;\r\n\r\n                    indices = {};\r\n                    // Finds all occurences of let in the currentLet after indentation\r\n                    [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                        if (match.index) indices[match.index] = match[0];\r\n                    });\r\n                }\r\n            }\r\n\r\n            const arr: (JSX.Element | string)[] = [];\r\n            let start = 0;\r\n            // Slice the currentLet into an array with strings and JSX elements\r\n            Object.keys(indices).forEach((index, i, self) => {\r\n                const idx = Number(index);\r\n                const thisLet = indices[idx];\r\n\r\n                // Add the elements to the arr\r\n                arr.push(currentLet.substring(start, idx));\r\n                arr.push(\r\n                    <a\r\n                        className={darkTheme ? 'let-literal-or' : 'let-literal'}\r\n                        onClick={() => {\r\n                            expandLet(key, thisLet, idx);\r\n                        }}\r\n                    >\r\n                        {thisLet}\r\n                    </a>,\r\n                );\r\n                // Defines a new start\r\n                start = idx + thisLet.length;\r\n\r\n                // If it's the last let\r\n                if (i === self.length - 1) {\r\n                    arr.push(currentLet.substring(start, currentLet.length));\r\n                }\r\n            });\r\n\r\n            // If there is a let in this current let\r\n            if (Object.keys(indices).length) {\r\n                return <span className=\"let-instance\">{arr}</span>;\r\n            } else {\r\n                return <span className=\"let-instance\">{currentLet}</span>;\r\n            }\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            className={darkTheme ? 'bp3-dark' : ''}\r\n            style={{ maxHeight: '65%', width: '35%' }}\r\n            autoFocus={true}\r\n            canEscapeKeyClose={true}\r\n            canOutsideClickClose={false}\r\n            enforceFocus={true}\r\n            hasBackdrop={false}\r\n            isOpen={drawerIsOpen}\r\n            position={Position.RIGHT}\r\n            usePortal={false}\r\n            onClose={(e) => {\r\n                e.preventDefault();\r\n                setDrawerIsOpen(false);\r\n            }}\r\n            icon=\"translate\"\r\n            title=\"Let Map\"\r\n        >\r\n            <div className={Classes.DRAWER_BODY}>\r\n                <div className={Classes.DIALOG_BODY}>\r\n                    <table\r\n                        id=\"table-node-info\"\r\n                        className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                        style={{ width: '100%' }}\r\n                    >\r\n                        <thead>\r\n                            <tr>\r\n                                <th style={{ width: '100px' }}>Property</th>\r\n                                <th className=\"letMap-value-column\">Value</th>\r\n                                <th style={{ width: '250px' }}>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {Object.keys(letMapS).map((key) => {\r\n                                return (\r\n                                    <tr key={key}>\r\n                                        <td>\r\n                                            <strong>{key}</strong>\r\n                                        </td>\r\n                                        <td style={{ width: '100%', whiteSpace: 'pre-wrap' }}>{renderLet(key)}</td>\r\n                                        <td style={{ width: '150px', height: '100%' }}>\r\n                                            <Button\r\n                                                onClick={() => expandAll(key)}\r\n                                                className=\"bp3-minimal\"\r\n                                                icon=\"translate\"\r\n                                                text=\"Expand\"\r\n                                            />\r\n                                            <Button\r\n                                                onClick={() => revertLet(key)}\r\n                                                className=\"bp3-minimal\"\r\n                                                icon=\"undo\"\r\n                                                text=\"Revert\"\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default VisualizerLetDrawer;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { Intent, Position, Toaster } from '@blueprintjs/core';\r\n\r\nimport VisualizerNavbar from '../VisualizerNavbar/VisualizerNavbar';\r\nimport VisualizerDialog from '../VisualizerDialog/VisualizerDialog';\r\nimport VisualizerStage from '../VisualizerStage/VisualizerStage';\r\nimport VisualizerLetDrawer from '../VisualizerLetDrawer/VisualizerLetDrawer';\r\n\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\n\r\nconst App: React.FC = () => {\r\n    const [dialogIsOpen, setDialogIsOpen] = useState(true);\r\n    const [dialogContent, setDialogContent] = useState('welcome');\r\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n\r\n    // Toaster\r\n    let toaster: Toaster;\r\n    const refHandlers = {\r\n        toaster: (ref: Toaster) => (toaster = ref),\r\n    };\r\n\r\n    const addErrorToast = (err: string) => {\r\n        toaster.show({ icon: 'warning-sign', intent: Intent.DANGER, message: err });\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.getElementsByClassName('bp3-overlay')[0]\r\n            ? (document.getElementsByClassName('bp3-overlay')[0].className = '')\r\n            : null;\r\n    }, [drawerIsOpen]);\r\n\r\n    return (\r\n        <div className={darkTheme ? ' bp3-dark' : ''}>\r\n            <Toaster position={Position.TOP} ref={refHandlers.toaster} />\r\n            <VisualizerNavbar\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                setDialogContent={setDialogContent}\r\n                setDrawerIsOpen={setDrawerIsOpen}\r\n            ></VisualizerNavbar>\r\n            <VisualizerDialog\r\n                dialogIsOpen={dialogIsOpen}\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                dialogContent={dialogContent}\r\n                setDialogContent={setDialogContent}\r\n                addErrorToast={addErrorToast}\r\n            ></VisualizerDialog>\r\n            <VisualizerStage></VisualizerStage>\r\n            {drawerIsOpen ? (\r\n                <VisualizerLetDrawer drawerIsOpen={drawerIsOpen} setDrawerIsOpen={setDrawerIsOpen} />\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport externalCmdReducer from './features/externalCmd/externalCmd';\r\nimport fileReducer from './features/file/fileSlice';\r\nimport proofReducer from './features/proof/proofSlice';\r\nimport themeReducer from './features/theme/themeSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        file: fileReducer,\r\n        proof: proofReducer,\r\n        theme: themeReducer,\r\n        externalCmd: externalCmdReducer,\r\n    },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport { store } from './store/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './scss/index.scss';\r\n\r\nimport reportWebVitals from './ReactUtils/reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}