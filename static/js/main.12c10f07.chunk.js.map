{"version":3,"sources":["interfaces/enum.ts","store/hooks.ts","store/features/theme/themeSlice.ts","store/features/file/fileSlice.ts","store/features/proof/auxi.ts","store/features/theme/auxi.ts","store/features/proof/proofSlice.ts","store/features/externalCmd/externalCmd.ts","components/VisualizerDialog/VisualizerDialog.tsx","components/VisualizerTutorial/TutorialPopover.tsx","components/VisualizerTutorial/VisualizerTutorial.tsx","components/VisualizerSmtDrawer/VisualizerSmtDrawer.tsx","components/App/App.tsx","store/store.ts","ReactUtils/reportWebVitals.ts","index.tsx"],"names":["drawerHelpersKind","renderLetKind","ClusterKind","useAppDispatch","useDispatch","useAppSelector","useSelector","themeSlice","createSlice","name","initialState","value","reducers","toggle","state","selectTheme","actions","theme","fileSlice","filesCount","set","action","payload","removeEscapedCharacters","s","newS","i","length","descendants","proof","nodeId","children","concat","reduce","acc","childId","sliceNodesCluster","clusterMap","slicedClusters","currentNode","id","parentsClusters","parents","p","clusterType","keys","Object","target","Number","push","clusterID","forEach","c","child","extractTheoryLemmas","clusters","haveCluster","conclusion","filter","type","TL","map","hiddenNodes","n","rule","colorConverter","colorName","color","proofSlice","view","style","letMap","theoryLemmaMap","visualInfo","clustersInfos","smt","process","proofJSON","dot","isJSON","indexOf","JSON","parse","nodes","args","NaN","dependencies","NONE","comment","slice","lastIndexOf","replace","split","line","search","label","idx","thisType","numbers","substring","str","num","SAT","CNF","PP","IN","parseInt","trim","attributes","commentJSON","subProofQty","x","parent","isNaN","processDot","clustersColors","clustersMap","Array","fill","cluster","node","y","selected","size","hideNodes","toHideNodes","every","hiddenNodesArray","clusteredNodes","hiddenNode","hiddenID","some","_p","pastCluster","stringify","clusterParents","parentCluster","splice","findNodesClusters","piNodeId","foldAllDescendants","index","self","unhideNodes","pi","hiddens","setVisualInfo","selectNodes","len","unselectNodes","changeStyle","applyView","visualInfoSize","proofSize","applyColor","setSmt","selectSmt","externalCmd","findData","nodeToFind","findOption","renderData","count","fileChanged","findNode","option","reRender","addRenderCount","blockRender","allowRenderNewFile","blockRenderNewFile","readUploadedFileAsText","inputFile","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","VisualizerDialog","dialogIsOpen","setDialogIsOpen","addErrorToast","darkTheme","dispatch","useState","inputIsFocused","setInputIsFocused","fileName","changeFileName","file","changeFile","useReducer","newFlag","focusFlag","flagCount","setFocusFlag","useEffect","document","getElementsByClassName","Classes","DIALOG_BODY","childNodes","focus","DIALOG_FOOTER_ACTIONS","closeDialog","dialogBody","outline","borderRadius","text","hasSelection","onInputChange","e","files","File","fileContents","message","onFocus","stopPropagation","onBlur","succesButton","onClick","ext","pop","intent","Intent","SUCCESS","disabled","className","isOpen","onClose","usePortal","icon","title","DIALOG_FOOTER","TutorialPopover","setIsOpen","nextTutorial","stage","content","W","position","page","setPage","changePage","bt","setTimeout","handleEsc","key","window","addEventListener","removeEventListener","left","tW","top","borderBottomColor","width","_","tabIndex","list","last","positions","j","link","href","rel","insertAnchors","backgroundColor","divsIds","tutorials","VisualizerTutorial","inTutorial","setInTutorial","setStage","setPosition","sizeRef","useRef","w","h","handleResize","current","innerWidth","innerHeight","toBeWrapped","getElementById","getClientRects","newY","height","newX","newTW","pointerEvents","VisualizerSmtDrawer","setDrawerIsOpen","proofSmt","forceUpdate","open","optionsIsOpen","setOptionsIsOpen","textRef","argsType","setArgsType","shouldClusterize","printAsDag","setDefaultOptions","customArgs","setCustomArgs","options","divColor","helpDiv","maxWidth","padding","boxShadow","textAlign","maxHeight","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","Position","LEFT","preventDefault","DRAWER_BODY","overflow","language","onChange","undefined","onMount","transition","visibility","margin","checked","borderBottom","borderTop","marginBottom","placeholder","rightElement","placement","modifiers","arrow","enabled","hoverCloseDelay","hoverOpenDelay","float","display","App","toaster","drawerIsOpen","smtDrawerIsOpen","setSmtDrawerIsOpen","refHandlers","ref","TOP","err","show","DANGER","store","configureStore","reducer","fileReducer","proofReducer","themeReducer","externalCmdReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.12c10f07.chunk.js","sourcesContent":["export enum drawerHelpersKind {\r\n    RULE,\r\n    ARGS,\r\n    CONC,\r\n    ALL,\r\n}\r\n\r\nexport enum renderLetKind {\r\n    EXPAND,\r\n    REVERT,\r\n}\r\n\r\nexport enum ClusterKind {\r\n    NONE,\r\n    SAT,\r\n    CNF,\r\n    TL,\r\n    PP,\r\n    IN,\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ThemeState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ThemeState = {\r\n    value: true,\r\n};\r\n\r\nexport const themeSlice = createSlice({\r\n    name: 'theme',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        toggle: (state) => {\r\n            state.value = !state.value;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { toggle } = themeSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice theme. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectTheme = (state: RootState): boolean => state.theme.value;\r\n\r\nexport default themeSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { FileState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: FileState = {\r\n    name: 'ex.smt2',\r\n    value: 'digraph proof {\\n\\trankdir=\"BT\";\\n\\tnode [shape=record];\\n\\t0 [label=\"{SCOPE((not a), a)|(not (and (not a) a))}\", class = \" basic \", comment = \"{\\'subProofQty\\':1}\" ];\\n\\t1 [label=\"{CHAIN_RESOLUTION(true, a)|false}\", class = \" propositional \", comment = \"{\\'subProofQty\\':2}\" ];\\n\\t2 [label=\"{ASSUME(a)|a}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t3 [label=\"{ASSUME((not a))|(not a)}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t1->0;\\n\\t2->1;\\n\\t3->1;\\n}',\r\n    filesCount: 0,\r\n};\r\n\r\nexport const fileSlice = createSlice({\r\n    name: 'file',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        set: (state, action: PayloadAction<{ name: string; value: string }>) => {\r\n            state.name = action.payload.name;\r\n            if (state.value !== action.payload.value) {\r\n                state.value = action.payload.value;\r\n                state.filesCount++;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { set } = fileSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectFileName = (state: RootState): string => state.file.name;\r\n\r\nexport const selectFileExtension = (state: RootState): string => {\r\n    const ext = state.file.name.split('.').pop();\r\n    return ext ? ext : '';\r\n};\r\n\r\nexport const selectDot = (state: RootState): string =>\r\n    state.file.name.split('.').pop() === 'json' ? JSON.parse(state.file.value).dot : state.file.value;\r\n\r\nexport const selectFile = (state: RootState): string => state.file.value;\r\n\r\nexport const selectFileCount = (state: RootState): number => state.file.filesCount;\r\n\r\nexport default fileSlice.reducer;\r\n","import { ClusterKind } from '../../../interfaces/enum';\r\nimport { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\n\r\ninterface ClusterColorMap {\r\n    [type: number]: string;\r\n}\r\n\r\nfunction removeEscapedCharacters(s: string): string {\r\n    let newS = '';\r\n    for (let i = 0; i < s.length; i += 1) {\r\n        if (\r\n            !(\r\n                s[i] === '\\\\' &&\r\n                (s[i + 1] === '\"' ||\r\n                    s[i + 1] === '>' ||\r\n                    s[i + 1] === '<' ||\r\n                    s[i + 1] === '{' ||\r\n                    s[i + 1] === '}' ||\r\n                    s[i + 1] === '|')\r\n            )\r\n        ) {\r\n            newS += s[i];\r\n        }\r\n    }\r\n\r\n    return newS;\r\n}\r\n\r\nexport function processDot(dot: string): [NodeInterface[], ProofState['letMap'], ClusterColorMap] {\r\n    const nodes: NodeInterface[] = [\r\n        {\r\n            id: 0,\r\n            conclusion: '',\r\n            rule: '',\r\n            args: '',\r\n            children: [],\r\n            parents: [NaN],\r\n            descendants: 0,\r\n            dependencies: [],\r\n            clusterType: ClusterKind.NONE,\r\n        },\r\n    ];\r\n    let comment: string | null = dot.slice(dot.indexOf('comment='));\r\n    comment = comment\r\n        ? removeEscapedCharacters(\r\n              removeEscapedCharacters(comment.slice(comment.indexOf('=') + 2, comment.indexOf(';') - 1)),\r\n          )\r\n        : null;\r\n\r\n    const clustersInfos: ClusterColorMap = {};\r\n    const lines = dot\r\n        .slice(dot.indexOf('{') + 1, dot.lastIndexOf('}') - 2)\r\n        .replace(/(\\n|\\t)/gm, '')\r\n        .split(';');\r\n    lines.forEach((line) => {\r\n        if (line.search('subgraph') !== -1) {\r\n            // Get the label of this node subgraph\r\n            let label = '';\r\n            let idx = line.indexOf('label=\"') + 7;\r\n            while (line[idx] !== '\"') {\r\n                label += line[idx];\r\n                idx++;\r\n            }\r\n\r\n            // Get the label of this node subgraph\r\n            let color = '';\r\n            idx = line.indexOf('bgcolor=\"') + 9;\r\n            while (line[idx] !== '\"') {\r\n                color += line[idx];\r\n                idx++;\r\n            }\r\n\r\n            // Get the nodes ID's\r\n            const numbers = line\r\n                .substring(idx + 1, line.length - 1)\r\n                .split(/\\s/)\r\n                .filter((str) => str.length)\r\n                .map((num) => Number(num));\r\n\r\n            let thisType: ClusterKind;\r\n            switch (label) {\r\n                case 'SAT':\r\n                    thisType = ClusterKind.SAT;\r\n                    break;\r\n                case 'CNF':\r\n                    thisType = ClusterKind.CNF;\r\n                    break;\r\n                case 'TL':\r\n                    thisType = ClusterKind.TL;\r\n                    break;\r\n                case 'PP':\r\n                    thisType = ClusterKind.PP;\r\n                    break;\r\n                case 'IN':\r\n                    thisType = ClusterKind.IN;\r\n                    break;\r\n                default:\r\n                    thisType = ClusterKind.NONE;\r\n            }\r\n\r\n            // Assign the type for each node\r\n            numbers.forEach((num) => {\r\n                nodes[num].clusterType = thisType;\r\n            });\r\n            clustersInfos[thisType] = color;\r\n        } else if (line.search('label') !== -1) {\r\n            const id = parseInt(line.slice(0, line.indexOf('[')).trim());\r\n            const attributes = line.slice(line.indexOf('[') + 1, line.lastIndexOf(']')).trim();\r\n\r\n            let label = attributes.slice(attributes.search(/(?<!\\\\)\"/) + 2);\r\n            label = label.slice(0, label.search(/(?<!\\\\)\"/) - 1);\r\n            let [conclusion, rule, args] = ['', '', ''];\r\n            [conclusion, rule] = label.split(/(?<!\\\\)\\|/);\r\n            [rule, args] = rule.indexOf(' :args ') != -1 ? rule.split(' :args ') : [rule, ''];\r\n\r\n            const comment: string = removeEscapedCharacters(line.slice(line.indexOf('comment'), line.lastIndexOf('\"')));\r\n            const commentJSON = JSON.parse(comment.slice(comment.indexOf('\"') + 1).replace(/'/g, '\"'));\r\n\r\n            if (!nodes[id]) {\r\n                nodes[id] = {\r\n                    id: id,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    children: [],\r\n                    parents: [NaN],\r\n                    descendants: 0,\r\n                    dependencies: [],\r\n                    clusterType: ClusterKind.NONE,\r\n                };\r\n            }\r\n            nodes[id].conclusion = removeEscapedCharacters(conclusion);\r\n            nodes[id].rule = removeEscapedCharacters(rule);\r\n            nodes[id].args = removeEscapedCharacters(args);\r\n            nodes[id].descendants = commentJSON.subProofQty;\r\n        } else if (line.search('->') !== -1) {\r\n            const [child, parent] = line.split('->').map((x) => parseInt(x.trim()));\r\n            nodes[parent].children.push(child);\r\n            // If there isn't a child node\r\n            if (!nodes[child]) {\r\n                nodes[child] = {\r\n                    id: child,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    children: [],\r\n                    parents: [],\r\n                    descendants: 0,\r\n                    dependencies: [],\r\n                    clusterType: ClusterKind.NONE,\r\n                };\r\n            }\r\n            // If there is and is an invalid parent\r\n            else if (isNaN(nodes[child].parents[0])) {\r\n                nodes[child].parents = [];\r\n            }\r\n            nodes[child].parents.push(parent);\r\n        }\r\n    });\r\n\r\n    return comment ? [nodes, JSON.parse(comment)['letMap'], clustersInfos] : [nodes, {}, clustersInfos];\r\n}\r\n\r\nexport const piNodeParents = (\r\n    proof: NodeInterface[],\r\n    hiddenNodesArray: number[],\r\n    dependencies: { [parentId: number]: number[] } = {},\r\n): number[] => {\r\n    const parents = hiddenNodesArray\r\n        // Concat all the parents\r\n        .reduce((acc: number[], hiddenNode) => {\r\n            let haveHiddenParent = false;\r\n\r\n            proof[hiddenNode].parents.forEach((parent) => {\r\n                // If this parent is a hidden node\r\n                if (hiddenNodesArray.indexOf(parent) !== -1) {\r\n                    haveHiddenParent = true;\r\n                } else {\r\n                    dependencies[parent]\r\n                        ? dependencies[parent].push(hiddenNode)\r\n                        : (dependencies[parent] = [hiddenNode]);\r\n                }\r\n            });\r\n\r\n            if (haveHiddenParent) return acc;\r\n            return acc.concat(proof[hiddenNode].parents);\r\n        }, [])\r\n        // Filter the duplicated elements\r\n        .filter((parent, i, self) => self.indexOf(parent) === i)\r\n        // Only the parents that aren't in he hidden nodes array remains\r\n        .filter((parent) => hiddenNodesArray.indexOf(parent) === -1);\r\n\r\n    // Removes the pi node parents from the dependencies\r\n    Object.keys(dependencies).forEach((parent) => {\r\n        const n = Number(parent);\r\n        if (parents.indexOf(n) !== -1) delete dependencies[n];\r\n    });\r\n\r\n    return parents;\r\n};\r\n\r\nexport const descendants = (proof: NodeInterface[], nodeId: number): number[] => {\r\n    return proof[nodeId].children.concat(\r\n        proof[nodeId].children.reduce((acc: number[], childId) => acc.concat(descendants(proof, childId)), []),\r\n    );\r\n};\r\n\r\nexport const piNodeChildren = (proof: NodeInterface[], hiddenNodesArray: number[]): number[] => {\r\n    const children = hiddenNodesArray\r\n        // Get all the childrens\r\n        .reduce((acc: number[], hiddenNode) => acc.concat(proof[hiddenNode].children), [])\r\n        // Exclude the childrens that are part of the hidden nodes\r\n        .filter((child) => hiddenNodesArray.indexOf(child) === -1);\r\n    return children;\r\n};\r\n\r\nexport const findNodesClusters = (proof: NodeInterface[], hiddenNodesArray: number[]): number[][] => {\r\n    const hiddenNodes = [...hiddenNodesArray];\r\n    const clusters: number[][] = [];\r\n    let clusteredNodes = 0;\r\n    const parents = hiddenNodes.map((hiddenNode) => proof[hiddenNode].parents);\r\n\r\n    // Cluster the nodes based on similiar parents\r\n    parents.forEach((parent, clusterID) => {\r\n        // If not all of the nodes where clustered and is a non empty cluster\r\n        if (clusteredNodes !== parents.length && parents[clusterID].length) {\r\n            clusters.push([]);\r\n            parents.forEach((p, hiddenID) => {\r\n                // If those nodes have some parent in commom and they weren't verified yet\r\n                if (parents[hiddenID].length && parent.some((_p) => p.indexOf(_p) !== -1)) {\r\n                    clusters[clusters.length - 1].push(hiddenNodes[hiddenID]);\r\n                    // Removes these parents from the array, making shure they will not get verified again (already clustered)\r\n                    parents[hiddenID] = [];\r\n                    // Increases the number o clustered nodes\r\n                    clusteredNodes++;\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    let pastCluster: number[][] = [];\r\n    // Cluster the nodes until there aren't changes being made\r\n    while (JSON.stringify(pastCluster) != JSON.stringify(clusters)) {\r\n        pastCluster = [...clusters];\r\n        clusters.forEach((cluster, clusterID) => {\r\n            const clusterParents = proof[cluster[0]].parents;\r\n\r\n            // For each cluster\r\n            clusters.forEach((parentCluster, id) => {\r\n                // If this parentCluster (cluster) is parent of the current cluster\r\n                if (parentCluster.some((hiddenID) => clusterParents.indexOf(hiddenID) !== -1)) {\r\n                    // Group the nodes couple in one single cluster (the parent cluster)\r\n                    clusters[id] = clusters[id].concat(clusters[clusterID]);\r\n                    clusters.splice(clusterID, 1);\r\n                    clusterID--;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Filter the nodes with length 1\r\n    return clusters.filter((cluster) => cluster.length > 1);\r\n};\r\n\r\nexport const groupPiNodeDependencies = (\r\n    proof: NodeInterface[],\r\n    hiddenNodesArray: number[],\r\n): NodeInterface['dependencies'] => {\r\n    const piNodeDependencies: NodeInterface['dependencies'] = [];\r\n    const depMap: { [piID: number]: number } = {};\r\n\r\n    // Copy all the hidden nodes dependencies to the new pi node\r\n    proof.forEach((node) => {\r\n        // Search for all the hidden nodes that have deps\r\n        if (hiddenNodesArray.indexOf(node.id) !== -1 && node.dependencies.length) {\r\n            // For each dependence in this node\r\n            node.dependencies.forEach((dep) => {\r\n                // This pi node dependence wasn't inserted yet\r\n                if (Object.keys(depMap).indexOf(String(dep.piId)) === -1) {\r\n                    piNodeDependencies.push(dep);\r\n                    depMap[dep.piId] = piNodeDependencies.length - 1;\r\n                }\r\n                // Concat the nodes inside the pi node already inserted\r\n                else {\r\n                    piNodeDependencies[depMap[dep.piId]].depsId = piNodeDependencies[depMap[dep.piId]].depsId.concat(\r\n                        dep.depsId,\r\n                    );\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return piNodeDependencies;\r\n};\r\n\r\nexport const sliceNodesCluster = (\r\n    proof: NodeInterface[],\r\n    clusterMap: number[],\r\n    nodeId = 0,\r\n    slicedClusters: number[][] = [],\r\n): number[][] => {\r\n    const currentNode = proof[nodeId];\r\n\r\n    // If the node id is valid and wasn't inserted yet\r\n    if (nodeId && clusterMap[currentNode.id] === -1) {\r\n        // Get all parents with the same type\r\n        const parentsClusters: { [parentID: number]: number } = {};\r\n        for (let i = 0; i < currentNode.parents.length; i++) {\r\n            const p = currentNode.parents[i];\r\n            if (proof[p].clusterType === currentNode.clusterType) {\r\n                parentsClusters[p] = clusterMap[p];\r\n                break;\r\n            }\r\n        }\r\n\r\n        const keys = Object.keys(parentsClusters);\r\n\r\n        // If the current node has the same type as (at least) one of it's parents\r\n        if (keys.length) {\r\n            // Put the current node in the cluster of the first parent with the same type\r\n            const target = parentsClusters[Number(keys[0])];\r\n            slicedClusters[target].push(currentNode.id);\r\n            clusterMap[currentNode.id] = target;\r\n        }\r\n        // Parent with different type\r\n        else {\r\n            const clusterID = slicedClusters.length;\r\n            clusterMap[currentNode.id] = clusterID;\r\n            slicedClusters.push([currentNode.id]);\r\n\r\n            // Add the brothers with the same type in the same cluster\r\n            proof[currentNode.parents[0]].children.forEach((c) => {\r\n                // If the brother node has the same type as the current one\r\n                if (proof[c].clusterType === currentNode.clusterType && c !== currentNode.id) {\r\n                    slicedClusters[clusterID].push(c);\r\n                    clusterMap[c] = clusterID;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    currentNode.children.forEach((child) => {\r\n        sliceNodesCluster(proof, clusterMap, child, slicedClusters);\r\n    });\r\n    return slicedClusters;\r\n};\r\n\r\nexport const extractTheoryLemmas = (\r\n    proof: NodeInterface[],\r\n    clusters: ProofState['clustersInfos'],\r\n    haveCluster: boolean,\r\n): ProofState['theoryLemmaMap'] => {\r\n    // If have clusters registered\r\n    if (haveCluster) {\r\n        return [proof[0].conclusion].concat(\r\n            clusters.filter((c) => c.type === ClusterKind.TL).map((c) => proof[c.hiddenNodes[0]].conclusion),\r\n        );\r\n    } else {\r\n        return proof.filter((n) => n.rule === 'SCOPE').map((n) => n.conclusion);\r\n    }\r\n};\r\n","export const colorConverter = (colorName: string): string => {\r\n    let color = '#fff';\r\n    switch (colorName) {\r\n        case 'red':\r\n            color = '#f72b34';\r\n            break;\r\n        case 'orange':\r\n            color = '#ff8334';\r\n            break;\r\n        case 'yellow':\r\n            color = '#ffc149';\r\n            break;\r\n        case 'green':\r\n            color = '#60aa51';\r\n            break;\r\n        case 'blue':\r\n            color = '#0097e4';\r\n            break;\r\n        case 'purple':\r\n            color = '#a73da5';\r\n            break;\r\n        case 'brown':\r\n            color = '#a95a49';\r\n            break;\r\n        case 'black':\r\n            color = '#464646';\r\n            break;\r\n\r\n        case 'white':\r\n            color = '#f0f0f0';\r\n            break;\r\n    }\r\n    return color;\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport {\r\n    processDot,\r\n    piNodeChildren,\r\n    piNodeParents,\r\n    descendants,\r\n    findNodesClusters,\r\n    groupPiNodeDependencies,\r\n    sliceNodesCluster,\r\n    extractTheoryLemmas,\r\n} from './auxi';\r\nimport { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\nimport { colorConverter } from '../theme/auxi';\r\nimport { ClusterKind } from '../../../interfaces/enum';\r\n\r\nconst initialState: ProofState = {\r\n    proof: [],\r\n    view: 'full',\r\n    style: 'graph',\r\n    hiddenNodes: [],\r\n    letMap: {},\r\n    theoryLemmaMap: [],\r\n    visualInfo: [],\r\n    clustersInfos: [],\r\n    smt: '',\r\n};\r\n\r\nexport const proofSlice = createSlice({\r\n    name: 'proof',\r\n    initialState,\r\n\r\n    reducers: {\r\n        process: (state, action: PayloadAction<string>) => {\r\n            // Reset the state\r\n            state.clustersInfos = [];\r\n\r\n            let proofJSON;\r\n            let dot = action.payload;\r\n            let isJSON = false;\r\n\r\n            // If the payload is a .json file\r\n            if (dot.indexOf('{\"dot\":\"') !== -1) {\r\n                proofJSON = JSON.parse(dot);\r\n                dot = proofJSON.dot;\r\n                isJSON = true;\r\n            }\r\n\r\n            const [proof, letMap, clustersColors] = processDot(dot);\r\n            state.proof = proof;\r\n            state.letMap = letMap;\r\n            state.view = 'full';\r\n\r\n            // If there are clusters\r\n            let clusters: number[][] = [];\r\n            if (Object.keys(clustersColors).length) {\r\n                state.view = 'clustered';\r\n\r\n                // Slice the clusters\r\n                const clustersMap: number[] = Array(state.proof.length).fill(-1);\r\n                clusters = sliceNodesCluster(state.proof, clustersMap);\r\n\r\n                // Maps the cluster infos\r\n                clusters.forEach((cluster) => {\r\n                    const type = state.proof[cluster[0]].clusterType;\r\n                    state.clustersInfos.push({\r\n                        hiddenNodes: cluster,\r\n                        type: type,\r\n                        color: colorConverter(clustersColors[type]),\r\n                    });\r\n                });\r\n\r\n                // Extract the theory lemmas\r\n                state.theoryLemmaMap = extractTheoryLemmas(state.proof, state.clustersInfos, true);\r\n            } else {\r\n                state.theoryLemmaMap = extractTheoryLemmas(state.proof, state.clustersInfos, false);\r\n            }\r\n\r\n            if (isJSON) {\r\n                state.view = proofJSON.view;\r\n                state.hiddenNodes = proofJSON.hiddenNodes;\r\n                state.visualInfo = proofJSON.visualInfo;\r\n            }\r\n            // Is .dot\r\n            else {\r\n                state.hiddenNodes = clusters.filter((c) => c.length > 1);\r\n\r\n                // Init the visual info\r\n                const visualInfo: ProofState['visualInfo'] = {};\r\n                state.proof.forEach((node) => {\r\n                    visualInfo[node.id] = {\r\n                        color: '#fff',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    };\r\n                });\r\n\r\n                let size = state.proof.length;\r\n                state.clustersInfos.forEach((cluster) => {\r\n                    visualInfo[cluster.hiddenNodes.length !== 1 ? size++ : cluster.hiddenNodes[0]] = {\r\n                        color: cluster.color,\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    };\r\n                });\r\n\r\n                state.visualInfo = visualInfo;\r\n            }\r\n        },\r\n        hideNodes: (state, action: PayloadAction<number[]>) => {\r\n            const toHideNodes = action.payload.filter(\r\n                (id) =>\r\n                    id > 0 &&\r\n                    id < state.proof.length &&\r\n                    state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1),\r\n            );\r\n\r\n            const clusters = findNodesClusters(state.proof, toHideNodes);\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat(clusters)\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi nodes\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            for (let i = 0; i < clusters.length; i++) {\r\n                state.visualInfo = {\r\n                    ...state.visualInfo,\r\n                    [piNodeId + i]: {\r\n                        color: '#555',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    },\r\n                };\r\n            }\r\n\r\n            // Unselect the selected nodes\r\n            toHideNodes.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        foldAllDescendants: (state, action: PayloadAction<number>) => {\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat([\r\n                    [action.payload, ...descendants(state.proof, action.payload)].filter(\r\n                        (id, index, self) =>\r\n                            id > 0 &&\r\n                            id < state.proof.length &&\r\n                            state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1) &&\r\n                            self.indexOf(id) === index,\r\n                    ),\r\n                ])\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi node and the root node\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            state.visualInfo = {\r\n                ...state.visualInfo,\r\n                [action.payload]: {\r\n                    ...state.visualInfo[action.payload],\r\n                    selected: false,\r\n                },\r\n                [piNodeId]: {\r\n                    color: '#555',\r\n                    x: 0,\r\n                    y: 0,\r\n                    selected: false,\r\n                },\r\n            };\r\n        },\r\n        unhideNodes: (state, action: PayloadAction<{ pi: number; hiddens: number[] }>) => {\r\n            const { pi, hiddens } = action.payload;\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .map((hiddenNodesArray) => hiddenNodesArray.filter((id) => hiddens.indexOf(id) === -1))\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Make sure the ids are realocated\r\n            const size = Object.keys(state.visualInfo).length;\r\n            for (let i = pi; i < size - 1; i++) {\r\n                state.visualInfo[i] = state.visualInfo[i + 1];\r\n            }\r\n            // Delete the last position\r\n            delete state.visualInfo[size - 1];\r\n\r\n            // Unselect the hidden nodes\r\n            hiddens.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        setVisualInfo: (state, action: PayloadAction<ProofState['visualInfo']>) => {\r\n            state.visualInfo = action.payload;\r\n        },\r\n        selectNodes: (state, action: PayloadAction<number[]>) => {\r\n            const len = Object.keys(state.visualInfo).length;\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < len) {\r\n                    state.visualInfo[id].selected = true;\r\n                }\r\n            });\r\n        },\r\n        unselectNodes: (state, action: PayloadAction<number[]>) => {\r\n            const len = Object.keys(state.visualInfo).length;\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < len) {\r\n                    state.visualInfo[id].selected = false;\r\n                }\r\n            });\r\n        },\r\n        changeStyle: (state, action: PayloadAction<ProofState['style']>) => {\r\n            switch (action.payload) {\r\n                case 'graph':\r\n                    state.style = 'graph';\r\n                    break;\r\n                case 'directory':\r\n                    state.style = 'directory';\r\n                    break;\r\n            }\r\n        },\r\n        applyView: (state, action: PayloadAction<ProofState['view']>) => {\r\n            const visualInfoSize = Object.keys(state.visualInfo).length;\r\n            const proofSize = state.proof.length;\r\n            // Delete all the pi nodes\r\n            for (let i = 0; i < visualInfoSize - proofSize; i++) {\r\n                delete state.visualInfo[proofSize + i];\r\n            }\r\n\r\n            switch (action.payload) {\r\n                // View without hidden Nodes\r\n                case 'full':\r\n                    if (state.hiddenNodes.length || state.view === 'colored-full') {\r\n                        state.proof.forEach((node) => {\r\n                            state.visualInfo[node.id] = {\r\n                                color: '#fff',\r\n                                x: 0,\r\n                                y: 0,\r\n                                selected: false,\r\n                            };\r\n                        });\r\n\r\n                        state.hiddenNodes = [];\r\n                    }\r\n                    state.view = 'full';\r\n                    break;\r\n                // Cluster all the nodes in your respective group\r\n                case 'clustered':\r\n                    // If there are clusters infos\r\n                    if (state.clustersInfos.length) {\r\n                        state.view = 'clustered';\r\n\r\n                        state.hiddenNodes = [];\r\n                        let size = Object.keys(state.visualInfo).length;\r\n\r\n                        state.clustersInfos.forEach((cluster) => {\r\n                            if (cluster.hiddenNodes.length !== 1) {\r\n                                state.visualInfo[size++] = {\r\n                                    color: cluster.color,\r\n                                    x: 0,\r\n                                    y: 0,\r\n                                    selected: false,\r\n                                };\r\n\r\n                                state.hiddenNodes.push(cluster.hiddenNodes);\r\n                            }\r\n                            // Cluster with 1 node\r\n                            else {\r\n                                state.visualInfo[cluster.hiddenNodes[0]] = {\r\n                                    color: cluster.color,\r\n                                    x: 0,\r\n                                    y: 0,\r\n                                    selected: false,\r\n                                };\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                // Apply full view but apply the clustrer color\r\n                case 'colored-full':\r\n                    state.view = 'colored-full';\r\n                    state.hiddenNodes = [];\r\n\r\n                    // If there are clusters infos\r\n                    if (state.clustersInfos.length) {\r\n                        state.clustersInfos.forEach((cluster) => {\r\n                            cluster.hiddenNodes.forEach((node) => {\r\n                                state.visualInfo[node] = {\r\n                                    color: cluster.color,\r\n                                    x: 0,\r\n                                    y: 0,\r\n                                    selected: false,\r\n                                };\r\n                            });\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n        applyColor: (state, action: PayloadAction<string>) => {\r\n            Object.keys(state.visualInfo).forEach((id) => {\r\n                if (state.visualInfo[Number(id)].selected) {\r\n                    state.visualInfo[Number(id)].color = action.payload;\r\n                    state.visualInfo[Number(id)].selected = false;\r\n                }\r\n            });\r\n        },\r\n        setSmt: (state, action: PayloadAction<string>) => {\r\n            state.smt = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    process,\r\n    hideNodes,\r\n    foldAllDescendants,\r\n    unhideNodes,\r\n    setVisualInfo,\r\n    selectNodes,\r\n    unselectNodes,\r\n    changeStyle,\r\n    applyView,\r\n    applyColor,\r\n    setSmt,\r\n} = proofSlice.actions;\r\n\r\nexport const selectProof = (state: RootState): NodeInterface[] => {\r\n    let proof = state.proof.proof;\r\n    const hiddenNodes = state.proof.hiddenNodes;\r\n\r\n    hiddenNodes.forEach((hiddenNodesArray) => {\r\n        const dependencies: { [parentId: number]: number[] } = {};\r\n        const children = piNodeChildren(proof, hiddenNodesArray);\r\n        const parents = piNodeParents(proof, hiddenNodesArray, dependencies);\r\n        const piNodeDependencies = groupPiNodeDependencies(proof, hiddenNodesArray);\r\n\r\n        const piNodeId = proof.length;\r\n        proof = proof.concat({\r\n            id: piNodeId,\r\n            conclusion: '∴',\r\n            rule: 'π',\r\n            args: '',\r\n            children: children,\r\n            parents: parents,\r\n            hiddenNodes: hiddenNodesArray.map((hiddenNode) => proof[hiddenNode]),\r\n            descendants: 1,\r\n            dependencies: piNodeDependencies,\r\n            clusterType: ClusterKind.NONE,\r\n        });\r\n\r\n        const piNode = proof[piNodeId];\r\n\r\n        children.forEach(\r\n            (childId) =>\r\n                (proof[childId] = {\r\n                    ...proof[childId],\r\n                    parents: proof[childId].parents\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n        parents.forEach(\r\n            (parentId) =>\r\n                (proof[parentId] = {\r\n                    ...proof[parentId],\r\n                    children: proof[parentId].children\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n\r\n        // Set the dependencies array of each parent that has deps and remove\r\n        //  the children that are dependencies\r\n        Object.keys(dependencies).forEach((parent) => {\r\n            const parentId = Number(parent);\r\n            proof[parentId] = {\r\n                ...proof[parentId],\r\n                children: proof[parentId].children.filter((c) => dependencies[parentId].indexOf(c) === -1),\r\n                dependencies: [...proof[parentId].dependencies, { piId: piNodeId, depsId: dependencies[parentId] }],\r\n            };\r\n        });\r\n\r\n        // Get the high hierarchy nodes in this pi node\r\n        const highHierarchyNodes = hiddenNodesArray?.filter((node) =>\r\n            proof[node].parents.every((parentId) => piNode.parents.indexOf(parentId) !== -1),\r\n        );\r\n\r\n        // Get the conclusion array\r\n        const conclusion = highHierarchyNodes.map((node) => ' ' + proof[node].conclusion);\r\n        piNode.conclusion = conclusion.length > 1 ? `[${conclusion} ]` : `${conclusion}`;\r\n\r\n        // Get the rule array\r\n        const rule = highHierarchyNodes.map((node) => ' ' + proof[node].rule);\r\n        piNode.rule = rule.length > 1 ? `[${rule} ]` : `${rule} `;\r\n\r\n        // Set the descendants number\r\n        piNode.descendants = piNode.children.reduce(\r\n            (ac: number, childID) => ((ac += proof[childID].descendants), ac),\r\n            1,\r\n        );\r\n    });\r\n\r\n    proof = proof.filter((proofNode) =>\r\n        hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(proofNode.id) === -1),\r\n    );\r\n\r\n    return proof;\r\n};\r\n\r\nexport const selectOriginalProof = (state: RootState): NodeInterface[] => {\r\n    return state.proof.proof;\r\n};\r\n\r\nexport const selectView = (state: RootState): ProofState['view'] => {\r\n    return state.proof.view;\r\n};\r\n\r\nexport const selectStyle = (state: RootState): 'graph' | 'directory' => {\r\n    return state.proof.style;\r\n};\r\n\r\nexport const selectLetMap = (state: RootState): { [Key: string]: string } => {\r\n    return state.proof.letMap;\r\n};\r\n\r\nexport const selectTheoryLemmas = (state: RootState): ProofState['theoryLemmaMap'] => {\r\n    return state.proof.theoryLemmaMap;\r\n};\r\n\r\nexport const selectVisualInfo = (state: RootState): ProofState['visualInfo'] => {\r\n    if (state.proof.proof.length) return state.proof.visualInfo;\r\n    // If there is no proof node\r\n    return { 0: { color: '#555', x: 0, y: 0, selected: false } };\r\n};\r\n\r\nexport const selectHiddenNodes = (state: RootState): number[][] => {\r\n    return state.proof.hiddenNodes;\r\n};\r\n\r\nexport const selectNodeClusters = (state: RootState): ProofState['clustersInfos'] => {\r\n    return state.proof.clustersInfos;\r\n};\r\n\r\nexport const selectSmt = (state: RootState): ProofState['smt'] => {\r\n    return state.proof.smt;\r\n};\r\n\r\nexport default proofSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ExternalCmdState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ExternalCmdState = {\r\n    findData: {\r\n        nodeToFind: -1,\r\n        findOption: false,\r\n    },\r\n    renderData: {\r\n        count: 0,\r\n        fileChanged: false,\r\n    },\r\n};\r\n\r\nexport const externalCmd = createSlice({\r\n    name: 'externalCmd',\r\n    initialState,\r\n    reducers: {\r\n        findNode: (state, action: PayloadAction<{ nodeId: number; option: boolean }>) => {\r\n            state.findData = { nodeToFind: action.payload.nodeId, findOption: action.payload.option };\r\n        },\r\n        reRender: (state) => {\r\n            state.renderData.count = 0;\r\n        },\r\n        addRenderCount: (state) => {\r\n            state.renderData.count++;\r\n        },\r\n        blockRender: (state) => {\r\n            state.renderData.count = 2;\r\n        },\r\n        allowRenderNewFile: (state) => {\r\n            state.renderData.fileChanged = true;\r\n        },\r\n        blockRenderNewFile: (state) => {\r\n            state.renderData.fileChanged = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { findNode, reRender, addRenderCount, blockRender, allowRenderNewFile, blockRenderNewFile } =\r\n    externalCmd.actions;\r\n\r\nexport const selectFindData = (state: RootState): { nodeToFind: number; findOption: boolean } =>\r\n    state.externalCmd.findData;\r\n\r\nexport const selectRenderData = (state: RootState): { count: number; fileChanged: boolean } =>\r\n    state.externalCmd.renderData;\r\n\r\nexport default externalCmd.reducer;\r\n","import React, { useState, useReducer, useEffect } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { MaybeElement } from '@blueprintjs/core/lib/esm/common/props';\r\nimport { IconName } from '@blueprintjs/core/lib/esm/components/icon/icon';\r\n\r\nimport { Button, Classes, Dialog, FileInput, Intent } from '@blueprintjs/core';\r\n\r\nimport '../../scss/VisualizerDialog.scss';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { set } from '../../store/features/file/fileSlice';\r\nimport { process } from '../../store/features/proof/proofSlice';\r\nimport { allowRenderNewFile, blockRender, reRender } from '../../store/features/externalCmd/externalCmd';\r\nimport { VisualizerDialogProps } from '../../interfaces/interfaces';\r\n\r\ninterface DialogProps {\r\n    icon: IconName | MaybeElement;\r\n    title: React.ReactNode;\r\n}\r\n\r\nconst readUploadedFileAsText = (inputFile: File) => {\r\n    const temporaryFileReader = new FileReader();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        temporaryFileReader.onerror = () => {\r\n            temporaryFileReader.abort();\r\n            reject(new DOMException('Problem parsing input file.'));\r\n        };\r\n\r\n        temporaryFileReader.onload = () => {\r\n            resolve(temporaryFileReader.result);\r\n        };\r\n        temporaryFileReader.readAsText(inputFile);\r\n    });\r\n};\r\n\r\nconst VisualizerDialog: React.FC<VisualizerDialogProps> = ({\r\n    dialogIsOpen,\r\n    setDialogIsOpen,\r\n    addErrorToast,\r\n}: VisualizerDialogProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [inputIsFocused, setInputIsFocused] = useState(false);\r\n    const [fileName, changeFileName] = useState('Choose file...');\r\n    const [file, changeFile] = useState('');\r\n    const [[focusFlag, flagCount], setFocusFlag] = useReducer(\r\n        (state: number[], newFlag: number): number[] => [newFlag, state[1] + 1],\r\n        [0, 0],\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (dialogIsOpen) setFocusFlag(1);\r\n    }, [dialogIsOpen]);\r\n\r\n    useEffect(() => {\r\n        let el;\r\n        switch (focusFlag) {\r\n            // Focus the file input\r\n            case 1:\r\n                el = document.getElementsByClassName(Classes.DIALOG_BODY + ' dialog-body');\r\n                (el[0].childNodes[0] as HTMLElement).focus();\r\n                break;\r\n            // Focus the upload button\r\n            case 2:\r\n                el = document.getElementsByClassName(Classes.DIALOG_FOOTER_ACTIONS);\r\n                (el[0].childNodes[0] as HTMLElement).focus();\r\n                break;\r\n        }\r\n    }, [flagCount]);\r\n\r\n    const closeDialog = () => {\r\n        setDialogIsOpen(false);\r\n        changeFileName('Choose file...');\r\n        changeFile('');\r\n    };\r\n\r\n    const dialogProps: DialogProps = { icon: 'upload', title: 'Upload Proof' };\r\n    const dialogBody = (\r\n        <FileInput\r\n            style={{\r\n                outline: inputIsFocused ? '2px  white solid' : '',\r\n                borderRadius: '3px',\r\n            }}\r\n            text={fileName}\r\n            hasSelection={fileName !== 'Choose file...'}\r\n            onInputChange={async (e) => {\r\n                const target = e.target as HTMLInputElement;\r\n                const file = target.files ? target.files[0] : new File([''], 'filename');\r\n                if (\r\n                    target.files &&\r\n                    target.files[0] &&\r\n                    target.files[0].name.split('.').slice(-1)[0] !== 'dot' &&\r\n                    target.files[0].name.split('.').slice(-1)[0] !== 'json'\r\n                ) {\r\n                    addErrorToast('Sorry! Our app only support DOT and JSON files.');\r\n                    return;\r\n                }\r\n\r\n                try {\r\n                    // Make sure the file was selected and none error of \"no\r\n                    //  file select\" will be prompted\r\n                    if (file) {\r\n                        const fileContents = await readUploadedFileAsText(file);\r\n                        changeFile(fileContents as string);\r\n                        changeFileName(file.name);\r\n\r\n                        // If succeded, set the focus of the page to the upload button\r\n                        setFocusFlag(2);\r\n                    }\r\n                } catch (er: any) {\r\n                    addErrorToast(er.message);\r\n                }\r\n            }}\r\n            fill={true}\r\n            onFocus={(e) => {\r\n                e.stopPropagation();\r\n                setInputIsFocused(true);\r\n            }}\r\n            onBlur={(e) => {\r\n                e.stopPropagation();\r\n                setInputIsFocused(false);\r\n            }}\r\n        />\r\n    );\r\n    const succesButton = (\r\n        <Button\r\n            onClick={() => {\r\n                dispatch(set({ name: fileName, value: file }));\r\n\r\n                dispatch(allowRenderNewFile());\r\n                const ext = fileName.split('.').pop();\r\n                if (ext === 'json') dispatch(blockRender());\r\n                else if (ext === 'dot') dispatch(reRender());\r\n\r\n                dispatch(process(file));\r\n                closeDialog();\r\n            }}\r\n            intent={Intent.SUCCESS}\r\n            disabled={fileName === 'Choose file...'}\r\n        >\r\n            Upload Proof\r\n        </Button>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className={darkTheme ? ' bp3-dark' : ''}\r\n                isOpen={dialogIsOpen}\r\n                onClose={(): void => closeDialog()}\r\n                usePortal={true}\r\n                {...dialogProps}\r\n            >\r\n                <div className={Classes.DIALOG_BODY + ' dialog-body'}>{dialogBody}</div>\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>{succesButton}</div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default VisualizerDialog;\r\n","import { Button, Divider } from '@blueprintjs/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { TutorialPopoverProps } from '../../interfaces/interfaces';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { useAppSelector } from '../../store/hooks';\r\n\r\nconst TutorialPopover: React.FC<TutorialPopoverProps> = ({\r\n    setIsOpen,\r\n    nextTutorial,\r\n    stage,\r\n    content,\r\n    W,\r\n    position,\r\n}: TutorialPopoverProps) => {\r\n    const [page, setPage] = useState(0);\r\n\r\n    const darkTheme = useAppSelector(selectTheme);\r\n\r\n    const renderPageBall = (): JSX.Element[] => {\r\n        return content.map((_, id) => (\r\n            <div key={id} className={`page-ball ${id === page && (darkTheme ? 'page-on' : 'page-on-light')}`} />\r\n        ));\r\n    };\r\n\r\n    const changePage = (type: string): void => {\r\n        if (type === '>') setPage(page + 1);\r\n        else setPage(page - 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const parent = document.getElementsByClassName('tutorial-popover')[0];\r\n        // Set the focus\r\n        let bt = parent.getElementsByClassName('next-page progress');\r\n        if (!bt.length) {\r\n            bt = parent.getElementsByClassName('bp3-button');\r\n            // Make sure the next stage button will not be instantly clicked\r\n            setTimeout(() => (bt[bt.length - 1] as HTMLElement).focus(), 150);\r\n        } else {\r\n            (bt[0] as HTMLElement).focus();\r\n        }\r\n    }, [stage, page]);\r\n\r\n    useEffect(() => {\r\n        function handleEsc(e: KeyboardEvent): void {\r\n            e.stopPropagation();\r\n            if (e.key === 'Escape') {\r\n                setIsOpen(false);\r\n            }\r\n        }\r\n        window.addEventListener('keydown', handleEsc, false);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleEsc, false);\r\n        };\r\n    }, []);\r\n\r\n    const insertAnchors = (text: string): (JSX.Element | string)[] => {\r\n        const list: (JSX.Element | string)[] = [];\r\n\r\n        let i = -1,\r\n            last = 0;\r\n        const positions = [0, 0, 0];\r\n        for (let j = 0; j < text.length; j++) {\r\n            if (text[j] === '\\0') {\r\n                i++;\r\n                positions[i] = j;\r\n            }\r\n            if (i === 2) {\r\n                list.push(text.substring(last, positions[0]));\r\n                const name = text.substring(positions[0] + 1, positions[1]);\r\n                const link = text.substring(positions[1] + 1, positions[2]);\r\n                list.push(\r\n                    <a href={link} target=\"_blank\" rel=\"noreferrer\">\r\n                        {name}\r\n                    </a>,\r\n                );\r\n\r\n                last = positions[2] + 1;\r\n                i = -1;\r\n            }\r\n        }\r\n        list.push(text.substring(last, text.length));\r\n\r\n        return list;\r\n    };\r\n\r\n    return (\r\n        <div className={darkTheme ? 'bp3-dark' : ''}>\r\n            <div\r\n                className=\"arrow-up\"\r\n                style={{\r\n                    left: position.tW,\r\n                    top: position.y - 7,\r\n                    borderBottomColor: darkTheme ? 'rgb(48, 65, 71)' : 'rgb(255,255,255)',\r\n                }}\r\n            />\r\n            <div\r\n                className=\"arrow-up arrow-2\"\r\n                style={{\r\n                    left: position.tW - 2,\r\n                    top: position.y - 9,\r\n                    borderBottomColor: darkTheme ? '#bdbdbd' : 'rgba(71, 64, 64, 0.281)',\r\n                }}\r\n            />\r\n            <div className=\"tutorial-popover bp3-dialog\" style={{ width: W, left: position.x, top: position.y }}>\r\n                <div className=\"bp3-dialog-header\">\r\n                    <div className=\"cur-page\">{renderPageBall()}</div>\r\n                    <Button icon=\"small-cross\" onClick={() => setIsOpen(false)} tabIndex={-1} />\r\n                </div>\r\n                <body>\r\n                    {page > 0 && (\r\n                        <button\r\n                            className=\"next-page regress\"\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                changePage('<');\r\n                            }}\r\n                        >\r\n                            {'<'}\r\n                        </button>\r\n                    )}\r\n                    <p className=\"content\">{stage ? content[page] : insertAnchors(content[page])}</p>\r\n                    {page < content.length - 1 && (\r\n                        <button\r\n                            className=\"next-page progress\"\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                changePage('>');\r\n                            }}\r\n                        >\r\n                            {'>'}\r\n                        </button>\r\n                    )}\r\n                </body>\r\n                {page === content.length - 1 && (\r\n                    <>\r\n                        <Divider style={{ backgroundColor: darkTheme ? 'white' : '' }} />\r\n                        <div className=\"bp3-dialog-footer\">\r\n                            <Button\r\n                                text=\"Next\"\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    nextTutorial();\r\n                                    setPage(0);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TutorialPopover;\r\n","import { Portal } from '@blueprintjs/core';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { TutorialProps } from '../../interfaces/interfaces';\r\nimport '../../scss/Tutorial.scss';\r\nimport TutorialPopover from './TutorialPopover';\r\n\r\nconst W = 340;\r\nconst divsIds = [\r\n    'proof-visualizer-name',\r\n    'upload-proof-bt',\r\n    'examples-bt',\r\n    'input-smt-bt',\r\n    'file-name-title',\r\n    'command',\r\n    'style-bt',\r\n    'visualizers-bt',\r\n    'download-bt',\r\n    'switch-button-dark-theme',\r\n];\r\nconst tutorials: string[][] = [\r\n    [\r\n        'This website is a SMT solver proof visualizer. It was developed by \\0Vinícius Braga Freire\\0https://github.com/vinciusb\\0, \\0Diego Della Rocca\\0https://github.com/diegodrc\\0 and \\0Haniel Barbosa\\0https://homepages.dcc.ufmg.br/~hbarbosa/\\0. It was funded by AWS and the main SMT solver supported is CVC5.',\r\n    ],\r\n    [\r\n        'Here you can upload your proofs to be visualized.',\r\n        'The proofs can have the .dot or .json file extension.',\r\n        'The .json file is obtained in the download section.',\r\n    ],\r\n    ['Here you can visualize some examples of different proofs.'],\r\n    ['Here you can see the examples SMT code or insert your own SMT and run the CVC5 solver to generate a new proof.'],\r\n    ['This is the name of the current proof uploaded'],\r\n    [\r\n        'This is the command section. Here you can use some commands that will transform the proof, changing the way you comprehend it.',\r\n        \"Click in the '?' button to see a description of all commands available.\",\r\n    ],\r\n    [\r\n        'Here you can change the way the visualizer presents the proof.',\r\n        \"The graph style is the default and it's where the commands transformations happen.\",\r\n        \"In the directory style each proof node is a 'folder' and your children nodes are inside it.\",\r\n    ],\r\n    [\r\n        'Here you have access to 3 visualizers:',\r\n        'View: It allow you to change the way the proof nodes are visualized.',\r\n        'Let Map: Here you can see a map of all the LETS used inside the proofs. A let is a therm that shorten some expression (e.g.: let1 = (and A B))',\r\n        'Theory Lemma: It allow you to see all the theory lemmas in the proof.',\r\n    ],\r\n    [\r\n        'This section allow you to download the proof in different ways.',\r\n        '.DOT is the default format. It only holds informations about the proof structure and your clusters.',\r\n        '.JSON allow the user to save all the visual informations about the proof (i.e. the nodes positions, colors and foldings after any transformation applied) and your structural infos just like the .DOT.',\r\n        '.PNG prints the proof in the current state (i.e. includes all the transformations) into a image.',\r\n    ],\r\n    ['Allow to change between dark/light mode.'],\r\n];\r\n\r\n// panel stack\r\nconst VisualizerTutorial: React.FC<TutorialProps> = ({ inTutorial, setInTutorial }: TutorialProps) => {\r\n    const [stage, setStage] = useState(-1);\r\n    const [position, setPosition] = useState({ x: 0, y: 0, tW: 0 });\r\n    const sizeRef = useRef({ w: 0, h: 0 });\r\n\r\n    const increaseStage = () => {\r\n        if (stage < tutorials.length - 1) setStage(stage + 1);\r\n        else setInTutorial(false);\r\n    };\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Handler to call on window resize and set the value column width\r\n        function handleResize() {\r\n            sizeRef.current.w = window.innerWidth;\r\n            sizeRef.current.h = window.innerHeight;\r\n        }\r\n\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (inTutorial) setStage(0);\r\n        else setStage(-1);\r\n    }, [inTutorial]);\r\n\r\n    useEffect(() => {\r\n        const toBeWrapped: HTMLElement | null = document.getElementById(divsIds[stage]);\r\n        if (toBeWrapped) {\r\n            const { x, y, width, height } = toBeWrapped.getClientRects()[0];\r\n            const newY = y + height;\r\n            let newX = x + width / 2;\r\n            const newTW = newX;\r\n            // Positioning in the beggining\r\n            if (newX < W) newX = 3;\r\n            // Positioning in the end\r\n            else if (newX + W / 2 > sizeRef.current.w) newX = sizeRef.current.w - W - 3;\r\n            // Positioning in the normal position\r\n            else newX -= W / 2;\r\n\r\n            setPosition({ x: newX, y: newY, tW: newTW });\r\n        }\r\n    }, [stage]);\r\n\r\n    return (\r\n        <Portal className={`tutorial-portal`}>\r\n            <div\r\n                className=\"bp3-overlay-enter-done\"\r\n                style={{\r\n                    width: sizeRef.current.w,\r\n                    height: sizeRef.current.h,\r\n                    pointerEvents: stage >= 0 ? 'auto' : 'none',\r\n                    backgroundColor: stage >= 0 ? 'rgba(87, 82, 82, 0.233)' : 'transparent',\r\n                }}\r\n            >\r\n                {stage >= 0 && (\r\n                    <TutorialPopover\r\n                        setIsOpen={setInTutorial}\r\n                        nextTutorial={increaseStage}\r\n                        stage={stage}\r\n                        content={tutorials[stage]}\r\n                        W={W}\r\n                        position={position}\r\n                    />\r\n                )}\r\n            </div>\r\n        </Portal>\r\n    );\r\n};\r\n\r\nexport default VisualizerTutorial;\r\n","import React, { useEffect, useReducer, useRef, useState } from 'react';\r\n\r\nimport MonacoEditor from '@monaco-editor/react';\r\nimport { Drawer, Position, Classes, Button, FormGroup, Switch, InputGroup } from '@blueprintjs/core';\r\nimport { Popover2 } from '@blueprintjs/popover2';\r\n\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { SmtDrawerProps } from '../../interfaces/interfaces';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\n\r\nimport { selectSmt, setSmt } from '../../store/features/proof/proofSlice';\r\n\r\nconst VisualizerSmtDrawer: React.FC<SmtDrawerProps> = ({ isOpen, setDrawerIsOpen }: SmtDrawerProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const proofSmt = useAppSelector(selectSmt);\r\n\r\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\r\n    const [optionsIsOpen, setOptionsIsOpen] = useReducer((open) => !open, false);\r\n    const textRef = useRef(proofSmt + '\\n');\r\n    const [argsType, setArgsType] = useState(true);\r\n    const [[shouldClusterize, printAsDag], setDefaultOptions] = useState([true, true]);\r\n    const [customArgs, setCustomArgs] = useState('');\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        // When smt drawer is initialized it focus the escape button\r\n        const bt = document\r\n            .getElementsByClassName('smt-drawer')[0]\r\n            .getElementsByClassName('bp3-button')[0] as HTMLElement;\r\n        bt.tabIndex = 1;\r\n        bt.focus();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        textRef.current = proofSmt;\r\n        forceUpdate();\r\n    }, [proofSmt]);\r\n\r\n    const options = {\r\n        theme: darkTheme ? 'vs-dark' : 'vs',\r\n        tabIndex: 5,\r\n    };\r\n\r\n    const divColor = darkTheme ? 'rgb(255, 255, 255, 0.15)' : 'rgb(0, 0, 0, 0.15)';\r\n\r\n    const helpDiv = (\r\n        <div\r\n            className={`bp3-menu ${darkTheme ? 'bp3-dark' : ''}`}\r\n            style={{\r\n                maxWidth: '200px',\r\n                padding: '5px 8px !important',\r\n                boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.651)',\r\n                textAlign: 'justify',\r\n            }}\r\n        >\r\n            Look at{' '}\r\n            <a href=\"https://cvc5.github.io/docs/cvc5-1.0.0/\" target=\"_blank\" rel=\"noreferrer\">\r\n                CVC5 documentation\r\n            </a>{' '}\r\n            to understand more about the argument parser.\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <Drawer\r\n            className={`smt-drawer ${darkTheme ? 'bp3-dark' : ''}`}\r\n            style={{ maxHeight: '65%', width: '35%' }}\r\n            autoFocus={true}\r\n            canEscapeKeyClose={true}\r\n            canOutsideClickClose={true}\r\n            enforceFocus={false}\r\n            hasBackdrop={false}\r\n            isOpen={isOpen}\r\n            position={Position.LEFT}\r\n            usePortal={false}\r\n            onClose={(e) => {\r\n                e.preventDefault();\r\n                setDrawerIsOpen();\r\n            }}\r\n            icon=\"applications\"\r\n            title=\"Visualizers\"\r\n        >\r\n            <div className={Classes.DRAWER_BODY} style={{ overflow: 'hidden' }}>\r\n                <MonacoEditor\r\n                    height={'300px'}\r\n                    language=\"graphql\"\r\n                    value={textRef.current}\r\n                    onChange={(value) => value !== undefined && (textRef.current = value)}\r\n                    onMount={() => forceUpdate()}\r\n                    options={options}\r\n                />\r\n                <div\r\n                    style={{\r\n                        height: optionsIsOpen ? '220px' : '0',\r\n                        position: 'relative',\r\n                        overflow: 'auto',\r\n                        transition: 'height 0.24s ease-out',\r\n                        visibility: optionsIsOpen ? 'visible' : 'hidden',\r\n                    }}\r\n                >\r\n                    <Switch\r\n                        className=\"switch\"\r\n                        label=\"Default args or custom args\"\r\n                        style={{ margin: '10px 20px' }}\r\n                        checked={argsType}\r\n                        onChange={() => setArgsType(!argsType)}\r\n                        tabIndex={4}\r\n                    />\r\n                    <FormGroup\r\n                        label=\"Default args\"\r\n                        style={{\r\n                            padding: '10px 20px',\r\n                            borderBottom: `1px solid ${divColor}`,\r\n                            borderTop: `1px solid ${divColor}`,\r\n                            marginBottom: '0',\r\n                        }}\r\n                        disabled={!argsType}\r\n                    >\r\n                        <Switch\r\n                            label=\"Should clusterize proof\"\r\n                            disabled={!argsType}\r\n                            checked={shouldClusterize}\r\n                            onChange={() => setDefaultOptions([!shouldClusterize, printAsDag])}\r\n                            tabIndex={4}\r\n                        />\r\n                        <Switch\r\n                            label=\"Should print as tree or as DAG\"\r\n                            disabled={!argsType}\r\n                            checked={printAsDag}\r\n                            onChange={() => setDefaultOptions([shouldClusterize, !printAsDag])}\r\n                            tabIndex={4}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup\r\n                        label=\"Custom args\"\r\n                        style={{ padding: '10px 20px', marginBottom: '0' }}\r\n                        disabled={argsType}\r\n                    >\r\n                        <InputGroup\r\n                            id=\"text-input\"\r\n                            placeholder=\"Placeholder text\"\r\n                            disabled={argsType}\r\n                            rightElement={\r\n                                <Popover2\r\n                                    disabled={argsType}\r\n                                    content={helpDiv}\r\n                                    placement=\"auto\"\r\n                                    modifiers={{\r\n                                        arrow: { enabled: true },\r\n                                    }}\r\n                                    hoverCloseDelay={200}\r\n                                    hoverOpenDelay={200}\r\n                                >\r\n                                    <Button disabled={argsType} icon=\"help\" className=\"bp3-minimal\" tabIndex={4} />\r\n                                </Popover2>\r\n                            }\r\n                            value={customArgs}\r\n                            onChange={(e) => setCustomArgs(e.target.value)}\r\n                            tabIndex={4}\r\n                        />\r\n                    </FormGroup>\r\n                </div>\r\n                <footer\r\n                    style={{\r\n                        position: 'relative',\r\n                        borderTop: optionsIsOpen ? `solid 1px ${divColor}` : '',\r\n                    }}\r\n                >\r\n                    <Button\r\n                        style={{ float: 'left', margin: '5px' }}\r\n                        className=\"bp3-minimal\"\r\n                        icon=\"more\"\r\n                        text=\"Options\"\r\n                        onClick={() => setOptionsIsOpen()}\r\n                        tabIndex={1}\r\n                    />\r\n                    <div style={{ float: 'right', display: 'flex' }}>\r\n                        <Button\r\n                            style={{ margin: '5px' }}\r\n                            className=\"bp3-minimal\"\r\n                            icon=\"floppy-disk\"\r\n                            text=\"Save\"\r\n                            onClick={() => dispatch(setSmt(textRef.current))}\r\n                            tabIndex={2}\r\n                        />\r\n                        <Button\r\n                            style={{ margin: '5px' }}\r\n                            className=\"bp3-minimal\"\r\n                            icon=\"code\"\r\n                            text=\"Generate proof\"\r\n                            onClick={() => {\r\n                                dispatch(setSmt(textRef.current));\r\n                                // Run cvc5\r\n                            }}\r\n                            tabIndex={3}\r\n                        />\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default VisualizerSmtDrawer;\r\n","import React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Intent, Position, Toaster } from '@blueprintjs/core';\r\n\r\nimport VisualizerNavbar from '../VisualizerNavbar/VisualizerNavbar';\r\nimport VisualizerDialog from '../VisualizerDialog/VisualizerDialog';\r\nimport VisualizerStage from '../VisualizerStage/VisualizerStage';\r\nimport VisualizersDrawer from '../VisualizersDrawer/VisualizersDrawer';\r\n\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport VisualizerTutorial from '../VisualizerTutorial/VisualizerTutorial';\r\nimport VisualizerSmtDrawer from '../VisualizerSmtDrawer/VisualizerSmtDrawer';\r\n\r\nconst App: React.FC = () => {\r\n    const [dialogIsOpen, setDialogIsOpen] = useState(true);\r\n    const [inTutorial, setInTutorial] = useState(false);\r\n    const [drawerIsOpen, setDrawerOpenState] = useReducer((isOpen) => !isOpen, false);\r\n    const [smtDrawerIsOpen, setSmtDrawerIsOpen] = useReducer((isOpen) => !isOpen, false);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n\r\n    // Toaster\r\n    let toaster: Toaster;\r\n    const refHandlers = {\r\n        toaster: (ref: Toaster) => (toaster = ref),\r\n    };\r\n\r\n    const addErrorToast = (err: string) => {\r\n        toaster.show({ icon: 'warning-sign', intent: Intent.DANGER, message: err });\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.getElementsByClassName('bp3-overlay')[0]\r\n            ? (document.getElementsByClassName('bp3-overlay')[0].className = '')\r\n            : null;\r\n    }, [drawerIsOpen]);\r\n\r\n    return (\r\n        <div className={darkTheme ? ' bp3-dark' : ''} style={{ height: '100%' }}>\r\n            <VisualizerTutorial inTutorial={inTutorial} setInTutorial={setInTutorial} />\r\n            <Toaster position={Position.TOP} ref={refHandlers.toaster} />\r\n            {/* <VisualizerNavbar\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                setDrawerIsOpen={setDrawerOpenState}\r\n                addErrorToast={addErrorToast}\r\n                inTutorial={inTutorial}\r\n                setInTutorial={setInTutorial}\r\n                setSmtDrawerIsOpen={setSmtDrawerIsOpen}\r\n            /> */}\r\n            <VisualizerDialog\r\n                dialogIsOpen={dialogIsOpen}\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                addErrorToast={addErrorToast}\r\n            />\r\n            {/* <VisualizerStage /> */}\r\n            {drawerIsOpen ? (\r\n                <>a</>\r\n            ) : // <VisualizersDrawer drawerIsOpen={drawerIsOpen} setDrawerIsOpen={setDrawerOpenState}></VisualizersDrawer>\r\n            null}\r\n            {smtDrawerIsOpen ? (\r\n                <VisualizerSmtDrawer isOpen={smtDrawerIsOpen} setDrawerIsOpen={setSmtDrawerIsOpen} />\r\n            ) : null}\r\n            <h1>testeee</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport externalCmdReducer from './features/externalCmd/externalCmd';\r\nimport fileReducer from './features/file/fileSlice';\r\nimport proofReducer from './features/proof/proofSlice';\r\nimport themeReducer from './features/theme/themeSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        file: fileReducer,\r\n        proof: proofReducer,\r\n        theme: themeReducer,\r\n        externalCmd: externalCmdReducer,\r\n    },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport { store } from './store/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './scss/index.scss';\r\n\r\nimport reportWebVitals from './ReactUtils/reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}