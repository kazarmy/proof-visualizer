{"version":3,"sources":["components/VisualizerLetDrawer.tsx","components/VisualizerNavbar.tsx","components/VisualizerDialog.tsx","components/canvas/VisualizerNode.tsx","components/canvas/VisualizerLine.tsx","components/canvas/VisualizerMenu.tsx","components/canvas/VisualizerCanvas.tsx","components/VisualizerTree.tsx","components/VisualizerDirectoryStyle.tsx","components/VisualizerStage.tsx","App.tsx","redux/reducer.ts","redux/store.ts","reportWebVitals.ts","index.tsx"],"names":["indent","s","newS","replaceAll","i","pCounter","length","slice","repeat","join","VisualizerLetDrawer","letMap","drawerIsOpen","setDrawerIsOpen","darkTheme","useSelector","state","darkThemeReducer","useState","letMapS","setLetMapS","className","style","maxHeight","width","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","isOpen","position","Position","RIGHT","usePortal","onClose","e","preventDefault","icon","title","Classes","DRAWER_BODY","DIALOG_BODY","id","Object","keys","map","key","whiteSpace","split","indexOf","onClick","newLetMap","replace","l","display","flexDirection","text","VisualizerNavbar","setDialogIsOpen","setDialogContent","proof","proofReducer","letMapReducer","windowSize","height","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","dispatch","useDispatch","setStyle","type","payload","changeView","view","dot","setTimeout","styleMenu","viewsMenu","exampleMenu","href","encodeURIComponent","problem","download","label","link","document","createElement","getElementsByClassName","children","toDataURL","click","Group","align","Alignment","LEFT","Heading","Divider","content","undefined","placement","disabled","checked","onChange","readUploadedFileAsText","inputFile","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","VisualizerDialog","dialogIsOpen","dialogContent","addErrorToast","dialogProps","dialogBody","succesButton","_id","options","setProof","processingProof","setProcessingProof","proofProcessed","setProofProcessed","fileName","changeFileName","file","changeFile","large","textAlign","paddingTop","intent","Intent","SUCCESS","iconSize","size","hasSelection","onInputChange","a","target","files","name","fileContents","message","fill","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","textColorFromBg","bgColor","color","charAt","substring","parseInt","Node","this","props","rule","conclusion","args","x","y","selected","nHided","nDescendants","topHidedNodes","setNodeOnFocus","updateNodeState","toggleNodeSelection","openDrawer","tree","tagProps","stroke","strokeWidth","textProps","fontSize","padding","nHidedStr","node","nDescendantsStr","draggable","toString","onDragMove","attrs","evt","button","shiftKey","menuNode","getElementById","top","clientY","left","clientX","trim","React","Component","Line","points","Menu","unfold","foldSelectedNodes","foldAllDescendants","changeNodeColor","foldSelected","handleWheel","stage","getStage","oldScale","scaleX","pointerPosition","getPointerPosition","mousePointTo","newScale","deltaY","stageScale","stageX","stageY","Canvas","applyView","proofNodes","filter","views","forEach","hideNode","nodesSelected","showingNodes","removeNodes","sort","b","nodeId","updatePosition","addNodes","setState","nodeOnFocus","hidedNodes","unhideNode","unfoldOnClick","nodeProps","descendants","push","LineProps","from","to","child","addNode","parent","showingEdges","recursivelyGetChildren","removeNode","edgeKey","edges","edge","ancestors","ancestorsId","currentId","piId","parentId","hided","hidedIn","hideMyChildNode","nH","nD","reduce","accumulator","NaN","positionCache","rank","hiddenNodesTree","childNodes","list","roots","some","g","dagre","graphlib","Graph","setGraph","rankdir","ranker","setDefaultEdgeLabel","setNode","setEdge","childNode","layout","xOffset","yOffset","nodes","v","concat","canvasSize","includes","onWheel","scaleY","onContextMenu","value","render","VisualizerTree","handleNodeClick","nodeData","_nodePath","setNodeInfo","originalNodeInfo","originallySelected","isSelected","forEachNode","n","handleNodeCollapse","isExpanded","handleNodeExpand","prevProps","backgroundColor","contents","onNodeClick","onNodeCollapse","onNodeExpand","ELEVATION_0","callback","VisualizerDirectoryStyle","proofTree","ruleHelper","ident","translate","ruleHelperOpen","setRuleHelperOpen","argsTranslatorOpen","setArgsTranslatorOpen","conclusionTranslatorOpen","setConclusionTranslatorOpen","nodeInfo","offsetHeight","float","clear","borderRight","overflow","removeEscapedCharacters","VisualizerStage","styleReducer","comment","JSON","parse","lastIndexOf","line","search","attributes","commentJSON","subProofQty","processDot","createTree","Array","nodeInfoCopy","setNodeInfoCopy","setTree","BOTTOM","App","toaster","refHandlers","ref","TOP","err","show","DANGER","initialStateProofReducer","initialStateDarkThemeReducer","initialStateStyleReducer","initialStateLetMapReducer","combineReducers","action","store","createStore","reducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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AAEG,EAAI,IACO,MAAbH,EAAEG,EAAI,IACO,MAAbH,EAAEG,EAAI,IACO,MAAbH,EAAEG,EAAI,MAGdF,GAAQD,EAAEG,IAIlB,OAAOF,EAiHX,SAAS0U,EAAWlK,GAChB,OAAQA,EAAKzH,MAAM,KAAK,IACpB,IAAK,SACD,MAAO,8DACX,IAAK,SACD,OACIyH,EACA,uYAER,IAAK,QACD,OACIA,EACA,gnBAER,IAAK,OACD,OACIA,EACA,sZAER,IAAK,UACD,OACIA,EACA,0PAER,IAAK,WACD,OACIA,EACA,6MAER,IAAK,oBACD,OACIA,EACA,moBAER,IAAK,sBACD,OACIA,EACA,6iCAER,IAAK,qBACD,OACIA,EACA,gcAER,IAAK,0BACD,OACIA,EACA,qsBAER,IAAK,4BACD,OACIA,EACA,4LAER,IAAK,eACD,OACIA,EACA,wVAER,IAAK,iBACD,OACIA,EACA,6mBAER,IAAK,aACD,OACIA,EACA,qRAER,IAAK,mBACD,OACIA,EACA,uKAER,IAAK,oBACD,OACIA,EACA,oNAER,IAAK,0BACD,OACIA,EACA,oKAER,IAAK,oBACD,OACIA,EACA,+MAER,IAAK,gBACD,OACIA,EACA,oNAER,IAAK,gBACD,OACIA,EACA,gOAER,IAAK,aACD,OACIA,EACA,mOAER,IAAK,iBACD,OACIA,EACA,0VAER,IAAK,gBACD,OACIA,EACA,uNAER,IAAK,iBACD,OACIA,EACA,kOAER,IAAK,aACD,OACIA,EACA,kpCAER,IAAK,mBACD,OACIA,EACA,ueAER,IAAK,YACD,OACIA,EACA,iNAER,IAAK,aACD,OACIA,EACA,oNAER,IAAK,mBACD,OACIA,EACA,4oBAER,IAAK,yBACD,OACIA,EACA,itBAER,QACI,OAAOA,GAInB,IAqBM1K,EAAS,SAACC,GAIZ,IAHA,IAAIC,EAAOD,EAAEE,WAAW,IAAK,MACzBC,EAAI,EACJC,EAAW,EACRD,EAAIF,EAAKI,QACI,MAAZJ,EAAKE,IAA0B,MAAZF,EAAKE,GAAYC,IACnB,MAAZH,EAAKE,IAA0B,MAAZF,EAAKE,GAAYC,IACxB,OAAZ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","file":"static/js/main.7ddf6033.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Dispatch, SetStateAction } from 'react';\nimport { Button, Drawer, Classes, Position } from '@blueprintjs/core';\n\nimport { stateInterface } from './interfaces';\n\ninterface letDrawerProps {\n    letMap: {\n        [Key: string]: string;\n    };\n    drawerIsOpen: boolean;\n    setDrawerIsOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nconst indent = (s: string) => {\n    let newS = s.replaceAll(' ', '\\n');\n    let i = 0;\n    let pCounter = 0;\n    while (i < newS.length) {\n        if (newS[i] === '(') pCounter++;\n        else if (newS[i] === ')') pCounter--;\n        else if (newS[i] === '\\n') {\n            if (newS[i + 1] === ')') {\n                newS = [newS.slice(0, i + 1), '    '.repeat(pCounter - 1), newS.slice(i + 1)].join('');\n                i += pCounter - 1;\n            } else {\n                newS = [newS.slice(0, i + 1), '    '.repeat(pCounter), newS.slice(i + 1)].join('');\n                i += pCounter;\n            }\n        }\n        i++;\n    }\n    return newS;\n};\n\nconst VisualizerLetDrawer: React.FC<letDrawerProps> = ({ letMap, drawerIsOpen, setDrawerIsOpen }: letDrawerProps) => {\n    const darkTheme = useSelector<stateInterface, boolean>((state: stateInterface) => state.darkThemeReducer.darkTheme);\n    const [letMapS, setLetMapS] = useState(letMap);\n\n    return (\n        <Drawer\n            className={darkTheme ? 'bp3-dark' : ''}\n            style={{ maxHeight: '65%', width: '35%' }}\n            autoFocus={true}\n            canEscapeKeyClose={true}\n            canOutsideClickClose={true}\n            enforceFocus={true}\n            hasBackdrop={false}\n            isOpen={drawerIsOpen}\n            position={Position.RIGHT}\n            usePortal={true}\n            onClose={(e) => {\n                e.preventDefault();\n                setDrawerIsOpen(false);\n            }}\n            icon=\"translate\"\n            title=\"Let Map\"\n        >\n            <div className={Classes.DRAWER_BODY}>\n                <div className={Classes.DIALOG_BODY}>\n                    <table\n                        id=\"table-node-info\"\n                        className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\n                        style={{ width: '100%' }}\n                    >\n                        <thead>\n                            <tr>\n                                <th style={{ width: '100px' }}>Property</th>\n                                <th>Value</th>\n                                <th style={{ width: '250px' }}>Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {Object.keys(letMapS).map(function (key) {\n                                return (\n                                    <tr key={key}>\n                                        <td>\n                                            <strong>{key}</strong>\n                                        </td>\n                                        <td style={{ width: '100%', whiteSpace: 'pre-wrap' }}>\n                                            {indent(letMapS[key])\n                                                .split('\\n')\n                                                .map((e) => {\n                                                    if (e.indexOf(' let') === -1) {\n                                                        return <span>{e + '\\n'}</span>;\n                                                    } else {\n                                                        return (\n                                                            <span\n                                                                onClick={() => {\n                                                                    const newLetMap = { ...letMapS };\n                                                                    const i = newLetMap[key].indexOf(\n                                                                        e.replace(/^\\s+|\\s+$/g, ''),\n                                                                    );\n                                                                    const l = newLetMap[key].slice(i).split(/[ |)]/)[0];\n                                                                    newLetMap[key] = newLetMap[key].replace(\n                                                                        l,\n                                                                        letMap[l],\n                                                                    );\n                                                                    setLetMapS(newLetMap);\n                                                                }}\n                                                            >\n                                                                {e + '\\n'}\n                                                            </span>\n                                                        );\n                                                    }\n                                                })}\n                                        </td>\n                                        <td style={{ width: '150px', display: 'flex', flexDirection: 'column' }}>\n                                            <Button\n                                                onClick={() => {\n                                                    const newLetMap = { ...letMapS };\n                                                    let i = newLetMap[key].indexOf('let');\n                                                    while (i !== -1) {\n                                                        const l = newLetMap[key].slice(i).split(/[ |)]/)[0];\n                                                        newLetMap[key] = newLetMap[key].replace(l, letMap[l]);\n                                                        i = newLetMap[key].indexOf('let');\n                                                    }\n                                                    setLetMapS(newLetMap);\n                                                }}\n                                                className=\"bp3-minimal\"\n                                                icon=\"translate\"\n                                                text=\"Expand\"\n                                            />\n                                            <Button\n                                                onClick={() => {\n                                                    const newLetMap = { ...letMapS };\n                                                    newLetMap[key] = letMap[key];\n                                                    setLetMapS(newLetMap);\n                                                }}\n                                                className=\"bp3-minimal\"\n                                                icon=\"undo\"\n                                                text=\"Revert\"\n                                            />\n                                        </td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </Drawer>\n    );\n};\n\nexport default VisualizerLetDrawer;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Alignment, Button, Icon, Navbar, Switch, Menu, MenuItem } from '@blueprintjs/core';\nimport { Popover2 } from '@blueprintjs/popover2';\n\nimport '../scss/VisualizerNavbar.scss';\nimport { VisualizerNavbarProps, stateInterface, proof } from './interfaces';\nimport VisualizerLetDrawer from './VisualizerLetDrawer';\n\nfunction useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: 0,\n        height: 0,\n    });\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            // Set window width/height to state\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n        // Add event listener\n        window.addEventListener('resize', handleResize);\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n        // Remove event listener on cleanup\n        return () => window.removeEventListener('resize', handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n}\n\nconst VisualizerNavbar: React.FC<VisualizerNavbarProps> = ({\n    setDialogIsOpen,\n    setDialogContent,\n}: VisualizerNavbarProps) => {\n    const openDialog = (content: string): void => {\n        setDialogIsOpen(true);\n        setDialogContent(content);\n    };\n    const proof = useSelector<stateInterface, proof>((state: stateInterface) => state.proofReducer.proof);\n    const darkTheme = useSelector<stateInterface, boolean>((state: stateInterface) => state.darkThemeReducer.darkTheme);\n    const letMap = useSelector<\n        stateInterface,\n        {\n            [Key: string]: string;\n        }\n    >((state: stateInterface) => state.letMapReducer.letMap);\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n    const windowSize = useWindowSize();\n\n    const dispatch = useDispatch();\n\n    const setDarkTheme = () => {\n        dispatch({ type: 'TOGGLE_DARK_THEME', payload: {} });\n    };\n\n    const setStyle = (style: string) => {\n        dispatch({ type: 'SET_STYLE', payload: style });\n    };\n\n    const changeView = (view: string) => {\n        switch (view) {\n            case 'basic':\n                dispatch({ type: 'BASIC_VIEW', payload: proof.dot });\n                break;\n            case 'propositional':\n                dispatch({ type: 'PROPOSITIONAL_VIEW', payload: proof.dot });\n                break;\n            case 'full':\n                dispatch({ type: 'FULL_VIEW', payload: proof.dot });\n                break;\n            default:\n        }\n        dispatch({ type: 'SET_DOT', payload: '' });\n        setTimeout(function () {\n            dispatch({ type: 'SET_DOT', payload: proof.dot });\n        }, 10);\n    };\n\n    const styleMenu = (\n        <Menu>\n            <MenuItem\n                icon=\"diagram-tree\"\n                text=\"Tree\"\n                onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                    e.preventDefault();\n                    setStyle('tree');\n                }}\n            />\n            <MenuItem\n                icon=\"folder-open\"\n                text=\"Directory\"\n                onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                    e.preventDefault();\n                    setStyle('directory');\n                }}\n            />\n        </Menu>\n    );\n\n    const viewsMenu = (\n        <Menu>\n            <MenuItem\n                text=\"Basic\"\n                onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                    e.preventDefault();\n                    changeView('basic');\n                }}\n            />\n            <MenuItem\n                text=\"Propositional\"\n                onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                    e.preventDefault();\n                    changeView('propositional');\n                }}\n            />\n            <MenuItem\n                text=\"Full\"\n                onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                    e.preventDefault();\n                    changeView('full');\n                }}\n            />\n        </Menu>\n    );\n    const exampleMenu = (\n        <Menu>\n            <MenuItem\n                icon=\"manually-entered-data\"\n                text=\"Problem\"\n                href={`data:attachment/text,${encodeURIComponent(proof.problem)}`}\n                download={proof.label ? `${proof.label.replaceAll(' ', '_')}.smt2` : null}\n            />\n            <MenuItem\n                icon=\"graph\"\n                text=\"Dot\"\n                href={`data:attachment/text,${encodeURIComponent(proof.dot ? proof.dot : '')}`}\n                download={proof.label ? `${proof.label.replaceAll(' ', '_')}.dot` : ''}\n            />\n            <MenuItem\n                icon=\"square\"\n                text=\"PNG\"\n                onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                    e.preventDefault();\n                    const link = document.createElement('a');\n                    link.download = proof.label ? `${proof.label.replaceAll(' ', '_')}.png` : '';\n                    link.href = (\n                        document.getElementsByClassName('konvajs-content')[0].children[0] as HTMLCanvasElement\n                    ).toDataURL('image/png');\n                    link.click();\n                }}\n            />\n        </Menu>\n    );\n    return (\n        <Navbar>\n            <Navbar.Group align={Alignment.LEFT}>\n                <Navbar.Heading>\n                    <b>{windowSize.width >= 900 ? 'Proof Visualizer' : 'PV'}</b>\n                </Navbar.Heading>\n                <Navbar.Divider />\n                <Button\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                        e.preventDefault();\n                        openDialog('upload-proof');\n                    }}\n                    className=\"bp3-minimal\"\n                    icon=\"upload\"\n                    text={windowSize.width >= 900 ? 'Upload Proof' : ''}\n                />\n            </Navbar.Group>\n\n            <Navbar.Group align={Alignment.RIGHT}>\n                {proof.label ? (\n                    <>\n                        <Navbar.Heading>{proof.label}</Navbar.Heading>\n                        <Navbar.Divider />\n                        <Popover2\n                            content={proof.label ? styleMenu : undefined}\n                            placement=\"bottom-end\"\n                            disabled={proof.label ? false : true}\n                        >\n                            <Button\n                                icon=\"presentation\"\n                                className=\"bp3-minimal\"\n                                text={windowSize.width >= 900 ? 'Style' : ''}\n                                disabled={proof.label ? false : true}\n                            />\n                        </Popover2>\n                        <Popover2\n                            content={proof.label ? viewsMenu : undefined}\n                            placement=\"bottom-end\"\n                            disabled={proof.label ? false : true}\n                        >\n                            <Button\n                                className=\"bp3-minimal\"\n                                icon=\"diagram-tree\"\n                                text={windowSize.width >= 900 ? 'View' : ''}\n                                disabled={proof.label ? false : true}\n                            />\n                        </Popover2>\n                        <Button\n                            className=\"bp3-minimal\"\n                            icon=\"translate\"\n                            text={windowSize.width >= 900 ? 'Let Map' : ''}\n                            disabled={proof.label ? false : true}\n                            onClick={() => setDrawerIsOpen(true)}\n                        />\n                        <Popover2\n                            content={proof.label ? exampleMenu : undefined}\n                            placement=\"bottom-end\"\n                            disabled={proof.label ? false : true}\n                        >\n                            <Button\n                                className=\"bp3-minimal\"\n                                icon=\"download\"\n                                text={windowSize.width >= 900 ? 'Download' : ''}\n                                disabled={proof.label ? false : true}\n                            />\n                        </Popover2>\n                        <Navbar.Divider />\n                    </>\n                ) : null}\n\n                <span id=\"switch-button-dark-theme\">\n                    <Switch checked={darkTheme} onChange={() => setDarkTheme()} />\n                    <Icon icon={darkTheme ? 'moon' : 'flash'}></Icon>\n                </span>\n            </Navbar.Group>\n            {drawerIsOpen ? (\n                <VisualizerLetDrawer letMap={letMap} drawerIsOpen={drawerIsOpen} setDrawerIsOpen={setDrawerIsOpen} />\n            ) : null}\n        </Navbar>\n    );\n};\n\nexport default VisualizerNavbar;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Button, Classes, Dialog, FileInput, Intent, Spinner } from '@blueprintjs/core';\nimport { Icon } from '@blueprintjs/core/lib/esm/components/icon/icon';\n\nimport '../scss/VisualizerDialog.scss';\nimport { proof, VisualizerDialogProps, DialogProps, stateInterface } from './interfaces';\n\nconst readUploadedFileAsText = (inputFile: File) => {\n    const temporaryFileReader = new FileReader();\n\n    return new Promise((resolve, reject) => {\n        temporaryFileReader.onerror = () => {\n            temporaryFileReader.abort();\n            reject(new DOMException('Problem parsing input file.'));\n        };\n\n        temporaryFileReader.onload = () => {\n            resolve(temporaryFileReader.result);\n        };\n        temporaryFileReader.readAsText(inputFile);\n    });\n};\n\nconst VisualizerDialog: React.FC<VisualizerDialogProps> = ({\n    dialogIsOpen,\n    dialogContent,\n    setDialogContent,\n    setDialogIsOpen,\n    addErrorToast,\n}: VisualizerDialogProps) => {\n    const darkTheme = useSelector<stateInterface, boolean>((state: stateInterface) => state.darkThemeReducer.darkTheme);\n\n    let dialogProps: DialogProps = { icon: 'error', title: 'Error' };\n    let dialogBody = <p>This wasn&apos;t supposed to happen. Please contact the developers.</p>;\n    let succesButton = <></>;\n\n    const [proof, setProof] = useState<proof>({ _id: undefined, label: '', options: '', problem: '' });\n    const [processingProof, setProcessingProof] = useState(false);\n    const [proofProcessed, setProofProcessed] = useState(false);\n    const [fileName, changeFileName] = useState('Choose file...');\n    const [file, changeFile] = useState('');\n    const dispatch = useDispatch();\n\n    switch (dialogContent) {\n        case 'welcome':\n            dialogProps = { icon: 'graph', title: 'Welcome' };\n            dialogBody = (\n                <div className=\"welcome-menu\">\n                    <h2>Welcome to Proof Visualizer</h2>\n                    <p>You can upload the DOT file of your proof.</p>\n                    <Button\n                        style={{ width: '155px' }}\n                        icon=\"upload\"\n                        large\n                        text=\"Upload proof\"\n                        onClick={() => setDialogContent('upload-proof')}\n                    />\n                </div>\n            );\n            break;\n        case 'upload-proof':\n            dialogProps = { icon: 'upload', title: 'Upload Proof' };\n            dialogBody = proofProcessed ? (\n                <div style={{ textAlign: 'center', height: '200px', paddingTop: 50 }}>\n                    <Icon icon=\"tick\" intent={Intent.SUCCESS} iconSize={40}></Icon>\n                    <br></br>\n                    <br></br>\n                    <p>Your proof is ready to be visualized!</p>\n                </div>\n            ) : processingProof ? (\n                <div style={{ textAlign: 'center', height: '200px', paddingTop: 50 }}>\n                    <p>Processing your proof...</p>\n                    <Spinner size={30} />\n                </div>\n            ) : (\n                <FileInput\n                    text={fileName}\n                    hasSelection={fileName !== 'Choose file...'}\n                    onInputChange={async (e) => {\n                        const file = (e as any).target.files[0];\n                        if (\n                            (e as any).target.files[0] &&\n                            (e as any).target.files[0].name.split('.').slice(-1)[0] !== 'dot'\n                        ) {\n                            addErrorToast('Sorry! Our app only support DOT files.');\n                            return;\n                        }\n                        try {\n                            const fileContents = await readUploadedFileAsText(file);\n                            changeFile(fileContents as string);\n                            setProof({\n                                _id: undefined,\n                                label: (e as any).target.files[0].name.split('.')[0],\n                                options: '',\n                                problem: '',\n                            });\n                        } catch (er) {\n                            addErrorToast(er.message);\n                        }\n                        changeFileName((e as any).target.files[0].name);\n                    }}\n                    fill={true}\n                />\n            );\n            succesButton = !proofProcessed ? (\n                <Button\n                    onClick={() => {\n                        dispatch({ type: 'SET_PROOF', payload: proof });\n                        setProcessingProof(true);\n                        dispatch({ type: 'SET_DOT', payload: file });\n                        setProofProcessed(true);\n                    }}\n                    intent={Intent.SUCCESS}\n                    disabled={fileName === 'Choose file...'}\n                >\n                    Upload Proof\n                </Button>\n            ) : (\n                <></>\n            );\n            break;\n    }\n\n    return (\n        <>\n            <Dialog\n                className={darkTheme ? ' bp3-dark' : ''}\n                isOpen={dialogIsOpen}\n                onClose={(): void => {\n                    setProof({ label: '', options: '', problem: '' });\n                    setProcessingProof(false);\n                    setProofProcessed(false);\n                    setDialogIsOpen(false);\n                    changeFileName('Choose file...');\n                    changeFile('');\n                }}\n                usePortal={true}\n                {...dialogProps}\n            >\n                <div className={Classes.DIALOG_BODY + ' dialog-body'}>{dialogBody}</div>\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <Button\n                            onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                                e.preventDefault();\n                                setDialogIsOpen(false);\n                                setProof({ label: '', options: '', problem: '' });\n                                setProcessingProof(false);\n                                setProofProcessed(false);\n                                setDialogIsOpen(false);\n                                changeFileName('Choose file...');\n                                changeFile('');\n                            }}\n                        >\n                            Close\n                        </Button>\n                        {succesButton}\n                    </div>\n                </div>\n            </Dialog>\n        </>\n    );\n};\n\nexport default VisualizerDialog;\n","import React from 'react';\nimport { Label, Text, Tag, Group } from 'react-konva';\n\nimport { NodeProps } from '../interfaces';\n\nfunction textColorFromBg(bgColor: string) {\n    const color = bgColor.charAt(0) === '#' ? bgColor.substring(1, 7) : bgColor;\n    const r = parseInt(color.substring(0, 2), 16);\n    const g = parseInt(color.substring(2, 4), 16);\n    const b = parseInt(color.substring(4, 6), 16);\n    return r * 0.299 + g * 0.587 + b * 0.114 > 150 ? '#000000' : '#ffffff';\n}\n\nexport default class Node extends React.Component<NodeProps> {\n    render(): JSX.Element {\n        const {\n            rule,\n            conclusion,\n            args,\n            id,\n            x,\n            y,\n            selected,\n            nHided,\n            nDescendants,\n            topHidedNodes,\n            color,\n            setNodeOnFocus,\n            updateNodeState,\n            toggleNodeSelection,\n            openDrawer,\n            tree,\n        } = this.props;\n\n        const bgColor = color;\n\n        const tagProps = {\n            fill: bgColor,\n            stroke: selected ? 'red' : 'black',\n            strokeWidth: selected ? 3 : 1,\n        };\n        const textProps = {\n            align: 'center',\n            fill: textColorFromBg(bgColor),\n            fontSize: 15,\n            height: 35,\n            padding: 10,\n            width: 300,\n        };\n        const nHidedStr = nHided\n            ? '#hidden: ' + '[' + (topHidedNodes ? topHidedNodes.map((node) => node[4]).join(', ') : '') + ']'\n            : '';\n        const nDescendantsStr =\n            ' #descendants: ' +\n            (rule !== 'π'\n                ? nDescendants\n                : '[' + (topHidedNodes ? topHidedNodes.map((node) => node[3]).join(', ') : '') + ']');\n        return (\n            <Group\n                draggable\n                id={id.toString()}\n                key={id}\n                onDragMove={(e) => {\n                    updateNodeState(id, e.target.attrs.x, e.target.attrs.y);\n                }}\n                x={x}\n                y={y}\n                onClick={(e) => {\n                    if (e.evt.button === 0) {\n                        if (e.evt.shiftKey) {\n                            toggleNodeSelection(id);\n                        } else {\n                            openDrawer(\n                                {\n                                    rule: rule,\n                                    args: args,\n                                    conclusion: conclusion,\n                                    nHided: nHided,\n                                    nDescendants: nDescendants - (rule === 'π' ? nHided : 0),\n                                    topHidedNodes: topHidedNodes,\n                                },\n                                tree,\n                            );\n                        }\n                    } else if (e.evt.button === 2) {\n                        setNodeOnFocus(id);\n                        const menuNode = document.getElementById('menu');\n                        if (menuNode) {\n                            menuNode.style.top = `${e.evt.clientY}px`;\n                            menuNode.style.left = `${e.evt.clientX}px`;\n                            menuNode.style.display = 'initial';\n                            window.addEventListener('click', () => {\n                                menuNode.style.display = 'none';\n                            });\n                        }\n                    }\n                }}\n            >\n                <Label x={0} y={0}>\n                    <Tag {...tagProps} />\n                    <Text\n                        {...textProps}\n                        text={\n                            conclusion +\n                            (conclusion === '∴' && topHidedNodes\n                                ? '[' + topHidedNodes.map((e) => e[2].trim()).join(',') + ']'\n                                : '')\n                        }\n                    />\n                </Label>\n                <Label x={0} y={35}>\n                    <Tag {...tagProps} />\n                    <Text\n                        {...textProps}\n                        text={\n                            rule +\n                            (rule === 'π' && topHidedNodes\n                                ? '[' + topHidedNodes.map((e) => e[1].trim()).join(',') + ']'\n                                : '')\n                        }\n                    />\n                </Label>\n                <Label x={0} y={70}>\n                    <Tag {...tagProps} />\n                    <Text {...textProps} text={nHidedStr + nDescendantsStr} />\n                </Label>\n            </Group>\n        );\n    }\n}\n","import React from 'react';\nimport { Arrow } from 'react-konva';\n\nimport { LineProps } from '../interfaces';\n\nconst Line = ({ key, points }: LineProps): JSX.Element => {\n    return <Arrow key={key} strokeWidth={1} stroke=\"black\" fill=\"black\" points={[...points]} />;\n};\n\nexport default Line;\n","import React from 'react';\n\nconst Menu = ({\n    unfold,\n    foldSelectedNodes,\n    foldAllDescendants,\n    changeNodeColor,\n    options,\n}: {\n    unfold: () => void;\n    foldSelectedNodes: () => void;\n    foldAllDescendants: () => void;\n    changeNodeColor: (color: string) => void;\n    options: { unfold: boolean; foldSelected: boolean; foldAllDescendants: boolean };\n}): JSX.Element => {\n    return (\n        <div className=\"bp3-popover2-content\">\n            <ul id=\"menu\" className=\"bp3-menu\">\n                {options.unfold ? (\n                    <li className=\"\">\n                        <a className=\"bp3-menu-item\" onClick={() => unfold()}>\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-open\">\n                                <span> Unfold</span>\n                            </div>\n                        </a>\n                    </li>\n                ) : null}\n                {options.foldSelected ? (\n                    <li className=\"\">\n                        <a className=\"bp3-menu-item\" onClick={() => foldSelectedNodes()}>\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\n                                <span> Fold selected nodes</span>\n                            </div>\n                        </a>\n                    </li>\n                ) : null}\n                {options.foldAllDescendants ? (\n                    <li className=\"\">\n                        <a className=\"bp3-menu-item\" onClick={() => foldAllDescendants()}>\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\n                                <span> Fold all descendants</span>\n                            </div>\n                        </a>\n                    </li>\n                ) : null}\n                <li className=\"\">\n                    <a className=\"bp3-menu-item\">\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\n                            <span>\n                                <span onClick={() => changeNodeColor('#f72b34')}> 🟥</span>\n                                <span onClick={() => changeNodeColor('#ff8334')}> 🟧</span>\n                                <span onClick={() => changeNodeColor('#ffc149')}> 🟨</span>\n                                <span onClick={() => changeNodeColor('#60aa51')}> 🟩</span>\n                                <span onClick={() => changeNodeColor('#0097e4')}> 🟦</span>\n                                <span onClick={() => changeNodeColor('#a73da5')}> 🟪</span>\n                                <span onClick={() => changeNodeColor('#a95a49')}> 🟫</span>\n                                <span onClick={() => changeNodeColor('#464646')}> ⬛</span>\n                                <span onClick={() => changeNodeColor('#f0f0f0')}> ⬜</span>\n                            </span>\n                        </div>\n                    </a>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default Menu;\n","import React, { Component } from 'react';\nimport { Stage, Layer } from 'react-konva';\nimport Konva from 'konva';\nimport dagre from 'dagre';\nimport Node from './VisualizerNode';\nimport Line from './VisualizerLine';\nimport Menu from './VisualizerMenu';\n\nimport { NodeInterface, NodeProps, LineProps } from '../interfaces';\n\nimport '../../scss/VisualizerCanvas.scss';\n\nimport { CanvasProps, CanvasState } from '../interfaces';\n\nfunction handleWheel(e: Konva.KonvaEventObject<WheelEvent>): { stageScale: number; stageX: number; stageY: number } {\n    e.evt.preventDefault();\n\n    const scaleBy = 1.08;\n    const stage = e.target.getStage();\n    if (stage) {\n        const oldScale = stage.scaleX();\n        const pointerPosition = stage.getPointerPosition();\n        let x, y;\n\n        if (pointerPosition) {\n            [x, y] = [pointerPosition.x, pointerPosition.y];\n        } else {\n            [x, y] = [0, 0];\n        }\n\n        const mousePointTo = {\n            x: x / oldScale - stage.x() / oldScale,\n            y: y / oldScale - stage.y() / oldScale,\n        };\n\n        const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\n\n        return {\n            stageScale: newScale,\n            stageX: -(mousePointTo.x - x / newScale) * newScale,\n            stageY: -(mousePointTo.y - y / newScale) * newScale,\n        };\n    }\n    return {\n        stageScale: 1,\n        stageX: 0,\n        stageY: 0,\n    };\n}\n\nexport default class Canvas extends Component<CanvasProps, CanvasState> {\n    constructor(props: CanvasProps) {\n        super(props);\n\n        const { proofNodes } = this.props;\n        this.state = {\n            canvasSize: {\n                width: 520,\n                height: 300,\n            },\n            stage: {\n                stageScale: 1,\n                stageX: 0,\n                stageY: 0,\n            },\n            proofNodes,\n            showingNodes: {},\n            showingEdges: {},\n            nodeOnFocus: NaN,\n            nodesSelected: [],\n        };\n    }\n\n    componentDidMount(): void {\n        const { showingNodes, proofNodes } = this.state;\n        const { view } = this.props;\n\n        this.applyView(view);\n\n        this.updatePosition(0);\n        showingNodes[0] = new Node(this.nodeProps(proofNodes[0]));\n        this.addNodes(0);\n\n        const [width, height] = [window.innerWidth, window.innerHeight - 50];\n\n        this.setState({\n            showingNodes,\n            canvasSize: {\n                width,\n                height,\n            },\n            stage: {\n                stageScale: 1,\n                stageX: width / 2 - (showingNodes[0].props.x + 300 / 2),\n                stageY: height / 10 - (showingNodes[0].props.y + 30 / 2),\n            },\n        });\n    }\n\n    applyView = (view: string | undefined): void => {\n        const { proofNodes } = this.state;\n        const nodesToHide = proofNodes.filter((node) => {\n            switch (view) {\n                case 'basic':\n                    return node.views.indexOf('basic') === -1;\n                case 'propositional':\n                    return node.views.indexOf('basic') === -1 && node.views.indexOf('propositional') === -1;\n                default:\n                    return false;\n            }\n        });\n        nodesToHide.forEach((node) => {\n            if (!(proofNodes[node.id].rule === 'π' || node.id === 0)) {\n                this.hideNode(node.id);\n            }\n        });\n    };\n\n    foldSelectedNodes = (): void => {\n        const { proofNodes, nodesSelected, showingNodes } = this.state;\n        this.removeNodes(0);\n        nodesSelected\n            .sort((a, b) => b - a)\n            .forEach((nodeId) => {\n                if (!(proofNodes[nodeId].rule === 'π' || nodeId === 0)) {\n                    this.hideNode(nodeId);\n                }\n            });\n        this.updatePosition(0);\n        showingNodes[0] = new Node({ ...showingNodes[0].props, selected: false });\n        this.addNodes(0);\n        this.setState({ nodesSelected: [] });\n    };\n\n    unfold = (): void => {\n        const { proofNodes, nodeOnFocus } = this.state;\n        this.removeNodes(0);\n        const nodesToUnhide = [...proofNodes[nodeOnFocus].hidedNodes];\n        nodesToUnhide.forEach((nodeId) => this.unhideNode(nodeId));\n        this.updatePosition(0);\n        this.addNodes(0);\n        this.setNodeOnFocus(0);\n        this.setState({ nodesSelected: [] });\n    };\n\n    unfoldOnClick = (id: number): void => {\n        this.setNodeOnFocus(id);\n        setTimeout(() => this.unfold(), 10);\n    };\n\n    nodeProps = (node: NodeInterface): NodeProps => {\n        const { openDrawer } = this.props;\n        return {\n            id: node.id,\n            rule: node.rule,\n            conclusion: node.conclusion,\n            args: node.args,\n            updateNodeState: this.updateNodeState,\n            setNodeOnFocus: this.setNodeOnFocus,\n            toggleNodeSelection: this.toggleNodeSelection,\n            unfoldOnClick: this.unfoldOnClick,\n            openDrawer: openDrawer,\n            color: '#8d99ae',\n            x: node.x,\n            y: node.y,\n            selected: false,\n            nHided: node.hidedNodes.length,\n            nDescendants: node.descendants,\n            topHidedNodes: node.topHidedNodes ? node.topHidedNodes : undefined,\n            tree: node.tree ? node.tree : null,\n        };\n    };\n\n    toggleNodeSelection = (id: number): void => {\n        const { showingNodes } = this.state;\n        let { nodesSelected } = this.state;\n        if (showingNodes[id].props.selected) {\n            showingNodes[id] = new Node({ ...showingNodes[id].props, selected: false });\n            nodesSelected = nodesSelected.filter((nodeId) => nodeId !== id);\n        } else {\n            showingNodes[id] = new Node({ ...showingNodes[id].props, selected: true });\n            nodesSelected.push(id);\n        }\n        this.setState({ showingNodes, nodesSelected });\n    };\n\n    setNodeOnFocus = (id: number): void => {\n        this.setState({ nodeOnFocus: id });\n    };\n\n    LineProps = (key: string, from: NodeProps, to: NodeProps): LineProps => ({\n        key,\n        points: [from.x + 150, from.y, to.x + 150, to.y + 105],\n    });\n\n    addNodes = (id: number): void => {\n        const { proofNodes, showingNodes } = this.state;\n        proofNodes[id].children.forEach((child) => {\n            this.addNode(proofNodes[child], proofNodes[id]);\n            this.addNodes(child);\n        });\n        this.setState({ proofNodes, showingNodes });\n    };\n\n    addNode = (node: NodeInterface, parent: NodeInterface): void => {\n        const { showingNodes, showingEdges } = this.state;\n\n        showingNodes[node.id] = new Node(this.nodeProps(node));\n        showingEdges[`${node.id}->${parent.id}`] = Line(\n            this.LineProps(`${node.id}->${parent.id}`, showingNodes[node.id].props, showingNodes[parent.id].props),\n        );\n    };\n\n    removeNodes = (id: number): void => {\n        const { proofNodes, showingNodes } = this.state;\n        this.recursivelyGetChildren(id).forEach((node) => {\n            this.removeNode(node);\n        });\n        this.setState({ showingNodes, proofNodes });\n    };\n\n    removeNode = (id: number): void => {\n        const { showingNodes, showingEdges } = this.state;\n        Object.keys(showingEdges)\n            .filter((edgeKey) => {\n                const edges = edgeKey.split('->');\n                return id === parseInt(edges[0]) || id === parseInt(edges[1]);\n            })\n            .forEach((edge) => {\n                delete showingEdges[edge];\n            });\n\n        delete showingNodes[id];\n        this.setState({ showingNodes, showingEdges });\n    };\n\n    ancestors = (id: number): Array<number> => {\n        const { proofNodes } = this.state;\n        const ancestorsId: Array<number> = [];\n        let currentId = id;\n        while (currentId) {\n            currentId = proofNodes[currentId].parent;\n            ancestorsId.push(currentId);\n        }\n        return ancestorsId;\n    };\n\n    hideNode = (id: number): void => {\n        const { proofNodes } = this.state;\n        const parentId = proofNodes[id].parent;\n        let piId: number;\n        if (parentId && proofNodes[parentId].hided) {\n            // if the parent node is hided in some node\n            piId = proofNodes[parentId].hidedIn;\n            proofNodes[piId].children.push(...proofNodes[id].children);\n            proofNodes[piId].children = proofNodes[piId].children.filter((nodeId) => nodeId !== id);\n            if (proofNodes[piId].topHidedNodes) {\n                proofNodes[piId].topHidedNodes = proofNodes[piId].topHidedNodes?.map((node) => {\n                    if (this.ancestors(id).indexOf(node[0]) !== -1)\n                        return [node[0], node[1], node[2], node[3], node[4] + 1];\n                    return node;\n                });\n            }\n        } else if (parentId && proofNodes[parentId].hideMyChildNode) {\n            // if the parent node has some node as child that hides node\n            piId = proofNodes[parentId].hideMyChildNode;\n            let nH: number | undefined = 1,\n                nD: number | undefined = 0;\n            if (proofNodes[id].children.length === 1 && proofNodes[proofNodes[id].children[0]].rule === 'π') {\n                proofNodes[proofNodes[id].children[0]].hidedNodes.forEach(\n                    (child) => (proofNodes[child].hidedIn = piId),\n                );\n                proofNodes[piId].hidedNodes.push(...proofNodes[proofNodes[id].children[0]].hidedNodes);\n                nD = proofNodes[proofNodes[id].children[0]].topHidedNodes?.reduce(\n                    (accumulator, node) => accumulator + node[3],\n                    0,\n                );\n                nH = proofNodes[proofNodes[id].children[0]].topHidedNodes?.reduce(\n                    (accumulator, node) => accumulator + node[4],\n                    0,\n                );\n                delete proofNodes[proofNodes[id].children[0]];\n                proofNodes[id].children = [];\n                proofNodes[id].hideMyChildNode = NaN;\n            }\n            proofNodes[piId].children.push(...proofNodes[id].children);\n            proofNodes[piId].topHidedNodes?.push([\n                id,\n                proofNodes[id].rule,\n                proofNodes[id].conclusion,\n                nD ? nD : 0,\n                nH ? nH : 0,\n            ]);\n            proofNodes[piId].descendants = nD ? nD : 0;\n            proofNodes[piId].hidedIn = nH ? nH : 0;\n        } else if (proofNodes[id].children.length === 1 && proofNodes[proofNodes[id].children[0]].rule === 'π') {\n            piId = proofNodes[id].children[0];\n            proofNodes[id].children = [];\n            proofNodes[parentId].children.push(piId);\n            proofNodes[parentId].hideMyChildNode = piId;\n            proofNodes[piId].parent = parentId;\n            proofNodes[piId].replace = id;\n            proofNodes[piId].descendants = proofNodes[id].descendants;\n            const nD = proofNodes[piId].topHidedNodes?.reduce((accumulator, node) => accumulator + node[3], 0);\n            const nH = proofNodes[piId].topHidedNodes?.reduce((accumulator, node) => accumulator + node[4], 0);\n            proofNodes[piId].topHidedNodes = [\n                [id, proofNodes[id].rule, proofNodes[id].conclusion, nD ? nD : 0, nH ? nH + 1 : 0],\n            ];\n        } else {\n            piId = proofNodes.length;\n            proofNodes[piId] = {\n                id: piId,\n                conclusion: '∴',\n                rule: 'π',\n                args: '',\n                children: [...proofNodes[id].children],\n                x: NaN,\n                y: NaN,\n                parent: parentId,\n                hided: false,\n                hidedNodes: [],\n                views: [],\n                hideMyChildNode: NaN,\n                hidedIn: NaN,\n                positionCache: false,\n                replace: id,\n                descendants: 0,\n                topHidedNodes: [[id, proofNodes[id].rule, proofNodes[id].conclusion, proofNodes[id].descendants, 1]],\n                rank: proofNodes[parentId].rank + 1,\n            };\n            proofNodes[parentId].hideMyChildNode = piId;\n            proofNodes[parentId].children.push(piId);\n            proofNodes[piId].descendants = proofNodes[id].descendants;\n        }\n        proofNodes[piId].hidedNodes.push(id);\n        proofNodes[id].hided = true;\n        proofNodes[id].hidedIn = piId;\n        proofNodes[parentId].children = proofNodes[parentId].children.filter((nodeId) => nodeId !== id);\n        proofNodes[id].hideMyChildNode = NaN;\n        const tree = this.hiddenNodesTree(\n            proofNodes[piId].hidedNodes\n                .sort((a, b) => a - b)\n                .map((nodeId) => {\n                    return {\n                        id: nodeId,\n                        icon: 'graph',\n                        parentId: proofNodes[nodeId].parent,\n                        label: proofNodes[nodeId].rule + ' => ' + proofNodes[nodeId].conclusion,\n                        descendants: proofNodes[nodeId].descendants,\n                        childNodes: [],\n                        rule: proofNodes[nodeId].rule,\n                        conclusion: proofNodes[nodeId].conclusion,\n                        args: proofNodes[nodeId].args,\n                    };\n                }),\n        );\n        proofNodes[piId].tree = tree;\n        this.setState({ proofNodes });\n    };\n\n    hiddenNodesTree = (list: any): any => {\n        const map: any = {},\n            roots: any = [];\n        let node, i;\n\n        for (i = 0; i < list.length; i += 1) {\n            map[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== NaN && list[map[node.parentId]]) {\n                list[map[node.parentId]].childNodes.push(node);\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    };\n\n    unhideNode = (id: number): void => {\n        const { proofNodes } = this.state;\n        const parentId = proofNodes[id].parent;\n        const piId = proofNodes[id].hidedIn;\n        proofNodes[id].hided = false;\n        proofNodes[parentId].children.push(id);\n        proofNodes[piId].hidedNodes = proofNodes[piId].hidedNodes.filter((nodeId) => nodeId !== id);\n        proofNodes[piId].children = proofNodes[piId].children.filter(\n            (nodeId) => !proofNodes[id].children.some((child) => child === nodeId),\n        );\n        if (proofNodes[piId].hidedNodes.length === 0) {\n            proofNodes[proofNodes[piId].parent].children = proofNodes[proofNodes[piId].parent].children.filter(\n                (nodeId) => nodeId !== piId,\n            );\n            proofNodes[proofNodes[piId].parent].hideMyChildNode = NaN;\n            delete proofNodes[piId];\n        }\n    };\n\n    updatePosition = (id: number): void => {\n        const { proofNodes } = this.state;\n        const g = new dagre.graphlib.Graph();\n        g.setGraph({ rankdir: 'BT', ranker: 'tight-tree' });\n        g.setDefaultEdgeLabel(function () {\n            return {};\n        });\n        proofNodes.forEach((node) => {\n            if (!node.hided) {\n                if (node.rule !== 'π') {\n                    g.setNode(node.id.toString(), { width: 300, height: 130 });\n                    proofNodes[node.id].children.sort().forEach((child) => {\n                        if (proofNodes[child].rule !== 'π') g.setEdge(child.toString(), node.id.toString());\n                        else {\n                            const childNode = proofNodes[child];\n                            g.setEdge(\n                                (childNode.replace ? childNode.replace : childNode.id).toString(),\n                                node.id.toString(),\n                            );\n                        }\n                    });\n                } else {\n                    g.setNode((node.replace ? node.replace : node.id).toString(), { width: 300, height: 130 });\n                    proofNodes[node.id].children.forEach((child) => {\n                        g.setEdge(child.toString(), (node.replace ? node.replace : node.id).toString());\n                    });\n                }\n            }\n        });\n        dagre.layout(g);\n        const xOffset = g.node(id.toString()).x - (proofNodes[id].x ? proofNodes[id].x : 0);\n        const yOffset = g.node(id.toString()).y - (proofNodes[id].y ? proofNodes[id].y : 0);\n        g.nodes().forEach(function (v) {\n            const { x, y } = g.node(v);\n            if (!proofNodes[parseInt(v)].hided) {\n                proofNodes[parseInt(v)].x = x - xOffset;\n                proofNodes[parseInt(v)].y = y - yOffset;\n            } else {\n                proofNodes[proofNodes[parseInt(v)].hidedIn].x = x - xOffset;\n                proofNodes[proofNodes[parseInt(v)].hidedIn].y = y - yOffset;\n            }\n        });\n        this.setState({ proofNodes });\n    };\n\n    updateNodeState = (key: number, x: number, y: number): void => {\n        const { showingNodes, showingEdges, proofNodes } = this.state;\n        showingNodes[key] = new Node({ ...showingNodes[key].props, x, y });\n\n        proofNodes[key].positionCache = true;\n        proofNodes[key] = { ...proofNodes[key], x, y };\n\n        Object.keys(showingEdges)\n            .filter((edgeKey) => edgeKey.indexOf(key.toString()) !== -1)\n            .forEach((edge) => {\n                const [from, to] = edge.split('->').map((x) => parseInt(x));\n                showingEdges[edge] = Line(this.LineProps(edge, showingNodes[from].props, showingNodes[to].props));\n            });\n        this.setState({ showingNodes, showingEdges });\n    };\n\n    recursivelyGetChildren = (nodeId: number): Array<number> => {\n        const { proofNodes } = this.state;\n        let nodes: Array<number> = [];\n        proofNodes[nodeId].children.forEach((node) => {\n            nodes = nodes.concat([node]);\n            nodes = nodes.concat(this.recursivelyGetChildren(node));\n        });\n        return nodes;\n    };\n\n    foldAllDescendants = (): void => {\n        const { nodeOnFocus } = this.state;\n        this.setState({ nodesSelected: [nodeOnFocus, ...this.recursivelyGetChildren(nodeOnFocus)] }, () =>\n            this.foldSelectedNodes(),\n        );\n    };\n\n    changeNodeColor = (color: string): void => {\n        const { nodeOnFocus, showingNodes } = this.state;\n        showingNodes[nodeOnFocus] = new Node({ ...showingNodes[nodeOnFocus].props, color: color });\n        this.setState({ showingNodes });\n    };\n\n    render(): JSX.Element {\n        const { canvasSize, stage, showingNodes, showingEdges, nodesSelected, nodeOnFocus, proofNodes } = this.state;\n        return (\n            <>\n                <Menu\n                    unfold={this.unfold}\n                    foldSelectedNodes={this.foldSelectedNodes}\n                    foldAllDescendants={this.foldAllDescendants}\n                    changeNodeColor={this.changeNodeColor}\n                    options={{\n                        unfold: proofNodes[nodeOnFocus] ? proofNodes[nodeOnFocus].rule === 'π' : false,\n                        foldSelected: nodesSelected.length && nodesSelected.includes(nodeOnFocus) ? true : false,\n                        foldAllDescendants: proofNodes[nodeOnFocus] && proofNodes[nodeOnFocus].children.length > 0,\n                    }}\n                ></Menu>\n                <Stage\n                    draggable\n                    width={canvasSize.width}\n                    height={canvasSize.height}\n                    onWheel={(e) => this.setState({ stage: handleWheel(e) })}\n                    scaleX={stage.stageScale}\n                    scaleY={stage.stageScale}\n                    x={stage.stageX}\n                    y={stage.stageY}\n                    onContextMenu={(e) => e.evt.preventDefault()}\n                >\n                    <Layer>\n                        {Object.keys(showingEdges).length > 0 &&\n                            Object.keys(showingEdges).map(function (key) {\n                                return showingEdges[key];\n                            })}\n                        {Object.keys(showingNodes).length > 0 &&\n                            Object.keys(showingNodes).map(\n                                (value: string): JSX.Element => showingNodes[parseInt(value)].render(),\n                            )}\n                    </Layer>\n                </Stage>\n            </>\n        );\n    }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport * as React from 'react';\n\nimport { Classes, TreeNodeInfo, Tree } from '@blueprintjs/core';\n\nexport class VisualizerTree extends React.Component<\n    any,\n    { nodes: TreeNodeInfo[]; selected: number; originalNodeInfo: any }\n> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            nodes: props.content,\n            selected: NaN,\n            originalNodeInfo: props.originalNodeInfo,\n        };\n    }\n\n    componentDidUpdate(prevProps: any) {\n        if (this.props.content !== prevProps.content) {\n            this.setState({ nodes: this.props.content });\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div style={{ backgroundColor: this.props.darkTheme ? '#394b59' : 'white' }}>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    className={Classes.ELEVATION_0}\n                />\n            </div>\n        );\n    }\n\n    private handleNodeClick = (nodeData: any, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\n        const { setNodeInfo } = this.props;\n        setNodeInfo(\n            this.state.selected !== nodeData.id\n                ? {\n                      rule: nodeData.rule ? nodeData.rule : '',\n                      args: nodeData.args ? nodeData.args : '',\n                      conclusion: nodeData.conclusion ? nodeData.conclusion : '',\n                      nHided: 0,\n                      nDescendants: nodeData.descendants,\n                      topHidedNodes: undefined,\n                  }\n                : this.state.originalNodeInfo,\n        );\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, (n) => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState({ ...this.state, selected: this.state.selected === nodeData.id ? NaN : nodeData.id });\n    };\n\n    private handleNodeCollapse = (nodeData: TreeNodeInfo) => {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    };\n\n    private handleNodeExpand = (nodeData: TreeNodeInfo) => {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n    };\n\n    private forEachNode(nodes: TreeNodeInfo[], callback: (node: TreeNodeInfo) => void) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes ? node.childNodes : [], callback);\n        }\n    }\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Icon, Collapse, Pre, TreeNodeInfo } from '@blueprintjs/core';\nimport { VisualizerTree } from './VisualizerTree';\n\nimport { stateInterface } from './interfaces';\n\nimport '../scss/VisualizerDirectoryStyle.scss';\n\ninterface directoryStyleProps {\n    proofTree: TreeNodeInfo[];\n    ruleHelper: (s: string) => string;\n    ident: (s: string) => string;\n    translate: (s: string) => string;\n}\n\nconst VisualizerDirectoryStyle: React.FC<directoryStyleProps> = ({\n    proofTree,\n    ruleHelper,\n    ident,\n    translate,\n}: directoryStyleProps) => {\n    const darkTheme = useSelector<stateInterface, boolean>((state: stateInterface) => state.darkThemeReducer.darkTheme);\n    const [ruleHelperOpen, setRuleHelperOpen] = useState(false);\n    const [argsTranslatorOpen, setArgsTranslatorOpen] = useState(false);\n    const [conclusionTranslatorOpen, setConclusionTranslatorOpen] = useState(false);\n    const [nodeInfo, setNodeInfo] = useState<{\n        rule: string;\n        args: string;\n        conclusion: string;\n        nHided: number;\n        nDescendants: number;\n        topHidedNodes?: Array<[number, string, string, number, number]>;\n    }>({\n        rule: '',\n        args: '',\n        conclusion: '',\n        nHided: 0,\n        nDescendants: 0,\n        topHidedNodes: undefined,\n    });\n\n    return (\n        <div\n            style={{\n                backgroundColor: darkTheme ? 'rgb(57, 75, 89)' : 'white',\n                height:\n                    window.innerHeight - (document.getElementsByClassName('bp3-navbar')[0] as HTMLElement).offsetHeight,\n            }}\n        >\n            <div\n                style={{\n                    width: '50%',\n                    height: '100%',\n                    float: 'left',\n                    clear: 'none',\n                    borderRight: '1px solid black',\n                    overflow: 'auto',\n                }}\n            >\n                <VisualizerTree\n                    darkTheme={darkTheme}\n                    content={proofTree}\n                    setNodeInfo={setNodeInfo}\n                    originalNodeInfo={{\n                        rule: '',\n                        args: '',\n                        conclusion: '',\n                        nHided: 0,\n                        nDescendants: 0,\n                        topHidedNodes: undefined,\n                    }}\n                ></VisualizerTree>\n            </div>\n            <div\n                style={{\n                    width: '50%',\n                    height: '100%',\n                    float: 'left',\n                    clear: 'none',\n                }}\n            >\n                <table\n                    id=\"table-node-info\"\n                    className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\n                    style={{ width: '100%' }}\n                >\n                    <thead>\n                        <tr>\n                            <th>Property</th>\n                            <th>Value</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <strong>RULE </strong>{' '}\n                                <Icon\n                                    id=\"rule-icon\"\n                                    icon=\"help\"\n                                    onClick={() => {\n                                        setArgsTranslatorOpen(false);\n                                        setConclusionTranslatorOpen(false);\n                                        setRuleHelperOpen(!ruleHelperOpen);\n                                    }}\n                                ></Icon>\n                            </td>\n                            <td className=\"value\">\n                                {nodeInfo.rule}\n                                <Collapse isOpen={ruleHelperOpen}>\n                                    <Pre id=\"pre-rule\">{ruleHelper(nodeInfo.rule)}</Pre>\n                                </Collapse>\n                            </td>\n                        </tr>\n                        {nodeInfo.args ? (\n                            <tr>\n                                <td>\n                                    <strong>ARGS</strong>{' '}\n                                    {nodeInfo.args.indexOf('let') !== -1 ? (\n                                        <Icon\n                                            id=\"rule-icon\"\n                                            icon=\"translate\"\n                                            onClick={() => {\n                                                setRuleHelperOpen(false);\n                                                setConclusionTranslatorOpen(false);\n                                                setArgsTranslatorOpen(!argsTranslatorOpen);\n                                            }}\n                                        ></Icon>\n                                    ) : null}\n                                </td>\n                                <td className=\"value\">\n                                    {nodeInfo.args}\n                                    {nodeInfo.args.indexOf('let') !== -1 ? (\n                                        <Collapse isOpen={argsTranslatorOpen}>\n                                            <Pre id=\"pre-rule\">{ident(translate(nodeInfo.args))}</Pre>\n                                        </Collapse>\n                                    ) : null}\n                                </td>\n                            </tr>\n                        ) : null}\n                        <tr>\n                            <td>\n                                <strong>CONCLUSION</strong>{' '}\n                                {nodeInfo.conclusion.indexOf('let') !== -1 ? (\n                                    <Icon\n                                        id=\"rule-icon\"\n                                        icon=\"translate\"\n                                        onClick={() => {\n                                            setRuleHelperOpen(false);\n                                            setArgsTranslatorOpen(false);\n                                            setConclusionTranslatorOpen(!conclusionTranslatorOpen);\n                                        }}\n                                    ></Icon>\n                                ) : null}\n                            </td>\n                            <td className=\"value\">\n                                {nodeInfo.conclusion}\n                                {nodeInfo.conclusion.indexOf('let') !== -1 ? (\n                                    <Collapse isOpen={conclusionTranslatorOpen}>\n                                        <Pre id=\"pre-rule\">{ident(translate(nodeInfo.conclusion))}</Pre>\n                                    </Collapse>\n                                ) : null}\n                            </td>\n                        </tr>\n                        {!nodeInfo.topHidedNodes ? (\n                            <tr>\n                                <td>\n                                    <strong>#DESCENDANTS</strong>\n                                </td>\n                                <td>{nodeInfo.nDescendants}</td>\n                            </tr>\n                        ) : (\n                            <tr>\n                                <td>\n                                    <strong>#DESCENDANTS</strong>\n                                </td>\n                                <td>[{nodeInfo.topHidedNodes.map((node) => node[3]).join(', ')}]</td>\n                            </tr>\n                        )}\n                        {nodeInfo.nHided ? (\n                            <tr>\n                                <td>\n                                    <strong>#HIDDEN</strong>\n                                </td>\n                                <td>\n                                    [\n                                    {nodeInfo.topHidedNodes\n                                        ? nodeInfo.topHidedNodes.map((node) => node[4]).join(', ')\n                                        : ''}\n                                    ]\n                                </td>\n                            </tr>\n                        ) : null}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\nexport default VisualizerDirectoryStyle;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Drawer, Position, Classes, Icon, Collapse, Pre, TreeNodeInfo } from '@blueprintjs/core';\nimport Canvas from './canvas/VisualizerCanvas';\nimport { VisualizerTree } from './VisualizerTree';\nimport VisualizerDirectoryStyle from './VisualizerDirectoryStyle';\nimport { NodeInterface, stateInterface } from './interfaces';\n\nimport '../scss/VisualizerStage.scss';\n\nfunction removeEscapedCharacters(s: string): string {\n    let newS = '';\n    for (let i = 0; i < s.length; i += 1) {\n        if (\n            !(\n                s[i] === '\\\\' &&\n                (s[i + 1] === '\"' ||\n                    s[i + 1] === '>' ||\n                    s[i + 1] === '<' ||\n                    s[i + 1] === '{' ||\n                    s[i + 1] === '}' ||\n                    s[i + 1] === '|')\n            )\n        ) {\n            newS += s[i];\n        }\n    }\n\n    return newS;\n}\n\nfunction processDot(dot: string) {\n    const nodes: Array<NodeInterface> = [\n        {\n            id: 0,\n            conclusion: '',\n            rule: '',\n            args: '',\n            views: [],\n            children: [],\n            parent: NaN,\n            x: NaN,\n            y: NaN,\n            hideMyChildNode: NaN,\n            hided: false,\n            hidedNodes: [],\n            hidedIn: NaN,\n            positionCache: false,\n            descendants: 0,\n            rank: 0,\n        },\n    ];\n    dot = dot.split('\"}}\"\\n').join('\"}}\";\\n'); // Fix CVC5\n    let comment: any = dot.slice(dot.indexOf('comment='));\n    comment = comment ? comment.slice(comment.indexOf('=') + 2, comment.indexOf(';') - 1) : null;\n    if (comment) {\n        const dispatch = useDispatch();\n        dispatch({\n            type: 'SET_LET_MAP',\n            payload: JSON.parse(removeEscapedCharacters(removeEscapedCharacters(comment)))['letMap'],\n        });\n    }\n\n    const lines = dot\n        .slice(dot.indexOf('{') + 1, dot.lastIndexOf('}') - 2)\n        .replace(/(\\n|\\t)/gm, '')\n        .split(';');\n    lines.forEach((line) => {\n        if (line.search('label') !== -1) {\n            const id = parseInt(line.slice(0, line.indexOf('[')).trim());\n            let attributes = line.slice(line.indexOf('[') + 1, line.lastIndexOf(']')).trim();\n\n            let label = attributes.slice(attributes.search(/(?<!\\\\)\"/) + 2);\n            label = label.slice(0, label.search(/(?<!\\\\)\"/) - 1);\n            let [conclusion, rule, args] = ['', '', ''];\n            [conclusion, rule] = label.split(/(?<!\\\\)\\|/);\n            [rule, args] = rule.indexOf(':args') != -1 ? rule.split(':args') : [rule, ''];\n\n            attributes = attributes.slice(attributes.indexOf(', class = ') + ', class = '.length);\n            attributes = attributes.slice(attributes.indexOf('\"') + 1, attributes.slice(1).indexOf('\"') + 1);\n            const views = attributes.trim().split(' ');\n            const comment: string = line.slice(line.indexOf('comment'), line.lastIndexOf('\"'));\n            const commentJSON = JSON.parse(comment.slice(comment.indexOf('\"') + 1).replace(/'/g, '\"'));\n\n            if (!nodes[id]) {\n                nodes[id] = {\n                    id: id,\n                    conclusion: '',\n                    rule: '',\n                    args: '',\n                    views: [],\n                    children: [],\n                    parent: NaN,\n                    x: NaN,\n                    y: NaN,\n                    hideMyChildNode: NaN,\n                    hided: false,\n                    hidedNodes: [],\n                    hidedIn: NaN,\n                    positionCache: false,\n                    descendants: 0,\n                    rank: 0,\n                };\n            }\n            nodes[id].conclusion = removeEscapedCharacters(conclusion);\n            nodes[id].rule = removeEscapedCharacters(rule);\n            nodes[id].args = removeEscapedCharacters(args);\n            nodes[id].views = views;\n            nodes[id].descendants = commentJSON.subProofQty - 1;\n        } else if (line.search('->') !== -1) {\n            const [child, parent] = line.split('->').map((x) => parseInt(x.trim()));\n            nodes[parent].children.push(child);\n            if (!nodes[child]) {\n                nodes[child] = {\n                    id: child,\n                    conclusion: '',\n                    rule: '',\n                    args: '',\n                    views: [],\n                    children: [],\n                    parent: parent,\n                    x: NaN,\n                    y: NaN,\n                    hideMyChildNode: NaN,\n                    hided: false,\n                    hidedNodes: [],\n                    hidedIn: NaN,\n                    positionCache: false,\n                    descendants: 0,\n                    rank: nodes[parent].rank + 1,\n                };\n            }\n            nodes[child].parent = parent;\n            nodes[child].rank = nodes[parent].rank + 1;\n        }\n    });\n    return comment\n        ? [nodes, JSON.parse(removeEscapedCharacters(removeEscapedCharacters(comment)))['letMap']]\n        : [nodes, {}];\n}\n\nfunction ruleHelper(rule: string) {\n    switch (rule.split(' ')[0]) {\n        case 'π':\n            return 'This node hides some parts of the proof, you can unfold it.';\n        case 'ASSUME':\n            return (\n                rule +\n                '\\n\\n======== Assumption (a leaf)\\nChildren: none\\nArguments: (F)\\n--------------\\nConclusion: F\\n\\nThis rule has special status, in that an application of assume is an open leaf in a proof that is not (yet) justified. An assume leaf is analogous to a free variable in a term, where we say \"F is a free assumption in proof P\" if it contains an application of F that is not  bound by SCOPE.'\n            );\n        case 'SCOPE':\n            return (\n                rule +\n                '\\n\\n======== Scope (a binder for assumptions)\\nChildren: (P:F)\\nArguments: (F1, ..., Fn)\\n--------------\\nConclusion: (=> (and F1 ... Fn) F) or (not (and F1 ... Fn)) if F is false\\n\\nThis rule has a dual purpose with ASSUME. It is a way to close assumptions in a proof. We require that F1 ... Fn are free assumptions in P and say that F1, ..., Fn are not free in (SCOPE P). In other words, they are bound by this application. For example, the proof node: (SCOPE (ASSUME F) :args F) has the conclusion (=> F F) and has no free assumptions. More generally, a proof with no free assumptions always concludes a valid formula.'\n            );\n        case 'SUBS':\n            return (\n                rule +\n                '\\n\\n======== Substitution\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids)?)\\n---------------------------------------------------------------\\nConclusion: (= t t*sigma{ids}(Fn)*...*sigma{ids}(F1))\\nwhere sigma{ids}(Fi) are substitutions, which notice are applied in reverse order. Notice that ids is a MethodId identifier, which determines how to convert the formulas F1, ..., Fn into substitutions.'\n            );\n        case 'REWRITE':\n            return (\n                rule +\n                '\\n\\n======== Rewrite\\nChildren: none\\nArguments: (t, (idr)?)\\n----------------------------------------\\nConclusion: (= t Rewriter{idr}(t))\\nwhere idr is a MethodId identifier, which determines the kind of rewriter to apply, e.g. Rewriter::rewrite.'\n            );\n        case 'EVALUATE':\n            return (\n                rule +\n                '\\n\\n======== Evaluate\\nChildren: none\\n\\nArguments: (t)\\n----------------------------------------\\nConclusion: (= t Evaluator::evaluate(t))\\nNote this is equivalent to: (REWRITE t MethodId::RW_EVALUATE)'\n            );\n        case 'MACRO_SR_EQ_INTRO':\n            return (\n                rule +\n                \"\\n\\nIn this rule, we provide a term t and conclude that it is equal to its rewritten form under a (proven) substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: (= t t')\\nwhere t' is Rewriter{idr}(t*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nIn other words, from the point of view of Skolem forms, this rule transforms t to t' by standard substitution + rewriting.\\n\\nThe arguments ids, ida and idr are optional and specify the identifier of the substitution, the substitution application and rewriter respectively to be used.\"\n            );\n        case 'MACRO_SR_PRED_INTRO':\n            return (\n                rule +\n                \"\\n\\nIn this rule, we provide a formula F and conclude it, under the condition that it rewrites to true under a proven substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (F, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == true where ids and idr are method identifiers.\\n\\nMore generally, this rule also holds when: Rewriter::rewrite(toOriginal(F')) == true where F' is the result of the left hand side of the equality above. Here, notice that we apply rewriting on the original form of F', meaning that this rule may conclude an F whose Skolem form is justified by the definition of its (fresh) Skolem variables. For example, this rule may justify the conclusion (= k t) where k is the purification Skolem for t, e.g. where the original form of k is t.\\n\\nFurthermore, notice that the rewriting and substitution is applied only within the side condition, meaning the rewritten form of the original form of F does not escape this rule.\"\n            );\n        case 'MACRO_SR_PRED_ELIM':\n            return (\n                rule +\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may conclude its rewritten form under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: ((ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: F'\\nwhere F' is Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)). where ids and idr are method identifiers.\\n\\nWe rewrite only on the Skolem form of F, similar to MACRO_SR_EQ_INTRO.\"\n            );\n        case 'MACRO_SR_PRED_TRANSFORM':\n            return (\n                rule +\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may provide a formula G and conclude it if F and G are equivalent after rewriting under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: (G, (ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: G\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == Rewriter{idr}(G*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nMore generally, this rule also holds when:\\n  Rewriter::rewrite(toOriginal(F')) == Rewriter::rewrite(toOriginal(G'))\\nwhere F' and G' are the result of each side of the equation above. Here, original forms are used in a similar manner to MACRO_SR_PRED_INTRO above.\"\n            );\n        case 'REMOVE_TERM_FORMULA_AXIOM':\n            return (\n                rule +\n                '\\n\\n======== Remove Term Formulas Axiom\\nChildren: none\\nArguments: (t)\\n---------------------------------------------------------------\\nConclusion: RemoveTermFormulas::getAxiomFor(t).'\n            );\n        case 'THEORY_LEMMA':\n            return (\n                rule +\n                '\\n\\n======== Theory lemma\\nChildren: none\\nArguments: (F, tid)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a (T-valid) theory lemma generated by theory with TheoryId tid. This is a \"coarse-grained\" rule that is used as a placeholder if a theory did not provide a proof for a lemma or conflict.'\n            );\n        case 'THEORY_REWRITE':\n            return (\n                rule +\n                \"\\n\\n======== Theory Rewrite\\nChildren: none\\nArguments: (F, tid, rid)\\n----------------------------------------\\nConclusion: F\\nwhere F is an equality of the form (= t t') where t' is obtained by applying the kind of rewriting given by the method identifier rid, which is one of: { RW_REWRITE_THEORY_PRE, RW_REWRITE_THEORY_POST, RW_REWRITE_EQ_EXT } Notice that the checker for this rule does not replay the rewrite to ensure correctness, since theory rewriter methods are not static. For example, the quantifiers rewriter involves constructing new bound variables that are not guaranteed to be consistent on each call.\"\n            );\n        case 'PREPROCESS':\n            return (\n                rule +\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on some preprocessing pass, or otherwise F was added as a new assertion by some preprocessing pass.\"\n            );\n        case 'PREPROCESS_LEMMA':\n            return (\n                rule +\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by some preprocessing pass.'\n            );\n        case 'THEORY_PREPROCESS':\n            return (\n                rule +\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = Theory::ppRewrite(t) for some theory. Notice this is a \"trusted\" rule.'\n            );\n        case 'THEORY_PREPROCESS_LEMMA':\n            return (\n                rule +\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by theory preprocessing.'\n            );\n        case 'THEORY_EXPAND_DEF':\n            return (\n                rule +\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on theory expand definitions.\"\n            );\n        case 'WITNESS_AXIOM':\n            return (\n                rule +\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an existential (exists ((x T)) (P x)) used for introducing a witness term (witness ((x T)) (P x)).'\n            );\n        case 'TRUST_REWRITE':\n            return (\n                rule +\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of rewriting that could not be replayed during proof postprocessing.\"\n            );\n        case 'TRUST_SUBS':\n            return (\n                rule +\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be replayed during proof postprocessing.\"\n            );\n        case 'TRUST_SUBS_MAP':\n            return (\n                rule +\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be determined by the TrustSubstitutionMap. This inference may contain possibly multiple children corresponding to the formulas used to derive the substitution.\"\n            );\n        case 'TRUST_SUBS_EQ':\n            return (\n                rule +\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a solved equality of the form (= x t) derived as the solved form of F', where F' is given as a child.\"\n            );\n        case 'SAT_REFUTATION':\n            return (\n                rule +\n                '\\n\\n========= SAT Refutation for assumption-based unsat cores\\nChildren: (P1, ..., Pn)\\nArguments: none\\n---------------------\\nConclusion: false\\nNote: P1, ..., Pn correspond to the unsat core determined by the SAT solver.'\n            );\n        case 'RESOLUTION':\n            return (\n                rule +\n                \"\\n\\n======== Resolution\\nChildren:\\n(P1:C1, P2:C2)\\nArguments: (pol, L)\\n---------------------\\nConclusion: C\\nwhere\\n- C1 and C2 are nodes viewed as clauses, i.e., either an OR node with each children viewed as a literal or a node viewed as a literal. Note that an OR node could also be a literal.\\n- pol is either true or false, representing the polarity of the pivot on the first clause\\n- L is the pivot of the resolution, which occurs as is (resp. under a NOT) in C1 and negatively (as is) in C2 if pol = true (pol = false).\\nC is a clause resulting from collecting all the literals in C1, minus the first occurrence of the pivot or its negation, and C2, minus the first occurrence of the pivot or its negation, according to the policy above. If the resulting clause has a single literal, that literal itself is the result; if it has no literals, then the result is false; otherwise it's an OR node of the resulting literals.\\n\\nNote that it may be the case that the pivot does not occur in the clauses. In this case the rule is not unsound, but it does not correspond to resolution but rather to a weakening of the clause that did not have a literal eliminated.\"\n            );\n        case 'CHAIN_RESOLUTION':\n            return (\n                rule +\n                \"\\n\\n======== N-ary Resolution\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined above\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined above\\n- let C_1' = C_1 (from P1),\\n- for each i > 1, let C_i' = C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C = C_n'\"\n            );\n        case 'FACTORING':\n            return (\n                rule +\n                '\\n\\n======== Factoring\\nChildren: (P:C1)\\nArguments: ()\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 is the same and the number of literals in C2 is smaller than that of C1'\n            );\n        case 'REORDERING':\n            return (\n                rule +\n                '\\n\\n======== Reordering\\nChildren: (P:C1)\\nArguments: (C2)\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 are the same and the number of literals in C2 is the same of that of C1'\n            );\n        case 'MACRO_RESOLUTION':\n            return (\n                rule +\n                \"\\n\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\n            );\n        case 'MACRO_RESOLUTION_TRUST':\n            return (\n                rule +\n                \"\\n\\nAs MACRO_RESOLUTION but not checked\\n\\nMACRO_RESOLUTION definition:\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\n            );\n        default:\n            return rule;\n    }\n}\n\nconst createTree = (list: any): any => {\n    const map: any = {},\n        roots: any = [];\n    let node, i;\n\n    for (i = 0; i < list.length; i += 1) {\n        map[list[i].id] = i;\n        list[i].childNodes = [];\n    }\n\n    for (i = 0; i < list.length; i += 1) {\n        node = list[i];\n        if (node.parentId !== NaN && list[map[node.parentId]]) {\n            list[map[node.parentId]].childNodes.push(node);\n        } else {\n            roots.push(node);\n        }\n    }\n    return roots;\n};\n\nconst indent = (s: string) => {\n    let newS = s.replaceAll(' ', '\\n');\n    let i = 0;\n    let pCounter = 0;\n    while (i < newS.length) {\n        if (newS[i] === '(' || newS[i] === '[') pCounter++;\n        else if (newS[i] === ')' || newS[i] === ']') pCounter--;\n        else if (newS[i] === '\\n') {\n            if (newS[i + 1] === ')' || newS[i + 1] === ']') {\n                newS = [newS.slice(0, i + 1), '  '.repeat(pCounter - 1), newS.slice(i + 1)].join('');\n                i += pCounter - 1;\n            } else {\n                newS = [newS.slice(0, i + 1), '  '.repeat(pCounter), newS.slice(i + 1)].join('');\n                i += pCounter;\n            }\n        }\n        i++;\n    }\n    return newS;\n};\n\nconst VisualizerStage: React.FC = () => {\n    const dot = useSelector<stateInterface, string | undefined>((state) => state.proofReducer.proof.dot);\n    const view = useSelector<stateInterface, string | undefined>((state) => state.proofReducer.proof.view);\n    const style = useSelector<stateInterface, string | undefined>((state) => state.styleReducer.style);\n    const darkTheme = useSelector<stateInterface, boolean>((state: stateInterface) => state.darkThemeReducer.darkTheme);\n    const [proof, letMap] = processDot(dot ? dot : '');\n    const proofTree = createTree(\n        Array.from(Array(proof.length).keys()).map((nodeId) => {\n            return {\n                id: nodeId,\n                icon: 'graph',\n                parentId: proof[nodeId].parent,\n                label: proof[nodeId].rule + ' => ' + proof[nodeId].conclusion,\n                descendants: proof[nodeId].descendants,\n                childNodes: [],\n                rule: proof[nodeId].rule,\n                conclusion: proof[nodeId].conclusion,\n                args: proof[nodeId].args,\n            };\n        }),\n    );\n\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n    const [ruleHelperOpen, setRuleHelperOpen] = useState(false);\n    const [argsTranslatorOpen, setArgsTranslatorOpen] = useState(false);\n    const [conclusionTranslatorOpen, setConclusionTranslatorOpen] = useState(false);\n    const [nodeInfo, setNodeInfo] = useState<{\n        rule: string;\n        args: string;\n        conclusion: string;\n        nHided: number;\n        nDescendants: number;\n        topHidedNodes?: Array<[number, string, string, number, number]>;\n    }>({\n        rule: '',\n        args: '',\n        conclusion: '',\n        nHided: 0,\n        nDescendants: 0,\n        topHidedNodes: undefined,\n    });\n    const [nodeInfoCopy, setNodeInfoCopy] = useState<{\n        rule: string;\n        args: string;\n        conclusion: string;\n        nHided: number;\n        nDescendants: number;\n        topHidedNodes?: Array<[number, string, string, number, number]>;\n    }>({\n        rule: '',\n        args: '',\n        conclusion: '',\n        nHided: 0,\n        nDescendants: 0,\n        topHidedNodes: undefined,\n    });\n    const [tree, setTree] = useState<TreeNodeInfo[]>([]);\n    const translate = (s: string) => {\n        let newS = s;\n        let i = newS.indexOf('let');\n        while (i !== -1) {\n            const l = newS.slice(i).split(/[ |)|,]/)[0];\n            newS = newS.replace(l, letMap[l]);\n            i = newS.indexOf('let');\n        }\n        return newS;\n    };\n\n    const openDrawer = (\n        nodeInfo: {\n            rule: string;\n            args: string;\n            conclusion: string;\n            nHided: number;\n            nDescendants: number;\n            topHidedNodes?: Array<[number, string, string, number, number]>;\n        },\n        tree?: TreeNodeInfo[],\n    ) => {\n        setRuleHelperOpen(false);\n        setNodeInfo(nodeInfo);\n        setTree(tree ? tree : []);\n        setNodeInfoCopy(nodeInfo);\n        setDrawerIsOpen(true);\n    };\n\n    const nodeInfoTable = () => {\n        return (\n            <table\n                id=\"table-node-info\"\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\n                style={{ width: '100%' }}\n            >\n                <thead>\n                    <tr>\n                        <th>Property</th>\n                        <th>Value</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>\n                            <strong>RULE </strong>{' '}\n                            <Icon\n                                id=\"rule-icon\"\n                                icon=\"help\"\n                                onClick={() => {\n                                    setArgsTranslatorOpen(false);\n                                    setConclusionTranslatorOpen(false);\n                                    setRuleHelperOpen(!ruleHelperOpen);\n                                }}\n                            ></Icon>\n                        </td>\n                        <td>\n                            {nodeInfo.rule}\n                            <Collapse isOpen={ruleHelperOpen}>\n                                <Pre id=\"pre-rule\">{ruleHelper(nodeInfo.rule)}</Pre>\n                            </Collapse>\n                        </td>\n                    </tr>\n                    {nodeInfo.args ? (\n                        <tr>\n                            <td>\n                                <strong>ARGS</strong>{' '}\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\n                                    <Icon\n                                        id=\"rule-icon\"\n                                        icon=\"translate\"\n                                        onClick={() => {\n                                            setConclusionTranslatorOpen(false);\n                                            setRuleHelperOpen(false);\n                                            setArgsTranslatorOpen(!argsTranslatorOpen);\n                                        }}\n                                    ></Icon>\n                                ) : null}\n                            </td>\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\n                                {nodeInfo.args}\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\n                                    <Collapse isOpen={argsTranslatorOpen}>\n                                        <Pre id=\"pre-rule\">{indent(translate(nodeInfo.args))}</Pre>\n                                    </Collapse>\n                                ) : null}\n                            </td>\n                        </tr>\n                    ) : null}\n                    <tr>\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\n                            <strong>CONCLUSION</strong>{' '}\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\n                                <Icon\n                                    id=\"rule-icon\"\n                                    icon=\"translate\"\n                                    onClick={() => {\n                                        setArgsTranslatorOpen(false);\n                                        setRuleHelperOpen(false);\n                                        setConclusionTranslatorOpen(!conclusionTranslatorOpen);\n                                    }}\n                                ></Icon>\n                            ) : null}\n                        </td>\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\n                            {nodeInfo.conclusion}\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\n                                <Collapse isOpen={conclusionTranslatorOpen}>\n                                    <Pre id=\"pre-rule\">{indent(translate(nodeInfo.conclusion))}</Pre>\n                                </Collapse>\n                            ) : null}\n                        </td>\n                    </tr>\n                    {!nodeInfo.topHidedNodes ? (\n                        <tr>\n                            <td>\n                                <strong>#DESCENDANTS</strong>\n                            </td>\n                            <td>{nodeInfo.nDescendants}</td>\n                        </tr>\n                    ) : (\n                        <tr>\n                            <td>\n                                <strong>#DESCENDANTS</strong>\n                            </td>\n                            <td>[{nodeInfo.topHidedNodes.map((node) => node[3]).join(', ')}]</td>\n                        </tr>\n                    )}\n                    {nodeInfo.nHided ? (\n                        <tr>\n                            <td>\n                                <strong>#HIDDEN</strong>\n                            </td>\n                            <td>\n                                [\n                                {nodeInfo.topHidedNodes ? nodeInfo.topHidedNodes.map((node) => node[4]).join(', ') : ''}\n                                ]\n                            </td>\n                        </tr>\n                    ) : null}\n                </tbody>\n            </table>\n        );\n    };\n\n    return (\n        <div>\n            {proof.length > 1 ? (\n                style === 'tree' ? (\n                    <Canvas key={dot} view={view} proofNodes={proof} openDrawer={openDrawer}></Canvas>\n                ) : (\n                    <VisualizerDirectoryStyle\n                        proofTree={proofTree}\n                        ruleHelper={ruleHelper}\n                        ident={indent}\n                        translate={translate}\n                    />\n                )\n            ) : null}\n            <Drawer\n                className={darkTheme ? 'bp3-dark' : ''}\n                autoFocus={true}\n                canEscapeKeyClose={true}\n                canOutsideClickClose={true}\n                enforceFocus={true}\n                hasBackdrop={false}\n                isOpen={drawerIsOpen}\n                position={Position.BOTTOM}\n                usePortal={true}\n                onClose={(e) => {\n                    e.preventDefault();\n                    setDrawerIsOpen(false);\n                    setArgsTranslatorOpen(false);\n                    setConclusionTranslatorOpen(false);\n                }}\n                icon=\"info-sign\"\n                title=\"Node info\"\n            >\n                <div className={Classes.DRAWER_BODY}>\n                    <VisualizerTree\n                        darkTheme={darkTheme}\n                        content={tree}\n                        setNodeInfo={setNodeInfo}\n                        originalNodeInfo={nodeInfoCopy}\n                    ></VisualizerTree>\n                    <div className={Classes.DIALOG_BODY}>{nodeInfoTable()}</div>\n                </div>\n            </Drawer>\n        </div>\n    );\n};\n\nexport default VisualizerStage;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Intent, Position, Toaster } from '@blueprintjs/core';\n\nimport VisualizerNavbar from './components/VisualizerNavbar';\nimport VisualizerDialog from './components/VisualizerDialog';\nimport VisualizerStage from './components/VisualizerStage';\n\nimport { stateInterface } from './components/interfaces';\n\nconst App: React.FC = () => {\n    const [dialogIsOpen, setDialogIsOpen] = useState(true);\n    const [dialogContent, setDialogContent] = useState('welcome');\n\n    const darkTheme = useSelector<stateInterface, boolean>((state: stateInterface) => state.darkThemeReducer.darkTheme);\n\n    // Toaster\n    let toaster: Toaster;\n    const refHandlers = {\n        toaster: (ref: Toaster) => (toaster = ref),\n    };\n\n    const addErrorToast = (err: string) => {\n        toaster.show({ icon: 'warning-sign', intent: Intent.DANGER, message: err });\n    };\n\n    return (\n        <div className={darkTheme ? ' bp3-dark' : ''}>\n            <Toaster position={Position.TOP} ref={refHandlers.toaster} />\n            <VisualizerNavbar setDialogIsOpen={setDialogIsOpen} setDialogContent={setDialogContent}></VisualizerNavbar>\n            <VisualizerDialog\n                dialogIsOpen={dialogIsOpen}\n                setDialogIsOpen={setDialogIsOpen}\n                dialogContent={dialogContent}\n                setDialogContent={setDialogContent}\n                addErrorToast={addErrorToast}\n            ></VisualizerDialog>\n            <VisualizerStage></VisualizerStage>\n        </div>\n    );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport { proof, stateInterface } from '../components/interfaces';\n\nconst initialStateProofReducer = {\n    proof: {\n        label: '',\n        options: '',\n        problem: '',\n        dot: '',\n        view: 'basic',\n    },\n};\n\nconst initialStateDarkThemeReducer = {\n    darkTheme: true,\n};\n\nconst initialStateStyleReducer = {\n    style: 'tree',\n};\n\nconst initialStateLetMapReducer = {\n    letMap: {},\n};\n\ntype Action =\n    | { type: 'SET_PROOF'; payload: proof }\n    | { type: 'TOGGLE_DARK_THEME' }\n    | { type: 'SET_DOT'; payload: proof['dot'] }\n    | { type: 'BASIC_VIEW' }\n    | { type: 'PROPOSITIONAL_VIEW' }\n    | { type: 'FULL_VIEW' }\n    | { type: 'SET_STYLE'; payload: string }\n    | {\n          type: 'SET_LET_MAP';\n          payload: {\n              [Key: string]: string;\n          };\n      };\n\nconst proofReducer = (\n    state: stateInterface['proofReducer'] = initialStateProofReducer,\n    action: Action,\n): stateInterface['proofReducer'] => {\n    switch (action.type) {\n        case 'SET_PROOF':\n            return {\n                ...state,\n                proof: {\n                    label: action.payload.label,\n                    options: action.payload.options,\n                    problem: action.payload.problem,\n                    dot: action.payload.dot,\n                    view: 'basic',\n                },\n            };\n        case 'SET_DOT':\n            return {\n                ...state,\n                proof: {\n                    ...state.proof,\n                    dot: action.payload,\n                },\n            };\n        case 'BASIC_VIEW':\n            return {\n                ...state,\n                proof: {\n                    ...state.proof,\n                    view: 'basic',\n                },\n            };\n        case 'PROPOSITIONAL_VIEW':\n            return {\n                ...state,\n                proof: {\n                    ...state.proof,\n                    view: 'propositional',\n                },\n            };\n        case 'FULL_VIEW':\n            return {\n                ...state,\n                proof: {\n                    ...state.proof,\n                    view: 'full',\n                },\n            };\n        default:\n            return state;\n    }\n};\n\nconst darkThemeReducer = (\n    state: stateInterface['darkThemeReducer'] = initialStateDarkThemeReducer,\n    action: Action,\n): stateInterface['darkThemeReducer'] => {\n    switch (action.type) {\n        case 'TOGGLE_DARK_THEME':\n            return {\n                ...state,\n                darkTheme: !state.darkTheme,\n            };\n        default:\n            return state;\n    }\n};\n\nconst styleReducer = (\n    state: stateInterface['styleReducer'] = initialStateStyleReducer,\n    action: Action,\n): stateInterface['styleReducer'] => {\n    switch (action.type) {\n        case 'SET_STYLE':\n            return {\n                ...state,\n                style: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nconst letMapReducer = (\n    state: stateInterface['letMapReducer'] = initialStateLetMapReducer,\n    action: Action,\n): stateInterface['letMapReducer'] => {\n    switch (action.type) {\n        case 'SET_LET_MAP':\n            return {\n                ...state,\n                letMap: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({ proofReducer, darkThemeReducer, styleReducer, letMapReducer });\n","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport const store = createStore(reducer);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { store } from './redux/store';\n\nimport './scss/index.scss';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}