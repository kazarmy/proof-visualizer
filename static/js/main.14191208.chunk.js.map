{"version":3,"sources":["store/hooks.ts","store/features/file/fileSlice.ts","store/features/proof/auxi.ts","store/features/proof/proofSlice.ts","store/features/theme/themeSlice.ts","components/VisualizerStage/Canvas/VisualizerNode.tsx","components/VisualizerStage/Canvas/VisualizerLine.tsx","components/VisualizerStage/Canvas/VisualizerMenu.tsx","components/VisualizerStage/Canvas/VisualizerCanvas.tsx","components/VisualizerNavbar/VisualizerNavbar.tsx","components/VisualizerDialog/VisualizerDialog.tsx","components/VisualizerTree/VisualizerTree.tsx","components/VisualizerStage/VisualizerDirectoryStyle/VisualizerDirectoryStyle.tsx","components/VisualizerStage/VisualizerStage.tsx","components/VisualizerLetDrawer/let.ts","components/VisualizerLetDrawer/VisualizerLetDrawer.tsx","components/App/App.tsx","store/store.ts","ReactUtils/reportWebVitals.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","fileSlice","createSlice","name","initialState","value","filesCount","reducers","set","state","action","payload","actions","selectFileName","file","selectDot","split","pop","JSON","parse","dot","selectFileCount","removeEscapedCharacters","s","newS","i","length","processDot","nodes","id","conclusion","rule","args","views","children","parents","NaN","descendants","comment","slice","indexOf","lastIndexOf","replace","forEach","line","search","parseInt","trim","attributes","label","commentJSON","subProofQty","map","x","child","parent","push","proof","nodeId","concat","reduce","acc","childId","proofSlice","view","style","hiddenNodes","letMap","visualInfo","process","proofJSON","isJSON","node","color","y","selected","hideNodes","toHideNodes","filter","every","hiddenNodesArray","clusters","clusteredNodes","hiddenNode","clusterID","p","hiddenID","some","_p","pastCluster","stringify","cluster","clusterParents","parentCluster","splice","findNodesClusters","piNodeId","Object","keys","foldAllDescendants","unhideNodes","pi","hiddens","size","setVisualInfo","selectNodes","changeStyle","applyView","visualInfoSize","proofSize","proofNode","applyColor","Number","selectProof","piNodeChildren","self","piNodeParents","piNode","parentId","highHierarchyNodes","ac","childID","selectView","selectStyle","selectLetMap","selectVisualInfo","selectHiddenNodes","themeSlice","toggle","selectTheme","theme","textColorFromBg","bgColor","substring","sixDigitColor","charAt","c","join","Node","props","nHided","nDescendants","setNodeOnFocus","toggleNodeSelection","updateNodePosition","openDrawer","onDragEnd","createTree","tagProps","fill","stroke","strokeWidth","textProps","align","fontSize","height","padding","width","metaInfoProps","nHidedStr","nDescendantsStr","ruleTxt","draggable","toString","onDragMove","e","target","attrs","onClick","evt","button","shiftKey","menuNode","document","getElementById","top","clientY","left","clientX","display","window","addEventListener","text","Line","key","points","Menu","unfold","foldSelectedNodes","changeNodeColor","currentColor","options","useState","setColor","useEffect","className","foldSelected","stopPropagation","vertical","placeholder","onChange","icon","disabled","match","handleWheel","preventDefault","stage","getStage","oldScale","scaleX","pointerPosition","getPointerPosition","mousePointTo","newScale","deltaY","stageScale","stageX","stageY","Canvas","nodeOnFocus","reRender","setState","nodesSelected","obj","find","hiddenIds","showingNodes","rootNode","o","tree","secondaryLabel","childNodes","parentsId","hasCaret","Boolean","LineProps","from","to","saveNodePosition","copyNodePosition","showingEdges","edgeKey","edge","componentDidUpdate","bind","canvasSize","this","newShowingNodes","newNodeProps","innerWidth","innerHeight","updateEdgesAndFuncs","prevProps","found","includes","onWheel","scaleY","onContextMenu","current_state","proofChanged","visualInfoChanged","isNewFile","renderData","fileChanged","count","g","dagre","graphlib","Graph","setGraph","rankdir","ranker","setDefaultEdgeLabel","setNode","setEdge","layout","xOffset","yOffset","v","console","log","Component","blockRender","allowRenderNewFile","newVisualInfo","visualInfos","mapDispatchToProps","connect","ownProps","setDialogIsOpen","setDialogContent","setDrawerIsOpen","fileName","darkTheme","windowSize","setWindowSize","handleResize","removeEventListener","useWindowSize","command","setCommand","lastCommands","setLastCommands","commandId","setCommandId","dispatch","runCommands","commands","idList","word","isNaN","RegExp","test","menus","download","downloadJSON","fName","link","createElement","href","encodeURIComponent","click","replaceAll","getElementsByClassName","toDataURL","Group","Alignment","LEFT","Heading","Divider","content","RIGHT","onKeyDown","unshift","newId","marginLeft","undefined","placement","checked","readUploadedFileAsText","inputFile","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","VisualizerDialog","dialogIsOpen","dialogContent","addErrorToast","dialogProps","title","dialogBody","succesButton","processingProof","setProcessingProof","proofProcessed","setProofProcessed","changeFileName","changeFile","large","textAlign","paddingTop","intent","Intent","SUCCESS","iconSize","hasSelection","onInputChange","a","files","File","fileContents","message","ext","isOpen","onClose","usePortal","Classes","DIALOG_BODY","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","VisualizerTree","originalNodeInfo","setNodeInfo","useReducer","forceUpdate","setNodes","setSelected","forEachNode","callback","backgroundColor","contents","onNodeClick","nodeData","_nodePath","originallySelected","isSelected","n","onNodeCollapse","isExpanded","onNodeExpand","ELEVATION_0","VisualizerDirectoryStyle","proofTree","ruleHelper","indent","translate","ruleHelperOpen","setRuleHelperOpen","argsTranslatorOpen","setArgsTranslatorOpen","conclusionTranslatorOpen","setConclusionTranslatorOpen","nodeInfo","offsetHeight","float","clear","borderRight","overflow","maxHeight","pCounter","repeat","VisualizerStage","fileID","setProofAndLet","setProofTree","newProof","newLetMap","list","roots","drawerIsOpen","nodeInfoCopy","setNodeInfoCopy","setTree","l","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","position","Position","BOTTOM","DRAWER_BODY","Let","letText","letsList","indices","lines","biggerID","externalLets","getTextWidth","context","getContext","font","measureText","expandValue","shouldUpdate","keyList","let","letName","k","idx","indentLevel","shrinkValue","fitsTheWindow","mode","someDoesntFit","newLines","thisLevel","thisLine","lastSpace","lastUsedSpace","lastOpenParenthesis","biggestSize","newBiggerID","thisSize","groupUp","newValue","j","numKey","VisualizerLetDrawer","letMapS","setLetMapS","resizeMode","setResizeMode","letsRef","useRef","widthRef","current","newWidth","clientWidth","expandLet","lets","renderLet","currentLet","matchAll","index","arr","start","thisLet","whiteSpace","revertLet","App","toaster","refHandlers","ref","TOP","err","show","DANGER","store","configureStore","reducer","fileReducer","proofReducer","themeReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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A4B,KACa,IAAxCL,EAAStY,WAAWU,QAAQ,OACzB,eAAC,IAAD,CACIX,GAAG,YACH4K,KAAK,YACLjC,QAAS,WACLyP,GAAsB,GACtBF,GAAkB,GAClBI,GAA6BD,MAGrC,QAER,sBAAIjW,MAAO,CAAEyW,UAAW,QAASD,SAAU,QAA3C,UACKL,EAAStY,YAC+B,IAAxCsY,EAAStY,WAAWU,QAAQ,OACzB,eAAC,IAAD,CAAUqV,OAAQqC,EAAlB,SACI,eAAC,IAAD,CAAKjW,MAAO,CAAEyW,UAAW,QAASD,SAAU,QAAU5Y,GAAG,WAAzD,SACK+X,EAAOC,EAAUO,EAAStY,iBAGnC,WAIXsY,EAASvR,aACN,gCACI,8BACI,qDAEJ,8BAAKuR,EAASvR,kBAElB,KAEHuR,EAASxR,OACN,gCACI,8BACI,gDAEJ,yCAASwR,EAASlW,YAAYd,KAAI,SAACoB,GAAD,MAAU,IAAMA,KAAlD,WAEJ,kB,OCvK5B,SAASmV,GAAW5X,GAChB,OAAQA,EAAKf,MAAM,KAAK,IACpB,IAAK,SACD,MAAO,8DACX,IAAK,SACD,OACIe,EACA,uYAER,IAAK,QACD,OACIA,EACA,gnBAER,IAAK,OACD,OACIA,EACA,sZAER,IAAK,UACD,OACIA,EACA,0PAER,IAAK,WACD,OACIA,EACA,6MAER,IAAK,oBACD,OACIA,EACA,moBAER,IAAK,sBACD,OACIA,EACA,6iCAER,IAAK,qBACD,OACIA,EACA,gcAER,IAAK,0BACD,OACIA,EACA,qsBAER,IAAK,4BACD,OACIA,EACA,4LAER,IAAK,eACD,OACIA,EACA,wVAER,IAAK,iBACD,OACIA,EACA,6mBAER,IAAK,aACD,OACIA,EACA,qRAER,IAAK,mBACD,OACIA,EACA,uKAER,IAAK,oBACD,OACIA,EACA,oNAER,IAAK,0BACD,OACIA,EACA,oKAER,IAAK,oBACD,OACIA,EACA,+MAER,IAAK,gBACD,OACIA,EACA,oNAER,IAAK,gBACD,OACIA,EACA,gOAER,IAAK,aACD,OACIA,EACA,mOAER,IAAK,iBACD,OACIA,EACA,0VAER,IAAK,gBACD,OACIA,EACA,uNAER,IAAK,iBACD,OACIA,EACA,kOAER,IAAK,aACD,OACIA,EACA,kpCAER,IAAK,mBACD,OACIA,EACA,ueAER,IAAK,YACD,OACIA,EACA,iNAER,IAAK,aACD,OACIA,EACA,oNAER,IAAK,mBACD,OACIA,EACA,4oBAER,IAAK,yBACD,OACIA,EACA,itBAER,QACI,OAAOA,GAInB,IA+CM6X,GAAS,SAACrY,GAIZ,IAHA,IAAIC,EAAOD,EAAE2S,WAAW,IAAK,MACzBzS,EAAI,EACJkZ,EAAW,EACRlZ,EAAID,EAAKE,QACI,MAAZF,EAAKC,IAA0B,MAAZD,EAAKC,GAAYkZ,IACnB,MAAZnZ,EAAKC,IAA0B,MAAZD,EAAKC,GAAYkZ,IACxB,OAAZnZ,EAAKC,KACU,MAAhBD,EAAKC,EAAI,IAA8B,MAAhBD,EAAKC,EAAI,IAChCD,EAAO,CAACA,EAAKe,MAAM,EAAGd,EAAI,GAAI,KAAKmZ,OAAOD,EAAW,GAAInZ,EAAKe,MAAMd,EAAI,IAAIgH,KAAK,IACjFhH,GAAKkZ,EAAW,IAEhBnZ,EAAO,CAACA,EAAKe,MAAM,EAAGd,EAAI,GAAI,KAAKmZ,OAAOD,GAAWnZ,EAAKe,MAAMd,EAAI,IAAIgH,KAAK,IAC7EhH,GAAKkZ,IAGblZ,IAEJ,OAAOD,GA2NIqZ,GAxNmB,WAC9B,IAAMzZ,EAAMrB,EAAegB,GACrB+Z,EAAS/a,EAAesB,GACxB4C,EAAQlE,EAAe4H,GACvB0K,EAAYtS,EAAekI,GACjC,EAA0C+D,mBAAiC,CAAC,GAAI,KAAhF,yCAAQvI,EAAR,KAAeU,EAAf,KAAwB4W,EAAxB,KACA,EAAkC/O,mBAAS,IAA3C,mBAAO0N,EAAP,KAAkBsB,EAAlB,KAEA9O,qBAAU,WACN,MAA8BvK,EAAWP,GAAY,IAArD,mBAAO6Z,EAAP,KAAiBC,EAAjB,KACAH,EAAe,CAACE,EAAUC,IAC1BF,EA/EW,SAACvX,GAChB,IAwBIe,EAAgB/C,EAxBd0Z,EAAmB1X,EAAML,KAAI,SAACoB,GAAU,IAAD,EACnCvB,GAAQ,UAAAuB,EAAKN,mBAAL,eAAkBxC,QAAlB,UACL8C,EAAK3C,GADA,4BACY2C,EAAK1C,YADjB,UAEL0C,EAAK3C,GAFA,cAEQ2C,EAAK1C,YAC3B,MAAO,CACHD,GAAI2C,EAAK3C,GACT4K,KAAM,QACNxJ,MAAOA,EACPqL,eAAe,GAAD,OAAK9J,EAAKzC,MACxBA,KAAMyC,EAAKzC,KACXC,KAAMwC,EAAKxC,KACXF,WAAY0C,EAAK1C,WACjBwF,SAAU9C,EAAKrC,QAAQ,GACvBE,YAAamC,EAAKnC,YAAc,EAChCuG,OAAQpE,EAAKN,YAAcM,EAAKN,YAAYxC,OAAS,EACrDwC,YAAaM,EAAKN,YAAcM,EAAKN,YAAYd,KAAI,SAACoB,GAAD,OAAUA,EAAK3C,MAAM,GAC1E0M,WAAY,GACZC,UAAWhK,EAAKrC,QAChBsM,SAAUC,QAAQlK,EAAKnC,YAAc,OAIvCe,EAAW,GACbgY,EAAa,GAIjB,IAAK3Z,EAAI,EAAGA,EAAI0Z,EAAKzZ,OAAQD,GAAK,EAC9B2B,EAAI+X,EAAK1Z,GAAGI,IAAMJ,EAGtB,IAAKA,EAAI,EAAGA,EAAI0Z,EAAKzZ,OAAQD,GAAK,GAC9B+C,EAAO2W,EAAK1Z,IAEP+M,UAAU7L,SAAQ,SAAC2E,IAEfgM,MAAMhM,IAAa6T,EAAK/X,EAAIkE,IAC7B6T,EAAK/X,EAAIkE,IAAWiH,WAAW/K,KAAKgB,GAEpC4W,EAAM5X,KAAKgB,MAIvB,OAAO4W,EAmCUjS,CAAW8R,MACzB,CAAC7Z,IACJ,MAAwC4K,oBAAS,GAAjD,mBAAOqP,EAAP,KAAqBlJ,EAArB,KACA,EAA4CnG,oBAAS,GAArD,mBAAO8N,EAAP,KAAuBC,EAAvB,KACA,EAAoD/N,oBAAS,GAA7D,mBAAOgO,EAAP,KAA2BC,EAA3B,KACA,EAAgEjO,oBAAS,GAAzE,mBAAOkO,EAAP,KAAiCC,EAAjC,KACA,EAAgCnO,mBAAmB,CAC/CjK,KAAM,GACNC,KAAM,GACNF,WAAY,GACZ8G,OAAQ,EACRC,aAAc,EACd3E,YAAa,KANjB,mBAAOkW,EAAP,KAAiB9B,EAAjB,KAQA,EAAwCtM,mBAAmB,CACvDjK,KAAM,GACNC,KAAM,GACNF,WAAY,GACZ8G,OAAQ,EACRC,aAAc,EACd3E,YAAa,KANjB,mBAAOoX,EAAP,KAAqBC,EAArB,KASA,EAAwBvP,mBAAyB,IAAjD,mBAAOqC,EAAP,KAAamN,EAAb,KACM3B,EAAY,SAACtY,GAGf,IAFA,IAAIC,EAAOD,EACPE,EAAID,EAAKgB,QAAQ,QACP,IAAPf,GAAU,CACb,IAAMga,EAAIja,EAAKe,MAAMd,GAAGT,MAAM,WAAW,GAEzCS,GADAD,EAAOA,EAAKkB,QAAQ+Y,EAAGtX,EAAOsX,KACrBjZ,QAAQ,OAErB,OAAOhB,GA8HX,OACI,uBAAKyO,cAAe,SAAC5F,GAAD,OAAOA,EAAEwC,kBAA7B,UACKpJ,EAAM/B,OAAS,EACF,UAAVuC,EACI,eAAC,GAAD,CAAqBgF,WA/HlB,SAACmR,EAAoB/L,GACpC0L,GAAkB,GAClBzB,EAAY8B,GACZoB,EAAQnN,GAAc,IACtBkN,EAAgBnB,GAChBjI,GAAgB,KA0HS2I,GAEb,eAAC,GAAD,CACIpB,UAAWA,EACXC,WAAYA,GACZC,OAAQA,GACRC,UAAWA,IAGnB,KACJ,eAAC,IAAD,CACI1N,UAAWkG,EAAY,WAAa,GACpCqJ,WAAW,EACXC,mBAAmB,EACnBC,sBAAsB,EACtBC,cAAc,EACdC,aAAa,EACbjE,OAAQwD,EACRU,SAAUC,IAASC,OACnBlE,WAAW,EACXD,QAAS,SAACzN,GACNA,EAAEwC,iBACFsF,GAAgB,GAChB8H,GAAsB,GACtBE,GAA4B,IAEhC1N,KAAK,YACL4J,MAAM,YAjBV,SAmBI,uBAAKlK,UAAW6L,KAAQkE,YAAxB,UACI,eAAC,GAAD,CACI7J,UAAWA,EACXqC,QAASrG,EACTiK,YAAaA,EACbD,iBAAkBiD,IAEtB,sBAAKnP,UAAW6L,KAAQC,YAAxB,SAzJR,yBACIpW,GAAG,kBACHsK,UAAU,yFACVlI,MAAO,CAAE4F,MAAO,QAHpB,UAKI,iCACI,gCACI,2CACA,6CAGR,mCACI,gCACI,gCACI,4CACA,eAAC,IAAD,CACIhI,GAAG,YACH4K,KAAK,OACLjC,QAAS,WACLyP,GAAsB,GACtBE,GAA4B,GAC5BJ,GAAmBD,SAI/B,gCACKM,EAASrY,KACV,eAAC,IAAD,CAAU8V,OAAQiC,EAAlB,SACI,eAAC,IAAD,CAAK7V,MAAO,CAAEyW,UAAW,QAASD,SAAU,QAAU5Y,GAAG,WAAzD,SACK8X,GAAWS,EAASrY,gBAMpCqY,EAASpY,MACN,gCACI,gCACI,2CAAsB,KACa,IAAlCoY,EAASpY,KAAKQ,QAAQ,OACnB,eAAC,IAAD,CACIX,GAAG,YACH4K,KAAK,YACLjC,QAAS,WACL2P,GAA4B,GAC5BJ,GAAkB,GAClBE,GAAuBD,MAG/B,QAER,sBAAI/V,MAAO,CAAEyW,UAAW,QAASD,SAAU,QAA3C,UACKL,EAASpY,MACyB,IAAlCoY,EAASpY,KAAKQ,QAAQ,OACnB,eAAC,IAAD,CAAUqV,OAAQmC,EAAlB,SACI,eAAC,IAAD,CAAK/V,MAAO,CAAEyW,UAAW,QAASD,SAAU,QAAU5Y,GAAG,WAAzD,SACK+X,GAAOC,EAAUO,EAASpY,WAGnC,WAKhB,gCACI,sBAAIiC,MAAO,CAAEyW,UAAW,QAASD,SAAU,QAA3C,UACI,iDAA4B,KACa,IAAxCL,EAAStY,WAAWU,QAAQ,OACzB,eAAC,IAAD,CACIX,GAAG,YACH4K,KAAK,YACLjC,QAAS,WACLyP,GAAsB,GACtBF,GAAkB,GAClBI,GAA6BD,MAGrC,QAER,sBAAIjW,MAAO,CAAEyW,UAAW,QAASD,SAAU,QAA3C,UACKL,EAAStY,YAC+B,IAAxCsY,EAAStY,WAAWU,QAAQ,OACzB,eAAC,IAAD,CAAUqV,OAAQqC,EAAlB,SACI,eAAC,IAAD,CAAKjW,MAAO,CAAEyW,UAAW,QAASD,SAAU,QAAU5Y,GAAG,WAAzD,SACK+X,GAAOC,EAAUO,EAAStY,iBAGnC,WAIXsY,EAASvR,aACN,gCACI,8BACI,qDAEJ,8BAAKuR,EAASvR,kBAElB,KAEHuR,EAASxR,OACN,gCACI,8BACI,gDAEJ,yCAASwR,EAASlW,YAAYd,KAAI,SAACoB,GAAD,MAAU,IAAMA,KAAlD,WAEJ,sBCpMT2X,GAhMX,WAAYhc,EAAcic,EAAiBC,EAAkCC,GAAqC,IAAD,gCAPjHnc,UAOiH,OANjHE,WAMiH,OALjHkc,WAKiH,OAJjHC,cAIiH,OAHjHlD,gBAGiH,OAFjHmD,kBAEiH,OAkBjHC,aAAe,SAACpR,GACZ,IACMqR,EADS9R,SAASiJ,cAAc,UACf8I,WAAW,MAC9BrW,EAAO,EAMX,OALIoW,IACAA,EAAQE,KACJ,mJACJtW,EAAOoW,EAAQG,YAAYxR,GAAMzB,OAE9BtD,GA3BsG,KA8BjHwW,YAAc,WAKV,IAL6C,IAAlCC,EAAiC,wDACtCC,EAAUhX,OAAOC,KAAK,EAAKuW,cAAcrZ,KAAI,SAACoI,GAAD,OAAS,EAAKiR,aAAajR,GAAK0R,IAAI/c,QACnFic,EAAU,EAAK/b,MAGVoB,EAAIwb,EAAQvb,OAAS,EAAGD,GAAK,EAAGA,IAIrC,IAHA,IAAM0b,EAAUF,EAAQxb,GAGf2b,EAAI,EAAKX,aAAaU,GAASE,IAAI3b,OAAS,EAAG0b,GAAK,EAAGA,IAAK,CACjE,IAAMC,EAAM,EAAKZ,aAAaU,GAASE,IAAID,GAG3ChB,EACIA,EAAQ/T,UAAU,EAAGgV,GACrB,EAAKZ,aAAaU,GAASD,IAAIH,cAC/BX,EAAQ/T,UAAUgV,EAAMF,EAAQzb,OAAQ0a,EAAQ1a,QAO5D,OAJIsb,IACA,EAAKT,MAAQ,CAAC,CAAElc,MAAO+b,EAASkB,YAAa,IAC7C,EAAKd,SAAW,GAEbJ,GArDsG,KAwDjHmB,YAAc,WAGV,OAFA,EAAKhB,MAAQ,CAAC,CAAElc,MAAO,EAAKA,MAAOid,YAAa,IAChD,EAAKd,SAAW,EACT,EAAKnc,OA3DiG,KA8DjHmd,cAAgB,SAAClL,GACb,IAAM1P,EAAO,EAAK2Z,MAAM,EAAKC,UAE7B,OADa,EAAKE,aAAL,UAAqB,OAAO9B,OAAOhY,EAAK0a,cAAxC,OAAuD1a,EAAKvC,QAC3DiS,GAjE+F,KAoEjHsH,OAAS,SAACtH,EAAoBmL,GAC1B,IAAIC,EACMA,IAAND,KACiB,EAAKf,aAAa,EAAKH,MAAM,EAAKC,UAAUnc,OAASiS,GAG1E,IANoD,iBAoBhD,IApBgD,MAOxCiK,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,SACTmB,EAAmB,GACnBC,EAAYrB,EAAMC,GAAUc,YAC5BO,EAAWtB,EAAMC,GAAUnc,MAE7Byd,GAAa,EACbC,GAAiB,EACjBC,GAAuB,EACvBpE,EAAS2C,EAAMC,GAAUc,YAAc,EACvCW,EAAc,EACdC,EAAc,EAGTzc,EAAI,EAAGA,EAAIoc,EAASnc,OAAQD,IAAK,CACtC,IAAM+G,EAAIqV,EAASpc,GAET,MAAN+G,IACAoR,IAEegE,EAAY,IAAGI,EAAsBvc,GAGzC,MAAN+G,GAEDoR,IAAWgE,GAEa,MAApBC,EAASpc,EAAI,IACbkc,EAASna,KAAK,CACVnD,MAAOwd,EAASxV,UAAUyV,EAAY,EAAGrc,GACzC6b,YAAa1D,EAAS,IAG9B+D,EAASna,KAAK,CAAEnD,MAAO,IAAKid,YAAa1D,KAGpCA,IAAWgE,EAAY,GAC5BD,EAASna,KAAK,CACVnD,MAAOwd,EAASxV,UAAU2V,EAAqBvc,EAAI,GACnD6b,YAAa1D,IAGrBA,KAIW,MAANpR,IACLsV,EAAYrc,EAERmY,IAAWgE,GAAiC,MAApBC,EAASpc,EAAI,KACrCkc,EAASna,KAAK,CACVnD,MAAOwd,EAASxV,UAAU0V,EAAgB,EAAGtc,GAC7C6b,YAAaK,EAASjc,OAASkY,EAAS,EAAIA,IAEhDmE,EAAgBtc,IAMxBkc,EAASjc,OAAS,IAAG,IAAK6a,OAAMzW,OAAX,SAAkB0W,EAAU,GAA5B,OAAkCmB,IAG3D,EAAKpB,MAAM5Z,SAAQ,SAACC,EAAMf,GAEtB,IAAMsc,EAAW,EAAKzB,aAAL,UAAqB,OAAO9B,OAAOhY,EAAK0a,cAAxC,OAAuD1a,EAAKvC,QACzE8d,EAAWF,IACXA,EAAcE,EACdD,EAAcrc,MAItB,EAAK2a,SAAW0B,GAGZD,EAAc3L,GAAcqL,EAASjc,OAAS,KAAGgc,GAAgB,IA3ElEA,GAAgB,IA6EvB,OAAO,EAAKnB,MAAM3Y,QAAO,SAAC4D,EAAI5E,GAAL,OAAe4E,EAAE,UAAO,OAAOoT,OAAOhY,EAAK0a,cAA1B,OAAyC1a,EAAKvC,MAA9C,QAA0D,KAvJS,KA0JjH+d,QAAU,SAAC9L,GASP,IARA,IAAI+L,EAAW,GAEP9B,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,SACToB,EAAYrB,EAAMC,GAAUc,YAC9B7b,EAAI+a,EACJY,EAAIZ,EAGA/a,EAAI8a,EAAM7a,UACVD,IAAM+a,QAA6BxH,IAAjBuH,EAAM9a,EAAI,IAAoB8a,EAAM9a,EAAI,GAAG6b,YAAcM,EAAY,GADrEnc,KAI1B,KAAQ2b,GAAK,KACLA,IAAMZ,QAA6BxH,IAAjBuH,EAAMa,EAAI,IAAoBb,EAAMa,EAAI,GAAGE,YAAcM,EAAY,GAD/ER,KAGZ3b,IAAM8a,EAAM7a,QAAQD,KACb,IAAP2b,IAAUA,EAAI,GAElBiB,EAAW,GAEX,IAAK,IAAIC,EAAIlB,EAAGkB,GAAK7c,EAAG6c,IACpBD,GACI9B,EAAM+B,GAAGje,OAASie,EAAI7c,EAAI,QAAsBuT,IAAjBuH,EAAM+B,EAAI,IAA2C,MAAvB/B,EAAM+B,EAAI,GAAGje,MAAgB,IAAM,IAWxG,OARgB,EAAKqc,aAAa2B,GAGpB/L,IAEV,EAAKiK,MAAMzW,OAAOsX,EAAG3b,EAAI2b,EAAI,EAAG,CAAE/c,MAAOge,EAAUf,YAAaM,EAAYA,EAAY,EAAIA,IAC5F,EAAKpB,SAAWY,GAEb,EAAKb,MAAM3Y,QAAO,SAAC4D,EAAI5E,GAAL,OAAe4E,EAAE,UAAO,OAAOoT,OAAOhY,EAAK0a,cAA1B,OAAyC1a,EAAKvC,MAA9C,QAA0D,KA3LpGiP,KAAKnP,KAAOA,EACZmP,KAAKjP,MAAQ+b,EACb9M,KAAKiN,MAAQ,CAAC,CAAElc,MAAO+b,EAASkB,YAAa,IAC7ChO,KAAKkN,SAAW,EAChBlN,KAAKgK,YAAa,EAElBhK,KAAKmN,aAAe,GACpBxW,OAAOC,KAAKoW,GAAS3Z,SAAQ,SAAC6I,GAC1B,IAAM+S,EAASvX,OAAOwE,GAChB2R,EAAUb,EAAQiC,GACxB,EAAK9B,aAAaU,GAAW,CACzBD,IAAKb,EAASc,GACdE,IAAK,EAAKZ,aAAaU,GAAlB,sBAAiC,EAAKV,aAAaU,GAASE,KAA5D,CAAiEkB,IAAU,CAACA,QCkMlFC,I,OAlNuC,SAAC,GAAuD,IAArDnD,EAAoD,EAApDA,aAAclJ,EAAsC,EAAtCA,gBAC7DE,EAAYtS,EAAekI,GAC3B9D,EAASpE,EAAe6H,GAC9B,EAA8BoE,mBAAS,eAAK7H,IAA5C,mBAAOsa,EAAP,KAAgBC,EAAhB,KAEA,EAAoC1S,mBAAS,GAA7C,mBAAO2S,EAAP,KAAmBC,EAAnB,KACMC,EAAUC,iBAA+B,IACzCC,EAAWD,iBAAO,GAGxB5S,qBAAU,WAEN,SAASsG,IACL,IAAM3I,EAAQkV,EAASC,QAGjBC,EAAWpU,SAASsJ,uBAAuB,uBAAuB,GAAG+K,YAAc,GACpEN,EAArB/U,IAAUoV,EAAyB,EAAKpV,EAAQoV,EAAyB,EAAmB,GAE5FF,EAASC,QAAUC,EASvB,OALA7T,OAAOC,iBAAiB,SAAUmH,GAElCA,IAGO,kBAAMpH,OAAOqH,oBAAoB,SAAUD,MACnD,IAEH,IAAM2M,EAAY,SAAC3T,GACf,IAAM4T,EAAOP,EAAQG,QAGhBI,EAAK5T,GAAK8N,aACX8F,EAAK5T,GAAK8N,YAAa,EACvBmF,EAAQjT,GAAO4T,EAAK5T,GAAKuR,aAAY,GACrC2B,EAAW,eAAKD,MAelBY,EAAY,SAAC7T,GACf,IAAM4T,EAAOP,EAAQG,QACfnV,EAAQkV,EAASC,QAGvB,GAAInV,EAAO,CACP,IAAIyV,EAAab,EAAQjT,GAErB8Q,EAAqC,GAEzC,YAAIgD,EAAWC,SAAS,YAAY5c,SAAQ,SAACgK,GACrCA,EAAM6S,QAAOlD,EAAQ3P,EAAM6S,OAAS7S,EAAM,OAI9C1G,OAAOC,KAAKkZ,GAAM1d,SAAWuE,OAAOC,KAAKuY,GAAS/c,SAClD0d,EAAK5T,GAAO,IAAI2Q,GAAI3Q,EAAK8T,EAAYF,EAAM9C,IAI1C8C,EAAK5T,GAAKgS,cAAc3T,GAarB8U,GAAc,GAAKS,EAAK5T,GAAK+Q,MAAM7a,OAAS,IAG5C0d,EAAK5T,GAAK+Q,MAAQ,CACd,CAAElc,MAAO+e,EAAK5T,GAAK8N,WAAa8F,EAAK5T,GAAKuR,cAAgBqC,EAAK5T,GAAKnL,MAAOid,YAAa,IAE5F8B,EAAK5T,GAAKgR,SAAW,EAGrB8C,EAAaF,EAAK5T,GAAKoO,OAAO/P,GAAO,GACrC4U,EAAQjT,GAAO8T,EAEfhD,EAAU,GAEV,YAAIgD,EAAWC,SAAS,YAAY5c,SAAQ,SAACgK,GACrCA,EAAM6S,QAAOlD,EAAQ3P,EAAM6S,OAAS7S,EAAM,SA3BtD2S,EAAaF,EAAK5T,GAAKoO,OAAO/P,GAAO,GACrC4U,EAAQjT,GAAO8T,EAEfhD,EAAU,GAEV,YAAIgD,EAAWC,SAAS,YAAY5c,SAAQ,SAACgK,GACrCA,EAAM6S,QAAOlD,EAAQ3P,EAAM6S,OAAS7S,EAAM,QA0BtD,IAAM8S,EAAgC,GAClCC,EAAQ,EAmBZ,OAjBAzZ,OAAOC,KAAKoW,GAAS3Z,SAAQ,SAAC6c,EAAO/d,EAAG0F,GACpC,IAAMkW,EAAMrW,OAAOwY,GACbG,EAAUrD,EAAQe,GAGxBoC,EAAIjc,KAAK8b,EAAWjX,UAAUqX,EAAOrC,IACrCoC,EAAIjc,KAAK,oBAAG2I,UAAWkG,EAAY,iBAAmB,cAA7C,SAA6DsN,KAEtED,EAAQrC,EAAMsC,EAAQje,OAGlBD,IAAM0F,EAAKzF,OAAS,GACpB+d,EAAIjc,KAAK8b,EAAWjX,UAAUqX,EAAOJ,EAAW5d,YAKpDuE,OAAOC,KAAKoW,GAAS5a,OAEjB,uBACIyK,UAAU,eACV3B,QAAS,WACL2U,EAAU3T,IAHlB,SAMKiU,IAIF,uBAAMtT,UAAU,eAAhB,SAAgCmT,IAG/C,OAAO,gCAGX,OACI,eAAC,IAAD,CACInT,UAAWkG,EAAY,WAAa,GACpCpO,MAAO,CAAEyW,UAAW,MAAO7Q,MAAO,OAClC6R,WAAW,EACXC,mBAAmB,EACnBC,sBAAsB,EACtBC,cAAc,EACdC,aAAa,EACbjE,OAAQwD,EACRU,SAAUC,IAASrH,MACnBoD,WAAW,EACXD,QAAS,SAACzN,GACNA,EAAEwC,iBACFsF,GAAgB,IAEpB1F,KAAK,YACL4J,MAAM,UAhBV,SAkBI,sBAAKlK,UAAW6L,KAAQkE,YAAxB,SACI,sBAAK/P,UAAW6L,KAAQC,YAAxB,SACI,yBACIpW,GAAG,kBACHsK,UAAU,yFACVlI,MAAO,CAAE4F,MAAO,QAHpB,UAKI,iCACI,gCACI,qBAAI5F,MAAO,CAAE4F,MAAO,SAApB,sBACA,qBAAIsC,UAAU,sBAAd,mBACA,qBAAIlI,MAAO,CAAE4F,MAAO,SAApB,yBAGR,iCACK5D,OAAOC,KAAKuY,GAASrb,KAAI,SAACoI,GACvB,OACI,gCACI,8BACI,kCAASA,MAEb,qBAAIvH,MAAO,CAAE4F,MAAO,OAAQ+V,WAAY,YAAxC,SAAuDP,EAAU7T,KACjE,sBAAIvH,MAAO,CAAE4F,MAAO,QAASF,OAAQ,QAArC,UACI,eAAC,IAAD,CACIa,QAAS,kBAAM2U,EAAU3T,IACzBW,UAAU,cACVM,KAAK,YACLnB,KAAK,WAET,eAAC,IAAD,CACId,QAAS,kBAvJnC,SAACgB,GACf,IAAM4T,EAAOP,EAAQG,QAGjBI,EAAK5T,GAAK8N,aACV8F,EAAK5T,GAAK8N,YAAa,EACvBmF,EAAQjT,GAAO4T,EAAK5T,GAAK+R,cACzBmB,EAAW,eAAKD,KAgJmCoB,CAAUrU,IACzBW,UAAU,cACVM,KAAK,OACLnB,KAAK,gBAhBRE,mBCrI9BsU,GA7CO,WAClB,IAMIC,EANJ,EAAwC/T,oBAAS,GAAjD,mBAAOiK,EAAP,KAAqBhE,EAArB,KACA,EAA0CjG,mBAAS,WAAnD,mBAAOkK,EAAP,KAAsBhE,EAAtB,KACA,EAAwClG,oBAAS,GAAjD,mBAAOqP,EAAP,KAAqBlJ,EAArB,KACME,EAAYtS,EAAekI,GAI3B+X,EAAc,CAChBD,QAAS,SAACE,GAAD,OAAmBF,EAAUE,IAa1C,OANA/T,qBAAU,WACNrB,SAASsJ,uBAAuB,eAAe,KACxCtJ,SAASsJ,uBAAuB,eAAe,GAAGhI,UAAY,MAEtE,CAACkP,IAGA,uBAAKlP,UAAWkG,EAAY,YAAc,GAA1C,UACI,eAAC,IAAD,CAAS0J,SAAUC,IAASkE,IAAKD,IAAKD,EAAYD,UAClD,eAAC,GAAD,CACI9N,gBAAiBA,EACjBC,iBAAkBA,EAClBC,gBAAiBA,IAErB,eAAC,GAAD,CACI8D,aAAcA,EACdhE,gBAAiBA,EACjBiE,cAAeA,EACfhE,iBAAkBA,EAClBiE,cAvBU,SAACgK,GACnBJ,EAAQK,KAAK,CAAE3T,KAAM,eAAgBwK,OAAQC,IAAOmJ,OAAQ1I,QAASwI,OAwBjE,eAAC,GAAD,IACC9E,EACG,eAAC,GAAD,CAAqBA,aAAcA,EAAclJ,gBAAiBA,IAClE,SC/CHmO,GAAQC,YAAe,CAChCC,QAAS,CACL1f,KAAM2f,EACNhd,MAAOid,EACPxY,MAAOyY,KCKAC,I,OAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCCpBQ,IAASC,OACL,eAAC,IAAMC,WAAP,UACI,eAAC,IAAD,CAAUjB,MAAOA,GAAjB,SACI,eAAC,GAAD,QAGRzV,SAASC,eAAe,SAM5B8V,O","file":"static/js/main.14191208.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { FileState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: FileState = {\r\n    name: 'ex.smt2',\r\n    value: 'digraph proof {\\n\\trankdir=\"BT\";\\n\\tnode [shape=record];\\n\\t0 [label=\"{SCOPE((not a), a)|(not (and (not a) a))}\", class = \" basic \", comment = \"{\\'subProofQty\\':1}\" ];\\n\\t1 [label=\"{CHAIN_RESOLUTION(true, a)|false}\", class = \" propositional \", comment = \"{\\'subProofQty\\':2}\" ];\\n\\t2 [label=\"{ASSUME(a)|a}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t3 [label=\"{ASSUME((not a))|(not a)}\", comment = \"{\\'subProofQty\\':0}\"];\\n\\t1->0;\\n\\t2->1;\\n\\t3->1;\\n}',\r\n    filesCount: 0,\r\n};\r\n\r\nexport const fileSlice = createSlice({\r\n    name: 'file',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        set: (state, action: PayloadAction<{ name: string; value: string }>) => {\r\n            state.name = action.payload.name;\r\n            state.value = action.payload.value;\r\n            state.filesCount++;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { set } = fileSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectFileName = (state: RootState): string => state.file.name;\r\n\r\nexport const selectFileExtension = (state: RootState): string => {\r\n    const ext = state.file.name.split('.').pop();\r\n    return ext ? ext : '';\r\n};\r\n\r\nexport const selectDot = (state: RootState): string =>\r\n    state.file.name.split('.').pop() === 'json' ? JSON.parse(state.file.value).dot : state.file.value;\r\n\r\nexport const selectFile = (state: RootState): string => state.file.value;\r\n\r\nexport const selectFileCount = (state: RootState): number => state.file.filesCount;\r\n\r\nexport default fileSlice.reducer;\r\n","import { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\n\r\nfunction removeEscapedCharacters(s: string): string {\r\n    let newS = '';\r\n    for (let i = 0; i < s.length; i += 1) {\r\n        if (\r\n            !(\r\n                s[i] === '\\\\' &&\r\n                (s[i + 1] === '\"' ||\r\n                    s[i + 1] === '>' ||\r\n                    s[i + 1] === '<' ||\r\n                    s[i + 1] === '{' ||\r\n                    s[i + 1] === '}' ||\r\n                    s[i + 1] === '|')\r\n            )\r\n        ) {\r\n            newS += s[i];\r\n        }\r\n    }\r\n\r\n    return newS;\r\n}\r\n\r\nexport function processDot(dot: string): [NodeInterface[], ProofState['letMap']] {\r\n    const nodes: NodeInterface[] = [\r\n        {\r\n            id: 0,\r\n            conclusion: '',\r\n            rule: '',\r\n            args: '',\r\n            views: [],\r\n            children: [],\r\n            parents: [NaN],\r\n            descendants: 0,\r\n        },\r\n    ];\r\n    let comment: string | null = dot.slice(dot.indexOf('comment='));\r\n    comment = comment\r\n        ? removeEscapedCharacters(\r\n              removeEscapedCharacters(comment.slice(comment.indexOf('=') + 2, comment.indexOf(';') - 1)),\r\n          )\r\n        : null;\r\n\r\n    const lines = dot\r\n        .slice(dot.indexOf('{') + 1, dot.lastIndexOf('}') - 2)\r\n        .replace(/(\\n|\\t)/gm, '')\r\n        .split(';');\r\n    lines.forEach((line) => {\r\n        if (line.search('label') !== -1) {\r\n            const id = parseInt(line.slice(0, line.indexOf('[')).trim());\r\n            let attributes = line.slice(line.indexOf('[') + 1, line.lastIndexOf(']')).trim();\r\n\r\n            let label = attributes.slice(attributes.search(/(?<!\\\\)\"/) + 2);\r\n            label = label.slice(0, label.search(/(?<!\\\\)\"/) - 1);\r\n            let [conclusion, rule, args] = ['', '', ''];\r\n            [conclusion, rule] = label.split(/(?<!\\\\)\\|/);\r\n            [rule, args] = rule.indexOf(':args') != -1 ? rule.split(':args') : [rule, ''];\r\n\r\n            attributes = attributes.slice(attributes.indexOf(', class = ') + ', class = '.length);\r\n            attributes = attributes.slice(attributes.indexOf('\"') + 1, attributes.slice(1).indexOf('\"') + 1);\r\n            const views = attributes.trim().split(' ');\r\n            const comment: string = removeEscapedCharacters(line.slice(line.indexOf('comment'), line.lastIndexOf('\"')));\r\n            const commentJSON = JSON.parse(comment.slice(comment.indexOf('\"') + 1).replace(/'/g, '\"'));\r\n\r\n            if (!nodes[id]) {\r\n                nodes[id] = {\r\n                    id: id,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    views: [],\r\n                    children: [],\r\n                    parents: [NaN],\r\n                    descendants: 0,\r\n                };\r\n            }\r\n            nodes[id].conclusion = removeEscapedCharacters(conclusion);\r\n            nodes[id].rule = removeEscapedCharacters(rule);\r\n            nodes[id].args = removeEscapedCharacters(args);\r\n            nodes[id].views = views;\r\n            nodes[id].descendants = commentJSON.subProofQty;\r\n        } else if (line.search('->') !== -1) {\r\n            const [child, parent] = line.split('->').map((x) => parseInt(x.trim()));\r\n            nodes[parent].children.push(child);\r\n            if (!nodes[child]) {\r\n                nodes[child] = {\r\n                    id: child,\r\n                    conclusion: '',\r\n                    rule: '',\r\n                    args: '',\r\n                    views: [],\r\n                    children: [],\r\n                    parents: [parent],\r\n                    descendants: 0,\r\n                };\r\n            }\r\n            nodes[child].parents = [parent];\r\n        }\r\n    });\r\n    return comment ? [nodes, JSON.parse(comment)['letMap']] : [nodes, {}];\r\n}\r\n\r\nexport const piNodeParents = (proof: NodeInterface[], hiddenNodesArray: number[]): number[] => {\r\n    const parents = hiddenNodesArray\r\n        // Concat all the parents\r\n        .reduce((acc: number[], hiddenNode) => acc.concat(proof[hiddenNode].parents), [])\r\n        // Filter the duplicated elements\r\n        .filter((parent, i, self) => {\r\n            return self.indexOf(parent) === i;\r\n        })\r\n        // Only the parents that aren't in he hidden nodes array remains\r\n        .filter((parent) => hiddenNodesArray.indexOf(parent) === -1);\r\n    return parents;\r\n};\r\n\r\nexport const descendants = (proof: NodeInterface[], nodeId: number): number[] => {\r\n    return proof[nodeId].children.concat(\r\n        proof[nodeId].children.reduce((acc: number[], childId) => acc.concat(descendants(proof, childId)), []),\r\n    );\r\n};\r\n\r\nexport const piNodeChildren = (proof: NodeInterface[], hiddenNodesArray: number[]): number[] => {\r\n    const children = hiddenNodesArray\r\n        // Get all the childrens\r\n        .reduce((acc: number[], hiddenNode) => acc.concat(proof[hiddenNode].children), [])\r\n        // Exclude the childrens that are part of the hidden nodes\r\n        .filter((child) => hiddenNodesArray.indexOf(child) === -1);\r\n    return children;\r\n};\r\n\r\nexport const findNodesClusters = (proof: NodeInterface[], hiddenNodesArray: number[]): number[][] => {\r\n    const hiddenNodes = [...hiddenNodesArray];\r\n    const clusters: number[][] = [];\r\n    let clusteredNodes = 0;\r\n    const parents = hiddenNodes.map((hiddenNode) => proof[hiddenNode].parents);\r\n\r\n    // Cluster the nodes based on similiar parents\r\n    parents.forEach((parent, clusterID) => {\r\n        // If not all of the nodes where clustered and is a non empty cluster\r\n        if (clusteredNodes !== parents.length && parents[clusterID].length) {\r\n            clusters.push([]);\r\n            parents.forEach((p, hiddenID) => {\r\n                // If those nodes have some parent in commom and they weren't verified yet\r\n                if (parents[hiddenID].length && parent.some((_p) => p.indexOf(_p) !== -1)) {\r\n                    clusters[clusters.length - 1].push(hiddenNodes[hiddenID]);\r\n                    // Removes these parents from the array, making shure they will not get verified again (already clustered)\r\n                    parents[hiddenID] = [];\r\n                    // Increases the number o clustered nodes\r\n                    clusteredNodes++;\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    let pastCluster: number[][] = [];\r\n    // Cluster the nodes until there aren't changes being made\r\n    while (JSON.stringify(pastCluster) != JSON.stringify(clusters)) {\r\n        pastCluster = [...clusters];\r\n        clusters.forEach((cluster, clusterID) => {\r\n            const clusterParents = proof[cluster[0]].parents;\r\n\r\n            // For each cluster\r\n            clusters.forEach((parentCluster, id) => {\r\n                // If this parentCluster (cluster) is parent of the current cluster\r\n                if (parentCluster.some((hiddenID) => clusterParents.indexOf(hiddenID) !== -1)) {\r\n                    // Group the nodes couple in one single cluster (the parent cluster)\r\n                    clusters[id] = clusters[id].concat(clusters[clusterID]);\r\n                    clusters.splice(clusterID, 1);\r\n                    clusterID--;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Filter the nodes with length 1\r\n    return clusters.filter((cluster) => cluster.length > 1);\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { processDot, piNodeChildren, piNodeParents, descendants, findNodesClusters } from './auxi';\r\nimport { NodeInterface, ProofState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ProofState = {\r\n    proof: [],\r\n    view: 'full',\r\n    style: 'graph',\r\n    hiddenNodes: [],\r\n    letMap: {},\r\n    visualInfo: [],\r\n};\r\n\r\nexport const proofSlice = createSlice({\r\n    name: 'proof',\r\n    initialState,\r\n\r\n    reducers: {\r\n        process: (state, action: PayloadAction<string>) => {\r\n            let proofJSON;\r\n            let dot = action.payload;\r\n            let isJSON = false;\r\n\r\n            // If the payload is a .json file\r\n            if (dot.indexOf('{\"dot\":\"') !== -1) {\r\n                proofJSON = JSON.parse(dot);\r\n                dot = proofJSON.dot;\r\n                isJSON = true;\r\n            }\r\n\r\n            const [proof, letMap] = processDot(dot);\r\n            state.proof = proof;\r\n            state.view = isJSON ? proofJSON.view : 'full';\r\n            state.hiddenNodes = isJSON ? proofJSON.hiddenNodes : [];\r\n            state.letMap = letMap;\r\n            if (isJSON) state.visualInfo = proofJSON.visualInfo;\r\n            else {\r\n                const visualInfo: ProofState['visualInfo'] = {};\r\n                state.proof.forEach((node) => {\r\n                    visualInfo[node.id] = {\r\n                        color: '#fff',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    };\r\n                });\r\n                state.visualInfo = visualInfo;\r\n            }\r\n        },\r\n        hideNodes: (state, action: PayloadAction<number[]>) => {\r\n            const toHideNodes = action.payload.filter(\r\n                (id) =>\r\n                    id > 0 &&\r\n                    id < state.proof.length &&\r\n                    state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1),\r\n            );\r\n\r\n            const clusters = findNodesClusters(state.proof, toHideNodes);\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat(clusters)\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi nodes\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            for (let i = 0; i < clusters.length; i++) {\r\n                state.visualInfo = {\r\n                    ...state.visualInfo,\r\n                    [piNodeId + i]: {\r\n                        color: '#555',\r\n                        x: 0,\r\n                        y: 0,\r\n                        selected: false,\r\n                    },\r\n                };\r\n            }\r\n\r\n            // Unselect the selected nodes\r\n            toHideNodes.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        foldAllDescendants: (state, action: PayloadAction<number>) => {\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .concat([\r\n                    [action.payload, ...descendants(state.proof, action.payload)].filter(\r\n                        (id) =>\r\n                            id > 0 &&\r\n                            id < state.proof.length &&\r\n                            state.hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(id) === -1),\r\n                    ),\r\n                ])\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Set the visual info for the new pi node and the root node\r\n            const piNodeId = Object.keys(state.visualInfo).length;\r\n            state.visualInfo = {\r\n                ...state.visualInfo,\r\n                [action.payload]: {\r\n                    ...state.visualInfo[action.payload],\r\n                    selected: false,\r\n                },\r\n                [piNodeId]: {\r\n                    color: '#555',\r\n                    x: 0,\r\n                    y: 0,\r\n                    selected: false,\r\n                },\r\n            };\r\n        },\r\n        unhideNodes: (state, action: PayloadAction<{ pi: number; hiddens: number[] }>) => {\r\n            const { pi, hiddens } = action.payload;\r\n            state.hiddenNodes = state.hiddenNodes\r\n                .map((hiddenNodesArray) => hiddenNodesArray.filter((id) => hiddens.indexOf(id) === -1))\r\n                .filter((hiddenNodesArray) => hiddenNodesArray.length > 0);\r\n\r\n            // Make sure the ids are realocated\r\n            const size = Object.keys(state.visualInfo).length;\r\n            for (let i = pi; i < size; i++) {\r\n                state.visualInfo[pi] = state.visualInfo[pi + 1];\r\n            }\r\n            // Delete the last position\r\n            delete state.visualInfo[size - 1];\r\n\r\n            // Unselect the hidden nodes\r\n            hiddens.forEach(\r\n                (id) =>\r\n                    (state.visualInfo[id] = {\r\n                        ...state.visualInfo[id],\r\n                        selected: false,\r\n                    }),\r\n            );\r\n        },\r\n        setVisualInfo: (state, action: PayloadAction<ProofState['visualInfo']>) => {\r\n            state.visualInfo = action.payload;\r\n        },\r\n        selectNodes: (state, action: PayloadAction<number[]>) => {\r\n            action.payload.forEach((id) => {\r\n                if (id >= 0 && id < Object.keys(state.visualInfo).length) {\r\n                    state.visualInfo[id].selected = true;\r\n                }\r\n            });\r\n        },\r\n        changeStyle: (state, action: PayloadAction<'graph' | 'directory'>) => {\r\n            switch (action.payload) {\r\n                case 'graph':\r\n                    state.style = 'graph';\r\n                    break;\r\n                case 'directory':\r\n                    state.style = 'directory';\r\n                    break;\r\n            }\r\n        },\r\n        applyView: (state, action: PayloadAction<'basic' | 'propositional' | 'full'>) => {\r\n            const visualInfoSize = Object.keys(state.visualInfo).length;\r\n            const proofSize = state.proof.length;\r\n            // Delete all the pi nodes\r\n            for (let i = 0; i < visualInfoSize - proofSize; i++) {\r\n                delete state.visualInfo[proofSize + i];\r\n            }\r\n\r\n            switch (action.payload) {\r\n                //\r\n                case 'basic':\r\n                    state.view = 'basic';\r\n                    state.hiddenNodes = [\r\n                        state.proof\r\n                            .filter((proofNode) => proofNode.views.indexOf('basic') === -1)\r\n                            .map((proofNode) => proofNode.id),\r\n                    ];\r\n\r\n                    // Set the visual info for the new pi nodes\r\n                    state.visualInfo = {\r\n                        ...state.visualInfo,\r\n                        [Object.keys(state.visualInfo).length]: {\r\n                            color: '#555',\r\n                            x: 0,\r\n                            y: 0,\r\n                            selected: false,\r\n                        },\r\n                    };\r\n\r\n                    break;\r\n                // Hide all nodes that haven't view equal to basic and propositional\r\n                case 'propositional':\r\n                    state.view = 'propositional';\r\n                    state.hiddenNodes = [\r\n                        // Hide nodes that aren't basics a\r\n                        // nos q n são basicos (folhas e o no raiz) e nem proposicionais (outra classe q n tem no .dot1)\r\n                        state.proof\r\n                            .filter(\r\n                                (node) =>\r\n                                    node.views.indexOf('basic') === -1 && node.views.indexOf('propositional') === -1,\r\n                            )\r\n                            .map((node) => node.id),\r\n                    ];\r\n\r\n                    // Set the visual info for the new pi nodes\r\n                    state.visualInfo = {\r\n                        ...state.visualInfo,\r\n                        [Object.keys(state.visualInfo).length]: {\r\n                            color: '#555',\r\n                            x: 0,\r\n                            y: 0,\r\n                            selected: false,\r\n                        },\r\n                    };\r\n\r\n                    break;\r\n                // View without hidden Nodes\r\n                case 'full':\r\n                    state.view = 'full';\r\n                    state.hiddenNodes = [];\r\n                    break;\r\n            }\r\n        },\r\n        applyColor: (state, action: PayloadAction<string>) => {\r\n            Object.keys(state.visualInfo).forEach((id) => {\r\n                if (state.visualInfo[Number(id)].selected) {\r\n                    state.visualInfo[Number(id)].color = action.payload;\r\n                    state.visualInfo[Number(id)].selected = false;\r\n                }\r\n            });\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    process,\r\n    hideNodes,\r\n    foldAllDescendants,\r\n    unhideNodes,\r\n    setVisualInfo,\r\n    selectNodes,\r\n    changeStyle,\r\n    applyView,\r\n    applyColor,\r\n} = proofSlice.actions;\r\n\r\nexport const selectProof = (state: RootState): NodeInterface[] => {\r\n    let proof = state.proof.proof;\r\n    const hiddenNodes = state.proof.hiddenNodes;\r\n\r\n    hiddenNodes.forEach((hiddenNodesArray) => {\r\n        const children = piNodeChildren(proof, hiddenNodesArray);\r\n        const parents = piNodeParents(proof, hiddenNodesArray);\r\n        const piNodeId = proof.length;\r\n        proof = proof.concat({\r\n            id: piNodeId,\r\n            conclusion: '∴',\r\n            rule: 'π',\r\n            args: '',\r\n            views: [],\r\n            children: children,\r\n            parents: parents,\r\n            hiddenNodes: hiddenNodesArray.map((hiddenNode) => proof[hiddenNode]),\r\n            descendants: 1,\r\n        });\r\n\r\n        const piNode = proof[piNodeId];\r\n\r\n        children.forEach(\r\n            (childId) =>\r\n                (proof[childId] = {\r\n                    ...proof[childId],\r\n                    parents: proof[childId].parents\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n        parents.forEach(\r\n            (parentId) =>\r\n                (proof[parentId] = {\r\n                    ...proof[parentId],\r\n                    children: proof[parentId].children\r\n                        .concat([piNodeId])\r\n                        .filter((proofNode) => hiddenNodesArray.indexOf(proofNode) === -1),\r\n                }),\r\n        );\r\n\r\n        // Get the high hierarchy nodes in this pi node\r\n        const highHierarchyNodes = hiddenNodesArray?.filter((node) =>\r\n            proof[node].parents.every((parentId) => piNode.parents.indexOf(parentId) !== -1),\r\n        );\r\n\r\n        // Get the conclusion array\r\n        const conclusion = highHierarchyNodes.map((node) => ' ' + proof[node].conclusion);\r\n        piNode.conclusion = conclusion.length > 1 ? `[${conclusion} ]` : `${conclusion}`;\r\n\r\n        // Get the rule array\r\n        const rule = highHierarchyNodes.map((node) => ' ' + proof[node].rule);\r\n        piNode.rule = rule.length > 1 ? `[${rule} ]` : `${rule} `;\r\n\r\n        // Set the descendants number\r\n        piNode.descendants = piNode.children.reduce(\r\n            (ac: number, childID) => ((ac += proof[childID].descendants), ac),\r\n            1,\r\n        );\r\n    });\r\n\r\n    proof = proof.filter((proofNode) =>\r\n        hiddenNodes.every((hiddenNodesArray) => hiddenNodesArray.indexOf(proofNode.id) === -1),\r\n    );\r\n\r\n    return proof;\r\n};\r\n\r\nexport const selectView = (state: RootState): 'basic' | 'propositional' | 'full' => {\r\n    return state.proof.view;\r\n};\r\n\r\nexport const selectStyle = (state: RootState): 'graph' | 'directory' => {\r\n    return state.proof.style;\r\n};\r\n\r\nexport const selectLetMap = (state: RootState): { [Key: string]: string } => {\r\n    return state.proof.letMap;\r\n};\r\n\r\nexport const selectVisualInfo = (state: RootState): ProofState['visualInfo'] => {\r\n    if (state.proof.proof.length) return state.proof.visualInfo;\r\n    // If there is no proof node\r\n    return { 0: { color: '#555', x: 0, y: 0, selected: false } };\r\n};\r\n\r\nexport const selectHiddenNodes = (state: RootState): number[][] => {\r\n    return state.proof.hiddenNodes;\r\n};\r\n\r\nexport default proofSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { ThemeState } from '../../../interfaces/interfaces';\r\n\r\nconst initialState: ThemeState = {\r\n    value: true,\r\n};\r\n\r\nexport const themeSlice = createSlice({\r\n    name: 'theme',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        toggle: (state) => {\r\n            state.value = !state.value;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { toggle } = themeSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice theme. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectTheme = (state: RootState): boolean => state.theme.value;\r\n\r\nexport default themeSlice.reducer;\r\n","import { KonvaEventObject } from 'konva/types/Node';\r\nimport React from 'react';\r\nimport { Label, Text, Tag, Group } from 'react-konva';\r\nimport { NodeProps } from '../../../interfaces/interfaces';\r\n\r\nfunction textColorFromBg(bgColor: string) {\r\n    const r = parseInt(bgColor.substring(0, 2), 16);\r\n    const g = parseInt(bgColor.substring(2, 4), 16);\r\n    const b = parseInt(bgColor.substring(4, 6), 16);\r\n    return r * 0.299 + g * 0.587 + b * 0.114 > 150 ? '#000000' : '#ffffff';\r\n}\r\n\r\nfunction sixDigitColor(bgColor: string): string {\r\n    if (bgColor.charAt(0) === '#') {\r\n        if (bgColor.length == 4) {\r\n            return bgColor\r\n                .substring(1, 7)\r\n                .split('')\r\n                .map((c) => c + c)\r\n                .join('');\r\n        } else if (bgColor.length == 7) {\r\n            return bgColor.substring(1, 7);\r\n        }\r\n    } else {\r\n        if (bgColor.length == 3) {\r\n            return bgColor\r\n                .split('')\r\n                .map((c) => c + c)\r\n                .join('');\r\n        } else if (bgColor.length == 6) {\r\n            return bgColor;\r\n        }\r\n    }\r\n    return '000000';\r\n}\r\n\r\nconst Node: React.FC<NodeProps> = (props: NodeProps): JSX.Element => {\r\n    const {\r\n        id,\r\n        conclusion,\r\n        rule,\r\n        args,\r\n        x,\r\n        y,\r\n        nHided,\r\n        nDescendants,\r\n        hiddenNodes,\r\n        selected,\r\n        color,\r\n        setNodeOnFocus,\r\n        toggleNodeSelection,\r\n        updateNodePosition,\r\n        openDrawer,\r\n        onDragEnd,\r\n        createTree,\r\n    } = props;\r\n\r\n    const handleClick = (e: KonvaEventObject<MouseEvent>): void => {\r\n        if (e.evt.button === 0) {\r\n            if (e.evt.shiftKey) {\r\n                toggleNodeSelection(id);\r\n            } else {\r\n                openDrawer(\r\n                    {\r\n                        rule: rule,\r\n                        args: args,\r\n                        conclusion: conclusion,\r\n                        nHided: nHided,\r\n                        nDescendants: nDescendants - (rule === 'π' ? 0 : 0),\r\n                        hiddenNodes: hiddenNodes,\r\n                    },\r\n                    createTree(id),\r\n                );\r\n            }\r\n        } else if (e.evt.button === 2) {\r\n            setNodeOnFocus(id);\r\n            const menuNode = document.getElementById('menu');\r\n            if (menuNode) {\r\n                menuNode.style.top = `${e.evt.clientY}px`;\r\n                menuNode.style.left = `${e.evt.clientX}px`;\r\n                menuNode.style.display = 'initial';\r\n                window.addEventListener('click', () => {\r\n                    menuNode.style.display = 'none';\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const bgColor = color;\r\n    const tagProps = {\r\n        fill: bgColor,\r\n        stroke: selected ? 'red' : 'black',\r\n        strokeWidth: selected ? 3 : 1,\r\n    };\r\n    const textProps = {\r\n        align: 'center',\r\n        fill: textColorFromBg(sixDigitColor(bgColor)),\r\n        fontSize: 15,\r\n        height: 35,\r\n        padding: 10,\r\n        width: 300,\r\n    };\r\n    const metaInfoProps = { ...textProps, width: 250 };\r\n\r\n    const nHidedStr = nHided ? `#hidden: ${nHided}` : '';\r\n    const nDescendantsStr = ` #descendants: ${nDescendants}`;\r\n    const ruleTxt = nHided ? 'π' : rule;\r\n\r\n    return (\r\n        <Group\r\n            draggable\r\n            id={id.toString()}\r\n            key={id}\r\n            onDragMove={(e) => {\r\n                updateNodePosition(id, e.target.attrs.x, e.target.attrs.y);\r\n            }}\r\n            onDragEnd={onDragEnd}\r\n            x={x}\r\n            y={y}\r\n            onClick={handleClick}\r\n        >\r\n            <Label x={0} y={0}>\r\n                <Tag {...tagProps} />\r\n                <Text {...textProps} text={conclusion} />\r\n            </Label>\r\n            <Label x={0} y={35}>\r\n                <Tag {...tagProps} />\r\n                <Text {...textProps} text={ruleTxt} />\r\n            </Label>\r\n            <Label x={0} y={70} {...{ align: 'right' }}>\r\n                <Tag {...tagProps} />\r\n                <Text {...{ ...metaInfoProps, width: 50 }} text={id.toString()} />\r\n            </Label>\r\n            <Label x={50} y={70}>\r\n                <Tag {...tagProps} />\r\n                <Text {...metaInfoProps} text={nHidedStr + nDescendantsStr} />\r\n            </Label>\r\n        </Group>\r\n    );\r\n};\r\n\r\nexport default Node;\r\n","import React from 'react';\r\nimport { Arrow } from 'react-konva';\r\n\r\nimport { LineProps } from '../../../interfaces/interfaces';\r\n\r\nconst Line = ({ key, points }: LineProps): JSX.Element => {\r\n    return <Arrow key={key} strokeWidth={1} stroke=\"black\" fill=\"black\" points={[...points]} />;\r\n};\r\n\r\nexport default Line;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ControlGroup, Button, InputGroup } from '@blueprintjs/core';\r\n\r\nconst Menu = ({\r\n    unfold,\r\n    foldSelectedNodes,\r\n    foldAllDescendants,\r\n    changeNodeColor,\r\n    currentColor,\r\n    options,\r\n}: {\r\n    unfold: () => void;\r\n    foldSelectedNodes: () => void;\r\n    foldAllDescendants: () => void;\r\n    changeNodeColor: (color: string) => void;\r\n    currentColor: string;\r\n    options: { unfold: boolean; foldSelected: boolean; foldAllDescendants: boolean };\r\n}): JSX.Element => {\r\n    const [color, setColor] = useState(currentColor);\r\n\r\n    useEffect(() => {\r\n        setColor(currentColor);\r\n    }, [currentColor]);\r\n\r\n    return (\r\n        <div className=\"bp3-popover2-content\">\r\n            <ul id=\"menu\" className=\"bp3-menu\">\r\n                {options.unfold ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => unfold()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-open\">\r\n                                <span> Unfold</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                {options.foldSelected ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => foldSelectedNodes()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\r\n                                <span> Fold selected nodes</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                {options.foldAllDescendants ? (\r\n                    <li className=\"\">\r\n                        <a className=\"bp3-menu-item\" onClick={() => foldAllDescendants()}>\r\n                            <div className=\"bp3-text-overflow-ellipsis bp3-fill bp3-icon-eye-off\">\r\n                                <span> Fold all descendants</span>\r\n                            </div>\r\n                        </a>\r\n                    </li>\r\n                ) : null}\r\n                <li className=\"\">\r\n                    <a className=\"bp3-menu-item\">\r\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\r\n                            <span>\r\n                                <span onClick={() => changeNodeColor('#f72b34')}> 🟥</span>\r\n                                <span onClick={() => changeNodeColor('#ff8334')}> 🟧</span>\r\n                                <span onClick={() => changeNodeColor('#ffc149')}> 🟨</span>\r\n                                <span onClick={() => changeNodeColor('#60aa51')}> 🟩</span>\r\n                                <span onClick={() => changeNodeColor('#0097e4')}> 🟦</span>\r\n                                <span onClick={() => changeNodeColor('#a73da5')}> 🟪</span>\r\n                                <span onClick={() => changeNodeColor('#a95a49')}> 🟫</span>\r\n                                <span onClick={() => changeNodeColor('#464646')}> ⬛</span>\r\n                                <span onClick={() => changeNodeColor('#f0f0f0')}> ⬜</span>\r\n                            </span>\r\n                        </div>\r\n                    </a>\r\n                </li>\r\n                <li className=\"\">\r\n                    <a className=\"bp3-menu-item\">\r\n                        <div className=\"bp3-text-overflow-ellipsis bp3-fill\">\r\n                            <ControlGroup\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                }}\r\n                                fill={true}\r\n                                vertical={false}\r\n                            >\r\n                                <InputGroup\r\n                                    placeholder={currentColor}\r\n                                    value={color}\r\n                                    onChange={(e) => setColor(e.target.value)}\r\n                                />\r\n                                <Button\r\n                                    icon=\"style\"\r\n                                    onClick={() => {\r\n                                        changeNodeColor(color);\r\n                                        setColor('');\r\n                                    }}\r\n                                    disabled={color.match(/^#([0-9a-f]{3}){1,2}$/i) === null}\r\n                                ></Button>\r\n                            </ControlGroup>\r\n                        </div>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport Konva from 'konva';\r\nimport dagre from 'dagre';\r\nimport Node from './VisualizerNode';\r\nimport Line from './VisualizerLine';\r\nimport Menu from './VisualizerMenu';\r\n\r\nimport {\r\n    NodeProps,\r\n    LineProps,\r\n    TreeNode,\r\n    CanvasPropsAndRedux,\r\n    NodeInterface,\r\n    ProofState,\r\n    ReduxState,\r\n} from '../../../interfaces/interfaces';\r\n\r\nimport '../../../scss/VisualizerCanvas.scss';\r\n\r\nimport { CanvasProps, CanvasState } from '../../../interfaces/interfaces';\r\nimport { connect } from 'react-redux';\r\nimport { selectProof, selectVisualInfo } from '../../../store/features/proof/proofSlice';\r\nimport {\r\n    hideNodes,\r\n    unhideNodes,\r\n    foldAllDescendants,\r\n    applyView,\r\n    setVisualInfo,\r\n} from '../../../store/features/proof/proofSlice';\r\n\r\nfunction handleWheel(e: Konva.KonvaEventObject<WheelEvent>): { stageScale: number; stageX: number; stageY: number } {\r\n    e.evt.preventDefault();\r\n\r\n    const scaleBy = 1.08;\r\n    const stage = e.target.getStage();\r\n    if (stage) {\r\n        const oldScale = stage.scaleX();\r\n        const pointerPosition = stage.getPointerPosition();\r\n        let x, y;\r\n\r\n        if (pointerPosition) {\r\n            [x, y] = [pointerPosition.x, pointerPosition.y];\r\n        } else {\r\n            [x, y] = [0, 0];\r\n        }\r\n\r\n        const mousePointTo = {\r\n            x: x / oldScale - stage.x() / oldScale,\r\n            y: y / oldScale - stage.y() / oldScale,\r\n        };\r\n\r\n        const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\r\n\r\n        return {\r\n            stageScale: newScale,\r\n            stageX: -(mousePointTo.x - x / newScale) * newScale,\r\n            stageY: -(mousePointTo.y - y / newScale) * newScale,\r\n        };\r\n    }\r\n    return {\r\n        stageScale: 1,\r\n        stageX: 0,\r\n        stageY: 0,\r\n    };\r\n}\r\n\r\nclass Canvas extends Component<CanvasPropsAndRedux, CanvasState> {\r\n    constructor(props: CanvasPropsAndRedux) {\r\n        super(props);\r\n        this.componentDidUpdate = this.componentDidUpdate.bind(this);\r\n        this.setNodeOnFocus = this.setNodeOnFocus.bind(this);\r\n\r\n        this.state = {\r\n            canvasSize: {\r\n                width: 520,\r\n                height: 300,\r\n            },\r\n            stage: {\r\n                stageScale: 1,\r\n                stageX: 0,\r\n                stageY: 0,\r\n            },\r\n            showingNodes: {},\r\n            showingEdges: {},\r\n            nodeOnFocus: NaN,\r\n            nodesSelected: [],\r\n            proof: [],\r\n            visualInfo: {},\r\n        };\r\n    }\r\n    // TODO: achar uma maneira melhor de fazer esse firstRender\r\n    private static renderData = { count: 0, fileChanged: false };\r\n\r\n    // Allow to reRender the tree\r\n    static reRender = () => (Canvas.renderData.count = 0);\r\n    static blockRender = () => (Canvas.renderData.count = 2);\r\n    static allowRenderNewFile = () => (Canvas.renderData.fileChanged = true);\r\n\r\n    static copyNodePosition = (\r\n        visualInfo: ProofState['visualInfo'],\r\n        showingNodes: CanvasState['showingNodes'],\r\n    ): ProofState['visualInfo'] => {\r\n        // Get the current position of the nodes and create a proofState with them included\r\n        const newVisualInfo: ProofState['visualInfo'] = {};\r\n        Object.keys(visualInfo).forEach((id) => {\r\n            const key = Number(id);\r\n\r\n            if (showingNodes[key]) {\r\n                newVisualInfo[key] = {\r\n                    ...visualInfo[key],\r\n                    x: showingNodes[key].props.x,\r\n                    y: showingNodes[key].props.y,\r\n                };\r\n            } else {\r\n                newVisualInfo[key] = {\r\n                    ...visualInfo[key],\r\n                };\r\n            }\r\n        });\r\n        return newVisualInfo;\r\n    };\r\n\r\n    static newNodeProps = (node: NodeInterface, visualInfos: ProofState['visualInfo']): NodeProps => {\r\n        const visualInfo = visualInfos[node.id];\r\n        return {\r\n            id: node.id,\r\n            conclusion: node.conclusion,\r\n            rule: node.rule,\r\n            args: node.args,\r\n            x: visualInfo.x,\r\n            y: visualInfo.y,\r\n            nHided: node.hiddenNodes ? node.hiddenNodes.length : 0,\r\n            nDescendants: node.descendants - 1,\r\n            hiddenNodes: node.hiddenNodes ? node.hiddenNodes.map((node) => node.id) : [],\r\n            selected: visualInfo.selected,\r\n            color: visualInfo.color,\r\n            setNodeOnFocus: () => undefined,\r\n            toggleNodeSelection: () => undefined,\r\n            updateNodePosition: () => undefined,\r\n            openDrawer: () => undefined,\r\n            onDragEnd: () => undefined,\r\n            createTree: () => {\r\n                return [];\r\n            },\r\n        };\r\n    };\r\n\r\n    static getDerivedStateFromProps(props: CanvasPropsAndRedux, current_state: CanvasState) {\r\n        const proofChanged = JSON.stringify(current_state.proof) !== JSON.stringify(props.proof);\r\n        const visualInfoChanged = JSON.stringify(current_state.visualInfo) !== JSON.stringify(props.visualInfo);\r\n        const isNewFile = Canvas.renderData.fileChanged;\r\n\r\n        // If the proof or visual info changed or we have a new file being uploaded\r\n        if (proofChanged || visualInfoChanged || isNewFile) {\r\n            // Create the showing nodes array\r\n            const showingNodes: CanvasState['showingNodes'] = {};\r\n            props.proof.forEach((node, id) => {\r\n                showingNodes[node.id] = <Node key={id} {...Canvas.newNodeProps(node, props.visualInfo)} />;\r\n            });\r\n\r\n            // If has nodes and can render\r\n            if (showingNodes[0] && Canvas.renderData.count < 2) {\r\n                Canvas.renderData.count++;\r\n\r\n                const g = new dagre.graphlib.Graph();\r\n                g.setGraph({ rankdir: 'BT', ranker: 'tight-tree' });\r\n                g.setDefaultEdgeLabel(function () {\r\n                    return {};\r\n                });\r\n                props.proof.forEach((node) => {\r\n                    g.setNode(node.id.toString(), { width: 300, height: 130 });\r\n                    node.children.forEach((child) => {\r\n                        g.setEdge(child.toString(), node.id.toString());\r\n                    });\r\n                });\r\n                dagre.layout(g);\r\n\r\n                const xOffset = g.node('0').x - (showingNodes[0].props.x ? showingNodes[0].props.x : 0);\r\n                const yOffset = g.node('0').y - (showingNodes[0].props.y ? showingNodes[0].props.y : 0);\r\n                g.nodes().forEach((v) => {\r\n                    try {\r\n                        const { x, y } = g.node(v);\r\n                        const key = parseInt(v);\r\n                        showingNodes[key] = (\r\n                            <Node\r\n                                {...{\r\n                                    ...showingNodes[key].props,\r\n                                    x: x - xOffset,\r\n                                    y: y - yOffset,\r\n                                }}\r\n                            />\r\n                        );\r\n                    } catch (e) {\r\n                        console.log(e);\r\n                    }\r\n                });\r\n\r\n                props.setVisualInfo(Canvas.copyNodePosition(props.visualInfo, showingNodes));\r\n            }\r\n            // Reset the new file indicator if it's true\r\n            if (isNewFile) Canvas.renderData.fileChanged = false;\r\n\r\n            return {\r\n                showingNodes: showingNodes,\r\n                showingEdges: {},\r\n                proof: props.proof,\r\n                visualInfo: props.visualInfo,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        const { showingNodes } = this.state;\r\n        const { proof, visualInfo } = this.props;\r\n\r\n        const newShowingNodes: CanvasState['showingNodes'] = {};\r\n        proof.forEach((node, id) => {\r\n            newShowingNodes[node.id] = <Node key={id} {...Canvas.newNodeProps(node, visualInfo)} />;\r\n        });\r\n\r\n        this.setState({ proof: proof, showingNodes: newShowingNodes });\r\n\r\n        if (showingNodes[0]) {\r\n            const [width, height] = [window.innerWidth, window.innerHeight - 50];\r\n\r\n            // Make sure every time the Canvas is mounted the props are passed to the showing nodes\r\n            this.updateEdgesAndFuncs();\r\n\r\n            this.setState({\r\n                canvasSize: {\r\n                    width,\r\n                    height,\r\n                },\r\n                stage: {\r\n                    stageScale: 1,\r\n                    stageX: width / 2 - (showingNodes[0].props.x + 300 / 2),\r\n                    stageY: height / 10 - (showingNodes[0].props.y + 30 / 2),\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: CanvasPropsAndRedux) {\r\n        // If the proof changed\r\n        if (prevProps.proof !== this.props.proof) {\r\n            this.updateEdgesAndFuncs();\r\n        }\r\n    }\r\n\r\n    updateEdgesAndFuncs() {\r\n        const { showingNodes, showingEdges } = this.state;\r\n        const { proof } = this.props;\r\n\r\n        // Update edges\r\n        proof.forEach((node) => {\r\n            if (showingNodes[node.parents[0]]) {\r\n                showingEdges[`${node.id}->${node.parents[0]}`] = Line(\r\n                    this.LineProps(\r\n                        `${node.id}->${node.parents[0]}`,\r\n                        showingNodes[node.id].props,\r\n                        showingNodes[node.parents[0]].props,\r\n                    ),\r\n                );\r\n            }\r\n        });\r\n        Object.keys(showingNodes).forEach((nodeId: string) => {\r\n            // Make sure a function is updated once\r\n            if (!showingNodes[parseInt(nodeId)].props.setNodeOnFocus.length) {\r\n                const { openDrawer } = this.props;\r\n\r\n                // Set the node functions\r\n                showingNodes[parseInt(nodeId)] = (\r\n                    <Node\r\n                        {...{\r\n                            ...showingNodes[parseInt(nodeId)].props,\r\n                            setNodeOnFocus: this.setNodeOnFocus,\r\n                            toggleNodeSelection: this.toggleNodeSelection,\r\n                            updateNodePosition: this.updateNodePosition,\r\n                            openDrawer: openDrawer,\r\n                            onDragEnd: this.saveNodePosition,\r\n                            createTree: this.createTree,\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n        });\r\n        this.setState({ showingEdges, showingNodes });\r\n    }\r\n\r\n    /* NODE MENU ACTIONS */\r\n    foldAllDescendants = (): void => {\r\n        const { nodeOnFocus } = this.state;\r\n        const { foldAllDescendants } = this.props;\r\n\r\n        Canvas.reRender();\r\n        foldAllDescendants(nodeOnFocus);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    foldSelectedNodes = (): void => {\r\n        const { nodesSelected } = this.state;\r\n        const { hideNodes } = this.props;\r\n\r\n        Canvas.reRender();\r\n        hideNodes(nodesSelected);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    unfold = (): void => {\r\n        const { nodeOnFocus, proof } = this.state;\r\n        const { unhideNodes } = this.props;\r\n\r\n        // Get the pi node (to be unfold)\r\n        const obj = proof.find((node) => node.id === nodeOnFocus);\r\n        // Get the hidden nodes and their ids\r\n        const hiddenNodes = obj ? (obj.hiddenNodes ? obj.hiddenNodes : []) : [];\r\n        const hiddenIds = hiddenNodes ? hiddenNodes.map((node) => node.id) : [];\r\n\r\n        Canvas.reRender();\r\n        unhideNodes({ pi: nodeOnFocus, hiddens: hiddenIds });\r\n\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    changeNodeColor = (color: string): void => {\r\n        const { showingNodes, nodesSelected, nodeOnFocus } = this.state;\r\n        const { setVisualInfo } = this.props;\r\n        let { visualInfo } = this.props;\r\n\r\n        // Save the current position\r\n        nodesSelected.forEach((nodeId) => {\r\n            visualInfo = {\r\n                ...visualInfo,\r\n                [nodeId]: {\r\n                    ...visualInfo[nodeId],\r\n                    color: color,\r\n                    selected: false,\r\n                },\r\n            };\r\n        });\r\n        if (!nodesSelected.length && showingNodes[nodeOnFocus]) {\r\n            visualInfo = {\r\n                ...visualInfo,\r\n                [nodeOnFocus]: { ...visualInfo[nodeOnFocus], color: color, selected: false },\r\n            };\r\n        }\r\n\r\n        setVisualInfo(visualInfo);\r\n        this.setState({ nodesSelected: [] });\r\n    };\r\n\r\n    toggleNodeSelection = (id: number): void => {\r\n        let { nodesSelected } = this.state;\r\n        const { visualInfo, setVisualInfo } = this.props;\r\n\r\n        if (visualInfo[id].selected) {\r\n            nodesSelected = nodesSelected.filter((nodeId) => nodeId !== id);\r\n        } else {\r\n            nodesSelected.push(id);\r\n        }\r\n\r\n        // Save the current position\r\n        setVisualInfo({\r\n            ...visualInfo,\r\n            [id]: {\r\n                ...visualInfo[id],\r\n                selected: !visualInfo[id].selected,\r\n            },\r\n        });\r\n\r\n        this.setState({ nodesSelected });\r\n    };\r\n\r\n    /*TREE*/\r\n    // TODO: Fazer create tree sem ser recursivo, criando os nós filos sempre que o node pedir para abrir um no filho\r\n    createTree = (id: number): TreeNode[] => {\r\n        const { proof } = this.state;\r\n        const rootNode = proof.find((o) => o.id === id);\r\n        const tree: TreeNode[] = [];\r\n\r\n        // Make sure found the node\r\n        if (rootNode) {\r\n            let descendants: TreeNode[] = [];\r\n            // For each children\r\n            rootNode.children.forEach((childID) => {\r\n                // Find the child\r\n                const child = proof.find((o) => o.id === childID);\r\n\r\n                // Get the current child tree\r\n                if (child) descendants = descendants.concat(this.createTree(child.id));\r\n            });\r\n\r\n            const label = rootNode.hiddenNodes?.length\r\n                ? `${rootNode.id} : π ➜ ${rootNode.conclusion}`\r\n                : `${rootNode.id} : ${rootNode.conclusion}`;\r\n\r\n            // Create the rootNode tree\r\n            tree.push({\r\n                id: rootNode.id,\r\n                icon: 'graph',\r\n                label: label,\r\n                secondaryLabel: `${rootNode.rule}`,\r\n                rule: rootNode.rule,\r\n                args: rootNode.args,\r\n                conclusion: rootNode.conclusion,\r\n                parentId: rootNode.parents[0],\r\n                descendants: rootNode.descendants - 1,\r\n                nHided: rootNode.hiddenNodes ? rootNode.hiddenNodes.length : 0,\r\n                hiddenNodes: rootNode.hiddenNodes ? rootNode.hiddenNodes.map((node) => node.id) : [],\r\n                childNodes: descendants,\r\n                parentsId: rootNode.parents,\r\n                hasCaret: Boolean(descendants.length),\r\n            });\r\n        }\r\n        return tree;\r\n    };\r\n\r\n    /* UTILS */\r\n    setNodeOnFocus = (id: number): void => {\r\n        this.setState({ nodeOnFocus: id });\r\n    };\r\n\r\n    LineProps = (key: string, from: NodeProps, to: NodeProps): LineProps => ({\r\n        key,\r\n        points: [from.x + 150, from.y, to.x + 150, to.y + 105],\r\n    });\r\n\r\n    saveNodePosition = (): void => {\r\n        const { visualInfo, setVisualInfo } = this.props;\r\n        const { showingNodes } = this.state;\r\n\r\n        // Get the current position of the nodes and create a proofState with them included\r\n        setVisualInfo(Canvas.copyNodePosition(visualInfo, showingNodes));\r\n    };\r\n\r\n    updateNodePosition = (key: number, x: number, y: number): void => {\r\n        const { showingNodes, showingEdges } = this.state;\r\n\r\n        showingNodes[key] = <Node {...{ ...showingNodes[key].props, x, y }} />;\r\n\r\n        Object.keys(showingEdges)\r\n            .filter((edgeKey) => edgeKey.indexOf(key.toString()) !== -1)\r\n            .forEach((edge) => {\r\n                const [from, to] = edge.split('->').map((x) => parseInt(x));\r\n                showingEdges[edge] = Line(this.LineProps(edge, showingNodes[from].props, showingNodes[to].props));\r\n            });\r\n        this.setState({ showingNodes, showingEdges });\r\n    };\r\n\r\n    render(): JSX.Element {\r\n        const { canvasSize, stage, showingNodes, showingEdges, nodesSelected, nodeOnFocus, proof } = this.state;\r\n        const color = showingNodes[nodeOnFocus] ? showingNodes[nodeOnFocus].props.color : '';\r\n        const found = proof.find((o) => o.id === nodeOnFocus);\r\n\r\n        return (\r\n            <div>\r\n                <Menu\r\n                    unfold={this.unfold}\r\n                    foldSelectedNodes={this.foldSelectedNodes}\r\n                    foldAllDescendants={this.foldAllDescendants}\r\n                    changeNodeColor={this.changeNodeColor}\r\n                    options={{\r\n                        unfold: showingNodes[nodeOnFocus] ? Boolean(showingNodes[nodeOnFocus].props.nHided) : false,\r\n                        foldSelected: nodesSelected.length && nodesSelected.includes(nodeOnFocus) ? true : false,\r\n                        foldAllDescendants:\r\n                            Boolean(found?.children.length) && !Boolean(found?.hiddenNodes?.length) && found?.id != 0,\r\n                    }}\r\n                    currentColor={color}\r\n                ></Menu>\r\n                <Stage\r\n                    draggable\r\n                    onDragMove={() => null}\r\n                    onDragEnd={() => null}\r\n                    width={canvasSize.width}\r\n                    height={canvasSize.height}\r\n                    onWheel={(e) => this.setState({ stage: handleWheel(e) })}\r\n                    scaleX={stage.stageScale}\r\n                    scaleY={stage.stageScale}\r\n                    x={stage.stageX}\r\n                    y={stage.stageY}\r\n                    onContextMenu={(e) => e.evt.preventDefault()}\r\n                >\r\n                    <Layer>\r\n                        {Object.keys(showingEdges).length > 0 &&\r\n                            Object.keys(showingEdges).map(function (key) {\r\n                                return showingEdges[key];\r\n                            })}\r\n                        {Object.keys(showingNodes).length > 0 &&\r\n                            Object.keys(showingNodes).map(\r\n                                (value: string): JSX.Element => showingNodes[parseInt(value)],\r\n                            )}\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState, ownProps: CanvasProps) {\r\n    return {\r\n        proof: selectProof(state),\r\n        visualInfo: selectVisualInfo(state),\r\n        ...ownProps,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = { hideNodes, unhideNodes, foldAllDescendants, applyView, setVisualInfo };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Canvas);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\nimport { selectDot, selectFileName } from '../../store/features/file/fileSlice';\r\nimport {\r\n    applyView,\r\n    changeStyle,\r\n    selectNodes,\r\n    applyColor,\r\n    hideNodes,\r\n    foldAllDescendants,\r\n    unhideNodes,\r\n    selectVisualInfo,\r\n    selectProof,\r\n    selectHiddenNodes,\r\n    selectView,\r\n} from '../../store/features/proof/proofSlice';\r\nimport { ReduxState, NavbarPropsAndRedux, NavbarProps } from '../../interfaces/interfaces';\r\n\r\nimport { Alignment, Button, Icon, InputGroup, Navbar, Switch, Menu, MenuItem } from '@blueprintjs/core';\r\nimport { Popover2 } from '@blueprintjs/popover2';\r\nimport { selectTheme, toggle } from '../../store/features/theme/themeSlice';\r\nimport '../../scss/VisualizerNavbar.scss';\r\nimport Canvas from '../VisualizerStage/Canvas/VisualizerCanvas';\r\n\r\nfunction useWindowSize() {\r\n    // Initialize state with undefined width/height so server and client renders match\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n    const [windowSize, setWindowSize] = useState({\r\n        width: 0,\r\n        height: 0,\r\n    });\r\n    useEffect(() => {\r\n        // Handler to call on window resize\r\n        function handleResize() {\r\n            // Set window width/height to state\r\n            setWindowSize({\r\n                width: window.innerWidth,\r\n                height: window.innerHeight,\r\n            });\r\n        }\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return windowSize;\r\n}\r\n\r\nconst VisualizerNavbar: React.FC<NavbarPropsAndRedux> = ({\r\n    setDialogIsOpen,\r\n    setDialogContent,\r\n    setDrawerIsOpen,\r\n    visualInfo,\r\n    proof,\r\n    dot,\r\n    view,\r\n    hiddenNodes,\r\n    hideNodes,\r\n}: NavbarPropsAndRedux) => {\r\n    const fileName = useAppSelector(selectFileName);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const windowSize = useWindowSize();\r\n    const [command, setCommand] = useState('');\r\n    const [lastCommands, setLastCommands] = useState(['']);\r\n    const [commandId, setCommandId] = useState(0);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const openDialog = (content: string): void => {\r\n        setDialogIsOpen(true);\r\n        setDialogContent(content);\r\n    };\r\n\r\n    const handleInputKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        // Creates an commands historic, registering the past 4 commands\r\n        switch (e.key) {\r\n            case 'Enter':\r\n                // If the command is not a white space\r\n                if (command.trim() !== '') {\r\n                    runCommands(command);\r\n                    if (lastCommands.length === 5) {\r\n                        lastCommands.pop();\r\n                    }\r\n                    lastCommands.unshift('');\r\n                    setLastCommands(lastCommands);\r\n                    setCommand('');\r\n                }\r\n                break;\r\n            case 'ArrowUp':\r\n                if (commandId < lastCommands.length - 1) {\r\n                    const newId = commandId + 1;\r\n                    setCommandId(newId);\r\n                    setCommand(lastCommands[newId]);\r\n                }\r\n                break;\r\n            case 'ArrowDown':\r\n                if (commandId > 0) {\r\n                    const newId = commandId - 1;\r\n                    setCommandId(newId);\r\n                    setCommand(lastCommands[newId]);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    const runCommands = (command: string): void => {\r\n        const commands = command.trim().split(/ +/);\r\n        let hiddenIds: number[];\r\n\r\n        // View: basic | propositional | full\r\n        // Select: list of numbers\r\n        // Color: Hexadecimal color code\r\n        // Hide: --- (must have more then 2 selected nodes)\r\n        // Fold: --- (must have 1 node selected)\r\n        // Unfold: Id of the node\r\n        switch (commands[0]) {\r\n            case '/view':\r\n                switch (commands[1]) {\r\n                    case 'basic':\r\n                        dispatch(applyView('basic'));\r\n                        Canvas.reRender();\r\n                        break;\r\n                    case 'propositional':\r\n                        dispatch(applyView('propositional'));\r\n                        Canvas.reRender();\r\n                        break;\r\n                    case 'full':\r\n                        dispatch(applyView('full'));\r\n                        Canvas.reRender();\r\n                        break;\r\n                }\r\n                break;\r\n            case '/select':\r\n                const idList = commands.filter((word) => !isNaN(Number(word))).map((id) => Number(id));\r\n                dispatch(selectNodes(idList));\r\n                break;\r\n            case '/color':\r\n                if (commands[1]) {\r\n                    const exp = new RegExp(/^#([0-9a-f]{3}){1,2}$/i);\r\n                    if (exp.test(commands[1])) {\r\n                        dispatch(applyColor(commands[1]));\r\n                    }\r\n                }\r\n                break;\r\n            case '/hide':\r\n                // Hide all the selected nodes\r\n                hiddenIds = Object.keys(visualInfo)\r\n                    .map((id) => Number(id))\r\n                    .filter((id) => visualInfo[id].selected);\r\n                // Make sure there are nodes selected\r\n                if (hiddenIds.length > 1) {\r\n                    // Re-render the canvas and update the store\r\n                    Canvas.reRender();\r\n                    dispatch(hideNodes(hiddenIds));\r\n                }\r\n                break;\r\n            case '/fold':\r\n                // Fold all children if there is only one node selected\r\n                hiddenIds = Object.keys(visualInfo)\r\n                    .map((id) => Number(id))\r\n                    .filter((id) => visualInfo[id].selected);\r\n                if (hiddenIds.length === 1) {\r\n                    // Re-render the canvas and update the store\r\n                    Canvas.reRender();\r\n                    dispatch(foldAllDescendants(hiddenIds[0]));\r\n                }\r\n                break;\r\n            case '/unfold':\r\n                // If there is a number argument\r\n                if (commands[1] && !isNaN(Number(commands[1]))) {\r\n                    const id = Number(commands[1]);\r\n                    // Get the pi node (to be unfold)\r\n                    const obj = proof.find((node) => node.id === id);\r\n                    // If it's a pi node\r\n                    if (obj && obj.hiddenNodes?.length) {\r\n                        // Get the hidden nodes and their ids\r\n                        const hiddenNodes = obj.hiddenNodes ? obj.hiddenNodes : [];\r\n                        hiddenIds = hiddenNodes ? hiddenNodes.map((node) => node.id) : [];\r\n                        // Re-render the canvas and update the store\r\n                        Canvas.reRender();\r\n                        dispatch(unhideNodes({ pi: id, hiddens: hiddenIds }));\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    const exportJSON = () => {\r\n        const downloadJSON = {\r\n            dot: dot,\r\n            visualInfo: visualInfo,\r\n            hiddenNodes: hiddenNodes,\r\n            view: view,\r\n        };\r\n        const fName = fileName.split('.');\r\n        fName.splice(fName.length - 1, 1);\r\n\r\n        const link = document.createElement('a');\r\n        link.download = fName + '.json';\r\n        link.href = `data:attachment/text,${encodeURIComponent(JSON.stringify(downloadJSON))}`;\r\n        link.click();\r\n    };\r\n\r\n    const menus = {\r\n        style: (\r\n            <Menu>\r\n                <MenuItem\r\n                    icon=\"diagram-tree\"\r\n                    text=\"Graph\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(changeStyle('graph'));\r\n                    }}\r\n                />\r\n                <MenuItem\r\n                    icon=\"folder-open\"\r\n                    text=\"Directory\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(changeStyle('directory'));\r\n                    }}\r\n                />\r\n            </Menu>\r\n        ),\r\n        views: (\r\n            <Menu>\r\n                <MenuItem\r\n                    text=\"Basic\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(applyView('basic'));\r\n                        Canvas.reRender();\r\n                    }}\r\n                />\r\n                <MenuItem\r\n                    text=\"Propositional\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(applyView('propositional'));\r\n                        Canvas.reRender();\r\n                    }}\r\n                />\r\n                <MenuItem\r\n                    text=\"Full\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        dispatch(applyView('full'));\r\n                        Canvas.reRender();\r\n                    }}\r\n                />\r\n            </Menu>\r\n        ),\r\n        download: (\r\n            <Menu>\r\n                <MenuItem icon=\"layout\" text=\"JSON\" onClick={exportJSON} />\r\n                <MenuItem\r\n                    icon=\"graph\"\r\n                    text=\"DOT\"\r\n                    href={`data:attachment/text,${encodeURIComponent(dot ? dot : '')}`}\r\n                    download={fileName ? `${fileName.replaceAll(' ', '_')}.dot` : ''}\r\n                />\r\n                <MenuItem\r\n                    icon=\"square\"\r\n                    text=\"PNG\"\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        const link = document.createElement('a');\r\n                        link.download = fileName ? `${fileName.replaceAll(' ', '_')}.png` : '';\r\n                        link.href = (\r\n                            document.getElementsByClassName('konvajs-content')[0].children[0] as HTMLCanvasElement\r\n                        ).toDataURL('image/png');\r\n                        link.click();\r\n                    }}\r\n                />\r\n            </Menu>\r\n        ),\r\n    };\r\n\r\n    return (\r\n        <Navbar>\r\n            <Navbar.Group align={Alignment.LEFT}>\r\n                <Navbar.Heading>\r\n                    <b>{windowSize.width >= 900 ? 'Proof Visualizer' : 'PV'}</b>\r\n                </Navbar.Heading>\r\n                <Navbar.Divider />\r\n                <Button\r\n                    onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                        e.preventDefault();\r\n                        openDialog('upload-proof');\r\n                    }}\r\n                    className=\"bp3-minimal\"\r\n                    icon=\"upload\"\r\n                    text={windowSize.width >= 900 ? 'Upload Proof' : ''}\r\n                />\r\n            </Navbar.Group>\r\n\r\n            <Navbar.Group align={Alignment.RIGHT}>\r\n                {fileName ? (\r\n                    <>\r\n                        <Navbar.Heading>{fileName}</Navbar.Heading>\r\n                        <Navbar.Divider />\r\n                        <InputGroup\r\n                            id=\"command\"\r\n                            placeholder=\"/command\"\r\n                            value={command}\r\n                            onChange={(e) => {\r\n                                setCommandId(0);\r\n                                lastCommands[0] = e.target.value;\r\n                                setLastCommands(lastCommands);\r\n                                setCommand(e.target.value);\r\n                            }}\r\n                            onKeyDown={handleInputKeyDown}\r\n                        />\r\n                        <Button\r\n                            style={{ marginLeft: '5px' }}\r\n                            icon=\"play\"\r\n                            onClick={() => {\r\n                                runCommands(command);\r\n                                lastCommands.pop();\r\n                                lastCommands.unshift(command);\r\n                                lastCommands[0] = '';\r\n                                setLastCommands(lastCommands);\r\n                                setCommand('');\r\n                            }}\r\n                        />\r\n                        <Navbar.Divider />\r\n                        <Popover2\r\n                            content={fileName ? menus.style : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                        >\r\n                            <Button\r\n                                icon=\"presentation\"\r\n                                className=\"bp3-minimal\"\r\n                                text={windowSize.width >= 900 ? 'Style' : ''}\r\n                                disabled={fileName ? false : true}\r\n                            />\r\n                        </Popover2>\r\n                        <Popover2\r\n                            content={fileName ? menus.views : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                        >\r\n                            <Button\r\n                                className=\"bp3-minimal\"\r\n                                icon=\"diagram-tree\"\r\n                                text={windowSize.width >= 900 ? 'View' : ''}\r\n                                disabled={fileName ? false : true}\r\n                            />\r\n                        </Popover2>\r\n                        <Button\r\n                            className=\"bp3-minimal\"\r\n                            icon=\"translate\"\r\n                            text={windowSize.width >= 900 ? 'Let Map' : ''}\r\n                            disabled={fileName ? false : true}\r\n                            onClick={() => setDrawerIsOpen(true)}\r\n                        />\r\n                        <Popover2\r\n                            content={fileName ? menus.download : undefined}\r\n                            placement=\"bottom-end\"\r\n                            disabled={fileName ? false : true}\r\n                        >\r\n                            <Button\r\n                                className=\"bp3-minimal\"\r\n                                icon=\"download\"\r\n                                text={windowSize.width >= 900 ? 'Download' : ''}\r\n                                disabled={fileName ? false : true}\r\n                            />\r\n                        </Popover2>\r\n                        <Navbar.Divider />\r\n                    </>\r\n                ) : null}\r\n\r\n                <span id=\"switch-button-dark-theme\">\r\n                    <Switch checked={useAppSelector(selectTheme)} onChange={() => dispatch(toggle())} />\r\n                    <Icon icon={darkTheme ? 'moon' : 'flash'}></Icon>\r\n                </span>\r\n            </Navbar.Group>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: ReduxState, ownProps: NavbarProps) {\r\n    return {\r\n        ...ownProps,\r\n        proof: selectProof(state),\r\n        dot: selectDot(state),\r\n        view: selectView(state),\r\n        visualInfo: selectVisualInfo(state),\r\n        hiddenNodes: selectHiddenNodes(state),\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = { hideNodes };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VisualizerNavbar);\r\n","import React, { useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { Dispatch, SetStateAction } from 'react';\r\nimport { MaybeElement } from '@blueprintjs/core/lib/esm/common/props';\r\nimport { IconName } from '@blueprintjs/core/lib/esm/components/icon/icon';\r\n\r\nimport { Button, Classes, Dialog, FileInput, Icon, Intent, Spinner } from '@blueprintjs/core';\r\n\r\nimport '../../scss/VisualizerDialog.scss';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { set } from '../../store/features/file/fileSlice';\r\nimport { process } from '../../store/features/proof/proofSlice';\r\nimport Canvas from '../VisualizerStage/Canvas/VisualizerCanvas';\r\n\r\ninterface DialogProps {\r\n    icon: IconName | MaybeElement;\r\n    title: React.ReactNode;\r\n}\r\n\r\ninterface VisualizerDialogProps {\r\n    dialogIsOpen: boolean;\r\n    setDialogIsOpen: Dispatch<SetStateAction<boolean>>;\r\n    dialogContent: string;\r\n    setDialogContent: Dispatch<SetStateAction<string>>;\r\n    addErrorToast: (err: string) => void;\r\n}\r\n\r\nconst readUploadedFileAsText = (inputFile: File) => {\r\n    const temporaryFileReader = new FileReader();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        temporaryFileReader.onerror = () => {\r\n            temporaryFileReader.abort();\r\n            reject(new DOMException('Problem parsing input file.'));\r\n        };\r\n\r\n        temporaryFileReader.onload = () => {\r\n            resolve(temporaryFileReader.result);\r\n        };\r\n        temporaryFileReader.readAsText(inputFile);\r\n    });\r\n};\r\n\r\nconst VisualizerDialog: React.FC<VisualizerDialogProps> = ({\r\n    dialogIsOpen,\r\n    dialogContent,\r\n    setDialogContent,\r\n    setDialogIsOpen,\r\n    addErrorToast,\r\n}: VisualizerDialogProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n\r\n    let dialogProps: DialogProps = { icon: 'error', title: 'Error' };\r\n    let dialogBody = <p>This wasn&apos;t supposed to happen. Please contact the developers.</p>;\r\n    let succesButton = <></>;\r\n\r\n    const [processingProof, setProcessingProof] = useState(false);\r\n    const [proofProcessed, setProofProcessed] = useState(false);\r\n    const [fileName, changeFileName] = useState('Choose file...');\r\n    const [file, changeFile] = useState('');\r\n    const dispatch = useAppDispatch();\r\n\r\n    switch (dialogContent) {\r\n        case 'welcome':\r\n            dialogProps = { icon: 'graph', title: 'Welcome' };\r\n            dialogBody = (\r\n                <div className=\"welcome-menu\">\r\n                    <h2>Welcome to Proof Visualizer</h2>\r\n                    <p>You can upload the DOT file of your proof.</p>\r\n                    <Button\r\n                        style={{ width: '155px' }}\r\n                        icon=\"upload\"\r\n                        large\r\n                        text=\"Upload proof\"\r\n                        onClick={() => setDialogContent('upload-proof')}\r\n                    />\r\n                </div>\r\n            );\r\n            break;\r\n        case 'upload-proof':\r\n            dialogProps = { icon: 'upload', title: 'Upload Proof' };\r\n            dialogBody = proofProcessed ? (\r\n                <div style={{ textAlign: 'center', height: '200px', paddingTop: 50 }}>\r\n                    <Icon icon=\"tick\" intent={Intent.SUCCESS} iconSize={40}></Icon>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <p>Your proof is ready to be visualized!</p>\r\n                </div>\r\n            ) : processingProof ? (\r\n                <div style={{ textAlign: 'center', height: '200px', paddingTop: 50 }}>\r\n                    <p>Processing your proof...</p>\r\n                    <Spinner size={30} />\r\n                </div>\r\n            ) : (\r\n                <FileInput\r\n                    text={fileName}\r\n                    hasSelection={fileName !== 'Choose file...'}\r\n                    onInputChange={async (e) => {\r\n                        const target = e.target as HTMLInputElement;\r\n                        const file = target.files ? target.files[0] : new File([''], 'filename');\r\n                        if (\r\n                            target.files &&\r\n                            target.files[0] &&\r\n                            target.files[0].name.split('.').slice(-1)[0] !== 'dot' &&\r\n                            target.files[0].name.split('.').slice(-1)[0] !== 'json'\r\n                        ) {\r\n                            addErrorToast('Sorry! Our app only support DOT and JSON files.');\r\n                            return;\r\n                        }\r\n                        try {\r\n                            const fileContents = await readUploadedFileAsText(file);\r\n                            changeFile(fileContents as string);\r\n                            changeFileName(file.name);\r\n                        } catch (er: any) {\r\n                            addErrorToast(er.message);\r\n                        }\r\n                    }}\r\n                    fill={true}\r\n                />\r\n            );\r\n            succesButton = !proofProcessed ? (\r\n                <Button\r\n                    onClick={() => {\r\n                        dispatch(set({ name: fileName, value: file }));\r\n\r\n                        Canvas.allowRenderNewFile();\r\n                        const ext = fileName.split('.').pop();\r\n                        if (ext === 'json') Canvas.blockRender();\r\n                        else if (ext === 'dot') Canvas.reRender();\r\n\r\n                        setProofProcessed(true);\r\n                        dispatch(process(file));\r\n                    }}\r\n                    intent={Intent.SUCCESS}\r\n                    disabled={fileName === 'Choose file...'}\r\n                >\r\n                    Upload Proof\r\n                </Button>\r\n            ) : (\r\n                <></>\r\n            );\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className={darkTheme ? ' bp3-dark' : ''}\r\n                isOpen={dialogIsOpen}\r\n                onClose={(): void => {\r\n                    setProcessingProof(false);\r\n                    setProofProcessed(false);\r\n                    setDialogIsOpen(false);\r\n                    changeFileName('Choose file...');\r\n                    changeFile('');\r\n                }}\r\n                usePortal={true}\r\n                {...dialogProps}\r\n            >\r\n                <div className={Classes.DIALOG_BODY + ' dialog-body'}>{dialogBody}</div>\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        <Button\r\n                            onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n                                e.preventDefault();\r\n                                setDialogIsOpen(false);\r\n                                setProcessingProof(false);\r\n                                setProofProcessed(false);\r\n                                setDialogIsOpen(false);\r\n                                changeFileName('Choose file...');\r\n                                changeFile('');\r\n                            }}\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                        {succesButton}\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default VisualizerDialog;\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport { Classes, Tree, TreeNodeInfo } from '@blueprintjs/core';\r\nimport { TreeProps } from '../../interfaces/interfaces';\r\n\r\nconst VisualizerTree: React.FC<TreeProps> = ({ darkTheme, content, originalNodeInfo, setNodeInfo }: TreeProps) => {\r\n    // STATES:\r\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\r\n    const [nodes, setNodes] = useState(content);\r\n    const [selected, setSelected] = useState(NaN);\r\n\r\n    // USE EFFECT:\r\n    useEffect(() => setNodes(content), [content]);\r\n\r\n    // UTILS:\r\n    const forEachNode = (nodes: TreeNodeInfo[], callback: (node: TreeNodeInfo) => void) => {\r\n        if (nodes == null) {\r\n            return;\r\n        }\r\n\r\n        for (const node of nodes) {\r\n            callback(node);\r\n            forEachNode(node.childNodes ? node.childNodes : [], callback);\r\n        }\r\n    };\r\n\r\n    const handleNodeClick = (nodeData: any, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\r\n        setNodeInfo(\r\n            selected !== nodeData.id\r\n                ? {\r\n                      rule: nodeData.rule ? nodeData.rule : '',\r\n                      args: nodeData.args ? nodeData.args : '',\r\n                      conclusion: nodeData.conclusion ? nodeData.conclusion : '',\r\n                      nHided: nodeData.nHided ? nodeData.nHided : 0,\r\n                      nDescendants: nodeData.descendants,\r\n                      hiddenNodes: nodeData.hiddenNodes,\r\n                  }\r\n                : originalNodeInfo,\r\n        );\r\n        const originallySelected = nodeData.isSelected;\r\n\r\n        // Set all the nodes to be not selected\r\n        if (!e.shiftKey) forEachNode(nodes, (n) => (n.isSelected = false));\r\n\r\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\r\n        setSelected(selected === nodeData.id ? NaN : nodeData.id);\r\n    };\r\n\r\n    const handleNodeCollapse = (nodeData: TreeNodeInfo) => {\r\n        nodeData.isExpanded = false;\r\n        forceUpdate();\r\n    };\r\n\r\n    const handleNodeExpand = (nodeData: TreeNodeInfo) => {\r\n        nodeData.isExpanded = true;\r\n        forceUpdate();\r\n    };\r\n\r\n    return (\r\n        <div style={{ backgroundColor: darkTheme ? '#394b59' : 'white' }}>\r\n            <Tree\r\n                contents={nodes}\r\n                onNodeClick={handleNodeClick}\r\n                onNodeCollapse={handleNodeCollapse}\r\n                onNodeExpand={handleNodeExpand}\r\n                className={Classes.ELEVATION_0}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerTree;\r\n","import React, { useState } from 'react';\r\n\r\nimport { Icon, Collapse, Pre, TreeNodeInfo } from '@blueprintjs/core';\r\nimport VisualizerTree from '../../VisualizerTree/VisualizerTree';\r\n\r\nimport '../../../scss/VisualizerDirectoryStyle.scss';\r\nimport { useAppSelector } from '../../../store/hooks';\r\nimport { selectTheme } from '../../../store/features/theme/themeSlice';\r\nimport { NodeInfo } from '../../../interfaces/interfaces';\r\n\r\ninterface directoryStyleProps {\r\n    proofTree: TreeNodeInfo[];\r\n    ruleHelper: (s: string) => string;\r\n    indent: (s: string) => string;\r\n    translate: (s: string) => string;\r\n}\r\n\r\nconst VisualizerDirectoryStyle: React.FC<directoryStyleProps> = ({\r\n    proofTree,\r\n    ruleHelper,\r\n    indent,\r\n    translate,\r\n}: directoryStyleProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const [ruleHelperOpen, setRuleHelperOpen] = useState(false);\r\n    const [argsTranslatorOpen, setArgsTranslatorOpen] = useState(false);\r\n    const [conclusionTranslatorOpen, setConclusionTranslatorOpen] = useState(false);\r\n    const [nodeInfo, setNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n    });\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                backgroundColor: darkTheme ? 'rgb(57, 75, 89)' : 'white',\r\n                height:\r\n                    window.innerHeight - (document.getElementsByClassName('bp3-navbar')[0] as HTMLElement).offsetHeight,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    width: '50%',\r\n                    height: '100%',\r\n                    float: 'left',\r\n                    clear: 'none',\r\n                    borderRight: '1px solid black',\r\n                    overflow: 'auto',\r\n                }}\r\n            >\r\n                <VisualizerTree\r\n                    darkTheme={darkTheme}\r\n                    content={proofTree}\r\n                    setNodeInfo={setNodeInfo}\r\n                    originalNodeInfo={{\r\n                        rule: '',\r\n                        args: '',\r\n                        conclusion: '',\r\n                        nHided: 0,\r\n                        nDescendants: 0,\r\n                        hiddenNodes: [],\r\n                    }}\r\n                ></VisualizerTree>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    width: '50%',\r\n                    height: '100%',\r\n                    float: 'left',\r\n                    clear: 'none',\r\n                }}\r\n            >\r\n                <table\r\n                    id=\"table-node-info\"\r\n                    className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Property</th>\r\n                            <th>Value</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                <strong>RULE </strong>\r\n                                <Icon\r\n                                    id=\"rule-icon\"\r\n                                    icon=\"help\"\r\n                                    onClick={() => {\r\n                                        setArgsTranslatorOpen(false);\r\n                                        setConclusionTranslatorOpen(false);\r\n                                        setRuleHelperOpen(!ruleHelperOpen);\r\n                                    }}\r\n                                ></Icon>\r\n                            </td>\r\n                            <td>\r\n                                {nodeInfo.rule}\r\n                                <Collapse isOpen={ruleHelperOpen}>\r\n                                    <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                        {ruleHelper(nodeInfo.rule)}\r\n                                    </Pre>\r\n                                </Collapse>\r\n                            </td>\r\n                        </tr>\r\n\r\n                        {nodeInfo.args && (\r\n                            <tr>\r\n                                <td>\r\n                                    <strong>ARGS</strong>{' '}\r\n                                    {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                        <Icon\r\n                                            id=\"rule-icon\"\r\n                                            icon=\"translate\"\r\n                                            onClick={() => {\r\n                                                setConclusionTranslatorOpen(false);\r\n                                                setRuleHelperOpen(false);\r\n                                                setArgsTranslatorOpen(!argsTranslatorOpen);\r\n                                            }}\r\n                                        ></Icon>\r\n                                    ) : null}\r\n                                </td>\r\n                                <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                    {nodeInfo.args}\r\n                                    {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                        <Collapse isOpen={argsTranslatorOpen}>\r\n                                            <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                                {indent(translate(nodeInfo.args))}\r\n                                            </Pre>\r\n                                        </Collapse>\r\n                                    ) : null}\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n\r\n                        <tr>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                <strong>CONCLUSION</strong>{' '}\r\n                                {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                    <Icon\r\n                                        id=\"rule-icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            setArgsTranslatorOpen(false);\r\n                                            setRuleHelperOpen(false);\r\n                                            setConclusionTranslatorOpen(!conclusionTranslatorOpen);\r\n                                        }}\r\n                                    ></Icon>\r\n                                ) : null}\r\n                            </td>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                {nodeInfo.conclusion}\r\n                                {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                    <Collapse isOpen={conclusionTranslatorOpen}>\r\n                                        <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                            {indent(translate(nodeInfo.conclusion))}\r\n                                        </Pre>\r\n                                    </Collapse>\r\n                                ) : null}\r\n                            </td>\r\n                        </tr>\r\n\r\n                        {nodeInfo.nDescendants ? (\r\n                            <tr>\r\n                                <td>\r\n                                    <strong>#DESCENDANTS</strong>\r\n                                </td>\r\n                                <td>{nodeInfo.nDescendants}</td>\r\n                            </tr>\r\n                        ) : null}\r\n\r\n                        {nodeInfo.nHided ? (\r\n                            <tr>\r\n                                <td>\r\n                                    <strong>#HIDDEN</strong>\r\n                                </td>\r\n                                <td>{`[${nodeInfo.hiddenNodes.map((node) => ' ' + node)} ]`}</td>\r\n                            </tr>\r\n                        ) : null}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerDirectoryStyle;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { Drawer, Position, Classes, Icon, Collapse, Pre, TreeNodeInfo } from '@blueprintjs/core';\r\nimport Canvas from './Canvas/VisualizerCanvas';\r\nimport VisualizerTree from '../VisualizerTree/VisualizerTree';\r\nimport VisualizerDirectoryStyle from './VisualizerDirectoryStyle/VisualizerDirectoryStyle';\r\nimport { processDot } from '../../store/features/proof/auxi';\r\n\r\nimport '../../scss/VisualizerStage.scss';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectDot, selectFileCount } from '../../store/features/file/fileSlice';\r\nimport { selectStyle } from '../../store/features/proof/proofSlice';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { NodeInfo, NodeInterface, TreeNode } from '../../interfaces/interfaces';\r\n\r\nfunction ruleHelper(rule: string) {\r\n    switch (rule.split(' ')[0]) {\r\n        case 'π':\r\n            return 'This node hides some parts of the proof, you can unfold it.';\r\n        case 'ASSUME':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Assumption (a leaf)\\nChildren: none\\nArguments: (F)\\n--------------\\nConclusion: F\\n\\nThis rule has special status, in that an application of assume is an open leaf in a proof that is not (yet) justified. An assume leaf is analogous to a free variable in a term, where we say \"F is a free assumption in proof P\" if it contains an application of F that is not  bound by SCOPE.'\r\n            );\r\n        case 'SCOPE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Scope (a binder for assumptions)\\nChildren: (P:F)\\nArguments: (F1, ..., Fn)\\n--------------\\nConclusion: (=> (and F1 ... Fn) F) or (not (and F1 ... Fn)) if F is false\\n\\nThis rule has a dual purpose with ASSUME. It is a way to close assumptions in a proof. We require that F1 ... Fn are free assumptions in P and say that F1, ..., Fn are not free in (SCOPE P). In other words, they are bound by this application. For example, the proof node: (SCOPE (ASSUME F) :args F) has the conclusion (=> F F) and has no free assumptions. More generally, a proof with no free assumptions always concludes a valid formula.'\r\n            );\r\n        case 'SUBS':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Substitution\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids)?)\\n---------------------------------------------------------------\\nConclusion: (= t t*sigma{ids}(Fn)*...*sigma{ids}(F1))\\nwhere sigma{ids}(Fi) are substitutions, which notice are applied in reverse order. Notice that ids is a MethodId identifier, which determines how to convert the formulas F1, ..., Fn into substitutions.'\r\n            );\r\n        case 'REWRITE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Rewrite\\nChildren: none\\nArguments: (t, (idr)?)\\n----------------------------------------\\nConclusion: (= t Rewriter{idr}(t))\\nwhere idr is a MethodId identifier, which determines the kind of rewriter to apply, e.g. Rewriter::rewrite.'\r\n            );\r\n        case 'EVALUATE':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Evaluate\\nChildren: none\\n\\nArguments: (t)\\n----------------------------------------\\nConclusion: (= t Evaluator::evaluate(t))\\nNote this is equivalent to: (REWRITE t MethodId::RW_EVALUATE)'\r\n            );\r\n        case 'MACRO_SR_EQ_INTRO':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, we provide a term t and conclude that it is equal to its rewritten form under a (proven) substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (t, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: (= t t')\\nwhere t' is Rewriter{idr}(t*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nIn other words, from the point of view of Skolem forms, this rule transforms t to t' by standard substitution + rewriting.\\n\\nThe arguments ids, ida and idr are optional and specify the identifier of the substitution, the substitution application and rewriter respectively to be used.\"\r\n            );\r\n        case 'MACRO_SR_PRED_INTRO':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, we provide a formula F and conclude it, under the condition that it rewrites to true under a proven substitution.\\n\\nChildren: (P1:F1, ..., Pn:Fn)\\nArguments: (F, (ids (ida (idr)?)?)?)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == true where ids and idr are method identifiers.\\n\\nMore generally, this rule also holds when: Rewriter::rewrite(toOriginal(F')) == true where F' is the result of the left hand side of the equality above. Here, notice that we apply rewriting on the original form of F', meaning that this rule may conclude an F whose Skolem form is justified by the definition of its (fresh) Skolem variables. For example, this rule may justify the conclusion (= k t) where k is the purification Skolem for t, e.g. where the original form of k is t.\\n\\nFurthermore, notice that the rewriting and substitution is applied only within the side condition, meaning the rewritten form of the original form of F does not escape this rule.\"\r\n            );\r\n        case 'MACRO_SR_PRED_ELIM':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may conclude its rewritten form under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: ((ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: F'\\nwhere F' is Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)). where ids and idr are method identifiers.\\n\\nWe rewrite only on the Skolem form of F, similar to MACRO_SR_EQ_INTRO.\"\r\n            );\r\n        case 'MACRO_SR_PRED_TRANSFORM':\r\n            return (\r\n                rule +\r\n                \"\\n\\nIn this rule, if we have proven a formula F, then we may provide a formula G and conclude it if F and G are equivalent after rewriting under a proven substitution.\\n\\nChildren: (P1:F, P2:F1, ..., P_{n+1}:Fn)\\nArguments: (G, (ids (ida (idr)?)?)?)\\n----------------------------------------\\nConclusion: G\\nwhere Rewriter{idr}(F*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1)) == Rewriter{idr}(G*sigma{ids, ida}(Fn)*...*sigma{ids, ida}(F1))\\n\\nMore generally, this rule also holds when:\\n  Rewriter::rewrite(toOriginal(F')) == Rewriter::rewrite(toOriginal(G'))\\nwhere F' and G' are the result of each side of the equation above. Here, original forms are used in a similar manner to MACRO_SR_PRED_INTRO above.\"\r\n            );\r\n        case 'REMOVE_TERM_FORMULA_AXIOM':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Remove Term Formulas Axiom\\nChildren: none\\nArguments: (t)\\n---------------------------------------------------------------\\nConclusion: RemoveTermFormulas::getAxiomFor(t).'\r\n            );\r\n        case 'THEORY_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Theory lemma\\nChildren: none\\nArguments: (F, tid)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a (T-valid) theory lemma generated by theory with TheoryId tid. This is a \"coarse-grained\" rule that is used as a placeholder if a theory did not provide a proof for a lemma or conflict.'\r\n            );\r\n        case 'THEORY_REWRITE':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== Theory Rewrite\\nChildren: none\\nArguments: (F, tid, rid)\\n----------------------------------------\\nConclusion: F\\nwhere F is an equality of the form (= t t') where t' is obtained by applying the kind of rewriting given by the method identifier rid, which is one of: { RW_REWRITE_THEORY_PRE, RW_REWRITE_THEORY_POST, RW_REWRITE_EQ_EXT } Notice that the checker for this rule does not replay the rewrite to ensure correctness, since theory rewriter methods are not static. For example, the quantifiers rewriter involves constructing new bound variables that are not guaranteed to be consistent on each call.\"\r\n            );\r\n        case 'PREPROCESS':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on some preprocessing pass, or otherwise F was added as a new assertion by some preprocessing pass.\"\r\n            );\r\n        case 'PREPROCESS_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by some preprocessing pass.'\r\n            );\r\n        case 'THEORY_PREPROCESS':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = Theory::ppRewrite(t) for some theory. Notice this is a \"trusted\" rule.'\r\n            );\r\n        case 'THEORY_PREPROCESS_LEMMA':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F was added as a new assertion by theory preprocessing.'\r\n            );\r\n        case 'THEORY_EXPAND_DEF':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality of the form t = t' where t was replaced by t' based on theory expand definitions.\"\r\n            );\r\n        case 'WITNESS_AXIOM':\r\n            return (\r\n                rule +\r\n                '\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an existential (exists ((x T)) (P x)) used for introducing a witness term (witness ((x T)) (P x)).'\r\n            );\r\n        case 'TRUST_REWRITE':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of rewriting that could not be replayed during proof postprocessing.\"\r\n            );\r\n        case 'TRUST_SUBS':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be replayed during proof postprocessing.\"\r\n            );\r\n        case 'TRUST_SUBS_MAP':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is an equality (= t t') that holds by a form of substitution that could not be determined by the TrustSubstitutionMap. This inference may contain possibly multiple children corresponding to the formulas used to derive the substitution.\"\r\n            );\r\n        case 'TRUST_SUBS_EQ':\r\n            return (\r\n                rule +\r\n                \"\\n\\nArguments: (F)\\n---------------------------------------------------------------\\nConclusion: F\\nwhere F is a solved equality of the form (= x t) derived as the solved form of F', where F' is given as a child.\"\r\n            );\r\n        case 'SAT_REFUTATION':\r\n            return (\r\n                rule +\r\n                '\\n\\n========= SAT Refutation for assumption-based unsat cores\\nChildren: (P1, ..., Pn)\\nArguments: none\\n---------------------\\nConclusion: false\\nNote: P1, ..., Pn correspond to the unsat core determined by the SAT solver.'\r\n            );\r\n        case 'RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== Resolution\\nChildren:\\n(P1:C1, P2:C2)\\nArguments: (pol, L)\\n---------------------\\nConclusion: C\\nwhere\\n- C1 and C2 are nodes viewed as clauses, i.e., either an OR node with each children viewed as a literal or a node viewed as a literal. Note that an OR node could also be a literal.\\n- pol is either true or false, representing the polarity of the pivot on the first clause\\n- L is the pivot of the resolution, which occurs as is (resp. under a NOT) in C1 and negatively (as is) in C2 if pol = true (pol = false).\\nC is a clause resulting from collecting all the literals in C1, minus the first occurrence of the pivot or its negation, and C2, minus the first occurrence of the pivot or its negation, according to the policy above. If the resulting clause has a single literal, that literal itself is the result; if it has no literals, then the result is false; otherwise it's an OR node of the resulting literals.\\n\\nNote that it may be the case that the pivot does not occur in the clauses. In this case the rule is not unsound, but it does not correspond to resolution but rather to a weakening of the clause that did not have a literal eliminated.\"\r\n            );\r\n        case 'CHAIN_RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== N-ary Resolution\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined above\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined above\\n- let C_1' = C_1 (from P1),\\n- for each i > 1, let C_i' = C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C = C_n'\"\r\n            );\r\n        case 'FACTORING':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Factoring\\nChildren: (P:C1)\\nArguments: ()\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 is the same and the number of literals in C2 is smaller than that of C1'\r\n            );\r\n        case 'REORDERING':\r\n            return (\r\n                rule +\r\n                '\\n\\n======== Reordering\\nChildren: (P:C1)\\nArguments: (C2)\\n---------------------\\nConclusion: C2\\nwhere Set representations of C1 and C2 are the same and the number of literals in C2 is the same of that of C1'\r\n            );\r\n        case 'MACRO_RESOLUTION':\r\n            return (\r\n                rule +\r\n                \"\\n\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\r\n            );\r\n        case 'MACRO_RESOLUTION_TRUST':\r\n            return (\r\n                rule +\r\n                \"\\n\\nAs MACRO_RESOLUTION but not checked\\n\\nMACRO_RESOLUTION definition:\\n======== N-ary Resolution + Factoring + Reordering\\nChildren: (P1:C_1, ..., Pm:C_n)\\nArguments: (C, pol_1, L_1, ..., pol_{n-1}, L_{n-1})\\n---------------------\\nConclusion: C\\nwhere\\n- let C_1 ... C_n be nodes viewed as clauses, as defined in RESOLUTION\\n- let \\\"C_1 <>_{L,pol} C_2\\\" represent the resolution of C_1 with C_2 with pivot L and polarity pol, as defined in RESOLUTION\\n- let C_1' be equal, in its set representation, to C_1 (from P1),\\n- for each i > 1, let C_i' be equal, it its set representation, to C_{i-1} <>_{L_{i-1}, pol_{i-1}} C_i'\\nThe result of the chain resolution is C, which is equal, in its set representation, to C_n'\"\r\n            );\r\n        default:\r\n            return rule;\r\n    }\r\n}\r\n\r\nconst createTree = (proof: NodeInterface[]): any => {\r\n    const list: TreeNode[] = proof.map((node) => {\r\n        const label = node.hiddenNodes?.length\r\n            ? `${node.id} : π ➜ ${node.conclusion}`\r\n            : `${node.id} : ${node.conclusion}`;\r\n        return {\r\n            id: node.id,\r\n            icon: 'graph',\r\n            label: label,\r\n            secondaryLabel: `${node.rule}`,\r\n            rule: node.rule,\r\n            args: node.args,\r\n            conclusion: node.conclusion,\r\n            parentId: node.parents[0],\r\n            descendants: node.descendants - 1,\r\n            nHided: node.hiddenNodes ? node.hiddenNodes.length : 0,\r\n            hiddenNodes: node.hiddenNodes ? node.hiddenNodes.map((node) => node.id) : [],\r\n            childNodes: [],\r\n            parentsId: node.parents,\r\n            hasCaret: Boolean(node.descendants - 1),\r\n        };\r\n    });\r\n\r\n    const map: any = {},\r\n        roots: any = [];\r\n    let node: TreeNode, i;\r\n\r\n    // Map the { [node id]: list array id }\r\n    for (i = 0; i < list.length; i += 1) {\r\n        map[list[i].id] = i;\r\n    }\r\n\r\n    for (i = 0; i < list.length; i += 1) {\r\n        node = list[i];\r\n        // For all the parents\r\n        node.parentsId.forEach((parentId) => {\r\n            // If the parent is valid and exist in the list\r\n            if (!isNaN(parentId) && list[map[parentId]]) {\r\n                list[map[parentId]].childNodes.push(node);\r\n            } else {\r\n                roots.push(node);\r\n            }\r\n        });\r\n    }\r\n    return roots;\r\n};\r\n\r\nconst indent = (s: string) => {\r\n    let newS = s.replaceAll(' ', '\\n');\r\n    let i = 0;\r\n    let pCounter = 0;\r\n    while (i < newS.length) {\r\n        if (newS[i] === '(' || newS[i] === '[') pCounter++;\r\n        else if (newS[i] === ')' || newS[i] === ']') pCounter--;\r\n        else if (newS[i] === '\\n') {\r\n            if (newS[i + 1] === ')' || newS[i + 1] === ']') {\r\n                newS = [newS.slice(0, i + 1), '  '.repeat(pCounter - 1), newS.slice(i + 1)].join('');\r\n                i += pCounter - 1;\r\n            } else {\r\n                newS = [newS.slice(0, i + 1), '  '.repeat(pCounter), newS.slice(i + 1)].join('');\r\n                i += pCounter;\r\n            }\r\n        }\r\n        i++;\r\n    }\r\n    return newS;\r\n};\r\n\r\nconst VisualizerStage: React.FC = () => {\r\n    const dot = useAppSelector(selectDot);\r\n    const fileID = useAppSelector(selectFileCount);\r\n    const style = useAppSelector(selectStyle);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const [[proof, letMap], setProofAndLet] = useState<[NodeInterface[], any]>([[], '']);\r\n    const [proofTree, setProofTree] = useState([]);\r\n    // Make sure that a new tree and proof is created only when a new dot is used\r\n    useEffect(() => {\r\n        const [newProof, newLetMap] = processDot(dot ? dot : '');\r\n        setProofAndLet([newProof, newLetMap]);\r\n        setProofTree(createTree(newProof));\r\n    }, [dot]);\r\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n    const [ruleHelperOpen, setRuleHelperOpen] = useState(false);\r\n    const [argsTranslatorOpen, setArgsTranslatorOpen] = useState(false);\r\n    const [conclusionTranslatorOpen, setConclusionTranslatorOpen] = useState(false);\r\n    const [nodeInfo, setNodeInfo] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n    });\r\n    const [nodeInfoCopy, setNodeInfoCopy] = useState<NodeInfo>({\r\n        rule: '',\r\n        args: '',\r\n        conclusion: '',\r\n        nHided: 0,\r\n        nDescendants: 0,\r\n        hiddenNodes: [],\r\n    });\r\n    // TODO: Fazer a chamada do createTree aq dentro pra usar nso drawers, em vez de fazer dentro do canvas\r\n    const [tree, setTree] = useState<TreeNodeInfo[]>([]);\r\n    const translate = (s: string) => {\r\n        let newS = s;\r\n        let i = newS.indexOf('let');\r\n        while (i !== -1) {\r\n            const l = newS.slice(i).split(/[ |)|,]/)[0];\r\n            newS = newS.replace(l, letMap[l]);\r\n            i = newS.indexOf('let');\r\n        }\r\n        return newS;\r\n    };\r\n\r\n    const openDrawer = (nodeInfo: NodeInfo, tree?: TreeNodeInfo[]) => {\r\n        setRuleHelperOpen(false);\r\n        setNodeInfo(nodeInfo);\r\n        setTree(tree ? tree : []);\r\n        setNodeInfoCopy(nodeInfo);\r\n        setDrawerIsOpen(true);\r\n    };\r\n\r\n    const nodeInfoTable = () => {\r\n        return (\r\n            <table\r\n                id=\"table-node-info\"\r\n                className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                style={{ width: '100%' }}\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Property</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <strong>RULE </strong>\r\n                            <Icon\r\n                                id=\"rule-icon\"\r\n                                icon=\"help\"\r\n                                onClick={() => {\r\n                                    setArgsTranslatorOpen(false);\r\n                                    setConclusionTranslatorOpen(false);\r\n                                    setRuleHelperOpen(!ruleHelperOpen);\r\n                                }}\r\n                            ></Icon>\r\n                        </td>\r\n                        <td>\r\n                            {nodeInfo.rule}\r\n                            <Collapse isOpen={ruleHelperOpen}>\r\n                                <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                    {ruleHelper(nodeInfo.rule)}\r\n                                </Pre>\r\n                            </Collapse>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.args && (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>ARGS</strong>{' '}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Icon\r\n                                        id=\"rule-icon\"\r\n                                        icon=\"translate\"\r\n                                        onClick={() => {\r\n                                            setConclusionTranslatorOpen(false);\r\n                                            setRuleHelperOpen(false);\r\n                                            setArgsTranslatorOpen(!argsTranslatorOpen);\r\n                                        }}\r\n                                    ></Icon>\r\n                                ) : null}\r\n                            </td>\r\n                            <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                                {nodeInfo.args}\r\n                                {nodeInfo.args.indexOf('let') !== -1 ? (\r\n                                    <Collapse isOpen={argsTranslatorOpen}>\r\n                                        <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                            {indent(translate(nodeInfo.args))}\r\n                                        </Pre>\r\n                                    </Collapse>\r\n                                ) : null}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n\r\n                    <tr>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            <strong>CONCLUSION</strong>{' '}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <Icon\r\n                                    id=\"rule-icon\"\r\n                                    icon=\"translate\"\r\n                                    onClick={() => {\r\n                                        setArgsTranslatorOpen(false);\r\n                                        setRuleHelperOpen(false);\r\n                                        setConclusionTranslatorOpen(!conclusionTranslatorOpen);\r\n                                    }}\r\n                                ></Icon>\r\n                            ) : null}\r\n                        </td>\r\n                        <td style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                            {nodeInfo.conclusion}\r\n                            {nodeInfo.conclusion.indexOf('let') !== -1 ? (\r\n                                <Collapse isOpen={conclusionTranslatorOpen}>\r\n                                    <Pre style={{ maxHeight: '300px', overflow: 'auto' }} id=\"pre-rule\">\r\n                                        {indent(translate(nodeInfo.conclusion))}\r\n                                    </Pre>\r\n                                </Collapse>\r\n                            ) : null}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {nodeInfo.nDescendants ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#DESCENDANTS</strong>\r\n                            </td>\r\n                            <td>{nodeInfo.nDescendants}</td>\r\n                        </tr>\r\n                    ) : null}\r\n\r\n                    {nodeInfo.nHided ? (\r\n                        <tr>\r\n                            <td>\r\n                                <strong>#HIDDEN</strong>\r\n                            </td>\r\n                            <td>{`[${nodeInfo.hiddenNodes.map((node) => ' ' + node)} ]`}</td>\r\n                        </tr>\r\n                    ) : null}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div onContextMenu={(e) => e.preventDefault()}>\r\n            {proof.length > 1 ? (\r\n                style === 'graph' ? (\r\n                    <Canvas key={fileID} openDrawer={openDrawer}></Canvas>\r\n                ) : (\r\n                    <VisualizerDirectoryStyle\r\n                        proofTree={proofTree}\r\n                        ruleHelper={ruleHelper}\r\n                        indent={indent}\r\n                        translate={translate}\r\n                    />\r\n                )\r\n            ) : null}\r\n            <Drawer\r\n                className={darkTheme ? 'bp3-dark' : ''}\r\n                autoFocus={true}\r\n                canEscapeKeyClose={true}\r\n                canOutsideClickClose={true}\r\n                enforceFocus={true}\r\n                hasBackdrop={false}\r\n                isOpen={drawerIsOpen}\r\n                position={Position.BOTTOM}\r\n                usePortal={true}\r\n                onClose={(e) => {\r\n                    e.preventDefault();\r\n                    setDrawerIsOpen(false);\r\n                    setArgsTranslatorOpen(false);\r\n                    setConclusionTranslatorOpen(false);\r\n                }}\r\n                icon=\"info-sign\"\r\n                title=\"Node info\"\r\n            >\r\n                <div className={Classes.DRAWER_BODY}>\r\n                    <VisualizerTree\r\n                        darkTheme={darkTheme}\r\n                        content={tree}\r\n                        setNodeInfo={setNodeInfo}\r\n                        originalNodeInfo={nodeInfoCopy}\r\n                    ></VisualizerTree>\r\n                    <div className={Classes.DIALOG_BODY}>{nodeInfoTable()}</div>\r\n                </div>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VisualizerStage;\r\n","interface Line {\r\n    value: string;\r\n    indentLevel: number;\r\n}\r\n\r\nclass Let {\r\n    name: string;\r\n    value: string;\r\n    lines: Line[];\r\n    biggerID: number;\r\n    isExpanded: boolean;\r\n    externalLets: { [key: string]: { let: Let; idx: number[] } };\r\n\r\n    constructor(name: string, letText: string, letsList: { [key: string]: Let }, indices: { [key: number]: string }) {\r\n        this.name = name;\r\n        this.value = letText;\r\n        this.lines = [{ value: letText, indentLevel: 0 }];\r\n        this.biggerID = 0;\r\n        this.isExpanded = false;\r\n\r\n        this.externalLets = {};\r\n        Object.keys(indices).forEach((key) => {\r\n            const numKey = Number(key);\r\n            const letName = indices[numKey];\r\n            this.externalLets[letName] = {\r\n                let: letsList[letName],\r\n                idx: this.externalLets[letName] ? [...this.externalLets[letName].idx, numKey] : [numKey],\r\n            };\r\n        });\r\n    }\r\n\r\n    getTextWidth = (text: string): number => {\r\n        const canvas = document.createElement('canvas');\r\n        const context = canvas.getContext('2d');\r\n        let size = 0;\r\n        if (context) {\r\n            context.font =\r\n                '14px / 18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", Icons16, sans-serif';\r\n            size = context.measureText(text).width;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    expandValue = (shouldUpdate = false): string => {\r\n        const keyList = Object.keys(this.externalLets).map((key) => this.externalLets[key].let.name);\r\n        let letText = this.value;\r\n\r\n        // Iterate from the last to the first external let\r\n        for (let i = keyList.length - 1; i >= 0; i--) {\r\n            const letName = keyList[i];\r\n\r\n            // For each let, iterate through all the indexes they show up inside the string\r\n            for (let k = this.externalLets[letName].idx.length - 1; k >= 0; k--) {\r\n                const idx = this.externalLets[letName].idx[k];\r\n\r\n                // Expand all the terms\r\n                letText =\r\n                    letText.substring(0, idx) +\r\n                    this.externalLets[letName].let.expandValue() +\r\n                    letText.substring(idx + letName.length, letText.length);\r\n            }\r\n        }\r\n        if (shouldUpdate) {\r\n            this.lines = [{ value: letText, indentLevel: 0 }];\r\n            this.biggerID = 0;\r\n        }\r\n        return letText;\r\n    };\r\n\r\n    shrinkValue = (): string => {\r\n        this.lines = [{ value: this.value, indentLevel: 0 }];\r\n        this.biggerID = 0;\r\n        return this.value;\r\n    };\r\n\r\n    fitsTheWindow = (windowSize: number): boolean => {\r\n        const line = this.lines[this.biggerID];\r\n        const size = this.getTextWidth(`${'    '.repeat(line.indentLevel)}${line.value}`);\r\n        return size < windowSize;\r\n    };\r\n\r\n    indent = (windowSize: number, mode: boolean): string => {\r\n        let someDoesntFit;\r\n        if (mode) someDoesntFit = true;\r\n        else someDoesntFit = this.getTextWidth(this.lines[this.biggerID].value) < windowSize ? false : true;\r\n\r\n        // While there are lines that doesn't fit the window size\r\n        while (someDoesntFit) {\r\n            const { lines, biggerID } = this;\r\n            const newLines: Line[] = [];\r\n            const thisLevel = lines[biggerID].indentLevel;\r\n            const thisLine = lines[biggerID].value;\r\n\r\n            let lastSpace = -1,\r\n                lastUsedSpace = -1,\r\n                lastOpenParenthesis = -1,\r\n                indent = lines[biggerID].indentLevel - 1,\r\n                biggestSize = 0,\r\n                newBiggerID = 0;\r\n\r\n            // Iterate through the line and calculate the indentation levels\r\n            for (let i = 0; i < thisLine.length; i++) {\r\n                const c = thisLine[i];\r\n                // Opening parenthesis\r\n                if (c === '(') {\r\n                    indent++;\r\n                    // If it's one of the arguments of the operation\r\n                    if (indent === thisLevel + 1) lastOpenParenthesis = i;\r\n                }\r\n                // Closing parenthesis\r\n                else if (c === ')') {\r\n                    // If it's the end of this line\r\n                    if (indent === thisLevel) {\r\n                        // If the last argument was not inserted\r\n                        if (thisLine[i - 1] !== ')') {\r\n                            newLines.push({\r\n                                value: thisLine.substring(lastSpace + 1, i),\r\n                                indentLevel: indent + 1,\r\n                            });\r\n                        }\r\n                        newLines.push({ value: ')', indentLevel: indent });\r\n                    }\r\n                    // If it's the end of this argument\r\n                    else if (indent === thisLevel + 1) {\r\n                        newLines.push({\r\n                            value: thisLine.substring(lastOpenParenthesis, i + 1),\r\n                            indentLevel: indent,\r\n                        });\r\n                    }\r\n                    indent--;\r\n                }\r\n                // If a new space is detected in the current identation level\r\n                //   and the last argument is not between parenthesis\r\n                else if (c === ' ') {\r\n                    lastSpace = i;\r\n\r\n                    if (indent === thisLevel && thisLine[i - 1] !== ')') {\r\n                        newLines.push({\r\n                            value: thisLine.substring(lastUsedSpace + 1, i),\r\n                            indentLevel: newLines.length ? indent + 1 : indent,\r\n                        });\r\n                        lastUsedSpace = i;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Insert new lines if happend some indentation\r\n            if (newLines.length > 0) this.lines.splice(biggerID, 1, ...newLines);\r\n\r\n            // Find the new biggest line\r\n            this.lines.forEach((line, id) => {\r\n                // Get the size of this new line\r\n                const thisSize = this.getTextWidth(`${'    '.repeat(line.indentLevel)}${line.value}`);\r\n                if (thisSize > biggestSize) {\r\n                    biggestSize = thisSize;\r\n                    newBiggerID = id;\r\n                }\r\n            });\r\n\r\n            this.biggerID = newBiggerID;\r\n\r\n            // If the biggest size fits the window or no new line was found (minimal indentation)\r\n            if (biggestSize < windowSize || newLines.length < 1) someDoesntFit = false;\r\n        }\r\n        return this.lines.reduce((ac, line) => (ac += `${'    '.repeat(line.indentLevel)}${line.value}\\n`), '');\r\n    };\r\n\r\n    groupUp = (windowSize: number): string => {\r\n        let newValue = '';\r\n\r\n        const { lines, biggerID } = this;\r\n        const thisLevel = lines[biggerID].indentLevel;\r\n        let i = biggerID,\r\n            k = biggerID;\r\n\r\n        // Search the cases bellow\r\n        for (i; i < lines.length; i++) {\r\n            if (i !== biggerID && lines[i + 1] !== undefined && lines[i + 1].indentLevel < thisLevel - 1) break;\r\n        }\r\n        // Search the cases above\r\n        for (k; k >= 0; k--) {\r\n            if (k !== biggerID && lines[k - 1] !== undefined && lines[k - 1].indentLevel < thisLevel - 1) break;\r\n        }\r\n        if (i === lines.length) i--;\r\n        if (k === -1) k = 0;\r\n\r\n        newValue = '';\r\n        // Creates the new string\r\n        for (let j = k; j <= i; j++) {\r\n            newValue +=\r\n                lines[j].value + (j < i - 1 && lines[j + 1] !== undefined && lines[j + 1].value !== ')' ? ' ' : '');\r\n        }\r\n\r\n        const newSize = this.getTextWidth(newValue);\r\n\r\n        // Verifies if the new string fits the window\r\n        if (newSize < windowSize) {\r\n            // Substitute the lines for the new one\r\n            this.lines.splice(k, i - k + 1, { value: newValue, indentLevel: thisLevel ? thisLevel - 1 : thisLevel });\r\n            this.biggerID = k;\r\n        }\r\n        return this.lines.reduce((ac, line) => (ac += `${'    '.repeat(line.indentLevel)}${line.value}\\n`), '');\r\n    };\r\n}\r\n\r\nexport default Let;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Drawer, Classes, Position } from '@blueprintjs/core';\r\n\r\nimport Let from './let';\r\nimport '../../scss/Let.scss';\r\nimport { letDrawerProps } from '../../interfaces/interfaces';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\nimport { selectLetMap } from '../../store/features/proof/proofSlice';\r\n\r\nconst VisualizerLetDrawer: React.FC<letDrawerProps> = ({ drawerIsOpen, setDrawerIsOpen }: letDrawerProps) => {\r\n    const darkTheme = useAppSelector(selectTheme);\r\n    const letMap = useAppSelector(selectLetMap);\r\n    const [letMapS, setLetMapS] = useState({ ...letMap });\r\n    // const [width, setWidth] = useState(0);\r\n    const [resizeMode, setResizeMode] = useState(0);\r\n    const letsRef = useRef<{ [key: string]: Let }>({});\r\n    const widthRef = useRef(0);\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Handler to call on window resize and set the value column width\r\n        function handleResize() {\r\n            const width = widthRef.current;\r\n\r\n            // -22 from the fixed padding size\r\n            const newWidth = document.getElementsByClassName('letMap-value-column')[0].clientWidth - 24;\r\n            width === newWidth ? setResizeMode(1) : width > newWidth ? setResizeMode(0) : setResizeMode(2);\r\n\r\n            widthRef.current = newWidth;\r\n        }\r\n\r\n        // Add event listener\r\n        window.addEventListener('resize', handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    const expandLet = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        // Only when is shrinked\r\n        if (!lets[key].isExpanded) {\r\n            lets[key].isExpanded = true;\r\n            letMapS[key] = lets[key].expandValue(true);\r\n            setLetMapS({ ...letMapS });\r\n        }\r\n    };\r\n\r\n    const revertLet = (key: string) => {\r\n        const lets = letsRef.current;\r\n\r\n        // Only when is expanded\r\n        if (lets[key].isExpanded) {\r\n            lets[key].isExpanded = false;\r\n            letMapS[key] = lets[key].shrinkValue();\r\n            setLetMapS({ ...letMapS });\r\n        }\r\n    };\r\n\r\n    const renderLet = (key: string): JSX.Element => {\r\n        const lets = letsRef.current;\r\n        const width = widthRef.current;\r\n\r\n        // Waits for the width to be updated and the DOM element to be updated\r\n        if (width) {\r\n            let currentLet = letMapS[key];\r\n\r\n            let indices: { [key: number]: string } = {};\r\n            // Finds all occurences of let in the currentLet\r\n            [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                if (match.index) indices[match.index] = match[0];\r\n            });\r\n\r\n            // If it's the first render (make sure that the lets obj is not calculated every time)\r\n            if (Object.keys(lets).length !== Object.keys(letMapS).length) {\r\n                lets[key] = new Let(key, currentLet, lets, indices);\r\n            }\r\n\r\n            // If doesn't fits, then indent\r\n            if (!lets[key].fitsTheWindow(width)) {\r\n                currentLet = lets[key].indent(width, true);\r\n                letMapS[key] = currentLet;\r\n\r\n                indices = {};\r\n                // Finds all occurences of let in the currentLet after indentation\r\n                [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                    if (match.index) indices[match.index] = match[0];\r\n                });\r\n            }\r\n            // If fits\r\n            else {\r\n                // Only in the momment the page size is growing and the line is broken\r\n                if (resizeMode >= 0 && lets[key].lines.length > 1) {\r\n                    // currentLet = lets[key].groupUp(width);\r\n                    // Reset the line\r\n                    lets[key].lines = [\r\n                        { value: lets[key].isExpanded ? lets[key].expandValue() : lets[key].value, indentLevel: 0 },\r\n                    ];\r\n                    lets[key].biggerID = 0;\r\n\r\n                    // Indent it again\r\n                    currentLet = lets[key].indent(width, false);\r\n                    letMapS[key] = currentLet;\r\n\r\n                    indices = {};\r\n                    // Finds all occurences of let in the currentLet after indentation\r\n                    [...currentLet.matchAll(/let\\d+/g)].forEach((match) => {\r\n                        if (match.index) indices[match.index] = match[0];\r\n                    });\r\n                }\r\n            }\r\n\r\n            const arr: (JSX.Element | string)[] = [];\r\n            let start = 0;\r\n            // Slice the currentLet into an array with strings and JSX elements\r\n            Object.keys(indices).forEach((index, i, self) => {\r\n                const idx = Number(index);\r\n                const thisLet = indices[idx];\r\n\r\n                // Add the elements to the arr\r\n                arr.push(currentLet.substring(start, idx));\r\n                arr.push(<a className={darkTheme ? 'let-literal-or' : 'let-literal'}>{thisLet}</a>);\r\n                // Defines a new start\r\n                start = idx + thisLet.length;\r\n\r\n                // If it's the last let\r\n                if (i === self.length - 1) {\r\n                    arr.push(currentLet.substring(start, currentLet.length));\r\n                }\r\n            });\r\n\r\n            // If there is a let in this current let\r\n            if (Object.keys(indices).length) {\r\n                return (\r\n                    <span\r\n                        className=\"let-instance\"\r\n                        onClick={() => {\r\n                            expandLet(key);\r\n                        }}\r\n                    >\r\n                        {arr}\r\n                    </span>\r\n                );\r\n            } else {\r\n                return <span className=\"let-instance\">{currentLet}</span>;\r\n            }\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            className={darkTheme ? 'bp3-dark' : ''}\r\n            style={{ maxHeight: '65%', width: '35%' }}\r\n            autoFocus={true}\r\n            canEscapeKeyClose={true}\r\n            canOutsideClickClose={false}\r\n            enforceFocus={true}\r\n            hasBackdrop={false}\r\n            isOpen={drawerIsOpen}\r\n            position={Position.RIGHT}\r\n            usePortal={false}\r\n            onClose={(e) => {\r\n                e.preventDefault();\r\n                setDrawerIsOpen(false);\r\n            }}\r\n            icon=\"translate\"\r\n            title=\"Let Map\"\r\n        >\r\n            <div className={Classes.DRAWER_BODY}>\r\n                <div className={Classes.DIALOG_BODY}>\r\n                    <table\r\n                        id=\"table-node-info\"\r\n                        className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped\"\r\n                        style={{ width: '100%' }}\r\n                    >\r\n                        <thead>\r\n                            <tr>\r\n                                <th style={{ width: '100px' }}>Property</th>\r\n                                <th className=\"letMap-value-column\">Value</th>\r\n                                <th style={{ width: '250px' }}>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {Object.keys(letMapS).map((key) => {\r\n                                return (\r\n                                    <tr key={key}>\r\n                                        <td>\r\n                                            <strong>{key}</strong>\r\n                                        </td>\r\n                                        <td style={{ width: '100%', whiteSpace: 'pre-wrap' }}>{renderLet(key)}</td>\r\n                                        <td style={{ width: '150px', height: '100%' }}>\r\n                                            <Button\r\n                                                onClick={() => expandLet(key)}\r\n                                                className=\"bp3-minimal\"\r\n                                                icon=\"translate\"\r\n                                                text=\"Expand\"\r\n                                            />\r\n                                            <Button\r\n                                                onClick={() => revertLet(key)}\r\n                                                className=\"bp3-minimal\"\r\n                                                icon=\"undo\"\r\n                                                text=\"Revert\"\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default VisualizerLetDrawer;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { Intent, Position, Toaster } from '@blueprintjs/core';\r\n\r\nimport VisualizerNavbar from '../VisualizerNavbar/VisualizerNavbar';\r\nimport VisualizerDialog from '../VisualizerDialog/VisualizerDialog';\r\nimport VisualizerStage from '../VisualizerStage/VisualizerStage';\r\nimport VisualizerLetDrawer from '../VisualizerLetDrawer/VisualizerLetDrawer';\r\n\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectTheme } from '../../store/features/theme/themeSlice';\r\n\r\nconst App: React.FC = () => {\r\n    const [dialogIsOpen, setDialogIsOpen] = useState(true);\r\n    const [dialogContent, setDialogContent] = useState('welcome');\r\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n    const darkTheme = useAppSelector(selectTheme);\r\n\r\n    // Toaster\r\n    let toaster: Toaster;\r\n    const refHandlers = {\r\n        toaster: (ref: Toaster) => (toaster = ref),\r\n    };\r\n\r\n    const addErrorToast = (err: string) => {\r\n        toaster.show({ icon: 'warning-sign', intent: Intent.DANGER, message: err });\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.getElementsByClassName('bp3-overlay')[0]\r\n            ? (document.getElementsByClassName('bp3-overlay')[0].className = '')\r\n            : null;\r\n    }, [drawerIsOpen]);\r\n\r\n    return (\r\n        <div className={darkTheme ? ' bp3-dark' : ''}>\r\n            <Toaster position={Position.TOP} ref={refHandlers.toaster} />\r\n            <VisualizerNavbar\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                setDialogContent={setDialogContent}\r\n                setDrawerIsOpen={setDrawerIsOpen}\r\n            ></VisualizerNavbar>\r\n            <VisualizerDialog\r\n                dialogIsOpen={dialogIsOpen}\r\n                setDialogIsOpen={setDialogIsOpen}\r\n                dialogContent={dialogContent}\r\n                setDialogContent={setDialogContent}\r\n                addErrorToast={addErrorToast}\r\n            ></VisualizerDialog>\r\n            <VisualizerStage></VisualizerStage>\r\n            {drawerIsOpen ? (\r\n                <VisualizerLetDrawer drawerIsOpen={drawerIsOpen} setDrawerIsOpen={setDrawerIsOpen} />\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport fileReducer from './features/file/fileSlice';\r\nimport proofReducer from './features/proof/proofSlice';\r\nimport themeReducer from './features/theme/themeSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        file: fileReducer,\r\n        proof: proofReducer,\r\n        theme: themeReducer,\r\n    },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport { store } from './store/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './scss/index.scss';\r\n\r\nimport reportWebVitals from './ReactUtils/reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}